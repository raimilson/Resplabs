
Battery 160Wh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d64  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08005e24  08005e24  00015e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006240  08006240  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006240  08006240  00016240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006248  08006248  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006248  08006248  00016248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800624c  0800624c  0001624c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006250  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011ac  20000078  080062c8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001224  080062c8  00021224  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ce81  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035bd  00000000  00000000  0003cf21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  000404e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b58  00000000  00000000  00041490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013d2d  00000000  00000000  00042fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cf14  00000000  00000000  00056d15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00077b0e  00000000  00000000  00073c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb737  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003904  00000000  00000000  000eb788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00011b85  00000000  00000000  000ef08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005e0c 	.word	0x08005e0c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08005e0c 	.word	0x08005e0c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f806 	bl	8000268 <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__aeabi_idiv0>:
 8000268:	4770      	bx	lr
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_uldivmod>:
 800026c:	2b00      	cmp	r3, #0
 800026e:	d111      	bne.n	8000294 <__aeabi_uldivmod+0x28>
 8000270:	2a00      	cmp	r2, #0
 8000272:	d10f      	bne.n	8000294 <__aeabi_uldivmod+0x28>
 8000274:	2900      	cmp	r1, #0
 8000276:	d100      	bne.n	800027a <__aeabi_uldivmod+0xe>
 8000278:	2800      	cmp	r0, #0
 800027a:	d002      	beq.n	8000282 <__aeabi_uldivmod+0x16>
 800027c:	2100      	movs	r1, #0
 800027e:	43c9      	mvns	r1, r1
 8000280:	0008      	movs	r0, r1
 8000282:	b407      	push	{r0, r1, r2}
 8000284:	4802      	ldr	r0, [pc, #8]	; (8000290 <__aeabi_uldivmod+0x24>)
 8000286:	a102      	add	r1, pc, #8	; (adr r1, 8000290 <__aeabi_uldivmod+0x24>)
 8000288:	1840      	adds	r0, r0, r1
 800028a:	9002      	str	r0, [sp, #8]
 800028c:	bd03      	pop	{r0, r1, pc}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	ffffffd9 	.word	0xffffffd9
 8000294:	b403      	push	{r0, r1}
 8000296:	4668      	mov	r0, sp
 8000298:	b501      	push	{r0, lr}
 800029a:	9802      	ldr	r0, [sp, #8]
 800029c:	f000 f84c 	bl	8000338 <__udivmoddi4>
 80002a0:	9b01      	ldr	r3, [sp, #4]
 80002a2:	469e      	mov	lr, r3
 80002a4:	b002      	add	sp, #8
 80002a6:	bc0c      	pop	{r2, r3}
 80002a8:	4770      	bx	lr
 80002aa:	46c0      	nop			; (mov r8, r8)

080002ac <__aeabi_lmul>:
 80002ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ae:	46ce      	mov	lr, r9
 80002b0:	4647      	mov	r7, r8
 80002b2:	b580      	push	{r7, lr}
 80002b4:	0007      	movs	r7, r0
 80002b6:	4699      	mov	r9, r3
 80002b8:	0c3b      	lsrs	r3, r7, #16
 80002ba:	469c      	mov	ip, r3
 80002bc:	0413      	lsls	r3, r2, #16
 80002be:	0c1b      	lsrs	r3, r3, #16
 80002c0:	001d      	movs	r5, r3
 80002c2:	000e      	movs	r6, r1
 80002c4:	4661      	mov	r1, ip
 80002c6:	0400      	lsls	r0, r0, #16
 80002c8:	0c14      	lsrs	r4, r2, #16
 80002ca:	0c00      	lsrs	r0, r0, #16
 80002cc:	4345      	muls	r5, r0
 80002ce:	434b      	muls	r3, r1
 80002d0:	4360      	muls	r0, r4
 80002d2:	4361      	muls	r1, r4
 80002d4:	18c0      	adds	r0, r0, r3
 80002d6:	0c2c      	lsrs	r4, r5, #16
 80002d8:	1820      	adds	r0, r4, r0
 80002da:	468c      	mov	ip, r1
 80002dc:	4283      	cmp	r3, r0
 80002de:	d903      	bls.n	80002e8 <__aeabi_lmul+0x3c>
 80002e0:	2380      	movs	r3, #128	; 0x80
 80002e2:	025b      	lsls	r3, r3, #9
 80002e4:	4698      	mov	r8, r3
 80002e6:	44c4      	add	ip, r8
 80002e8:	4649      	mov	r1, r9
 80002ea:	4379      	muls	r1, r7
 80002ec:	4372      	muls	r2, r6
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	4463      	add	r3, ip
 80002f2:	042d      	lsls	r5, r5, #16
 80002f4:	0c2d      	lsrs	r5, r5, #16
 80002f6:	18c9      	adds	r1, r1, r3
 80002f8:	0400      	lsls	r0, r0, #16
 80002fa:	1940      	adds	r0, r0, r5
 80002fc:	1889      	adds	r1, r1, r2
 80002fe:	bcc0      	pop	{r6, r7}
 8000300:	46b9      	mov	r9, r7
 8000302:	46b0      	mov	r8, r6
 8000304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000306:	46c0      	nop			; (mov r8, r8)

08000308 <__aeabi_f2uiz>:
 8000308:	219e      	movs	r1, #158	; 0x9e
 800030a:	b510      	push	{r4, lr}
 800030c:	05c9      	lsls	r1, r1, #23
 800030e:	1c04      	adds	r4, r0, #0
 8000310:	f001 ff96 	bl	8002240 <__aeabi_fcmpge>
 8000314:	2800      	cmp	r0, #0
 8000316:	d103      	bne.n	8000320 <__aeabi_f2uiz+0x18>
 8000318:	1c20      	adds	r0, r4, #0
 800031a:	f000 fcc5 	bl	8000ca8 <__aeabi_f2iz>
 800031e:	bd10      	pop	{r4, pc}
 8000320:	219e      	movs	r1, #158	; 0x9e
 8000322:	1c20      	adds	r0, r4, #0
 8000324:	05c9      	lsls	r1, r1, #23
 8000326:	f000 fb11 	bl	800094c <__aeabi_fsub>
 800032a:	f000 fcbd 	bl	8000ca8 <__aeabi_f2iz>
 800032e:	2380      	movs	r3, #128	; 0x80
 8000330:	061b      	lsls	r3, r3, #24
 8000332:	469c      	mov	ip, r3
 8000334:	4460      	add	r0, ip
 8000336:	e7f2      	b.n	800031e <__aeabi_f2uiz+0x16>

08000338 <__udivmoddi4>:
 8000338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800033a:	4657      	mov	r7, sl
 800033c:	464e      	mov	r6, r9
 800033e:	4645      	mov	r5, r8
 8000340:	46de      	mov	lr, fp
 8000342:	b5e0      	push	{r5, r6, r7, lr}
 8000344:	0004      	movs	r4, r0
 8000346:	000d      	movs	r5, r1
 8000348:	4692      	mov	sl, r2
 800034a:	4699      	mov	r9, r3
 800034c:	b083      	sub	sp, #12
 800034e:	428b      	cmp	r3, r1
 8000350:	d830      	bhi.n	80003b4 <__udivmoddi4+0x7c>
 8000352:	d02d      	beq.n	80003b0 <__udivmoddi4+0x78>
 8000354:	4649      	mov	r1, r9
 8000356:	4650      	mov	r0, sl
 8000358:	f001 ff9a 	bl	8002290 <__clzdi2>
 800035c:	0029      	movs	r1, r5
 800035e:	0006      	movs	r6, r0
 8000360:	0020      	movs	r0, r4
 8000362:	f001 ff95 	bl	8002290 <__clzdi2>
 8000366:	1a33      	subs	r3, r6, r0
 8000368:	4698      	mov	r8, r3
 800036a:	3b20      	subs	r3, #32
 800036c:	469b      	mov	fp, r3
 800036e:	d433      	bmi.n	80003d8 <__udivmoddi4+0xa0>
 8000370:	465a      	mov	r2, fp
 8000372:	4653      	mov	r3, sl
 8000374:	4093      	lsls	r3, r2
 8000376:	4642      	mov	r2, r8
 8000378:	001f      	movs	r7, r3
 800037a:	4653      	mov	r3, sl
 800037c:	4093      	lsls	r3, r2
 800037e:	001e      	movs	r6, r3
 8000380:	42af      	cmp	r7, r5
 8000382:	d83a      	bhi.n	80003fa <__udivmoddi4+0xc2>
 8000384:	42af      	cmp	r7, r5
 8000386:	d100      	bne.n	800038a <__udivmoddi4+0x52>
 8000388:	e078      	b.n	800047c <__udivmoddi4+0x144>
 800038a:	465b      	mov	r3, fp
 800038c:	1ba4      	subs	r4, r4, r6
 800038e:	41bd      	sbcs	r5, r7
 8000390:	2b00      	cmp	r3, #0
 8000392:	da00      	bge.n	8000396 <__udivmoddi4+0x5e>
 8000394:	e075      	b.n	8000482 <__udivmoddi4+0x14a>
 8000396:	2200      	movs	r2, #0
 8000398:	2300      	movs	r3, #0
 800039a:	9200      	str	r2, [sp, #0]
 800039c:	9301      	str	r3, [sp, #4]
 800039e:	2301      	movs	r3, #1
 80003a0:	465a      	mov	r2, fp
 80003a2:	4093      	lsls	r3, r2
 80003a4:	9301      	str	r3, [sp, #4]
 80003a6:	2301      	movs	r3, #1
 80003a8:	4642      	mov	r2, r8
 80003aa:	4093      	lsls	r3, r2
 80003ac:	9300      	str	r3, [sp, #0]
 80003ae:	e028      	b.n	8000402 <__udivmoddi4+0xca>
 80003b0:	4282      	cmp	r2, r0
 80003b2:	d9cf      	bls.n	8000354 <__udivmoddi4+0x1c>
 80003b4:	2200      	movs	r2, #0
 80003b6:	2300      	movs	r3, #0
 80003b8:	9200      	str	r2, [sp, #0]
 80003ba:	9301      	str	r3, [sp, #4]
 80003bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <__udivmoddi4+0x8e>
 80003c2:	601c      	str	r4, [r3, #0]
 80003c4:	605d      	str	r5, [r3, #4]
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	b003      	add	sp, #12
 80003cc:	bcf0      	pop	{r4, r5, r6, r7}
 80003ce:	46bb      	mov	fp, r7
 80003d0:	46b2      	mov	sl, r6
 80003d2:	46a9      	mov	r9, r5
 80003d4:	46a0      	mov	r8, r4
 80003d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003d8:	4642      	mov	r2, r8
 80003da:	2320      	movs	r3, #32
 80003dc:	1a9b      	subs	r3, r3, r2
 80003de:	4652      	mov	r2, sl
 80003e0:	40da      	lsrs	r2, r3
 80003e2:	4641      	mov	r1, r8
 80003e4:	0013      	movs	r3, r2
 80003e6:	464a      	mov	r2, r9
 80003e8:	408a      	lsls	r2, r1
 80003ea:	0017      	movs	r7, r2
 80003ec:	4642      	mov	r2, r8
 80003ee:	431f      	orrs	r7, r3
 80003f0:	4653      	mov	r3, sl
 80003f2:	4093      	lsls	r3, r2
 80003f4:	001e      	movs	r6, r3
 80003f6:	42af      	cmp	r7, r5
 80003f8:	d9c4      	bls.n	8000384 <__udivmoddi4+0x4c>
 80003fa:	2200      	movs	r2, #0
 80003fc:	2300      	movs	r3, #0
 80003fe:	9200      	str	r2, [sp, #0]
 8000400:	9301      	str	r3, [sp, #4]
 8000402:	4643      	mov	r3, r8
 8000404:	2b00      	cmp	r3, #0
 8000406:	d0d9      	beq.n	80003bc <__udivmoddi4+0x84>
 8000408:	07fb      	lsls	r3, r7, #31
 800040a:	0872      	lsrs	r2, r6, #1
 800040c:	431a      	orrs	r2, r3
 800040e:	4646      	mov	r6, r8
 8000410:	087b      	lsrs	r3, r7, #1
 8000412:	e00e      	b.n	8000432 <__udivmoddi4+0xfa>
 8000414:	42ab      	cmp	r3, r5
 8000416:	d101      	bne.n	800041c <__udivmoddi4+0xe4>
 8000418:	42a2      	cmp	r2, r4
 800041a:	d80c      	bhi.n	8000436 <__udivmoddi4+0xfe>
 800041c:	1aa4      	subs	r4, r4, r2
 800041e:	419d      	sbcs	r5, r3
 8000420:	2001      	movs	r0, #1
 8000422:	1924      	adds	r4, r4, r4
 8000424:	416d      	adcs	r5, r5
 8000426:	2100      	movs	r1, #0
 8000428:	3e01      	subs	r6, #1
 800042a:	1824      	adds	r4, r4, r0
 800042c:	414d      	adcs	r5, r1
 800042e:	2e00      	cmp	r6, #0
 8000430:	d006      	beq.n	8000440 <__udivmoddi4+0x108>
 8000432:	42ab      	cmp	r3, r5
 8000434:	d9ee      	bls.n	8000414 <__udivmoddi4+0xdc>
 8000436:	3e01      	subs	r6, #1
 8000438:	1924      	adds	r4, r4, r4
 800043a:	416d      	adcs	r5, r5
 800043c:	2e00      	cmp	r6, #0
 800043e:	d1f8      	bne.n	8000432 <__udivmoddi4+0xfa>
 8000440:	9800      	ldr	r0, [sp, #0]
 8000442:	9901      	ldr	r1, [sp, #4]
 8000444:	465b      	mov	r3, fp
 8000446:	1900      	adds	r0, r0, r4
 8000448:	4169      	adcs	r1, r5
 800044a:	2b00      	cmp	r3, #0
 800044c:	db24      	blt.n	8000498 <__udivmoddi4+0x160>
 800044e:	002b      	movs	r3, r5
 8000450:	465a      	mov	r2, fp
 8000452:	4644      	mov	r4, r8
 8000454:	40d3      	lsrs	r3, r2
 8000456:	002a      	movs	r2, r5
 8000458:	40e2      	lsrs	r2, r4
 800045a:	001c      	movs	r4, r3
 800045c:	465b      	mov	r3, fp
 800045e:	0015      	movs	r5, r2
 8000460:	2b00      	cmp	r3, #0
 8000462:	db2a      	blt.n	80004ba <__udivmoddi4+0x182>
 8000464:	0026      	movs	r6, r4
 8000466:	409e      	lsls	r6, r3
 8000468:	0033      	movs	r3, r6
 800046a:	0026      	movs	r6, r4
 800046c:	4647      	mov	r7, r8
 800046e:	40be      	lsls	r6, r7
 8000470:	0032      	movs	r2, r6
 8000472:	1a80      	subs	r0, r0, r2
 8000474:	4199      	sbcs	r1, r3
 8000476:	9000      	str	r0, [sp, #0]
 8000478:	9101      	str	r1, [sp, #4]
 800047a:	e79f      	b.n	80003bc <__udivmoddi4+0x84>
 800047c:	42a3      	cmp	r3, r4
 800047e:	d8bc      	bhi.n	80003fa <__udivmoddi4+0xc2>
 8000480:	e783      	b.n	800038a <__udivmoddi4+0x52>
 8000482:	4642      	mov	r2, r8
 8000484:	2320      	movs	r3, #32
 8000486:	2100      	movs	r1, #0
 8000488:	1a9b      	subs	r3, r3, r2
 800048a:	2200      	movs	r2, #0
 800048c:	9100      	str	r1, [sp, #0]
 800048e:	9201      	str	r2, [sp, #4]
 8000490:	2201      	movs	r2, #1
 8000492:	40da      	lsrs	r2, r3
 8000494:	9201      	str	r2, [sp, #4]
 8000496:	e786      	b.n	80003a6 <__udivmoddi4+0x6e>
 8000498:	4642      	mov	r2, r8
 800049a:	2320      	movs	r3, #32
 800049c:	1a9b      	subs	r3, r3, r2
 800049e:	002a      	movs	r2, r5
 80004a0:	4646      	mov	r6, r8
 80004a2:	409a      	lsls	r2, r3
 80004a4:	0023      	movs	r3, r4
 80004a6:	40f3      	lsrs	r3, r6
 80004a8:	4644      	mov	r4, r8
 80004aa:	4313      	orrs	r3, r2
 80004ac:	002a      	movs	r2, r5
 80004ae:	40e2      	lsrs	r2, r4
 80004b0:	001c      	movs	r4, r3
 80004b2:	465b      	mov	r3, fp
 80004b4:	0015      	movs	r5, r2
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	dad4      	bge.n	8000464 <__udivmoddi4+0x12c>
 80004ba:	4642      	mov	r2, r8
 80004bc:	002f      	movs	r7, r5
 80004be:	2320      	movs	r3, #32
 80004c0:	0026      	movs	r6, r4
 80004c2:	4097      	lsls	r7, r2
 80004c4:	1a9b      	subs	r3, r3, r2
 80004c6:	40de      	lsrs	r6, r3
 80004c8:	003b      	movs	r3, r7
 80004ca:	4333      	orrs	r3, r6
 80004cc:	e7cd      	b.n	800046a <__udivmoddi4+0x132>
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__aeabi_fdiv>:
 80004d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d2:	464f      	mov	r7, r9
 80004d4:	4646      	mov	r6, r8
 80004d6:	46d6      	mov	lr, sl
 80004d8:	0245      	lsls	r5, r0, #9
 80004da:	b5c0      	push	{r6, r7, lr}
 80004dc:	0047      	lsls	r7, r0, #1
 80004de:	1c0c      	adds	r4, r1, #0
 80004e0:	0a6d      	lsrs	r5, r5, #9
 80004e2:	0e3f      	lsrs	r7, r7, #24
 80004e4:	0fc6      	lsrs	r6, r0, #31
 80004e6:	2f00      	cmp	r7, #0
 80004e8:	d100      	bne.n	80004ec <__aeabi_fdiv+0x1c>
 80004ea:	e070      	b.n	80005ce <__aeabi_fdiv+0xfe>
 80004ec:	2fff      	cmp	r7, #255	; 0xff
 80004ee:	d100      	bne.n	80004f2 <__aeabi_fdiv+0x22>
 80004f0:	e075      	b.n	80005de <__aeabi_fdiv+0x10e>
 80004f2:	00eb      	lsls	r3, r5, #3
 80004f4:	2580      	movs	r5, #128	; 0x80
 80004f6:	04ed      	lsls	r5, r5, #19
 80004f8:	431d      	orrs	r5, r3
 80004fa:	2300      	movs	r3, #0
 80004fc:	4699      	mov	r9, r3
 80004fe:	469a      	mov	sl, r3
 8000500:	3f7f      	subs	r7, #127	; 0x7f
 8000502:	0260      	lsls	r0, r4, #9
 8000504:	0a43      	lsrs	r3, r0, #9
 8000506:	4698      	mov	r8, r3
 8000508:	0063      	lsls	r3, r4, #1
 800050a:	0e1b      	lsrs	r3, r3, #24
 800050c:	0fe4      	lsrs	r4, r4, #31
 800050e:	2b00      	cmp	r3, #0
 8000510:	d04e      	beq.n	80005b0 <__aeabi_fdiv+0xe0>
 8000512:	2bff      	cmp	r3, #255	; 0xff
 8000514:	d046      	beq.n	80005a4 <__aeabi_fdiv+0xd4>
 8000516:	4642      	mov	r2, r8
 8000518:	00d0      	lsls	r0, r2, #3
 800051a:	2280      	movs	r2, #128	; 0x80
 800051c:	04d2      	lsls	r2, r2, #19
 800051e:	4302      	orrs	r2, r0
 8000520:	4690      	mov	r8, r2
 8000522:	2200      	movs	r2, #0
 8000524:	3b7f      	subs	r3, #127	; 0x7f
 8000526:	0031      	movs	r1, r6
 8000528:	1aff      	subs	r7, r7, r3
 800052a:	464b      	mov	r3, r9
 800052c:	4061      	eors	r1, r4
 800052e:	b2c9      	uxtb	r1, r1
 8000530:	4313      	orrs	r3, r2
 8000532:	2b0f      	cmp	r3, #15
 8000534:	d900      	bls.n	8000538 <__aeabi_fdiv+0x68>
 8000536:	e0b5      	b.n	80006a4 <__aeabi_fdiv+0x1d4>
 8000538:	486e      	ldr	r0, [pc, #440]	; (80006f4 <__aeabi_fdiv+0x224>)
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	58c3      	ldr	r3, [r0, r3]
 800053e:	469f      	mov	pc, r3
 8000540:	2300      	movs	r3, #0
 8000542:	4698      	mov	r8, r3
 8000544:	0026      	movs	r6, r4
 8000546:	4645      	mov	r5, r8
 8000548:	4692      	mov	sl, r2
 800054a:	4653      	mov	r3, sl
 800054c:	2b02      	cmp	r3, #2
 800054e:	d100      	bne.n	8000552 <__aeabi_fdiv+0x82>
 8000550:	e089      	b.n	8000666 <__aeabi_fdiv+0x196>
 8000552:	2b03      	cmp	r3, #3
 8000554:	d100      	bne.n	8000558 <__aeabi_fdiv+0x88>
 8000556:	e09e      	b.n	8000696 <__aeabi_fdiv+0x1c6>
 8000558:	2b01      	cmp	r3, #1
 800055a:	d018      	beq.n	800058e <__aeabi_fdiv+0xbe>
 800055c:	003b      	movs	r3, r7
 800055e:	337f      	adds	r3, #127	; 0x7f
 8000560:	2b00      	cmp	r3, #0
 8000562:	dd69      	ble.n	8000638 <__aeabi_fdiv+0x168>
 8000564:	076a      	lsls	r2, r5, #29
 8000566:	d004      	beq.n	8000572 <__aeabi_fdiv+0xa2>
 8000568:	220f      	movs	r2, #15
 800056a:	402a      	ands	r2, r5
 800056c:	2a04      	cmp	r2, #4
 800056e:	d000      	beq.n	8000572 <__aeabi_fdiv+0xa2>
 8000570:	3504      	adds	r5, #4
 8000572:	012a      	lsls	r2, r5, #4
 8000574:	d503      	bpl.n	800057e <__aeabi_fdiv+0xae>
 8000576:	4b60      	ldr	r3, [pc, #384]	; (80006f8 <__aeabi_fdiv+0x228>)
 8000578:	401d      	ands	r5, r3
 800057a:	003b      	movs	r3, r7
 800057c:	3380      	adds	r3, #128	; 0x80
 800057e:	2bfe      	cmp	r3, #254	; 0xfe
 8000580:	dd00      	ble.n	8000584 <__aeabi_fdiv+0xb4>
 8000582:	e070      	b.n	8000666 <__aeabi_fdiv+0x196>
 8000584:	01ad      	lsls	r5, r5, #6
 8000586:	0a6d      	lsrs	r5, r5, #9
 8000588:	b2d8      	uxtb	r0, r3
 800058a:	e002      	b.n	8000592 <__aeabi_fdiv+0xc2>
 800058c:	000e      	movs	r6, r1
 800058e:	2000      	movs	r0, #0
 8000590:	2500      	movs	r5, #0
 8000592:	05c0      	lsls	r0, r0, #23
 8000594:	4328      	orrs	r0, r5
 8000596:	07f6      	lsls	r6, r6, #31
 8000598:	4330      	orrs	r0, r6
 800059a:	bce0      	pop	{r5, r6, r7}
 800059c:	46ba      	mov	sl, r7
 800059e:	46b1      	mov	r9, r6
 80005a0:	46a8      	mov	r8, r5
 80005a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005a4:	4643      	mov	r3, r8
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d13f      	bne.n	800062a <__aeabi_fdiv+0x15a>
 80005aa:	2202      	movs	r2, #2
 80005ac:	3fff      	subs	r7, #255	; 0xff
 80005ae:	e003      	b.n	80005b8 <__aeabi_fdiv+0xe8>
 80005b0:	4643      	mov	r3, r8
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d12d      	bne.n	8000612 <__aeabi_fdiv+0x142>
 80005b6:	2201      	movs	r2, #1
 80005b8:	0031      	movs	r1, r6
 80005ba:	464b      	mov	r3, r9
 80005bc:	4061      	eors	r1, r4
 80005be:	b2c9      	uxtb	r1, r1
 80005c0:	4313      	orrs	r3, r2
 80005c2:	2b0f      	cmp	r3, #15
 80005c4:	d834      	bhi.n	8000630 <__aeabi_fdiv+0x160>
 80005c6:	484d      	ldr	r0, [pc, #308]	; (80006fc <__aeabi_fdiv+0x22c>)
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	58c3      	ldr	r3, [r0, r3]
 80005cc:	469f      	mov	pc, r3
 80005ce:	2d00      	cmp	r5, #0
 80005d0:	d113      	bne.n	80005fa <__aeabi_fdiv+0x12a>
 80005d2:	2304      	movs	r3, #4
 80005d4:	4699      	mov	r9, r3
 80005d6:	3b03      	subs	r3, #3
 80005d8:	2700      	movs	r7, #0
 80005da:	469a      	mov	sl, r3
 80005dc:	e791      	b.n	8000502 <__aeabi_fdiv+0x32>
 80005de:	2d00      	cmp	r5, #0
 80005e0:	d105      	bne.n	80005ee <__aeabi_fdiv+0x11e>
 80005e2:	2308      	movs	r3, #8
 80005e4:	4699      	mov	r9, r3
 80005e6:	3b06      	subs	r3, #6
 80005e8:	27ff      	movs	r7, #255	; 0xff
 80005ea:	469a      	mov	sl, r3
 80005ec:	e789      	b.n	8000502 <__aeabi_fdiv+0x32>
 80005ee:	230c      	movs	r3, #12
 80005f0:	4699      	mov	r9, r3
 80005f2:	3b09      	subs	r3, #9
 80005f4:	27ff      	movs	r7, #255	; 0xff
 80005f6:	469a      	mov	sl, r3
 80005f8:	e783      	b.n	8000502 <__aeabi_fdiv+0x32>
 80005fa:	0028      	movs	r0, r5
 80005fc:	f001 fe2a 	bl	8002254 <__clzsi2>
 8000600:	2776      	movs	r7, #118	; 0x76
 8000602:	1f43      	subs	r3, r0, #5
 8000604:	409d      	lsls	r5, r3
 8000606:	2300      	movs	r3, #0
 8000608:	427f      	negs	r7, r7
 800060a:	4699      	mov	r9, r3
 800060c:	469a      	mov	sl, r3
 800060e:	1a3f      	subs	r7, r7, r0
 8000610:	e777      	b.n	8000502 <__aeabi_fdiv+0x32>
 8000612:	4640      	mov	r0, r8
 8000614:	f001 fe1e 	bl	8002254 <__clzsi2>
 8000618:	4642      	mov	r2, r8
 800061a:	1f43      	subs	r3, r0, #5
 800061c:	409a      	lsls	r2, r3
 800061e:	2376      	movs	r3, #118	; 0x76
 8000620:	425b      	negs	r3, r3
 8000622:	4690      	mov	r8, r2
 8000624:	1a1b      	subs	r3, r3, r0
 8000626:	2200      	movs	r2, #0
 8000628:	e77d      	b.n	8000526 <__aeabi_fdiv+0x56>
 800062a:	23ff      	movs	r3, #255	; 0xff
 800062c:	2203      	movs	r2, #3
 800062e:	e77a      	b.n	8000526 <__aeabi_fdiv+0x56>
 8000630:	000e      	movs	r6, r1
 8000632:	20ff      	movs	r0, #255	; 0xff
 8000634:	2500      	movs	r5, #0
 8000636:	e7ac      	b.n	8000592 <__aeabi_fdiv+0xc2>
 8000638:	2001      	movs	r0, #1
 800063a:	1ac0      	subs	r0, r0, r3
 800063c:	281b      	cmp	r0, #27
 800063e:	dca6      	bgt.n	800058e <__aeabi_fdiv+0xbe>
 8000640:	379e      	adds	r7, #158	; 0x9e
 8000642:	002a      	movs	r2, r5
 8000644:	40bd      	lsls	r5, r7
 8000646:	40c2      	lsrs	r2, r0
 8000648:	1e6b      	subs	r3, r5, #1
 800064a:	419d      	sbcs	r5, r3
 800064c:	4315      	orrs	r5, r2
 800064e:	076b      	lsls	r3, r5, #29
 8000650:	d004      	beq.n	800065c <__aeabi_fdiv+0x18c>
 8000652:	230f      	movs	r3, #15
 8000654:	402b      	ands	r3, r5
 8000656:	2b04      	cmp	r3, #4
 8000658:	d000      	beq.n	800065c <__aeabi_fdiv+0x18c>
 800065a:	3504      	adds	r5, #4
 800065c:	016b      	lsls	r3, r5, #5
 800065e:	d544      	bpl.n	80006ea <__aeabi_fdiv+0x21a>
 8000660:	2001      	movs	r0, #1
 8000662:	2500      	movs	r5, #0
 8000664:	e795      	b.n	8000592 <__aeabi_fdiv+0xc2>
 8000666:	20ff      	movs	r0, #255	; 0xff
 8000668:	2500      	movs	r5, #0
 800066a:	e792      	b.n	8000592 <__aeabi_fdiv+0xc2>
 800066c:	2580      	movs	r5, #128	; 0x80
 800066e:	2600      	movs	r6, #0
 8000670:	20ff      	movs	r0, #255	; 0xff
 8000672:	03ed      	lsls	r5, r5, #15
 8000674:	e78d      	b.n	8000592 <__aeabi_fdiv+0xc2>
 8000676:	2300      	movs	r3, #0
 8000678:	4698      	mov	r8, r3
 800067a:	2080      	movs	r0, #128	; 0x80
 800067c:	03c0      	lsls	r0, r0, #15
 800067e:	4205      	tst	r5, r0
 8000680:	d009      	beq.n	8000696 <__aeabi_fdiv+0x1c6>
 8000682:	4643      	mov	r3, r8
 8000684:	4203      	tst	r3, r0
 8000686:	d106      	bne.n	8000696 <__aeabi_fdiv+0x1c6>
 8000688:	4645      	mov	r5, r8
 800068a:	4305      	orrs	r5, r0
 800068c:	026d      	lsls	r5, r5, #9
 800068e:	0026      	movs	r6, r4
 8000690:	20ff      	movs	r0, #255	; 0xff
 8000692:	0a6d      	lsrs	r5, r5, #9
 8000694:	e77d      	b.n	8000592 <__aeabi_fdiv+0xc2>
 8000696:	2080      	movs	r0, #128	; 0x80
 8000698:	03c0      	lsls	r0, r0, #15
 800069a:	4305      	orrs	r5, r0
 800069c:	026d      	lsls	r5, r5, #9
 800069e:	20ff      	movs	r0, #255	; 0xff
 80006a0:	0a6d      	lsrs	r5, r5, #9
 80006a2:	e776      	b.n	8000592 <__aeabi_fdiv+0xc2>
 80006a4:	4642      	mov	r2, r8
 80006a6:	016b      	lsls	r3, r5, #5
 80006a8:	0150      	lsls	r0, r2, #5
 80006aa:	4283      	cmp	r3, r0
 80006ac:	d219      	bcs.n	80006e2 <__aeabi_fdiv+0x212>
 80006ae:	221b      	movs	r2, #27
 80006b0:	2500      	movs	r5, #0
 80006b2:	3f01      	subs	r7, #1
 80006b4:	2601      	movs	r6, #1
 80006b6:	001c      	movs	r4, r3
 80006b8:	006d      	lsls	r5, r5, #1
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	2c00      	cmp	r4, #0
 80006be:	db01      	blt.n	80006c4 <__aeabi_fdiv+0x1f4>
 80006c0:	4298      	cmp	r0, r3
 80006c2:	d801      	bhi.n	80006c8 <__aeabi_fdiv+0x1f8>
 80006c4:	1a1b      	subs	r3, r3, r0
 80006c6:	4335      	orrs	r5, r6
 80006c8:	3a01      	subs	r2, #1
 80006ca:	2a00      	cmp	r2, #0
 80006cc:	d1f3      	bne.n	80006b6 <__aeabi_fdiv+0x1e6>
 80006ce:	1e5a      	subs	r2, r3, #1
 80006d0:	4193      	sbcs	r3, r2
 80006d2:	431d      	orrs	r5, r3
 80006d4:	003b      	movs	r3, r7
 80006d6:	337f      	adds	r3, #127	; 0x7f
 80006d8:	000e      	movs	r6, r1
 80006da:	2b00      	cmp	r3, #0
 80006dc:	dd00      	ble.n	80006e0 <__aeabi_fdiv+0x210>
 80006de:	e741      	b.n	8000564 <__aeabi_fdiv+0x94>
 80006e0:	e7aa      	b.n	8000638 <__aeabi_fdiv+0x168>
 80006e2:	221a      	movs	r2, #26
 80006e4:	2501      	movs	r5, #1
 80006e6:	1a1b      	subs	r3, r3, r0
 80006e8:	e7e4      	b.n	80006b4 <__aeabi_fdiv+0x1e4>
 80006ea:	01ad      	lsls	r5, r5, #6
 80006ec:	2000      	movs	r0, #0
 80006ee:	0a6d      	lsrs	r5, r5, #9
 80006f0:	e74f      	b.n	8000592 <__aeabi_fdiv+0xc2>
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	08005e94 	.word	0x08005e94
 80006f8:	f7ffffff 	.word	0xf7ffffff
 80006fc:	08005ed4 	.word	0x08005ed4

08000700 <__aeabi_fmul>:
 8000700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000702:	464f      	mov	r7, r9
 8000704:	4646      	mov	r6, r8
 8000706:	46d6      	mov	lr, sl
 8000708:	0244      	lsls	r4, r0, #9
 800070a:	0045      	lsls	r5, r0, #1
 800070c:	b5c0      	push	{r6, r7, lr}
 800070e:	0a64      	lsrs	r4, r4, #9
 8000710:	1c0f      	adds	r7, r1, #0
 8000712:	0e2d      	lsrs	r5, r5, #24
 8000714:	0fc6      	lsrs	r6, r0, #31
 8000716:	2d00      	cmp	r5, #0
 8000718:	d100      	bne.n	800071c <__aeabi_fmul+0x1c>
 800071a:	e08d      	b.n	8000838 <__aeabi_fmul+0x138>
 800071c:	2dff      	cmp	r5, #255	; 0xff
 800071e:	d100      	bne.n	8000722 <__aeabi_fmul+0x22>
 8000720:	e092      	b.n	8000848 <__aeabi_fmul+0x148>
 8000722:	2300      	movs	r3, #0
 8000724:	2080      	movs	r0, #128	; 0x80
 8000726:	4699      	mov	r9, r3
 8000728:	469a      	mov	sl, r3
 800072a:	00e4      	lsls	r4, r4, #3
 800072c:	04c0      	lsls	r0, r0, #19
 800072e:	4304      	orrs	r4, r0
 8000730:	3d7f      	subs	r5, #127	; 0x7f
 8000732:	0278      	lsls	r0, r7, #9
 8000734:	0a43      	lsrs	r3, r0, #9
 8000736:	4698      	mov	r8, r3
 8000738:	007b      	lsls	r3, r7, #1
 800073a:	0e1b      	lsrs	r3, r3, #24
 800073c:	0fff      	lsrs	r7, r7, #31
 800073e:	2b00      	cmp	r3, #0
 8000740:	d100      	bne.n	8000744 <__aeabi_fmul+0x44>
 8000742:	e070      	b.n	8000826 <__aeabi_fmul+0x126>
 8000744:	2bff      	cmp	r3, #255	; 0xff
 8000746:	d100      	bne.n	800074a <__aeabi_fmul+0x4a>
 8000748:	e086      	b.n	8000858 <__aeabi_fmul+0x158>
 800074a:	4642      	mov	r2, r8
 800074c:	00d0      	lsls	r0, r2, #3
 800074e:	2280      	movs	r2, #128	; 0x80
 8000750:	3b7f      	subs	r3, #127	; 0x7f
 8000752:	18ed      	adds	r5, r5, r3
 8000754:	2300      	movs	r3, #0
 8000756:	04d2      	lsls	r2, r2, #19
 8000758:	4302      	orrs	r2, r0
 800075a:	4690      	mov	r8, r2
 800075c:	469c      	mov	ip, r3
 800075e:	0031      	movs	r1, r6
 8000760:	464b      	mov	r3, r9
 8000762:	4079      	eors	r1, r7
 8000764:	1c68      	adds	r0, r5, #1
 8000766:	2b0f      	cmp	r3, #15
 8000768:	d81c      	bhi.n	80007a4 <__aeabi_fmul+0xa4>
 800076a:	4a76      	ldr	r2, [pc, #472]	; (8000944 <__aeabi_fmul+0x244>)
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	58d3      	ldr	r3, [r2, r3]
 8000770:	469f      	mov	pc, r3
 8000772:	0039      	movs	r1, r7
 8000774:	4644      	mov	r4, r8
 8000776:	46e2      	mov	sl, ip
 8000778:	4653      	mov	r3, sl
 800077a:	2b02      	cmp	r3, #2
 800077c:	d00f      	beq.n	800079e <__aeabi_fmul+0x9e>
 800077e:	2b03      	cmp	r3, #3
 8000780:	d100      	bne.n	8000784 <__aeabi_fmul+0x84>
 8000782:	e0d7      	b.n	8000934 <__aeabi_fmul+0x234>
 8000784:	2b01      	cmp	r3, #1
 8000786:	d137      	bne.n	80007f8 <__aeabi_fmul+0xf8>
 8000788:	2000      	movs	r0, #0
 800078a:	2400      	movs	r4, #0
 800078c:	05c0      	lsls	r0, r0, #23
 800078e:	4320      	orrs	r0, r4
 8000790:	07c9      	lsls	r1, r1, #31
 8000792:	4308      	orrs	r0, r1
 8000794:	bce0      	pop	{r5, r6, r7}
 8000796:	46ba      	mov	sl, r7
 8000798:	46b1      	mov	r9, r6
 800079a:	46a8      	mov	r8, r5
 800079c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800079e:	20ff      	movs	r0, #255	; 0xff
 80007a0:	2400      	movs	r4, #0
 80007a2:	e7f3      	b.n	800078c <__aeabi_fmul+0x8c>
 80007a4:	0c26      	lsrs	r6, r4, #16
 80007a6:	0424      	lsls	r4, r4, #16
 80007a8:	0c22      	lsrs	r2, r4, #16
 80007aa:	4644      	mov	r4, r8
 80007ac:	0424      	lsls	r4, r4, #16
 80007ae:	0c24      	lsrs	r4, r4, #16
 80007b0:	4643      	mov	r3, r8
 80007b2:	0027      	movs	r7, r4
 80007b4:	0c1b      	lsrs	r3, r3, #16
 80007b6:	4357      	muls	r7, r2
 80007b8:	4374      	muls	r4, r6
 80007ba:	435a      	muls	r2, r3
 80007bc:	435e      	muls	r6, r3
 80007be:	1912      	adds	r2, r2, r4
 80007c0:	0c3b      	lsrs	r3, r7, #16
 80007c2:	189b      	adds	r3, r3, r2
 80007c4:	429c      	cmp	r4, r3
 80007c6:	d903      	bls.n	80007d0 <__aeabi_fmul+0xd0>
 80007c8:	2280      	movs	r2, #128	; 0x80
 80007ca:	0252      	lsls	r2, r2, #9
 80007cc:	4694      	mov	ip, r2
 80007ce:	4466      	add	r6, ip
 80007d0:	043f      	lsls	r7, r7, #16
 80007d2:	041a      	lsls	r2, r3, #16
 80007d4:	0c3f      	lsrs	r7, r7, #16
 80007d6:	19d2      	adds	r2, r2, r7
 80007d8:	0194      	lsls	r4, r2, #6
 80007da:	1e67      	subs	r7, r4, #1
 80007dc:	41bc      	sbcs	r4, r7
 80007de:	0c1b      	lsrs	r3, r3, #16
 80007e0:	0e92      	lsrs	r2, r2, #26
 80007e2:	199b      	adds	r3, r3, r6
 80007e4:	4314      	orrs	r4, r2
 80007e6:	019b      	lsls	r3, r3, #6
 80007e8:	431c      	orrs	r4, r3
 80007ea:	011b      	lsls	r3, r3, #4
 80007ec:	d400      	bmi.n	80007f0 <__aeabi_fmul+0xf0>
 80007ee:	e09b      	b.n	8000928 <__aeabi_fmul+0x228>
 80007f0:	2301      	movs	r3, #1
 80007f2:	0862      	lsrs	r2, r4, #1
 80007f4:	401c      	ands	r4, r3
 80007f6:	4314      	orrs	r4, r2
 80007f8:	0002      	movs	r2, r0
 80007fa:	327f      	adds	r2, #127	; 0x7f
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	dd64      	ble.n	80008ca <__aeabi_fmul+0x1ca>
 8000800:	0763      	lsls	r3, r4, #29
 8000802:	d004      	beq.n	800080e <__aeabi_fmul+0x10e>
 8000804:	230f      	movs	r3, #15
 8000806:	4023      	ands	r3, r4
 8000808:	2b04      	cmp	r3, #4
 800080a:	d000      	beq.n	800080e <__aeabi_fmul+0x10e>
 800080c:	3404      	adds	r4, #4
 800080e:	0123      	lsls	r3, r4, #4
 8000810:	d503      	bpl.n	800081a <__aeabi_fmul+0x11a>
 8000812:	0002      	movs	r2, r0
 8000814:	4b4c      	ldr	r3, [pc, #304]	; (8000948 <__aeabi_fmul+0x248>)
 8000816:	3280      	adds	r2, #128	; 0x80
 8000818:	401c      	ands	r4, r3
 800081a:	2afe      	cmp	r2, #254	; 0xfe
 800081c:	dcbf      	bgt.n	800079e <__aeabi_fmul+0x9e>
 800081e:	01a4      	lsls	r4, r4, #6
 8000820:	0a64      	lsrs	r4, r4, #9
 8000822:	b2d0      	uxtb	r0, r2
 8000824:	e7b2      	b.n	800078c <__aeabi_fmul+0x8c>
 8000826:	4643      	mov	r3, r8
 8000828:	2b00      	cmp	r3, #0
 800082a:	d13d      	bne.n	80008a8 <__aeabi_fmul+0x1a8>
 800082c:	464a      	mov	r2, r9
 800082e:	3301      	adds	r3, #1
 8000830:	431a      	orrs	r2, r3
 8000832:	4691      	mov	r9, r2
 8000834:	469c      	mov	ip, r3
 8000836:	e792      	b.n	800075e <__aeabi_fmul+0x5e>
 8000838:	2c00      	cmp	r4, #0
 800083a:	d129      	bne.n	8000890 <__aeabi_fmul+0x190>
 800083c:	2304      	movs	r3, #4
 800083e:	4699      	mov	r9, r3
 8000840:	3b03      	subs	r3, #3
 8000842:	2500      	movs	r5, #0
 8000844:	469a      	mov	sl, r3
 8000846:	e774      	b.n	8000732 <__aeabi_fmul+0x32>
 8000848:	2c00      	cmp	r4, #0
 800084a:	d11b      	bne.n	8000884 <__aeabi_fmul+0x184>
 800084c:	2308      	movs	r3, #8
 800084e:	4699      	mov	r9, r3
 8000850:	3b06      	subs	r3, #6
 8000852:	25ff      	movs	r5, #255	; 0xff
 8000854:	469a      	mov	sl, r3
 8000856:	e76c      	b.n	8000732 <__aeabi_fmul+0x32>
 8000858:	4643      	mov	r3, r8
 800085a:	35ff      	adds	r5, #255	; 0xff
 800085c:	2b00      	cmp	r3, #0
 800085e:	d10b      	bne.n	8000878 <__aeabi_fmul+0x178>
 8000860:	2302      	movs	r3, #2
 8000862:	464a      	mov	r2, r9
 8000864:	431a      	orrs	r2, r3
 8000866:	4691      	mov	r9, r2
 8000868:	469c      	mov	ip, r3
 800086a:	e778      	b.n	800075e <__aeabi_fmul+0x5e>
 800086c:	4653      	mov	r3, sl
 800086e:	0031      	movs	r1, r6
 8000870:	2b02      	cmp	r3, #2
 8000872:	d000      	beq.n	8000876 <__aeabi_fmul+0x176>
 8000874:	e783      	b.n	800077e <__aeabi_fmul+0x7e>
 8000876:	e792      	b.n	800079e <__aeabi_fmul+0x9e>
 8000878:	2303      	movs	r3, #3
 800087a:	464a      	mov	r2, r9
 800087c:	431a      	orrs	r2, r3
 800087e:	4691      	mov	r9, r2
 8000880:	469c      	mov	ip, r3
 8000882:	e76c      	b.n	800075e <__aeabi_fmul+0x5e>
 8000884:	230c      	movs	r3, #12
 8000886:	4699      	mov	r9, r3
 8000888:	3b09      	subs	r3, #9
 800088a:	25ff      	movs	r5, #255	; 0xff
 800088c:	469a      	mov	sl, r3
 800088e:	e750      	b.n	8000732 <__aeabi_fmul+0x32>
 8000890:	0020      	movs	r0, r4
 8000892:	f001 fcdf 	bl	8002254 <__clzsi2>
 8000896:	2576      	movs	r5, #118	; 0x76
 8000898:	1f43      	subs	r3, r0, #5
 800089a:	409c      	lsls	r4, r3
 800089c:	2300      	movs	r3, #0
 800089e:	426d      	negs	r5, r5
 80008a0:	4699      	mov	r9, r3
 80008a2:	469a      	mov	sl, r3
 80008a4:	1a2d      	subs	r5, r5, r0
 80008a6:	e744      	b.n	8000732 <__aeabi_fmul+0x32>
 80008a8:	4640      	mov	r0, r8
 80008aa:	f001 fcd3 	bl	8002254 <__clzsi2>
 80008ae:	4642      	mov	r2, r8
 80008b0:	1f43      	subs	r3, r0, #5
 80008b2:	409a      	lsls	r2, r3
 80008b4:	2300      	movs	r3, #0
 80008b6:	1a2d      	subs	r5, r5, r0
 80008b8:	4690      	mov	r8, r2
 80008ba:	469c      	mov	ip, r3
 80008bc:	3d76      	subs	r5, #118	; 0x76
 80008be:	e74e      	b.n	800075e <__aeabi_fmul+0x5e>
 80008c0:	2480      	movs	r4, #128	; 0x80
 80008c2:	2100      	movs	r1, #0
 80008c4:	20ff      	movs	r0, #255	; 0xff
 80008c6:	03e4      	lsls	r4, r4, #15
 80008c8:	e760      	b.n	800078c <__aeabi_fmul+0x8c>
 80008ca:	2301      	movs	r3, #1
 80008cc:	1a9b      	subs	r3, r3, r2
 80008ce:	2b1b      	cmp	r3, #27
 80008d0:	dd00      	ble.n	80008d4 <__aeabi_fmul+0x1d4>
 80008d2:	e759      	b.n	8000788 <__aeabi_fmul+0x88>
 80008d4:	0022      	movs	r2, r4
 80008d6:	309e      	adds	r0, #158	; 0x9e
 80008d8:	40da      	lsrs	r2, r3
 80008da:	4084      	lsls	r4, r0
 80008dc:	0013      	movs	r3, r2
 80008de:	1e62      	subs	r2, r4, #1
 80008e0:	4194      	sbcs	r4, r2
 80008e2:	431c      	orrs	r4, r3
 80008e4:	0763      	lsls	r3, r4, #29
 80008e6:	d004      	beq.n	80008f2 <__aeabi_fmul+0x1f2>
 80008e8:	230f      	movs	r3, #15
 80008ea:	4023      	ands	r3, r4
 80008ec:	2b04      	cmp	r3, #4
 80008ee:	d000      	beq.n	80008f2 <__aeabi_fmul+0x1f2>
 80008f0:	3404      	adds	r4, #4
 80008f2:	0163      	lsls	r3, r4, #5
 80008f4:	d51a      	bpl.n	800092c <__aeabi_fmul+0x22c>
 80008f6:	2001      	movs	r0, #1
 80008f8:	2400      	movs	r4, #0
 80008fa:	e747      	b.n	800078c <__aeabi_fmul+0x8c>
 80008fc:	2080      	movs	r0, #128	; 0x80
 80008fe:	03c0      	lsls	r0, r0, #15
 8000900:	4204      	tst	r4, r0
 8000902:	d009      	beq.n	8000918 <__aeabi_fmul+0x218>
 8000904:	4643      	mov	r3, r8
 8000906:	4203      	tst	r3, r0
 8000908:	d106      	bne.n	8000918 <__aeabi_fmul+0x218>
 800090a:	4644      	mov	r4, r8
 800090c:	4304      	orrs	r4, r0
 800090e:	0264      	lsls	r4, r4, #9
 8000910:	0039      	movs	r1, r7
 8000912:	20ff      	movs	r0, #255	; 0xff
 8000914:	0a64      	lsrs	r4, r4, #9
 8000916:	e739      	b.n	800078c <__aeabi_fmul+0x8c>
 8000918:	2080      	movs	r0, #128	; 0x80
 800091a:	03c0      	lsls	r0, r0, #15
 800091c:	4304      	orrs	r4, r0
 800091e:	0264      	lsls	r4, r4, #9
 8000920:	0031      	movs	r1, r6
 8000922:	20ff      	movs	r0, #255	; 0xff
 8000924:	0a64      	lsrs	r4, r4, #9
 8000926:	e731      	b.n	800078c <__aeabi_fmul+0x8c>
 8000928:	0028      	movs	r0, r5
 800092a:	e765      	b.n	80007f8 <__aeabi_fmul+0xf8>
 800092c:	01a4      	lsls	r4, r4, #6
 800092e:	2000      	movs	r0, #0
 8000930:	0a64      	lsrs	r4, r4, #9
 8000932:	e72b      	b.n	800078c <__aeabi_fmul+0x8c>
 8000934:	2080      	movs	r0, #128	; 0x80
 8000936:	03c0      	lsls	r0, r0, #15
 8000938:	4304      	orrs	r4, r0
 800093a:	0264      	lsls	r4, r4, #9
 800093c:	20ff      	movs	r0, #255	; 0xff
 800093e:	0a64      	lsrs	r4, r4, #9
 8000940:	e724      	b.n	800078c <__aeabi_fmul+0x8c>
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	08005f14 	.word	0x08005f14
 8000948:	f7ffffff 	.word	0xf7ffffff

0800094c <__aeabi_fsub>:
 800094c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800094e:	46ce      	mov	lr, r9
 8000950:	4647      	mov	r7, r8
 8000952:	0243      	lsls	r3, r0, #9
 8000954:	0a5b      	lsrs	r3, r3, #9
 8000956:	024e      	lsls	r6, r1, #9
 8000958:	00da      	lsls	r2, r3, #3
 800095a:	4694      	mov	ip, r2
 800095c:	0a72      	lsrs	r2, r6, #9
 800095e:	4691      	mov	r9, r2
 8000960:	0045      	lsls	r5, r0, #1
 8000962:	004a      	lsls	r2, r1, #1
 8000964:	b580      	push	{r7, lr}
 8000966:	0e2d      	lsrs	r5, r5, #24
 8000968:	001f      	movs	r7, r3
 800096a:	0fc4      	lsrs	r4, r0, #31
 800096c:	0e12      	lsrs	r2, r2, #24
 800096e:	0fc9      	lsrs	r1, r1, #31
 8000970:	09b6      	lsrs	r6, r6, #6
 8000972:	2aff      	cmp	r2, #255	; 0xff
 8000974:	d05b      	beq.n	8000a2e <__aeabi_fsub+0xe2>
 8000976:	2001      	movs	r0, #1
 8000978:	4041      	eors	r1, r0
 800097a:	428c      	cmp	r4, r1
 800097c:	d039      	beq.n	80009f2 <__aeabi_fsub+0xa6>
 800097e:	1aa8      	subs	r0, r5, r2
 8000980:	2800      	cmp	r0, #0
 8000982:	dd5a      	ble.n	8000a3a <__aeabi_fsub+0xee>
 8000984:	2a00      	cmp	r2, #0
 8000986:	d06a      	beq.n	8000a5e <__aeabi_fsub+0x112>
 8000988:	2dff      	cmp	r5, #255	; 0xff
 800098a:	d100      	bne.n	800098e <__aeabi_fsub+0x42>
 800098c:	e0d9      	b.n	8000b42 <__aeabi_fsub+0x1f6>
 800098e:	2280      	movs	r2, #128	; 0x80
 8000990:	04d2      	lsls	r2, r2, #19
 8000992:	4316      	orrs	r6, r2
 8000994:	281b      	cmp	r0, #27
 8000996:	dc00      	bgt.n	800099a <__aeabi_fsub+0x4e>
 8000998:	e0e9      	b.n	8000b6e <__aeabi_fsub+0x222>
 800099a:	2001      	movs	r0, #1
 800099c:	4663      	mov	r3, ip
 800099e:	1a18      	subs	r0, r3, r0
 80009a0:	0143      	lsls	r3, r0, #5
 80009a2:	d400      	bmi.n	80009a6 <__aeabi_fsub+0x5a>
 80009a4:	e0b4      	b.n	8000b10 <__aeabi_fsub+0x1c4>
 80009a6:	0180      	lsls	r0, r0, #6
 80009a8:	0987      	lsrs	r7, r0, #6
 80009aa:	0038      	movs	r0, r7
 80009ac:	f001 fc52 	bl	8002254 <__clzsi2>
 80009b0:	3805      	subs	r0, #5
 80009b2:	4087      	lsls	r7, r0
 80009b4:	4285      	cmp	r5, r0
 80009b6:	dc00      	bgt.n	80009ba <__aeabi_fsub+0x6e>
 80009b8:	e0cc      	b.n	8000b54 <__aeabi_fsub+0x208>
 80009ba:	1a2d      	subs	r5, r5, r0
 80009bc:	48b5      	ldr	r0, [pc, #724]	; (8000c94 <__aeabi_fsub+0x348>)
 80009be:	4038      	ands	r0, r7
 80009c0:	0743      	lsls	r3, r0, #29
 80009c2:	d004      	beq.n	80009ce <__aeabi_fsub+0x82>
 80009c4:	230f      	movs	r3, #15
 80009c6:	4003      	ands	r3, r0
 80009c8:	2b04      	cmp	r3, #4
 80009ca:	d000      	beq.n	80009ce <__aeabi_fsub+0x82>
 80009cc:	3004      	adds	r0, #4
 80009ce:	0143      	lsls	r3, r0, #5
 80009d0:	d400      	bmi.n	80009d4 <__aeabi_fsub+0x88>
 80009d2:	e0a0      	b.n	8000b16 <__aeabi_fsub+0x1ca>
 80009d4:	1c6a      	adds	r2, r5, #1
 80009d6:	2dfe      	cmp	r5, #254	; 0xfe
 80009d8:	d100      	bne.n	80009dc <__aeabi_fsub+0x90>
 80009da:	e08d      	b.n	8000af8 <__aeabi_fsub+0x1ac>
 80009dc:	0180      	lsls	r0, r0, #6
 80009de:	0a47      	lsrs	r7, r0, #9
 80009e0:	b2d2      	uxtb	r2, r2
 80009e2:	05d0      	lsls	r0, r2, #23
 80009e4:	4338      	orrs	r0, r7
 80009e6:	07e4      	lsls	r4, r4, #31
 80009e8:	4320      	orrs	r0, r4
 80009ea:	bcc0      	pop	{r6, r7}
 80009ec:	46b9      	mov	r9, r7
 80009ee:	46b0      	mov	r8, r6
 80009f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009f2:	1aa8      	subs	r0, r5, r2
 80009f4:	4680      	mov	r8, r0
 80009f6:	2800      	cmp	r0, #0
 80009f8:	dd45      	ble.n	8000a86 <__aeabi_fsub+0x13a>
 80009fa:	2a00      	cmp	r2, #0
 80009fc:	d070      	beq.n	8000ae0 <__aeabi_fsub+0x194>
 80009fe:	2dff      	cmp	r5, #255	; 0xff
 8000a00:	d100      	bne.n	8000a04 <__aeabi_fsub+0xb8>
 8000a02:	e09e      	b.n	8000b42 <__aeabi_fsub+0x1f6>
 8000a04:	2380      	movs	r3, #128	; 0x80
 8000a06:	04db      	lsls	r3, r3, #19
 8000a08:	431e      	orrs	r6, r3
 8000a0a:	4643      	mov	r3, r8
 8000a0c:	2b1b      	cmp	r3, #27
 8000a0e:	dc00      	bgt.n	8000a12 <__aeabi_fsub+0xc6>
 8000a10:	e0d2      	b.n	8000bb8 <__aeabi_fsub+0x26c>
 8000a12:	2001      	movs	r0, #1
 8000a14:	4460      	add	r0, ip
 8000a16:	0143      	lsls	r3, r0, #5
 8000a18:	d57a      	bpl.n	8000b10 <__aeabi_fsub+0x1c4>
 8000a1a:	3501      	adds	r5, #1
 8000a1c:	2dff      	cmp	r5, #255	; 0xff
 8000a1e:	d06b      	beq.n	8000af8 <__aeabi_fsub+0x1ac>
 8000a20:	2301      	movs	r3, #1
 8000a22:	4a9d      	ldr	r2, [pc, #628]	; (8000c98 <__aeabi_fsub+0x34c>)
 8000a24:	4003      	ands	r3, r0
 8000a26:	0840      	lsrs	r0, r0, #1
 8000a28:	4010      	ands	r0, r2
 8000a2a:	4318      	orrs	r0, r3
 8000a2c:	e7c8      	b.n	80009c0 <__aeabi_fsub+0x74>
 8000a2e:	2e00      	cmp	r6, #0
 8000a30:	d020      	beq.n	8000a74 <__aeabi_fsub+0x128>
 8000a32:	428c      	cmp	r4, r1
 8000a34:	d023      	beq.n	8000a7e <__aeabi_fsub+0x132>
 8000a36:	0028      	movs	r0, r5
 8000a38:	38ff      	subs	r0, #255	; 0xff
 8000a3a:	2800      	cmp	r0, #0
 8000a3c:	d039      	beq.n	8000ab2 <__aeabi_fsub+0x166>
 8000a3e:	1b57      	subs	r7, r2, r5
 8000a40:	2d00      	cmp	r5, #0
 8000a42:	d000      	beq.n	8000a46 <__aeabi_fsub+0xfa>
 8000a44:	e09d      	b.n	8000b82 <__aeabi_fsub+0x236>
 8000a46:	4663      	mov	r3, ip
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d100      	bne.n	8000a4e <__aeabi_fsub+0x102>
 8000a4c:	e0db      	b.n	8000c06 <__aeabi_fsub+0x2ba>
 8000a4e:	1e7b      	subs	r3, r7, #1
 8000a50:	2f01      	cmp	r7, #1
 8000a52:	d100      	bne.n	8000a56 <__aeabi_fsub+0x10a>
 8000a54:	e10d      	b.n	8000c72 <__aeabi_fsub+0x326>
 8000a56:	2fff      	cmp	r7, #255	; 0xff
 8000a58:	d071      	beq.n	8000b3e <__aeabi_fsub+0x1f2>
 8000a5a:	001f      	movs	r7, r3
 8000a5c:	e098      	b.n	8000b90 <__aeabi_fsub+0x244>
 8000a5e:	2e00      	cmp	r6, #0
 8000a60:	d100      	bne.n	8000a64 <__aeabi_fsub+0x118>
 8000a62:	e0a7      	b.n	8000bb4 <__aeabi_fsub+0x268>
 8000a64:	1e42      	subs	r2, r0, #1
 8000a66:	2801      	cmp	r0, #1
 8000a68:	d100      	bne.n	8000a6c <__aeabi_fsub+0x120>
 8000a6a:	e0e6      	b.n	8000c3a <__aeabi_fsub+0x2ee>
 8000a6c:	28ff      	cmp	r0, #255	; 0xff
 8000a6e:	d068      	beq.n	8000b42 <__aeabi_fsub+0x1f6>
 8000a70:	0010      	movs	r0, r2
 8000a72:	e78f      	b.n	8000994 <__aeabi_fsub+0x48>
 8000a74:	2001      	movs	r0, #1
 8000a76:	4041      	eors	r1, r0
 8000a78:	42a1      	cmp	r1, r4
 8000a7a:	d000      	beq.n	8000a7e <__aeabi_fsub+0x132>
 8000a7c:	e77f      	b.n	800097e <__aeabi_fsub+0x32>
 8000a7e:	20ff      	movs	r0, #255	; 0xff
 8000a80:	4240      	negs	r0, r0
 8000a82:	4680      	mov	r8, r0
 8000a84:	44a8      	add	r8, r5
 8000a86:	4640      	mov	r0, r8
 8000a88:	2800      	cmp	r0, #0
 8000a8a:	d038      	beq.n	8000afe <__aeabi_fsub+0x1b2>
 8000a8c:	1b51      	subs	r1, r2, r5
 8000a8e:	2d00      	cmp	r5, #0
 8000a90:	d100      	bne.n	8000a94 <__aeabi_fsub+0x148>
 8000a92:	e0ae      	b.n	8000bf2 <__aeabi_fsub+0x2a6>
 8000a94:	2aff      	cmp	r2, #255	; 0xff
 8000a96:	d100      	bne.n	8000a9a <__aeabi_fsub+0x14e>
 8000a98:	e0df      	b.n	8000c5a <__aeabi_fsub+0x30e>
 8000a9a:	2380      	movs	r3, #128	; 0x80
 8000a9c:	4660      	mov	r0, ip
 8000a9e:	04db      	lsls	r3, r3, #19
 8000aa0:	4318      	orrs	r0, r3
 8000aa2:	4684      	mov	ip, r0
 8000aa4:	291b      	cmp	r1, #27
 8000aa6:	dc00      	bgt.n	8000aaa <__aeabi_fsub+0x15e>
 8000aa8:	e0d9      	b.n	8000c5e <__aeabi_fsub+0x312>
 8000aaa:	2001      	movs	r0, #1
 8000aac:	0015      	movs	r5, r2
 8000aae:	1980      	adds	r0, r0, r6
 8000ab0:	e7b1      	b.n	8000a16 <__aeabi_fsub+0xca>
 8000ab2:	20fe      	movs	r0, #254	; 0xfe
 8000ab4:	1c6a      	adds	r2, r5, #1
 8000ab6:	4210      	tst	r0, r2
 8000ab8:	d171      	bne.n	8000b9e <__aeabi_fsub+0x252>
 8000aba:	2d00      	cmp	r5, #0
 8000abc:	d000      	beq.n	8000ac0 <__aeabi_fsub+0x174>
 8000abe:	e0a6      	b.n	8000c0e <__aeabi_fsub+0x2c2>
 8000ac0:	4663      	mov	r3, ip
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d100      	bne.n	8000ac8 <__aeabi_fsub+0x17c>
 8000ac6:	e0d9      	b.n	8000c7c <__aeabi_fsub+0x330>
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2e00      	cmp	r6, #0
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_fsub+0x184>
 8000ace:	e788      	b.n	80009e2 <__aeabi_fsub+0x96>
 8000ad0:	1b98      	subs	r0, r3, r6
 8000ad2:	0143      	lsls	r3, r0, #5
 8000ad4:	d400      	bmi.n	8000ad8 <__aeabi_fsub+0x18c>
 8000ad6:	e0e1      	b.n	8000c9c <__aeabi_fsub+0x350>
 8000ad8:	4663      	mov	r3, ip
 8000ada:	000c      	movs	r4, r1
 8000adc:	1af0      	subs	r0, r6, r3
 8000ade:	e76f      	b.n	80009c0 <__aeabi_fsub+0x74>
 8000ae0:	2e00      	cmp	r6, #0
 8000ae2:	d100      	bne.n	8000ae6 <__aeabi_fsub+0x19a>
 8000ae4:	e0b7      	b.n	8000c56 <__aeabi_fsub+0x30a>
 8000ae6:	0002      	movs	r2, r0
 8000ae8:	3a01      	subs	r2, #1
 8000aea:	2801      	cmp	r0, #1
 8000aec:	d100      	bne.n	8000af0 <__aeabi_fsub+0x1a4>
 8000aee:	e09c      	b.n	8000c2a <__aeabi_fsub+0x2de>
 8000af0:	28ff      	cmp	r0, #255	; 0xff
 8000af2:	d026      	beq.n	8000b42 <__aeabi_fsub+0x1f6>
 8000af4:	4690      	mov	r8, r2
 8000af6:	e788      	b.n	8000a0a <__aeabi_fsub+0xbe>
 8000af8:	22ff      	movs	r2, #255	; 0xff
 8000afa:	2700      	movs	r7, #0
 8000afc:	e771      	b.n	80009e2 <__aeabi_fsub+0x96>
 8000afe:	20fe      	movs	r0, #254	; 0xfe
 8000b00:	1c6a      	adds	r2, r5, #1
 8000b02:	4210      	tst	r0, r2
 8000b04:	d064      	beq.n	8000bd0 <__aeabi_fsub+0x284>
 8000b06:	2aff      	cmp	r2, #255	; 0xff
 8000b08:	d0f6      	beq.n	8000af8 <__aeabi_fsub+0x1ac>
 8000b0a:	0015      	movs	r5, r2
 8000b0c:	4466      	add	r6, ip
 8000b0e:	0870      	lsrs	r0, r6, #1
 8000b10:	0743      	lsls	r3, r0, #29
 8000b12:	d000      	beq.n	8000b16 <__aeabi_fsub+0x1ca>
 8000b14:	e756      	b.n	80009c4 <__aeabi_fsub+0x78>
 8000b16:	08c3      	lsrs	r3, r0, #3
 8000b18:	2dff      	cmp	r5, #255	; 0xff
 8000b1a:	d012      	beq.n	8000b42 <__aeabi_fsub+0x1f6>
 8000b1c:	025b      	lsls	r3, r3, #9
 8000b1e:	0a5f      	lsrs	r7, r3, #9
 8000b20:	b2ea      	uxtb	r2, r5
 8000b22:	e75e      	b.n	80009e2 <__aeabi_fsub+0x96>
 8000b24:	4662      	mov	r2, ip
 8000b26:	2a00      	cmp	r2, #0
 8000b28:	d100      	bne.n	8000b2c <__aeabi_fsub+0x1e0>
 8000b2a:	e096      	b.n	8000c5a <__aeabi_fsub+0x30e>
 8000b2c:	2e00      	cmp	r6, #0
 8000b2e:	d008      	beq.n	8000b42 <__aeabi_fsub+0x1f6>
 8000b30:	2280      	movs	r2, #128	; 0x80
 8000b32:	03d2      	lsls	r2, r2, #15
 8000b34:	4213      	tst	r3, r2
 8000b36:	d004      	beq.n	8000b42 <__aeabi_fsub+0x1f6>
 8000b38:	4648      	mov	r0, r9
 8000b3a:	4210      	tst	r0, r2
 8000b3c:	d101      	bne.n	8000b42 <__aeabi_fsub+0x1f6>
 8000b3e:	000c      	movs	r4, r1
 8000b40:	464b      	mov	r3, r9
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d0d8      	beq.n	8000af8 <__aeabi_fsub+0x1ac>
 8000b46:	2780      	movs	r7, #128	; 0x80
 8000b48:	03ff      	lsls	r7, r7, #15
 8000b4a:	431f      	orrs	r7, r3
 8000b4c:	027f      	lsls	r7, r7, #9
 8000b4e:	22ff      	movs	r2, #255	; 0xff
 8000b50:	0a7f      	lsrs	r7, r7, #9
 8000b52:	e746      	b.n	80009e2 <__aeabi_fsub+0x96>
 8000b54:	2320      	movs	r3, #32
 8000b56:	003a      	movs	r2, r7
 8000b58:	1b45      	subs	r5, r0, r5
 8000b5a:	0038      	movs	r0, r7
 8000b5c:	3501      	adds	r5, #1
 8000b5e:	40ea      	lsrs	r2, r5
 8000b60:	1b5d      	subs	r5, r3, r5
 8000b62:	40a8      	lsls	r0, r5
 8000b64:	1e43      	subs	r3, r0, #1
 8000b66:	4198      	sbcs	r0, r3
 8000b68:	2500      	movs	r5, #0
 8000b6a:	4310      	orrs	r0, r2
 8000b6c:	e728      	b.n	80009c0 <__aeabi_fsub+0x74>
 8000b6e:	2320      	movs	r3, #32
 8000b70:	1a1b      	subs	r3, r3, r0
 8000b72:	0032      	movs	r2, r6
 8000b74:	409e      	lsls	r6, r3
 8000b76:	40c2      	lsrs	r2, r0
 8000b78:	0030      	movs	r0, r6
 8000b7a:	1e43      	subs	r3, r0, #1
 8000b7c:	4198      	sbcs	r0, r3
 8000b7e:	4310      	orrs	r0, r2
 8000b80:	e70c      	b.n	800099c <__aeabi_fsub+0x50>
 8000b82:	2aff      	cmp	r2, #255	; 0xff
 8000b84:	d0db      	beq.n	8000b3e <__aeabi_fsub+0x1f2>
 8000b86:	2380      	movs	r3, #128	; 0x80
 8000b88:	4660      	mov	r0, ip
 8000b8a:	04db      	lsls	r3, r3, #19
 8000b8c:	4318      	orrs	r0, r3
 8000b8e:	4684      	mov	ip, r0
 8000b90:	2f1b      	cmp	r7, #27
 8000b92:	dd56      	ble.n	8000c42 <__aeabi_fsub+0x2f6>
 8000b94:	2001      	movs	r0, #1
 8000b96:	000c      	movs	r4, r1
 8000b98:	0015      	movs	r5, r2
 8000b9a:	1a30      	subs	r0, r6, r0
 8000b9c:	e700      	b.n	80009a0 <__aeabi_fsub+0x54>
 8000b9e:	4663      	mov	r3, ip
 8000ba0:	1b9f      	subs	r7, r3, r6
 8000ba2:	017b      	lsls	r3, r7, #5
 8000ba4:	d43d      	bmi.n	8000c22 <__aeabi_fsub+0x2d6>
 8000ba6:	2f00      	cmp	r7, #0
 8000ba8:	d000      	beq.n	8000bac <__aeabi_fsub+0x260>
 8000baa:	e6fe      	b.n	80009aa <__aeabi_fsub+0x5e>
 8000bac:	2400      	movs	r4, #0
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2700      	movs	r7, #0
 8000bb2:	e716      	b.n	80009e2 <__aeabi_fsub+0x96>
 8000bb4:	0005      	movs	r5, r0
 8000bb6:	e7af      	b.n	8000b18 <__aeabi_fsub+0x1cc>
 8000bb8:	0032      	movs	r2, r6
 8000bba:	4643      	mov	r3, r8
 8000bbc:	4641      	mov	r1, r8
 8000bbe:	40da      	lsrs	r2, r3
 8000bc0:	2320      	movs	r3, #32
 8000bc2:	1a5b      	subs	r3, r3, r1
 8000bc4:	409e      	lsls	r6, r3
 8000bc6:	0030      	movs	r0, r6
 8000bc8:	1e43      	subs	r3, r0, #1
 8000bca:	4198      	sbcs	r0, r3
 8000bcc:	4310      	orrs	r0, r2
 8000bce:	e721      	b.n	8000a14 <__aeabi_fsub+0xc8>
 8000bd0:	2d00      	cmp	r5, #0
 8000bd2:	d1a7      	bne.n	8000b24 <__aeabi_fsub+0x1d8>
 8000bd4:	4663      	mov	r3, ip
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d059      	beq.n	8000c8e <__aeabi_fsub+0x342>
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2e00      	cmp	r6, #0
 8000bde:	d100      	bne.n	8000be2 <__aeabi_fsub+0x296>
 8000be0:	e6ff      	b.n	80009e2 <__aeabi_fsub+0x96>
 8000be2:	0030      	movs	r0, r6
 8000be4:	4460      	add	r0, ip
 8000be6:	0143      	lsls	r3, r0, #5
 8000be8:	d592      	bpl.n	8000b10 <__aeabi_fsub+0x1c4>
 8000bea:	4b2a      	ldr	r3, [pc, #168]	; (8000c94 <__aeabi_fsub+0x348>)
 8000bec:	3501      	adds	r5, #1
 8000bee:	4018      	ands	r0, r3
 8000bf0:	e78e      	b.n	8000b10 <__aeabi_fsub+0x1c4>
 8000bf2:	4663      	mov	r3, ip
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d047      	beq.n	8000c88 <__aeabi_fsub+0x33c>
 8000bf8:	1e4b      	subs	r3, r1, #1
 8000bfa:	2901      	cmp	r1, #1
 8000bfc:	d015      	beq.n	8000c2a <__aeabi_fsub+0x2de>
 8000bfe:	29ff      	cmp	r1, #255	; 0xff
 8000c00:	d02b      	beq.n	8000c5a <__aeabi_fsub+0x30e>
 8000c02:	0019      	movs	r1, r3
 8000c04:	e74e      	b.n	8000aa4 <__aeabi_fsub+0x158>
 8000c06:	000c      	movs	r4, r1
 8000c08:	464b      	mov	r3, r9
 8000c0a:	003d      	movs	r5, r7
 8000c0c:	e784      	b.n	8000b18 <__aeabi_fsub+0x1cc>
 8000c0e:	4662      	mov	r2, ip
 8000c10:	2a00      	cmp	r2, #0
 8000c12:	d18b      	bne.n	8000b2c <__aeabi_fsub+0x1e0>
 8000c14:	2e00      	cmp	r6, #0
 8000c16:	d192      	bne.n	8000b3e <__aeabi_fsub+0x1f2>
 8000c18:	2780      	movs	r7, #128	; 0x80
 8000c1a:	2400      	movs	r4, #0
 8000c1c:	22ff      	movs	r2, #255	; 0xff
 8000c1e:	03ff      	lsls	r7, r7, #15
 8000c20:	e6df      	b.n	80009e2 <__aeabi_fsub+0x96>
 8000c22:	4663      	mov	r3, ip
 8000c24:	000c      	movs	r4, r1
 8000c26:	1af7      	subs	r7, r6, r3
 8000c28:	e6bf      	b.n	80009aa <__aeabi_fsub+0x5e>
 8000c2a:	0030      	movs	r0, r6
 8000c2c:	4460      	add	r0, ip
 8000c2e:	2501      	movs	r5, #1
 8000c30:	0143      	lsls	r3, r0, #5
 8000c32:	d400      	bmi.n	8000c36 <__aeabi_fsub+0x2ea>
 8000c34:	e76c      	b.n	8000b10 <__aeabi_fsub+0x1c4>
 8000c36:	2502      	movs	r5, #2
 8000c38:	e6f2      	b.n	8000a20 <__aeabi_fsub+0xd4>
 8000c3a:	4663      	mov	r3, ip
 8000c3c:	2501      	movs	r5, #1
 8000c3e:	1b98      	subs	r0, r3, r6
 8000c40:	e6ae      	b.n	80009a0 <__aeabi_fsub+0x54>
 8000c42:	2320      	movs	r3, #32
 8000c44:	4664      	mov	r4, ip
 8000c46:	4660      	mov	r0, ip
 8000c48:	40fc      	lsrs	r4, r7
 8000c4a:	1bdf      	subs	r7, r3, r7
 8000c4c:	40b8      	lsls	r0, r7
 8000c4e:	1e43      	subs	r3, r0, #1
 8000c50:	4198      	sbcs	r0, r3
 8000c52:	4320      	orrs	r0, r4
 8000c54:	e79f      	b.n	8000b96 <__aeabi_fsub+0x24a>
 8000c56:	0005      	movs	r5, r0
 8000c58:	e75e      	b.n	8000b18 <__aeabi_fsub+0x1cc>
 8000c5a:	464b      	mov	r3, r9
 8000c5c:	e771      	b.n	8000b42 <__aeabi_fsub+0x1f6>
 8000c5e:	2320      	movs	r3, #32
 8000c60:	4665      	mov	r5, ip
 8000c62:	4660      	mov	r0, ip
 8000c64:	40cd      	lsrs	r5, r1
 8000c66:	1a59      	subs	r1, r3, r1
 8000c68:	4088      	lsls	r0, r1
 8000c6a:	1e43      	subs	r3, r0, #1
 8000c6c:	4198      	sbcs	r0, r3
 8000c6e:	4328      	orrs	r0, r5
 8000c70:	e71c      	b.n	8000aac <__aeabi_fsub+0x160>
 8000c72:	4663      	mov	r3, ip
 8000c74:	000c      	movs	r4, r1
 8000c76:	2501      	movs	r5, #1
 8000c78:	1af0      	subs	r0, r6, r3
 8000c7a:	e691      	b.n	80009a0 <__aeabi_fsub+0x54>
 8000c7c:	2e00      	cmp	r6, #0
 8000c7e:	d095      	beq.n	8000bac <__aeabi_fsub+0x260>
 8000c80:	000c      	movs	r4, r1
 8000c82:	464f      	mov	r7, r9
 8000c84:	2200      	movs	r2, #0
 8000c86:	e6ac      	b.n	80009e2 <__aeabi_fsub+0x96>
 8000c88:	464b      	mov	r3, r9
 8000c8a:	000d      	movs	r5, r1
 8000c8c:	e744      	b.n	8000b18 <__aeabi_fsub+0x1cc>
 8000c8e:	464f      	mov	r7, r9
 8000c90:	2200      	movs	r2, #0
 8000c92:	e6a6      	b.n	80009e2 <__aeabi_fsub+0x96>
 8000c94:	fbffffff 	.word	0xfbffffff
 8000c98:	7dffffff 	.word	0x7dffffff
 8000c9c:	2800      	cmp	r0, #0
 8000c9e:	d000      	beq.n	8000ca2 <__aeabi_fsub+0x356>
 8000ca0:	e736      	b.n	8000b10 <__aeabi_fsub+0x1c4>
 8000ca2:	2400      	movs	r4, #0
 8000ca4:	2700      	movs	r7, #0
 8000ca6:	e69c      	b.n	80009e2 <__aeabi_fsub+0x96>

08000ca8 <__aeabi_f2iz>:
 8000ca8:	0241      	lsls	r1, r0, #9
 8000caa:	0042      	lsls	r2, r0, #1
 8000cac:	0fc3      	lsrs	r3, r0, #31
 8000cae:	0a49      	lsrs	r1, r1, #9
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	0e12      	lsrs	r2, r2, #24
 8000cb4:	2a7e      	cmp	r2, #126	; 0x7e
 8000cb6:	dd03      	ble.n	8000cc0 <__aeabi_f2iz+0x18>
 8000cb8:	2a9d      	cmp	r2, #157	; 0x9d
 8000cba:	dd02      	ble.n	8000cc2 <__aeabi_f2iz+0x1a>
 8000cbc:	4a09      	ldr	r2, [pc, #36]	; (8000ce4 <__aeabi_f2iz+0x3c>)
 8000cbe:	1898      	adds	r0, r3, r2
 8000cc0:	4770      	bx	lr
 8000cc2:	2080      	movs	r0, #128	; 0x80
 8000cc4:	0400      	lsls	r0, r0, #16
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	2a95      	cmp	r2, #149	; 0x95
 8000cca:	dc07      	bgt.n	8000cdc <__aeabi_f2iz+0x34>
 8000ccc:	2096      	movs	r0, #150	; 0x96
 8000cce:	1a82      	subs	r2, r0, r2
 8000cd0:	40d1      	lsrs	r1, r2
 8000cd2:	4248      	negs	r0, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d1f3      	bne.n	8000cc0 <__aeabi_f2iz+0x18>
 8000cd8:	0008      	movs	r0, r1
 8000cda:	e7f1      	b.n	8000cc0 <__aeabi_f2iz+0x18>
 8000cdc:	3a96      	subs	r2, #150	; 0x96
 8000cde:	4091      	lsls	r1, r2
 8000ce0:	e7f7      	b.n	8000cd2 <__aeabi_f2iz+0x2a>
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	7fffffff 	.word	0x7fffffff

08000ce8 <__aeabi_ui2f>:
 8000ce8:	b570      	push	{r4, r5, r6, lr}
 8000cea:	1e05      	subs	r5, r0, #0
 8000cec:	d00e      	beq.n	8000d0c <__aeabi_ui2f+0x24>
 8000cee:	f001 fab1 	bl	8002254 <__clzsi2>
 8000cf2:	239e      	movs	r3, #158	; 0x9e
 8000cf4:	0004      	movs	r4, r0
 8000cf6:	1a1b      	subs	r3, r3, r0
 8000cf8:	2b96      	cmp	r3, #150	; 0x96
 8000cfa:	dc0c      	bgt.n	8000d16 <__aeabi_ui2f+0x2e>
 8000cfc:	2808      	cmp	r0, #8
 8000cfe:	dd01      	ble.n	8000d04 <__aeabi_ui2f+0x1c>
 8000d00:	3c08      	subs	r4, #8
 8000d02:	40a5      	lsls	r5, r4
 8000d04:	026d      	lsls	r5, r5, #9
 8000d06:	0a6d      	lsrs	r5, r5, #9
 8000d08:	b2d8      	uxtb	r0, r3
 8000d0a:	e001      	b.n	8000d10 <__aeabi_ui2f+0x28>
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	2500      	movs	r5, #0
 8000d10:	05c0      	lsls	r0, r0, #23
 8000d12:	4328      	orrs	r0, r5
 8000d14:	bd70      	pop	{r4, r5, r6, pc}
 8000d16:	2b99      	cmp	r3, #153	; 0x99
 8000d18:	dd09      	ble.n	8000d2e <__aeabi_ui2f+0x46>
 8000d1a:	0002      	movs	r2, r0
 8000d1c:	0029      	movs	r1, r5
 8000d1e:	321b      	adds	r2, #27
 8000d20:	4091      	lsls	r1, r2
 8000d22:	1e4a      	subs	r2, r1, #1
 8000d24:	4191      	sbcs	r1, r2
 8000d26:	2205      	movs	r2, #5
 8000d28:	1a12      	subs	r2, r2, r0
 8000d2a:	40d5      	lsrs	r5, r2
 8000d2c:	430d      	orrs	r5, r1
 8000d2e:	2c05      	cmp	r4, #5
 8000d30:	dc12      	bgt.n	8000d58 <__aeabi_ui2f+0x70>
 8000d32:	0029      	movs	r1, r5
 8000d34:	4e0c      	ldr	r6, [pc, #48]	; (8000d68 <__aeabi_ui2f+0x80>)
 8000d36:	4031      	ands	r1, r6
 8000d38:	076a      	lsls	r2, r5, #29
 8000d3a:	d009      	beq.n	8000d50 <__aeabi_ui2f+0x68>
 8000d3c:	200f      	movs	r0, #15
 8000d3e:	4028      	ands	r0, r5
 8000d40:	2804      	cmp	r0, #4
 8000d42:	d005      	beq.n	8000d50 <__aeabi_ui2f+0x68>
 8000d44:	3104      	adds	r1, #4
 8000d46:	014a      	lsls	r2, r1, #5
 8000d48:	d502      	bpl.n	8000d50 <__aeabi_ui2f+0x68>
 8000d4a:	239f      	movs	r3, #159	; 0x9f
 8000d4c:	4031      	ands	r1, r6
 8000d4e:	1b1b      	subs	r3, r3, r4
 8000d50:	0189      	lsls	r1, r1, #6
 8000d52:	0a4d      	lsrs	r5, r1, #9
 8000d54:	b2d8      	uxtb	r0, r3
 8000d56:	e7db      	b.n	8000d10 <__aeabi_ui2f+0x28>
 8000d58:	1f62      	subs	r2, r4, #5
 8000d5a:	4095      	lsls	r5, r2
 8000d5c:	0029      	movs	r1, r5
 8000d5e:	4e02      	ldr	r6, [pc, #8]	; (8000d68 <__aeabi_ui2f+0x80>)
 8000d60:	4031      	ands	r1, r6
 8000d62:	076a      	lsls	r2, r5, #29
 8000d64:	d0f4      	beq.n	8000d50 <__aeabi_ui2f+0x68>
 8000d66:	e7e9      	b.n	8000d3c <__aeabi_ui2f+0x54>
 8000d68:	fbffffff 	.word	0xfbffffff

08000d6c <__aeabi_dadd>:
 8000d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d6e:	464f      	mov	r7, r9
 8000d70:	4646      	mov	r6, r8
 8000d72:	46d6      	mov	lr, sl
 8000d74:	000d      	movs	r5, r1
 8000d76:	0004      	movs	r4, r0
 8000d78:	b5c0      	push	{r6, r7, lr}
 8000d7a:	001f      	movs	r7, r3
 8000d7c:	0011      	movs	r1, r2
 8000d7e:	0328      	lsls	r0, r5, #12
 8000d80:	0f62      	lsrs	r2, r4, #29
 8000d82:	0a40      	lsrs	r0, r0, #9
 8000d84:	4310      	orrs	r0, r2
 8000d86:	007a      	lsls	r2, r7, #1
 8000d88:	0d52      	lsrs	r2, r2, #21
 8000d8a:	00e3      	lsls	r3, r4, #3
 8000d8c:	033c      	lsls	r4, r7, #12
 8000d8e:	4691      	mov	r9, r2
 8000d90:	0a64      	lsrs	r4, r4, #9
 8000d92:	0ffa      	lsrs	r2, r7, #31
 8000d94:	0f4f      	lsrs	r7, r1, #29
 8000d96:	006e      	lsls	r6, r5, #1
 8000d98:	4327      	orrs	r7, r4
 8000d9a:	4692      	mov	sl, r2
 8000d9c:	46b8      	mov	r8, r7
 8000d9e:	0d76      	lsrs	r6, r6, #21
 8000da0:	0fed      	lsrs	r5, r5, #31
 8000da2:	00c9      	lsls	r1, r1, #3
 8000da4:	4295      	cmp	r5, r2
 8000da6:	d100      	bne.n	8000daa <__aeabi_dadd+0x3e>
 8000da8:	e099      	b.n	8000ede <__aeabi_dadd+0x172>
 8000daa:	464c      	mov	r4, r9
 8000dac:	1b34      	subs	r4, r6, r4
 8000dae:	46a4      	mov	ip, r4
 8000db0:	2c00      	cmp	r4, #0
 8000db2:	dc00      	bgt.n	8000db6 <__aeabi_dadd+0x4a>
 8000db4:	e07c      	b.n	8000eb0 <__aeabi_dadd+0x144>
 8000db6:	464a      	mov	r2, r9
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	d100      	bne.n	8000dbe <__aeabi_dadd+0x52>
 8000dbc:	e0b8      	b.n	8000f30 <__aeabi_dadd+0x1c4>
 8000dbe:	4ac5      	ldr	r2, [pc, #788]	; (80010d4 <__aeabi_dadd+0x368>)
 8000dc0:	4296      	cmp	r6, r2
 8000dc2:	d100      	bne.n	8000dc6 <__aeabi_dadd+0x5a>
 8000dc4:	e11c      	b.n	8001000 <__aeabi_dadd+0x294>
 8000dc6:	2280      	movs	r2, #128	; 0x80
 8000dc8:	003c      	movs	r4, r7
 8000dca:	0412      	lsls	r2, r2, #16
 8000dcc:	4314      	orrs	r4, r2
 8000dce:	46a0      	mov	r8, r4
 8000dd0:	4662      	mov	r2, ip
 8000dd2:	2a38      	cmp	r2, #56	; 0x38
 8000dd4:	dd00      	ble.n	8000dd8 <__aeabi_dadd+0x6c>
 8000dd6:	e161      	b.n	800109c <__aeabi_dadd+0x330>
 8000dd8:	2a1f      	cmp	r2, #31
 8000dda:	dd00      	ble.n	8000dde <__aeabi_dadd+0x72>
 8000ddc:	e1cc      	b.n	8001178 <__aeabi_dadd+0x40c>
 8000dde:	4664      	mov	r4, ip
 8000de0:	2220      	movs	r2, #32
 8000de2:	1b12      	subs	r2, r2, r4
 8000de4:	4644      	mov	r4, r8
 8000de6:	4094      	lsls	r4, r2
 8000de8:	000f      	movs	r7, r1
 8000dea:	46a1      	mov	r9, r4
 8000dec:	4664      	mov	r4, ip
 8000dee:	4091      	lsls	r1, r2
 8000df0:	40e7      	lsrs	r7, r4
 8000df2:	464c      	mov	r4, r9
 8000df4:	1e4a      	subs	r2, r1, #1
 8000df6:	4191      	sbcs	r1, r2
 8000df8:	433c      	orrs	r4, r7
 8000dfa:	4642      	mov	r2, r8
 8000dfc:	4321      	orrs	r1, r4
 8000dfe:	4664      	mov	r4, ip
 8000e00:	40e2      	lsrs	r2, r4
 8000e02:	1a80      	subs	r0, r0, r2
 8000e04:	1a5c      	subs	r4, r3, r1
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	419b      	sbcs	r3, r3
 8000e0a:	425f      	negs	r7, r3
 8000e0c:	1bc7      	subs	r7, r0, r7
 8000e0e:	023b      	lsls	r3, r7, #8
 8000e10:	d400      	bmi.n	8000e14 <__aeabi_dadd+0xa8>
 8000e12:	e0d0      	b.n	8000fb6 <__aeabi_dadd+0x24a>
 8000e14:	027f      	lsls	r7, r7, #9
 8000e16:	0a7f      	lsrs	r7, r7, #9
 8000e18:	2f00      	cmp	r7, #0
 8000e1a:	d100      	bne.n	8000e1e <__aeabi_dadd+0xb2>
 8000e1c:	e0ff      	b.n	800101e <__aeabi_dadd+0x2b2>
 8000e1e:	0038      	movs	r0, r7
 8000e20:	f001 fa18 	bl	8002254 <__clzsi2>
 8000e24:	0001      	movs	r1, r0
 8000e26:	3908      	subs	r1, #8
 8000e28:	2320      	movs	r3, #32
 8000e2a:	0022      	movs	r2, r4
 8000e2c:	1a5b      	subs	r3, r3, r1
 8000e2e:	408f      	lsls	r7, r1
 8000e30:	40da      	lsrs	r2, r3
 8000e32:	408c      	lsls	r4, r1
 8000e34:	4317      	orrs	r7, r2
 8000e36:	42b1      	cmp	r1, r6
 8000e38:	da00      	bge.n	8000e3c <__aeabi_dadd+0xd0>
 8000e3a:	e0ff      	b.n	800103c <__aeabi_dadd+0x2d0>
 8000e3c:	1b89      	subs	r1, r1, r6
 8000e3e:	1c4b      	adds	r3, r1, #1
 8000e40:	2b1f      	cmp	r3, #31
 8000e42:	dd00      	ble.n	8000e46 <__aeabi_dadd+0xda>
 8000e44:	e0a8      	b.n	8000f98 <__aeabi_dadd+0x22c>
 8000e46:	2220      	movs	r2, #32
 8000e48:	0039      	movs	r1, r7
 8000e4a:	1ad2      	subs	r2, r2, r3
 8000e4c:	0020      	movs	r0, r4
 8000e4e:	4094      	lsls	r4, r2
 8000e50:	4091      	lsls	r1, r2
 8000e52:	40d8      	lsrs	r0, r3
 8000e54:	1e62      	subs	r2, r4, #1
 8000e56:	4194      	sbcs	r4, r2
 8000e58:	40df      	lsrs	r7, r3
 8000e5a:	2600      	movs	r6, #0
 8000e5c:	4301      	orrs	r1, r0
 8000e5e:	430c      	orrs	r4, r1
 8000e60:	0763      	lsls	r3, r4, #29
 8000e62:	d009      	beq.n	8000e78 <__aeabi_dadd+0x10c>
 8000e64:	230f      	movs	r3, #15
 8000e66:	4023      	ands	r3, r4
 8000e68:	2b04      	cmp	r3, #4
 8000e6a:	d005      	beq.n	8000e78 <__aeabi_dadd+0x10c>
 8000e6c:	1d23      	adds	r3, r4, #4
 8000e6e:	42a3      	cmp	r3, r4
 8000e70:	41a4      	sbcs	r4, r4
 8000e72:	4264      	negs	r4, r4
 8000e74:	193f      	adds	r7, r7, r4
 8000e76:	001c      	movs	r4, r3
 8000e78:	023b      	lsls	r3, r7, #8
 8000e7a:	d400      	bmi.n	8000e7e <__aeabi_dadd+0x112>
 8000e7c:	e09e      	b.n	8000fbc <__aeabi_dadd+0x250>
 8000e7e:	4b95      	ldr	r3, [pc, #596]	; (80010d4 <__aeabi_dadd+0x368>)
 8000e80:	3601      	adds	r6, #1
 8000e82:	429e      	cmp	r6, r3
 8000e84:	d100      	bne.n	8000e88 <__aeabi_dadd+0x11c>
 8000e86:	e0b7      	b.n	8000ff8 <__aeabi_dadd+0x28c>
 8000e88:	4a93      	ldr	r2, [pc, #588]	; (80010d8 <__aeabi_dadd+0x36c>)
 8000e8a:	08e4      	lsrs	r4, r4, #3
 8000e8c:	4017      	ands	r7, r2
 8000e8e:	077b      	lsls	r3, r7, #29
 8000e90:	0571      	lsls	r1, r6, #21
 8000e92:	027f      	lsls	r7, r7, #9
 8000e94:	4323      	orrs	r3, r4
 8000e96:	0b3f      	lsrs	r7, r7, #12
 8000e98:	0d4a      	lsrs	r2, r1, #21
 8000e9a:	0512      	lsls	r2, r2, #20
 8000e9c:	433a      	orrs	r2, r7
 8000e9e:	07ed      	lsls	r5, r5, #31
 8000ea0:	432a      	orrs	r2, r5
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	0011      	movs	r1, r2
 8000ea6:	bce0      	pop	{r5, r6, r7}
 8000ea8:	46ba      	mov	sl, r7
 8000eaa:	46b1      	mov	r9, r6
 8000eac:	46a8      	mov	r8, r5
 8000eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eb0:	2c00      	cmp	r4, #0
 8000eb2:	d04b      	beq.n	8000f4c <__aeabi_dadd+0x1e0>
 8000eb4:	464c      	mov	r4, r9
 8000eb6:	1ba4      	subs	r4, r4, r6
 8000eb8:	46a4      	mov	ip, r4
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	d000      	beq.n	8000ec0 <__aeabi_dadd+0x154>
 8000ebe:	e123      	b.n	8001108 <__aeabi_dadd+0x39c>
 8000ec0:	0004      	movs	r4, r0
 8000ec2:	431c      	orrs	r4, r3
 8000ec4:	d100      	bne.n	8000ec8 <__aeabi_dadd+0x15c>
 8000ec6:	e1af      	b.n	8001228 <__aeabi_dadd+0x4bc>
 8000ec8:	4662      	mov	r2, ip
 8000eca:	1e54      	subs	r4, r2, #1
 8000ecc:	2a01      	cmp	r2, #1
 8000ece:	d100      	bne.n	8000ed2 <__aeabi_dadd+0x166>
 8000ed0:	e215      	b.n	80012fe <__aeabi_dadd+0x592>
 8000ed2:	4d80      	ldr	r5, [pc, #512]	; (80010d4 <__aeabi_dadd+0x368>)
 8000ed4:	45ac      	cmp	ip, r5
 8000ed6:	d100      	bne.n	8000eda <__aeabi_dadd+0x16e>
 8000ed8:	e1c8      	b.n	800126c <__aeabi_dadd+0x500>
 8000eda:	46a4      	mov	ip, r4
 8000edc:	e11b      	b.n	8001116 <__aeabi_dadd+0x3aa>
 8000ede:	464a      	mov	r2, r9
 8000ee0:	1ab2      	subs	r2, r6, r2
 8000ee2:	4694      	mov	ip, r2
 8000ee4:	2a00      	cmp	r2, #0
 8000ee6:	dc00      	bgt.n	8000eea <__aeabi_dadd+0x17e>
 8000ee8:	e0ac      	b.n	8001044 <__aeabi_dadd+0x2d8>
 8000eea:	464a      	mov	r2, r9
 8000eec:	2a00      	cmp	r2, #0
 8000eee:	d043      	beq.n	8000f78 <__aeabi_dadd+0x20c>
 8000ef0:	4a78      	ldr	r2, [pc, #480]	; (80010d4 <__aeabi_dadd+0x368>)
 8000ef2:	4296      	cmp	r6, r2
 8000ef4:	d100      	bne.n	8000ef8 <__aeabi_dadd+0x18c>
 8000ef6:	e1af      	b.n	8001258 <__aeabi_dadd+0x4ec>
 8000ef8:	2280      	movs	r2, #128	; 0x80
 8000efa:	003c      	movs	r4, r7
 8000efc:	0412      	lsls	r2, r2, #16
 8000efe:	4314      	orrs	r4, r2
 8000f00:	46a0      	mov	r8, r4
 8000f02:	4662      	mov	r2, ip
 8000f04:	2a38      	cmp	r2, #56	; 0x38
 8000f06:	dc67      	bgt.n	8000fd8 <__aeabi_dadd+0x26c>
 8000f08:	2a1f      	cmp	r2, #31
 8000f0a:	dc00      	bgt.n	8000f0e <__aeabi_dadd+0x1a2>
 8000f0c:	e15f      	b.n	80011ce <__aeabi_dadd+0x462>
 8000f0e:	4647      	mov	r7, r8
 8000f10:	3a20      	subs	r2, #32
 8000f12:	40d7      	lsrs	r7, r2
 8000f14:	4662      	mov	r2, ip
 8000f16:	2a20      	cmp	r2, #32
 8000f18:	d005      	beq.n	8000f26 <__aeabi_dadd+0x1ba>
 8000f1a:	4664      	mov	r4, ip
 8000f1c:	2240      	movs	r2, #64	; 0x40
 8000f1e:	1b12      	subs	r2, r2, r4
 8000f20:	4644      	mov	r4, r8
 8000f22:	4094      	lsls	r4, r2
 8000f24:	4321      	orrs	r1, r4
 8000f26:	1e4a      	subs	r2, r1, #1
 8000f28:	4191      	sbcs	r1, r2
 8000f2a:	000c      	movs	r4, r1
 8000f2c:	433c      	orrs	r4, r7
 8000f2e:	e057      	b.n	8000fe0 <__aeabi_dadd+0x274>
 8000f30:	003a      	movs	r2, r7
 8000f32:	430a      	orrs	r2, r1
 8000f34:	d100      	bne.n	8000f38 <__aeabi_dadd+0x1cc>
 8000f36:	e105      	b.n	8001144 <__aeabi_dadd+0x3d8>
 8000f38:	0022      	movs	r2, r4
 8000f3a:	3a01      	subs	r2, #1
 8000f3c:	2c01      	cmp	r4, #1
 8000f3e:	d100      	bne.n	8000f42 <__aeabi_dadd+0x1d6>
 8000f40:	e182      	b.n	8001248 <__aeabi_dadd+0x4dc>
 8000f42:	4c64      	ldr	r4, [pc, #400]	; (80010d4 <__aeabi_dadd+0x368>)
 8000f44:	45a4      	cmp	ip, r4
 8000f46:	d05b      	beq.n	8001000 <__aeabi_dadd+0x294>
 8000f48:	4694      	mov	ip, r2
 8000f4a:	e741      	b.n	8000dd0 <__aeabi_dadd+0x64>
 8000f4c:	4c63      	ldr	r4, [pc, #396]	; (80010dc <__aeabi_dadd+0x370>)
 8000f4e:	1c77      	adds	r7, r6, #1
 8000f50:	4227      	tst	r7, r4
 8000f52:	d000      	beq.n	8000f56 <__aeabi_dadd+0x1ea>
 8000f54:	e0c4      	b.n	80010e0 <__aeabi_dadd+0x374>
 8000f56:	0004      	movs	r4, r0
 8000f58:	431c      	orrs	r4, r3
 8000f5a:	2e00      	cmp	r6, #0
 8000f5c:	d000      	beq.n	8000f60 <__aeabi_dadd+0x1f4>
 8000f5e:	e169      	b.n	8001234 <__aeabi_dadd+0x4c8>
 8000f60:	2c00      	cmp	r4, #0
 8000f62:	d100      	bne.n	8000f66 <__aeabi_dadd+0x1fa>
 8000f64:	e1bf      	b.n	80012e6 <__aeabi_dadd+0x57a>
 8000f66:	4644      	mov	r4, r8
 8000f68:	430c      	orrs	r4, r1
 8000f6a:	d000      	beq.n	8000f6e <__aeabi_dadd+0x202>
 8000f6c:	e1d0      	b.n	8001310 <__aeabi_dadd+0x5a4>
 8000f6e:	0742      	lsls	r2, r0, #29
 8000f70:	08db      	lsrs	r3, r3, #3
 8000f72:	4313      	orrs	r3, r2
 8000f74:	08c0      	lsrs	r0, r0, #3
 8000f76:	e029      	b.n	8000fcc <__aeabi_dadd+0x260>
 8000f78:	003a      	movs	r2, r7
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	d100      	bne.n	8000f80 <__aeabi_dadd+0x214>
 8000f7e:	e170      	b.n	8001262 <__aeabi_dadd+0x4f6>
 8000f80:	4662      	mov	r2, ip
 8000f82:	4664      	mov	r4, ip
 8000f84:	3a01      	subs	r2, #1
 8000f86:	2c01      	cmp	r4, #1
 8000f88:	d100      	bne.n	8000f8c <__aeabi_dadd+0x220>
 8000f8a:	e0e0      	b.n	800114e <__aeabi_dadd+0x3e2>
 8000f8c:	4c51      	ldr	r4, [pc, #324]	; (80010d4 <__aeabi_dadd+0x368>)
 8000f8e:	45a4      	cmp	ip, r4
 8000f90:	d100      	bne.n	8000f94 <__aeabi_dadd+0x228>
 8000f92:	e161      	b.n	8001258 <__aeabi_dadd+0x4ec>
 8000f94:	4694      	mov	ip, r2
 8000f96:	e7b4      	b.n	8000f02 <__aeabi_dadd+0x196>
 8000f98:	003a      	movs	r2, r7
 8000f9a:	391f      	subs	r1, #31
 8000f9c:	40ca      	lsrs	r2, r1
 8000f9e:	0011      	movs	r1, r2
 8000fa0:	2b20      	cmp	r3, #32
 8000fa2:	d003      	beq.n	8000fac <__aeabi_dadd+0x240>
 8000fa4:	2240      	movs	r2, #64	; 0x40
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	409f      	lsls	r7, r3
 8000faa:	433c      	orrs	r4, r7
 8000fac:	1e63      	subs	r3, r4, #1
 8000fae:	419c      	sbcs	r4, r3
 8000fb0:	2700      	movs	r7, #0
 8000fb2:	2600      	movs	r6, #0
 8000fb4:	430c      	orrs	r4, r1
 8000fb6:	0763      	lsls	r3, r4, #29
 8000fb8:	d000      	beq.n	8000fbc <__aeabi_dadd+0x250>
 8000fba:	e753      	b.n	8000e64 <__aeabi_dadd+0xf8>
 8000fbc:	46b4      	mov	ip, r6
 8000fbe:	08e4      	lsrs	r4, r4, #3
 8000fc0:	077b      	lsls	r3, r7, #29
 8000fc2:	4323      	orrs	r3, r4
 8000fc4:	08f8      	lsrs	r0, r7, #3
 8000fc6:	4a43      	ldr	r2, [pc, #268]	; (80010d4 <__aeabi_dadd+0x368>)
 8000fc8:	4594      	cmp	ip, r2
 8000fca:	d01d      	beq.n	8001008 <__aeabi_dadd+0x29c>
 8000fcc:	4662      	mov	r2, ip
 8000fce:	0307      	lsls	r7, r0, #12
 8000fd0:	0552      	lsls	r2, r2, #21
 8000fd2:	0b3f      	lsrs	r7, r7, #12
 8000fd4:	0d52      	lsrs	r2, r2, #21
 8000fd6:	e760      	b.n	8000e9a <__aeabi_dadd+0x12e>
 8000fd8:	4644      	mov	r4, r8
 8000fda:	430c      	orrs	r4, r1
 8000fdc:	1e62      	subs	r2, r4, #1
 8000fde:	4194      	sbcs	r4, r2
 8000fe0:	18e4      	adds	r4, r4, r3
 8000fe2:	429c      	cmp	r4, r3
 8000fe4:	419b      	sbcs	r3, r3
 8000fe6:	425f      	negs	r7, r3
 8000fe8:	183f      	adds	r7, r7, r0
 8000fea:	023b      	lsls	r3, r7, #8
 8000fec:	d5e3      	bpl.n	8000fb6 <__aeabi_dadd+0x24a>
 8000fee:	4b39      	ldr	r3, [pc, #228]	; (80010d4 <__aeabi_dadd+0x368>)
 8000ff0:	3601      	adds	r6, #1
 8000ff2:	429e      	cmp	r6, r3
 8000ff4:	d000      	beq.n	8000ff8 <__aeabi_dadd+0x28c>
 8000ff6:	e0b5      	b.n	8001164 <__aeabi_dadd+0x3f8>
 8000ff8:	0032      	movs	r2, r6
 8000ffa:	2700      	movs	r7, #0
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	e74c      	b.n	8000e9a <__aeabi_dadd+0x12e>
 8001000:	0742      	lsls	r2, r0, #29
 8001002:	08db      	lsrs	r3, r3, #3
 8001004:	4313      	orrs	r3, r2
 8001006:	08c0      	lsrs	r0, r0, #3
 8001008:	001a      	movs	r2, r3
 800100a:	4302      	orrs	r2, r0
 800100c:	d100      	bne.n	8001010 <__aeabi_dadd+0x2a4>
 800100e:	e1e1      	b.n	80013d4 <__aeabi_dadd+0x668>
 8001010:	2780      	movs	r7, #128	; 0x80
 8001012:	033f      	lsls	r7, r7, #12
 8001014:	4307      	orrs	r7, r0
 8001016:	033f      	lsls	r7, r7, #12
 8001018:	4a2e      	ldr	r2, [pc, #184]	; (80010d4 <__aeabi_dadd+0x368>)
 800101a:	0b3f      	lsrs	r7, r7, #12
 800101c:	e73d      	b.n	8000e9a <__aeabi_dadd+0x12e>
 800101e:	0020      	movs	r0, r4
 8001020:	f001 f918 	bl	8002254 <__clzsi2>
 8001024:	0001      	movs	r1, r0
 8001026:	3118      	adds	r1, #24
 8001028:	291f      	cmp	r1, #31
 800102a:	dc00      	bgt.n	800102e <__aeabi_dadd+0x2c2>
 800102c:	e6fc      	b.n	8000e28 <__aeabi_dadd+0xbc>
 800102e:	3808      	subs	r0, #8
 8001030:	4084      	lsls	r4, r0
 8001032:	0027      	movs	r7, r4
 8001034:	2400      	movs	r4, #0
 8001036:	42b1      	cmp	r1, r6
 8001038:	db00      	blt.n	800103c <__aeabi_dadd+0x2d0>
 800103a:	e6ff      	b.n	8000e3c <__aeabi_dadd+0xd0>
 800103c:	4a26      	ldr	r2, [pc, #152]	; (80010d8 <__aeabi_dadd+0x36c>)
 800103e:	1a76      	subs	r6, r6, r1
 8001040:	4017      	ands	r7, r2
 8001042:	e70d      	b.n	8000e60 <__aeabi_dadd+0xf4>
 8001044:	2a00      	cmp	r2, #0
 8001046:	d02f      	beq.n	80010a8 <__aeabi_dadd+0x33c>
 8001048:	464a      	mov	r2, r9
 800104a:	1b92      	subs	r2, r2, r6
 800104c:	4694      	mov	ip, r2
 800104e:	2e00      	cmp	r6, #0
 8001050:	d100      	bne.n	8001054 <__aeabi_dadd+0x2e8>
 8001052:	e0ad      	b.n	80011b0 <__aeabi_dadd+0x444>
 8001054:	4a1f      	ldr	r2, [pc, #124]	; (80010d4 <__aeabi_dadd+0x368>)
 8001056:	4591      	cmp	r9, r2
 8001058:	d100      	bne.n	800105c <__aeabi_dadd+0x2f0>
 800105a:	e10f      	b.n	800127c <__aeabi_dadd+0x510>
 800105c:	2280      	movs	r2, #128	; 0x80
 800105e:	0412      	lsls	r2, r2, #16
 8001060:	4310      	orrs	r0, r2
 8001062:	4662      	mov	r2, ip
 8001064:	2a38      	cmp	r2, #56	; 0x38
 8001066:	dd00      	ble.n	800106a <__aeabi_dadd+0x2fe>
 8001068:	e10f      	b.n	800128a <__aeabi_dadd+0x51e>
 800106a:	2a1f      	cmp	r2, #31
 800106c:	dd00      	ble.n	8001070 <__aeabi_dadd+0x304>
 800106e:	e180      	b.n	8001372 <__aeabi_dadd+0x606>
 8001070:	4664      	mov	r4, ip
 8001072:	2220      	movs	r2, #32
 8001074:	001e      	movs	r6, r3
 8001076:	1b12      	subs	r2, r2, r4
 8001078:	4667      	mov	r7, ip
 800107a:	0004      	movs	r4, r0
 800107c:	4093      	lsls	r3, r2
 800107e:	4094      	lsls	r4, r2
 8001080:	40fe      	lsrs	r6, r7
 8001082:	1e5a      	subs	r2, r3, #1
 8001084:	4193      	sbcs	r3, r2
 8001086:	40f8      	lsrs	r0, r7
 8001088:	4334      	orrs	r4, r6
 800108a:	431c      	orrs	r4, r3
 800108c:	4480      	add	r8, r0
 800108e:	1864      	adds	r4, r4, r1
 8001090:	428c      	cmp	r4, r1
 8001092:	41bf      	sbcs	r7, r7
 8001094:	427f      	negs	r7, r7
 8001096:	464e      	mov	r6, r9
 8001098:	4447      	add	r7, r8
 800109a:	e7a6      	b.n	8000fea <__aeabi_dadd+0x27e>
 800109c:	4642      	mov	r2, r8
 800109e:	430a      	orrs	r2, r1
 80010a0:	0011      	movs	r1, r2
 80010a2:	1e4a      	subs	r2, r1, #1
 80010a4:	4191      	sbcs	r1, r2
 80010a6:	e6ad      	b.n	8000e04 <__aeabi_dadd+0x98>
 80010a8:	4c0c      	ldr	r4, [pc, #48]	; (80010dc <__aeabi_dadd+0x370>)
 80010aa:	1c72      	adds	r2, r6, #1
 80010ac:	4222      	tst	r2, r4
 80010ae:	d000      	beq.n	80010b2 <__aeabi_dadd+0x346>
 80010b0:	e0a1      	b.n	80011f6 <__aeabi_dadd+0x48a>
 80010b2:	0002      	movs	r2, r0
 80010b4:	431a      	orrs	r2, r3
 80010b6:	2e00      	cmp	r6, #0
 80010b8:	d000      	beq.n	80010bc <__aeabi_dadd+0x350>
 80010ba:	e0fa      	b.n	80012b2 <__aeabi_dadd+0x546>
 80010bc:	2a00      	cmp	r2, #0
 80010be:	d100      	bne.n	80010c2 <__aeabi_dadd+0x356>
 80010c0:	e145      	b.n	800134e <__aeabi_dadd+0x5e2>
 80010c2:	003a      	movs	r2, r7
 80010c4:	430a      	orrs	r2, r1
 80010c6:	d000      	beq.n	80010ca <__aeabi_dadd+0x35e>
 80010c8:	e146      	b.n	8001358 <__aeabi_dadd+0x5ec>
 80010ca:	0742      	lsls	r2, r0, #29
 80010cc:	08db      	lsrs	r3, r3, #3
 80010ce:	4313      	orrs	r3, r2
 80010d0:	08c0      	lsrs	r0, r0, #3
 80010d2:	e77b      	b.n	8000fcc <__aeabi_dadd+0x260>
 80010d4:	000007ff 	.word	0x000007ff
 80010d8:	ff7fffff 	.word	0xff7fffff
 80010dc:	000007fe 	.word	0x000007fe
 80010e0:	4647      	mov	r7, r8
 80010e2:	1a5c      	subs	r4, r3, r1
 80010e4:	1bc2      	subs	r2, r0, r7
 80010e6:	42a3      	cmp	r3, r4
 80010e8:	41bf      	sbcs	r7, r7
 80010ea:	427f      	negs	r7, r7
 80010ec:	46b9      	mov	r9, r7
 80010ee:	0017      	movs	r7, r2
 80010f0:	464a      	mov	r2, r9
 80010f2:	1abf      	subs	r7, r7, r2
 80010f4:	023a      	lsls	r2, r7, #8
 80010f6:	d500      	bpl.n	80010fa <__aeabi_dadd+0x38e>
 80010f8:	e08d      	b.n	8001216 <__aeabi_dadd+0x4aa>
 80010fa:	0023      	movs	r3, r4
 80010fc:	433b      	orrs	r3, r7
 80010fe:	d000      	beq.n	8001102 <__aeabi_dadd+0x396>
 8001100:	e68a      	b.n	8000e18 <__aeabi_dadd+0xac>
 8001102:	2000      	movs	r0, #0
 8001104:	2500      	movs	r5, #0
 8001106:	e761      	b.n	8000fcc <__aeabi_dadd+0x260>
 8001108:	4cb4      	ldr	r4, [pc, #720]	; (80013dc <__aeabi_dadd+0x670>)
 800110a:	45a1      	cmp	r9, r4
 800110c:	d100      	bne.n	8001110 <__aeabi_dadd+0x3a4>
 800110e:	e0ad      	b.n	800126c <__aeabi_dadd+0x500>
 8001110:	2480      	movs	r4, #128	; 0x80
 8001112:	0424      	lsls	r4, r4, #16
 8001114:	4320      	orrs	r0, r4
 8001116:	4664      	mov	r4, ip
 8001118:	2c38      	cmp	r4, #56	; 0x38
 800111a:	dc3d      	bgt.n	8001198 <__aeabi_dadd+0x42c>
 800111c:	4662      	mov	r2, ip
 800111e:	2c1f      	cmp	r4, #31
 8001120:	dd00      	ble.n	8001124 <__aeabi_dadd+0x3b8>
 8001122:	e0b7      	b.n	8001294 <__aeabi_dadd+0x528>
 8001124:	2520      	movs	r5, #32
 8001126:	001e      	movs	r6, r3
 8001128:	1b2d      	subs	r5, r5, r4
 800112a:	0004      	movs	r4, r0
 800112c:	40ab      	lsls	r3, r5
 800112e:	40ac      	lsls	r4, r5
 8001130:	40d6      	lsrs	r6, r2
 8001132:	40d0      	lsrs	r0, r2
 8001134:	4642      	mov	r2, r8
 8001136:	1e5d      	subs	r5, r3, #1
 8001138:	41ab      	sbcs	r3, r5
 800113a:	4334      	orrs	r4, r6
 800113c:	1a12      	subs	r2, r2, r0
 800113e:	4690      	mov	r8, r2
 8001140:	4323      	orrs	r3, r4
 8001142:	e02c      	b.n	800119e <__aeabi_dadd+0x432>
 8001144:	0742      	lsls	r2, r0, #29
 8001146:	08db      	lsrs	r3, r3, #3
 8001148:	4313      	orrs	r3, r2
 800114a:	08c0      	lsrs	r0, r0, #3
 800114c:	e73b      	b.n	8000fc6 <__aeabi_dadd+0x25a>
 800114e:	185c      	adds	r4, r3, r1
 8001150:	429c      	cmp	r4, r3
 8001152:	419b      	sbcs	r3, r3
 8001154:	4440      	add	r0, r8
 8001156:	425b      	negs	r3, r3
 8001158:	18c7      	adds	r7, r0, r3
 800115a:	2601      	movs	r6, #1
 800115c:	023b      	lsls	r3, r7, #8
 800115e:	d400      	bmi.n	8001162 <__aeabi_dadd+0x3f6>
 8001160:	e729      	b.n	8000fb6 <__aeabi_dadd+0x24a>
 8001162:	2602      	movs	r6, #2
 8001164:	4a9e      	ldr	r2, [pc, #632]	; (80013e0 <__aeabi_dadd+0x674>)
 8001166:	0863      	lsrs	r3, r4, #1
 8001168:	4017      	ands	r7, r2
 800116a:	2201      	movs	r2, #1
 800116c:	4014      	ands	r4, r2
 800116e:	431c      	orrs	r4, r3
 8001170:	07fb      	lsls	r3, r7, #31
 8001172:	431c      	orrs	r4, r3
 8001174:	087f      	lsrs	r7, r7, #1
 8001176:	e673      	b.n	8000e60 <__aeabi_dadd+0xf4>
 8001178:	4644      	mov	r4, r8
 800117a:	3a20      	subs	r2, #32
 800117c:	40d4      	lsrs	r4, r2
 800117e:	4662      	mov	r2, ip
 8001180:	2a20      	cmp	r2, #32
 8001182:	d005      	beq.n	8001190 <__aeabi_dadd+0x424>
 8001184:	4667      	mov	r7, ip
 8001186:	2240      	movs	r2, #64	; 0x40
 8001188:	1bd2      	subs	r2, r2, r7
 800118a:	4647      	mov	r7, r8
 800118c:	4097      	lsls	r7, r2
 800118e:	4339      	orrs	r1, r7
 8001190:	1e4a      	subs	r2, r1, #1
 8001192:	4191      	sbcs	r1, r2
 8001194:	4321      	orrs	r1, r4
 8001196:	e635      	b.n	8000e04 <__aeabi_dadd+0x98>
 8001198:	4303      	orrs	r3, r0
 800119a:	1e58      	subs	r0, r3, #1
 800119c:	4183      	sbcs	r3, r0
 800119e:	1acc      	subs	r4, r1, r3
 80011a0:	42a1      	cmp	r1, r4
 80011a2:	41bf      	sbcs	r7, r7
 80011a4:	4643      	mov	r3, r8
 80011a6:	427f      	negs	r7, r7
 80011a8:	4655      	mov	r5, sl
 80011aa:	464e      	mov	r6, r9
 80011ac:	1bdf      	subs	r7, r3, r7
 80011ae:	e62e      	b.n	8000e0e <__aeabi_dadd+0xa2>
 80011b0:	0002      	movs	r2, r0
 80011b2:	431a      	orrs	r2, r3
 80011b4:	d100      	bne.n	80011b8 <__aeabi_dadd+0x44c>
 80011b6:	e0bd      	b.n	8001334 <__aeabi_dadd+0x5c8>
 80011b8:	4662      	mov	r2, ip
 80011ba:	4664      	mov	r4, ip
 80011bc:	3a01      	subs	r2, #1
 80011be:	2c01      	cmp	r4, #1
 80011c0:	d100      	bne.n	80011c4 <__aeabi_dadd+0x458>
 80011c2:	e0e5      	b.n	8001390 <__aeabi_dadd+0x624>
 80011c4:	4c85      	ldr	r4, [pc, #532]	; (80013dc <__aeabi_dadd+0x670>)
 80011c6:	45a4      	cmp	ip, r4
 80011c8:	d058      	beq.n	800127c <__aeabi_dadd+0x510>
 80011ca:	4694      	mov	ip, r2
 80011cc:	e749      	b.n	8001062 <__aeabi_dadd+0x2f6>
 80011ce:	4664      	mov	r4, ip
 80011d0:	2220      	movs	r2, #32
 80011d2:	1b12      	subs	r2, r2, r4
 80011d4:	4644      	mov	r4, r8
 80011d6:	4094      	lsls	r4, r2
 80011d8:	000f      	movs	r7, r1
 80011da:	46a1      	mov	r9, r4
 80011dc:	4664      	mov	r4, ip
 80011de:	4091      	lsls	r1, r2
 80011e0:	40e7      	lsrs	r7, r4
 80011e2:	464c      	mov	r4, r9
 80011e4:	1e4a      	subs	r2, r1, #1
 80011e6:	4191      	sbcs	r1, r2
 80011e8:	433c      	orrs	r4, r7
 80011ea:	4642      	mov	r2, r8
 80011ec:	430c      	orrs	r4, r1
 80011ee:	4661      	mov	r1, ip
 80011f0:	40ca      	lsrs	r2, r1
 80011f2:	1880      	adds	r0, r0, r2
 80011f4:	e6f4      	b.n	8000fe0 <__aeabi_dadd+0x274>
 80011f6:	4c79      	ldr	r4, [pc, #484]	; (80013dc <__aeabi_dadd+0x670>)
 80011f8:	42a2      	cmp	r2, r4
 80011fa:	d100      	bne.n	80011fe <__aeabi_dadd+0x492>
 80011fc:	e6fd      	b.n	8000ffa <__aeabi_dadd+0x28e>
 80011fe:	1859      	adds	r1, r3, r1
 8001200:	4299      	cmp	r1, r3
 8001202:	419b      	sbcs	r3, r3
 8001204:	4440      	add	r0, r8
 8001206:	425f      	negs	r7, r3
 8001208:	19c7      	adds	r7, r0, r7
 800120a:	07fc      	lsls	r4, r7, #31
 800120c:	0849      	lsrs	r1, r1, #1
 800120e:	0016      	movs	r6, r2
 8001210:	430c      	orrs	r4, r1
 8001212:	087f      	lsrs	r7, r7, #1
 8001214:	e6cf      	b.n	8000fb6 <__aeabi_dadd+0x24a>
 8001216:	1acc      	subs	r4, r1, r3
 8001218:	42a1      	cmp	r1, r4
 800121a:	41bf      	sbcs	r7, r7
 800121c:	4643      	mov	r3, r8
 800121e:	427f      	negs	r7, r7
 8001220:	1a18      	subs	r0, r3, r0
 8001222:	4655      	mov	r5, sl
 8001224:	1bc7      	subs	r7, r0, r7
 8001226:	e5f7      	b.n	8000e18 <__aeabi_dadd+0xac>
 8001228:	08c9      	lsrs	r1, r1, #3
 800122a:	077b      	lsls	r3, r7, #29
 800122c:	4655      	mov	r5, sl
 800122e:	430b      	orrs	r3, r1
 8001230:	08f8      	lsrs	r0, r7, #3
 8001232:	e6c8      	b.n	8000fc6 <__aeabi_dadd+0x25a>
 8001234:	2c00      	cmp	r4, #0
 8001236:	d000      	beq.n	800123a <__aeabi_dadd+0x4ce>
 8001238:	e081      	b.n	800133e <__aeabi_dadd+0x5d2>
 800123a:	4643      	mov	r3, r8
 800123c:	430b      	orrs	r3, r1
 800123e:	d115      	bne.n	800126c <__aeabi_dadd+0x500>
 8001240:	2080      	movs	r0, #128	; 0x80
 8001242:	2500      	movs	r5, #0
 8001244:	0300      	lsls	r0, r0, #12
 8001246:	e6e3      	b.n	8001010 <__aeabi_dadd+0x2a4>
 8001248:	1a5c      	subs	r4, r3, r1
 800124a:	42a3      	cmp	r3, r4
 800124c:	419b      	sbcs	r3, r3
 800124e:	1bc7      	subs	r7, r0, r7
 8001250:	425b      	negs	r3, r3
 8001252:	2601      	movs	r6, #1
 8001254:	1aff      	subs	r7, r7, r3
 8001256:	e5da      	b.n	8000e0e <__aeabi_dadd+0xa2>
 8001258:	0742      	lsls	r2, r0, #29
 800125a:	08db      	lsrs	r3, r3, #3
 800125c:	4313      	orrs	r3, r2
 800125e:	08c0      	lsrs	r0, r0, #3
 8001260:	e6d2      	b.n	8001008 <__aeabi_dadd+0x29c>
 8001262:	0742      	lsls	r2, r0, #29
 8001264:	08db      	lsrs	r3, r3, #3
 8001266:	4313      	orrs	r3, r2
 8001268:	08c0      	lsrs	r0, r0, #3
 800126a:	e6ac      	b.n	8000fc6 <__aeabi_dadd+0x25a>
 800126c:	4643      	mov	r3, r8
 800126e:	4642      	mov	r2, r8
 8001270:	08c9      	lsrs	r1, r1, #3
 8001272:	075b      	lsls	r3, r3, #29
 8001274:	4655      	mov	r5, sl
 8001276:	430b      	orrs	r3, r1
 8001278:	08d0      	lsrs	r0, r2, #3
 800127a:	e6c5      	b.n	8001008 <__aeabi_dadd+0x29c>
 800127c:	4643      	mov	r3, r8
 800127e:	4642      	mov	r2, r8
 8001280:	075b      	lsls	r3, r3, #29
 8001282:	08c9      	lsrs	r1, r1, #3
 8001284:	430b      	orrs	r3, r1
 8001286:	08d0      	lsrs	r0, r2, #3
 8001288:	e6be      	b.n	8001008 <__aeabi_dadd+0x29c>
 800128a:	4303      	orrs	r3, r0
 800128c:	001c      	movs	r4, r3
 800128e:	1e63      	subs	r3, r4, #1
 8001290:	419c      	sbcs	r4, r3
 8001292:	e6fc      	b.n	800108e <__aeabi_dadd+0x322>
 8001294:	0002      	movs	r2, r0
 8001296:	3c20      	subs	r4, #32
 8001298:	40e2      	lsrs	r2, r4
 800129a:	0014      	movs	r4, r2
 800129c:	4662      	mov	r2, ip
 800129e:	2a20      	cmp	r2, #32
 80012a0:	d003      	beq.n	80012aa <__aeabi_dadd+0x53e>
 80012a2:	2540      	movs	r5, #64	; 0x40
 80012a4:	1aad      	subs	r5, r5, r2
 80012a6:	40a8      	lsls	r0, r5
 80012a8:	4303      	orrs	r3, r0
 80012aa:	1e58      	subs	r0, r3, #1
 80012ac:	4183      	sbcs	r3, r0
 80012ae:	4323      	orrs	r3, r4
 80012b0:	e775      	b.n	800119e <__aeabi_dadd+0x432>
 80012b2:	2a00      	cmp	r2, #0
 80012b4:	d0e2      	beq.n	800127c <__aeabi_dadd+0x510>
 80012b6:	003a      	movs	r2, r7
 80012b8:	430a      	orrs	r2, r1
 80012ba:	d0cd      	beq.n	8001258 <__aeabi_dadd+0x4ec>
 80012bc:	0742      	lsls	r2, r0, #29
 80012be:	08db      	lsrs	r3, r3, #3
 80012c0:	4313      	orrs	r3, r2
 80012c2:	2280      	movs	r2, #128	; 0x80
 80012c4:	08c0      	lsrs	r0, r0, #3
 80012c6:	0312      	lsls	r2, r2, #12
 80012c8:	4210      	tst	r0, r2
 80012ca:	d006      	beq.n	80012da <__aeabi_dadd+0x56e>
 80012cc:	08fc      	lsrs	r4, r7, #3
 80012ce:	4214      	tst	r4, r2
 80012d0:	d103      	bne.n	80012da <__aeabi_dadd+0x56e>
 80012d2:	0020      	movs	r0, r4
 80012d4:	08cb      	lsrs	r3, r1, #3
 80012d6:	077a      	lsls	r2, r7, #29
 80012d8:	4313      	orrs	r3, r2
 80012da:	0f5a      	lsrs	r2, r3, #29
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	0752      	lsls	r2, r2, #29
 80012e0:	08db      	lsrs	r3, r3, #3
 80012e2:	4313      	orrs	r3, r2
 80012e4:	e690      	b.n	8001008 <__aeabi_dadd+0x29c>
 80012e6:	4643      	mov	r3, r8
 80012e8:	430b      	orrs	r3, r1
 80012ea:	d100      	bne.n	80012ee <__aeabi_dadd+0x582>
 80012ec:	e709      	b.n	8001102 <__aeabi_dadd+0x396>
 80012ee:	4643      	mov	r3, r8
 80012f0:	4642      	mov	r2, r8
 80012f2:	08c9      	lsrs	r1, r1, #3
 80012f4:	075b      	lsls	r3, r3, #29
 80012f6:	4655      	mov	r5, sl
 80012f8:	430b      	orrs	r3, r1
 80012fa:	08d0      	lsrs	r0, r2, #3
 80012fc:	e666      	b.n	8000fcc <__aeabi_dadd+0x260>
 80012fe:	1acc      	subs	r4, r1, r3
 8001300:	42a1      	cmp	r1, r4
 8001302:	4189      	sbcs	r1, r1
 8001304:	1a3f      	subs	r7, r7, r0
 8001306:	4249      	negs	r1, r1
 8001308:	4655      	mov	r5, sl
 800130a:	2601      	movs	r6, #1
 800130c:	1a7f      	subs	r7, r7, r1
 800130e:	e57e      	b.n	8000e0e <__aeabi_dadd+0xa2>
 8001310:	4642      	mov	r2, r8
 8001312:	1a5c      	subs	r4, r3, r1
 8001314:	1a87      	subs	r7, r0, r2
 8001316:	42a3      	cmp	r3, r4
 8001318:	4192      	sbcs	r2, r2
 800131a:	4252      	negs	r2, r2
 800131c:	1abf      	subs	r7, r7, r2
 800131e:	023a      	lsls	r2, r7, #8
 8001320:	d53d      	bpl.n	800139e <__aeabi_dadd+0x632>
 8001322:	1acc      	subs	r4, r1, r3
 8001324:	42a1      	cmp	r1, r4
 8001326:	4189      	sbcs	r1, r1
 8001328:	4643      	mov	r3, r8
 800132a:	4249      	negs	r1, r1
 800132c:	1a1f      	subs	r7, r3, r0
 800132e:	4655      	mov	r5, sl
 8001330:	1a7f      	subs	r7, r7, r1
 8001332:	e595      	b.n	8000e60 <__aeabi_dadd+0xf4>
 8001334:	077b      	lsls	r3, r7, #29
 8001336:	08c9      	lsrs	r1, r1, #3
 8001338:	430b      	orrs	r3, r1
 800133a:	08f8      	lsrs	r0, r7, #3
 800133c:	e643      	b.n	8000fc6 <__aeabi_dadd+0x25a>
 800133e:	4644      	mov	r4, r8
 8001340:	08db      	lsrs	r3, r3, #3
 8001342:	430c      	orrs	r4, r1
 8001344:	d130      	bne.n	80013a8 <__aeabi_dadd+0x63c>
 8001346:	0742      	lsls	r2, r0, #29
 8001348:	4313      	orrs	r3, r2
 800134a:	08c0      	lsrs	r0, r0, #3
 800134c:	e65c      	b.n	8001008 <__aeabi_dadd+0x29c>
 800134e:	077b      	lsls	r3, r7, #29
 8001350:	08c9      	lsrs	r1, r1, #3
 8001352:	430b      	orrs	r3, r1
 8001354:	08f8      	lsrs	r0, r7, #3
 8001356:	e639      	b.n	8000fcc <__aeabi_dadd+0x260>
 8001358:	185c      	adds	r4, r3, r1
 800135a:	429c      	cmp	r4, r3
 800135c:	419b      	sbcs	r3, r3
 800135e:	4440      	add	r0, r8
 8001360:	425b      	negs	r3, r3
 8001362:	18c7      	adds	r7, r0, r3
 8001364:	023b      	lsls	r3, r7, #8
 8001366:	d400      	bmi.n	800136a <__aeabi_dadd+0x5fe>
 8001368:	e625      	b.n	8000fb6 <__aeabi_dadd+0x24a>
 800136a:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <__aeabi_dadd+0x674>)
 800136c:	2601      	movs	r6, #1
 800136e:	401f      	ands	r7, r3
 8001370:	e621      	b.n	8000fb6 <__aeabi_dadd+0x24a>
 8001372:	0004      	movs	r4, r0
 8001374:	3a20      	subs	r2, #32
 8001376:	40d4      	lsrs	r4, r2
 8001378:	4662      	mov	r2, ip
 800137a:	2a20      	cmp	r2, #32
 800137c:	d004      	beq.n	8001388 <__aeabi_dadd+0x61c>
 800137e:	2240      	movs	r2, #64	; 0x40
 8001380:	4666      	mov	r6, ip
 8001382:	1b92      	subs	r2, r2, r6
 8001384:	4090      	lsls	r0, r2
 8001386:	4303      	orrs	r3, r0
 8001388:	1e5a      	subs	r2, r3, #1
 800138a:	4193      	sbcs	r3, r2
 800138c:	431c      	orrs	r4, r3
 800138e:	e67e      	b.n	800108e <__aeabi_dadd+0x322>
 8001390:	185c      	adds	r4, r3, r1
 8001392:	428c      	cmp	r4, r1
 8001394:	4189      	sbcs	r1, r1
 8001396:	4440      	add	r0, r8
 8001398:	4249      	negs	r1, r1
 800139a:	1847      	adds	r7, r0, r1
 800139c:	e6dd      	b.n	800115a <__aeabi_dadd+0x3ee>
 800139e:	0023      	movs	r3, r4
 80013a0:	433b      	orrs	r3, r7
 80013a2:	d100      	bne.n	80013a6 <__aeabi_dadd+0x63a>
 80013a4:	e6ad      	b.n	8001102 <__aeabi_dadd+0x396>
 80013a6:	e606      	b.n	8000fb6 <__aeabi_dadd+0x24a>
 80013a8:	0744      	lsls	r4, r0, #29
 80013aa:	4323      	orrs	r3, r4
 80013ac:	2480      	movs	r4, #128	; 0x80
 80013ae:	08c0      	lsrs	r0, r0, #3
 80013b0:	0324      	lsls	r4, r4, #12
 80013b2:	4220      	tst	r0, r4
 80013b4:	d008      	beq.n	80013c8 <__aeabi_dadd+0x65c>
 80013b6:	4642      	mov	r2, r8
 80013b8:	08d6      	lsrs	r6, r2, #3
 80013ba:	4226      	tst	r6, r4
 80013bc:	d104      	bne.n	80013c8 <__aeabi_dadd+0x65c>
 80013be:	4655      	mov	r5, sl
 80013c0:	0030      	movs	r0, r6
 80013c2:	08cb      	lsrs	r3, r1, #3
 80013c4:	0751      	lsls	r1, r2, #29
 80013c6:	430b      	orrs	r3, r1
 80013c8:	0f5a      	lsrs	r2, r3, #29
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	08db      	lsrs	r3, r3, #3
 80013ce:	0752      	lsls	r2, r2, #29
 80013d0:	4313      	orrs	r3, r2
 80013d2:	e619      	b.n	8001008 <__aeabi_dadd+0x29c>
 80013d4:	2300      	movs	r3, #0
 80013d6:	4a01      	ldr	r2, [pc, #4]	; (80013dc <__aeabi_dadd+0x670>)
 80013d8:	001f      	movs	r7, r3
 80013da:	e55e      	b.n	8000e9a <__aeabi_dadd+0x12e>
 80013dc:	000007ff 	.word	0x000007ff
 80013e0:	ff7fffff 	.word	0xff7fffff

080013e4 <__aeabi_dmul>:
 80013e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013e6:	4657      	mov	r7, sl
 80013e8:	464e      	mov	r6, r9
 80013ea:	4645      	mov	r5, r8
 80013ec:	46de      	mov	lr, fp
 80013ee:	b5e0      	push	{r5, r6, r7, lr}
 80013f0:	4698      	mov	r8, r3
 80013f2:	030c      	lsls	r4, r1, #12
 80013f4:	004b      	lsls	r3, r1, #1
 80013f6:	0006      	movs	r6, r0
 80013f8:	4692      	mov	sl, r2
 80013fa:	b087      	sub	sp, #28
 80013fc:	0b24      	lsrs	r4, r4, #12
 80013fe:	0d5b      	lsrs	r3, r3, #21
 8001400:	0fcf      	lsrs	r7, r1, #31
 8001402:	2b00      	cmp	r3, #0
 8001404:	d100      	bne.n	8001408 <__aeabi_dmul+0x24>
 8001406:	e15c      	b.n	80016c2 <__aeabi_dmul+0x2de>
 8001408:	4ad9      	ldr	r2, [pc, #868]	; (8001770 <__aeabi_dmul+0x38c>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d100      	bne.n	8001410 <__aeabi_dmul+0x2c>
 800140e:	e175      	b.n	80016fc <__aeabi_dmul+0x318>
 8001410:	0f42      	lsrs	r2, r0, #29
 8001412:	00e4      	lsls	r4, r4, #3
 8001414:	4314      	orrs	r4, r2
 8001416:	2280      	movs	r2, #128	; 0x80
 8001418:	0412      	lsls	r2, r2, #16
 800141a:	4314      	orrs	r4, r2
 800141c:	4ad5      	ldr	r2, [pc, #852]	; (8001774 <__aeabi_dmul+0x390>)
 800141e:	00c5      	lsls	r5, r0, #3
 8001420:	4694      	mov	ip, r2
 8001422:	4463      	add	r3, ip
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	2300      	movs	r3, #0
 8001428:	4699      	mov	r9, r3
 800142a:	469b      	mov	fp, r3
 800142c:	4643      	mov	r3, r8
 800142e:	4642      	mov	r2, r8
 8001430:	031e      	lsls	r6, r3, #12
 8001432:	0fd2      	lsrs	r2, r2, #31
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	4650      	mov	r0, sl
 8001438:	4690      	mov	r8, r2
 800143a:	0b36      	lsrs	r6, r6, #12
 800143c:	0d5b      	lsrs	r3, r3, #21
 800143e:	d100      	bne.n	8001442 <__aeabi_dmul+0x5e>
 8001440:	e120      	b.n	8001684 <__aeabi_dmul+0x2a0>
 8001442:	4acb      	ldr	r2, [pc, #812]	; (8001770 <__aeabi_dmul+0x38c>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d100      	bne.n	800144a <__aeabi_dmul+0x66>
 8001448:	e162      	b.n	8001710 <__aeabi_dmul+0x32c>
 800144a:	49ca      	ldr	r1, [pc, #808]	; (8001774 <__aeabi_dmul+0x390>)
 800144c:	0f42      	lsrs	r2, r0, #29
 800144e:	468c      	mov	ip, r1
 8001450:	9900      	ldr	r1, [sp, #0]
 8001452:	4463      	add	r3, ip
 8001454:	00f6      	lsls	r6, r6, #3
 8001456:	468c      	mov	ip, r1
 8001458:	4316      	orrs	r6, r2
 800145a:	2280      	movs	r2, #128	; 0x80
 800145c:	449c      	add	ip, r3
 800145e:	0412      	lsls	r2, r2, #16
 8001460:	4663      	mov	r3, ip
 8001462:	4316      	orrs	r6, r2
 8001464:	00c2      	lsls	r2, r0, #3
 8001466:	2000      	movs	r0, #0
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	9900      	ldr	r1, [sp, #0]
 800146c:	4643      	mov	r3, r8
 800146e:	3101      	adds	r1, #1
 8001470:	468c      	mov	ip, r1
 8001472:	4649      	mov	r1, r9
 8001474:	407b      	eors	r3, r7
 8001476:	9301      	str	r3, [sp, #4]
 8001478:	290f      	cmp	r1, #15
 800147a:	d826      	bhi.n	80014ca <__aeabi_dmul+0xe6>
 800147c:	4bbe      	ldr	r3, [pc, #760]	; (8001778 <__aeabi_dmul+0x394>)
 800147e:	0089      	lsls	r1, r1, #2
 8001480:	5859      	ldr	r1, [r3, r1]
 8001482:	468f      	mov	pc, r1
 8001484:	4643      	mov	r3, r8
 8001486:	9301      	str	r3, [sp, #4]
 8001488:	0034      	movs	r4, r6
 800148a:	0015      	movs	r5, r2
 800148c:	4683      	mov	fp, r0
 800148e:	465b      	mov	r3, fp
 8001490:	2b02      	cmp	r3, #2
 8001492:	d016      	beq.n	80014c2 <__aeabi_dmul+0xde>
 8001494:	2b03      	cmp	r3, #3
 8001496:	d100      	bne.n	800149a <__aeabi_dmul+0xb6>
 8001498:	e203      	b.n	80018a2 <__aeabi_dmul+0x4be>
 800149a:	2b01      	cmp	r3, #1
 800149c:	d000      	beq.n	80014a0 <__aeabi_dmul+0xbc>
 800149e:	e0cd      	b.n	800163c <__aeabi_dmul+0x258>
 80014a0:	2200      	movs	r2, #0
 80014a2:	2400      	movs	r4, #0
 80014a4:	2500      	movs	r5, #0
 80014a6:	9b01      	ldr	r3, [sp, #4]
 80014a8:	0512      	lsls	r2, r2, #20
 80014aa:	4322      	orrs	r2, r4
 80014ac:	07db      	lsls	r3, r3, #31
 80014ae:	431a      	orrs	r2, r3
 80014b0:	0028      	movs	r0, r5
 80014b2:	0011      	movs	r1, r2
 80014b4:	b007      	add	sp, #28
 80014b6:	bcf0      	pop	{r4, r5, r6, r7}
 80014b8:	46bb      	mov	fp, r7
 80014ba:	46b2      	mov	sl, r6
 80014bc:	46a9      	mov	r9, r5
 80014be:	46a0      	mov	r8, r4
 80014c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014c2:	2400      	movs	r4, #0
 80014c4:	2500      	movs	r5, #0
 80014c6:	4aaa      	ldr	r2, [pc, #680]	; (8001770 <__aeabi_dmul+0x38c>)
 80014c8:	e7ed      	b.n	80014a6 <__aeabi_dmul+0xc2>
 80014ca:	0c28      	lsrs	r0, r5, #16
 80014cc:	042d      	lsls	r5, r5, #16
 80014ce:	0c2d      	lsrs	r5, r5, #16
 80014d0:	002b      	movs	r3, r5
 80014d2:	0c11      	lsrs	r1, r2, #16
 80014d4:	0412      	lsls	r2, r2, #16
 80014d6:	0c12      	lsrs	r2, r2, #16
 80014d8:	4353      	muls	r3, r2
 80014da:	4698      	mov	r8, r3
 80014dc:	0013      	movs	r3, r2
 80014de:	002f      	movs	r7, r5
 80014e0:	4343      	muls	r3, r0
 80014e2:	4699      	mov	r9, r3
 80014e4:	434f      	muls	r7, r1
 80014e6:	444f      	add	r7, r9
 80014e8:	46bb      	mov	fp, r7
 80014ea:	4647      	mov	r7, r8
 80014ec:	000b      	movs	r3, r1
 80014ee:	0c3f      	lsrs	r7, r7, #16
 80014f0:	46ba      	mov	sl, r7
 80014f2:	4343      	muls	r3, r0
 80014f4:	44da      	add	sl, fp
 80014f6:	9302      	str	r3, [sp, #8]
 80014f8:	45d1      	cmp	r9, sl
 80014fa:	d904      	bls.n	8001506 <__aeabi_dmul+0x122>
 80014fc:	2780      	movs	r7, #128	; 0x80
 80014fe:	027f      	lsls	r7, r7, #9
 8001500:	46b9      	mov	r9, r7
 8001502:	444b      	add	r3, r9
 8001504:	9302      	str	r3, [sp, #8]
 8001506:	4653      	mov	r3, sl
 8001508:	0c1b      	lsrs	r3, r3, #16
 800150a:	469b      	mov	fp, r3
 800150c:	4653      	mov	r3, sl
 800150e:	041f      	lsls	r7, r3, #16
 8001510:	4643      	mov	r3, r8
 8001512:	041b      	lsls	r3, r3, #16
 8001514:	0c1b      	lsrs	r3, r3, #16
 8001516:	4698      	mov	r8, r3
 8001518:	003b      	movs	r3, r7
 800151a:	4443      	add	r3, r8
 800151c:	9304      	str	r3, [sp, #16]
 800151e:	0c33      	lsrs	r3, r6, #16
 8001520:	0436      	lsls	r6, r6, #16
 8001522:	0c36      	lsrs	r6, r6, #16
 8001524:	4698      	mov	r8, r3
 8001526:	0033      	movs	r3, r6
 8001528:	4343      	muls	r3, r0
 800152a:	4699      	mov	r9, r3
 800152c:	4643      	mov	r3, r8
 800152e:	4343      	muls	r3, r0
 8001530:	002f      	movs	r7, r5
 8001532:	469a      	mov	sl, r3
 8001534:	4643      	mov	r3, r8
 8001536:	4377      	muls	r7, r6
 8001538:	435d      	muls	r5, r3
 800153a:	0c38      	lsrs	r0, r7, #16
 800153c:	444d      	add	r5, r9
 800153e:	1945      	adds	r5, r0, r5
 8001540:	45a9      	cmp	r9, r5
 8001542:	d903      	bls.n	800154c <__aeabi_dmul+0x168>
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	025b      	lsls	r3, r3, #9
 8001548:	4699      	mov	r9, r3
 800154a:	44ca      	add	sl, r9
 800154c:	043f      	lsls	r7, r7, #16
 800154e:	0c28      	lsrs	r0, r5, #16
 8001550:	0c3f      	lsrs	r7, r7, #16
 8001552:	042d      	lsls	r5, r5, #16
 8001554:	19ed      	adds	r5, r5, r7
 8001556:	0c27      	lsrs	r7, r4, #16
 8001558:	0424      	lsls	r4, r4, #16
 800155a:	0c24      	lsrs	r4, r4, #16
 800155c:	0003      	movs	r3, r0
 800155e:	0020      	movs	r0, r4
 8001560:	4350      	muls	r0, r2
 8001562:	437a      	muls	r2, r7
 8001564:	4691      	mov	r9, r2
 8001566:	003a      	movs	r2, r7
 8001568:	4453      	add	r3, sl
 800156a:	9305      	str	r3, [sp, #20]
 800156c:	0c03      	lsrs	r3, r0, #16
 800156e:	469a      	mov	sl, r3
 8001570:	434a      	muls	r2, r1
 8001572:	4361      	muls	r1, r4
 8001574:	4449      	add	r1, r9
 8001576:	4451      	add	r1, sl
 8001578:	44ab      	add	fp, r5
 800157a:	4589      	cmp	r9, r1
 800157c:	d903      	bls.n	8001586 <__aeabi_dmul+0x1a2>
 800157e:	2380      	movs	r3, #128	; 0x80
 8001580:	025b      	lsls	r3, r3, #9
 8001582:	4699      	mov	r9, r3
 8001584:	444a      	add	r2, r9
 8001586:	0400      	lsls	r0, r0, #16
 8001588:	0c0b      	lsrs	r3, r1, #16
 800158a:	0c00      	lsrs	r0, r0, #16
 800158c:	0409      	lsls	r1, r1, #16
 800158e:	1809      	adds	r1, r1, r0
 8001590:	0020      	movs	r0, r4
 8001592:	4699      	mov	r9, r3
 8001594:	4643      	mov	r3, r8
 8001596:	4370      	muls	r0, r6
 8001598:	435c      	muls	r4, r3
 800159a:	437e      	muls	r6, r7
 800159c:	435f      	muls	r7, r3
 800159e:	0c03      	lsrs	r3, r0, #16
 80015a0:	4698      	mov	r8, r3
 80015a2:	19a4      	adds	r4, r4, r6
 80015a4:	4444      	add	r4, r8
 80015a6:	444a      	add	r2, r9
 80015a8:	9703      	str	r7, [sp, #12]
 80015aa:	42a6      	cmp	r6, r4
 80015ac:	d904      	bls.n	80015b8 <__aeabi_dmul+0x1d4>
 80015ae:	2380      	movs	r3, #128	; 0x80
 80015b0:	025b      	lsls	r3, r3, #9
 80015b2:	4698      	mov	r8, r3
 80015b4:	4447      	add	r7, r8
 80015b6:	9703      	str	r7, [sp, #12]
 80015b8:	0423      	lsls	r3, r4, #16
 80015ba:	9e02      	ldr	r6, [sp, #8]
 80015bc:	469a      	mov	sl, r3
 80015be:	9b05      	ldr	r3, [sp, #20]
 80015c0:	445e      	add	r6, fp
 80015c2:	4698      	mov	r8, r3
 80015c4:	42ae      	cmp	r6, r5
 80015c6:	41ad      	sbcs	r5, r5
 80015c8:	1876      	adds	r6, r6, r1
 80015ca:	428e      	cmp	r6, r1
 80015cc:	4189      	sbcs	r1, r1
 80015ce:	0400      	lsls	r0, r0, #16
 80015d0:	0c00      	lsrs	r0, r0, #16
 80015d2:	4450      	add	r0, sl
 80015d4:	4440      	add	r0, r8
 80015d6:	426d      	negs	r5, r5
 80015d8:	1947      	adds	r7, r0, r5
 80015da:	46b8      	mov	r8, r7
 80015dc:	4693      	mov	fp, r2
 80015de:	4249      	negs	r1, r1
 80015e0:	4689      	mov	r9, r1
 80015e2:	44c3      	add	fp, r8
 80015e4:	44d9      	add	r9, fp
 80015e6:	4298      	cmp	r0, r3
 80015e8:	4180      	sbcs	r0, r0
 80015ea:	45a8      	cmp	r8, r5
 80015ec:	41ad      	sbcs	r5, r5
 80015ee:	4593      	cmp	fp, r2
 80015f0:	4192      	sbcs	r2, r2
 80015f2:	4589      	cmp	r9, r1
 80015f4:	4189      	sbcs	r1, r1
 80015f6:	426d      	negs	r5, r5
 80015f8:	4240      	negs	r0, r0
 80015fa:	4328      	orrs	r0, r5
 80015fc:	0c24      	lsrs	r4, r4, #16
 80015fe:	4252      	negs	r2, r2
 8001600:	4249      	negs	r1, r1
 8001602:	430a      	orrs	r2, r1
 8001604:	9b03      	ldr	r3, [sp, #12]
 8001606:	1900      	adds	r0, r0, r4
 8001608:	1880      	adds	r0, r0, r2
 800160a:	18c7      	adds	r7, r0, r3
 800160c:	464b      	mov	r3, r9
 800160e:	0ddc      	lsrs	r4, r3, #23
 8001610:	9b04      	ldr	r3, [sp, #16]
 8001612:	0275      	lsls	r5, r6, #9
 8001614:	431d      	orrs	r5, r3
 8001616:	1e6a      	subs	r2, r5, #1
 8001618:	4195      	sbcs	r5, r2
 800161a:	464b      	mov	r3, r9
 800161c:	0df6      	lsrs	r6, r6, #23
 800161e:	027f      	lsls	r7, r7, #9
 8001620:	4335      	orrs	r5, r6
 8001622:	025a      	lsls	r2, r3, #9
 8001624:	433c      	orrs	r4, r7
 8001626:	4315      	orrs	r5, r2
 8001628:	01fb      	lsls	r3, r7, #7
 800162a:	d400      	bmi.n	800162e <__aeabi_dmul+0x24a>
 800162c:	e11c      	b.n	8001868 <__aeabi_dmul+0x484>
 800162e:	2101      	movs	r1, #1
 8001630:	086a      	lsrs	r2, r5, #1
 8001632:	400d      	ands	r5, r1
 8001634:	4315      	orrs	r5, r2
 8001636:	07e2      	lsls	r2, r4, #31
 8001638:	4315      	orrs	r5, r2
 800163a:	0864      	lsrs	r4, r4, #1
 800163c:	494f      	ldr	r1, [pc, #316]	; (800177c <__aeabi_dmul+0x398>)
 800163e:	4461      	add	r1, ip
 8001640:	2900      	cmp	r1, #0
 8001642:	dc00      	bgt.n	8001646 <__aeabi_dmul+0x262>
 8001644:	e0b0      	b.n	80017a8 <__aeabi_dmul+0x3c4>
 8001646:	076b      	lsls	r3, r5, #29
 8001648:	d009      	beq.n	800165e <__aeabi_dmul+0x27a>
 800164a:	220f      	movs	r2, #15
 800164c:	402a      	ands	r2, r5
 800164e:	2a04      	cmp	r2, #4
 8001650:	d005      	beq.n	800165e <__aeabi_dmul+0x27a>
 8001652:	1d2a      	adds	r2, r5, #4
 8001654:	42aa      	cmp	r2, r5
 8001656:	41ad      	sbcs	r5, r5
 8001658:	426d      	negs	r5, r5
 800165a:	1964      	adds	r4, r4, r5
 800165c:	0015      	movs	r5, r2
 800165e:	01e3      	lsls	r3, r4, #7
 8001660:	d504      	bpl.n	800166c <__aeabi_dmul+0x288>
 8001662:	2180      	movs	r1, #128	; 0x80
 8001664:	4a46      	ldr	r2, [pc, #280]	; (8001780 <__aeabi_dmul+0x39c>)
 8001666:	00c9      	lsls	r1, r1, #3
 8001668:	4014      	ands	r4, r2
 800166a:	4461      	add	r1, ip
 800166c:	4a45      	ldr	r2, [pc, #276]	; (8001784 <__aeabi_dmul+0x3a0>)
 800166e:	4291      	cmp	r1, r2
 8001670:	dd00      	ble.n	8001674 <__aeabi_dmul+0x290>
 8001672:	e726      	b.n	80014c2 <__aeabi_dmul+0xde>
 8001674:	0762      	lsls	r2, r4, #29
 8001676:	08ed      	lsrs	r5, r5, #3
 8001678:	0264      	lsls	r4, r4, #9
 800167a:	0549      	lsls	r1, r1, #21
 800167c:	4315      	orrs	r5, r2
 800167e:	0b24      	lsrs	r4, r4, #12
 8001680:	0d4a      	lsrs	r2, r1, #21
 8001682:	e710      	b.n	80014a6 <__aeabi_dmul+0xc2>
 8001684:	4652      	mov	r2, sl
 8001686:	4332      	orrs	r2, r6
 8001688:	d100      	bne.n	800168c <__aeabi_dmul+0x2a8>
 800168a:	e07f      	b.n	800178c <__aeabi_dmul+0x3a8>
 800168c:	2e00      	cmp	r6, #0
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x2ae>
 8001690:	e0dc      	b.n	800184c <__aeabi_dmul+0x468>
 8001692:	0030      	movs	r0, r6
 8001694:	f000 fdde 	bl	8002254 <__clzsi2>
 8001698:	0002      	movs	r2, r0
 800169a:	3a0b      	subs	r2, #11
 800169c:	231d      	movs	r3, #29
 800169e:	0001      	movs	r1, r0
 80016a0:	1a9b      	subs	r3, r3, r2
 80016a2:	4652      	mov	r2, sl
 80016a4:	3908      	subs	r1, #8
 80016a6:	40da      	lsrs	r2, r3
 80016a8:	408e      	lsls	r6, r1
 80016aa:	4316      	orrs	r6, r2
 80016ac:	4652      	mov	r2, sl
 80016ae:	408a      	lsls	r2, r1
 80016b0:	9b00      	ldr	r3, [sp, #0]
 80016b2:	4935      	ldr	r1, [pc, #212]	; (8001788 <__aeabi_dmul+0x3a4>)
 80016b4:	1a18      	subs	r0, r3, r0
 80016b6:	0003      	movs	r3, r0
 80016b8:	468c      	mov	ip, r1
 80016ba:	4463      	add	r3, ip
 80016bc:	2000      	movs	r0, #0
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	e6d3      	b.n	800146a <__aeabi_dmul+0x86>
 80016c2:	0025      	movs	r5, r4
 80016c4:	4305      	orrs	r5, r0
 80016c6:	d04a      	beq.n	800175e <__aeabi_dmul+0x37a>
 80016c8:	2c00      	cmp	r4, #0
 80016ca:	d100      	bne.n	80016ce <__aeabi_dmul+0x2ea>
 80016cc:	e0b0      	b.n	8001830 <__aeabi_dmul+0x44c>
 80016ce:	0020      	movs	r0, r4
 80016d0:	f000 fdc0 	bl	8002254 <__clzsi2>
 80016d4:	0001      	movs	r1, r0
 80016d6:	0002      	movs	r2, r0
 80016d8:	390b      	subs	r1, #11
 80016da:	231d      	movs	r3, #29
 80016dc:	0010      	movs	r0, r2
 80016de:	1a5b      	subs	r3, r3, r1
 80016e0:	0031      	movs	r1, r6
 80016e2:	0035      	movs	r5, r6
 80016e4:	3808      	subs	r0, #8
 80016e6:	4084      	lsls	r4, r0
 80016e8:	40d9      	lsrs	r1, r3
 80016ea:	4085      	lsls	r5, r0
 80016ec:	430c      	orrs	r4, r1
 80016ee:	4826      	ldr	r0, [pc, #152]	; (8001788 <__aeabi_dmul+0x3a4>)
 80016f0:	1a83      	subs	r3, r0, r2
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2300      	movs	r3, #0
 80016f6:	4699      	mov	r9, r3
 80016f8:	469b      	mov	fp, r3
 80016fa:	e697      	b.n	800142c <__aeabi_dmul+0x48>
 80016fc:	0005      	movs	r5, r0
 80016fe:	4325      	orrs	r5, r4
 8001700:	d126      	bne.n	8001750 <__aeabi_dmul+0x36c>
 8001702:	2208      	movs	r2, #8
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	2302      	movs	r3, #2
 8001708:	2400      	movs	r4, #0
 800170a:	4691      	mov	r9, r2
 800170c:	469b      	mov	fp, r3
 800170e:	e68d      	b.n	800142c <__aeabi_dmul+0x48>
 8001710:	4652      	mov	r2, sl
 8001712:	9b00      	ldr	r3, [sp, #0]
 8001714:	4332      	orrs	r2, r6
 8001716:	d110      	bne.n	800173a <__aeabi_dmul+0x356>
 8001718:	4915      	ldr	r1, [pc, #84]	; (8001770 <__aeabi_dmul+0x38c>)
 800171a:	2600      	movs	r6, #0
 800171c:	468c      	mov	ip, r1
 800171e:	4463      	add	r3, ip
 8001720:	4649      	mov	r1, r9
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	2302      	movs	r3, #2
 8001726:	4319      	orrs	r1, r3
 8001728:	4689      	mov	r9, r1
 800172a:	2002      	movs	r0, #2
 800172c:	e69d      	b.n	800146a <__aeabi_dmul+0x86>
 800172e:	465b      	mov	r3, fp
 8001730:	9701      	str	r7, [sp, #4]
 8001732:	2b02      	cmp	r3, #2
 8001734:	d000      	beq.n	8001738 <__aeabi_dmul+0x354>
 8001736:	e6ad      	b.n	8001494 <__aeabi_dmul+0xb0>
 8001738:	e6c3      	b.n	80014c2 <__aeabi_dmul+0xde>
 800173a:	4a0d      	ldr	r2, [pc, #52]	; (8001770 <__aeabi_dmul+0x38c>)
 800173c:	2003      	movs	r0, #3
 800173e:	4694      	mov	ip, r2
 8001740:	4463      	add	r3, ip
 8001742:	464a      	mov	r2, r9
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	2303      	movs	r3, #3
 8001748:	431a      	orrs	r2, r3
 800174a:	4691      	mov	r9, r2
 800174c:	4652      	mov	r2, sl
 800174e:	e68c      	b.n	800146a <__aeabi_dmul+0x86>
 8001750:	220c      	movs	r2, #12
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	2303      	movs	r3, #3
 8001756:	0005      	movs	r5, r0
 8001758:	4691      	mov	r9, r2
 800175a:	469b      	mov	fp, r3
 800175c:	e666      	b.n	800142c <__aeabi_dmul+0x48>
 800175e:	2304      	movs	r3, #4
 8001760:	4699      	mov	r9, r3
 8001762:	2300      	movs	r3, #0
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	3301      	adds	r3, #1
 8001768:	2400      	movs	r4, #0
 800176a:	469b      	mov	fp, r3
 800176c:	e65e      	b.n	800142c <__aeabi_dmul+0x48>
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	000007ff 	.word	0x000007ff
 8001774:	fffffc01 	.word	0xfffffc01
 8001778:	08005f54 	.word	0x08005f54
 800177c:	000003ff 	.word	0x000003ff
 8001780:	feffffff 	.word	0xfeffffff
 8001784:	000007fe 	.word	0x000007fe
 8001788:	fffffc0d 	.word	0xfffffc0d
 800178c:	4649      	mov	r1, r9
 800178e:	2301      	movs	r3, #1
 8001790:	4319      	orrs	r1, r3
 8001792:	4689      	mov	r9, r1
 8001794:	2600      	movs	r6, #0
 8001796:	2001      	movs	r0, #1
 8001798:	e667      	b.n	800146a <__aeabi_dmul+0x86>
 800179a:	2300      	movs	r3, #0
 800179c:	2480      	movs	r4, #128	; 0x80
 800179e:	2500      	movs	r5, #0
 80017a0:	4a43      	ldr	r2, [pc, #268]	; (80018b0 <__aeabi_dmul+0x4cc>)
 80017a2:	9301      	str	r3, [sp, #4]
 80017a4:	0324      	lsls	r4, r4, #12
 80017a6:	e67e      	b.n	80014a6 <__aeabi_dmul+0xc2>
 80017a8:	2001      	movs	r0, #1
 80017aa:	1a40      	subs	r0, r0, r1
 80017ac:	2838      	cmp	r0, #56	; 0x38
 80017ae:	dd00      	ble.n	80017b2 <__aeabi_dmul+0x3ce>
 80017b0:	e676      	b.n	80014a0 <__aeabi_dmul+0xbc>
 80017b2:	281f      	cmp	r0, #31
 80017b4:	dd5b      	ble.n	800186e <__aeabi_dmul+0x48a>
 80017b6:	221f      	movs	r2, #31
 80017b8:	0023      	movs	r3, r4
 80017ba:	4252      	negs	r2, r2
 80017bc:	1a51      	subs	r1, r2, r1
 80017be:	40cb      	lsrs	r3, r1
 80017c0:	0019      	movs	r1, r3
 80017c2:	2820      	cmp	r0, #32
 80017c4:	d003      	beq.n	80017ce <__aeabi_dmul+0x3ea>
 80017c6:	4a3b      	ldr	r2, [pc, #236]	; (80018b4 <__aeabi_dmul+0x4d0>)
 80017c8:	4462      	add	r2, ip
 80017ca:	4094      	lsls	r4, r2
 80017cc:	4325      	orrs	r5, r4
 80017ce:	1e6a      	subs	r2, r5, #1
 80017d0:	4195      	sbcs	r5, r2
 80017d2:	002a      	movs	r2, r5
 80017d4:	430a      	orrs	r2, r1
 80017d6:	2107      	movs	r1, #7
 80017d8:	000d      	movs	r5, r1
 80017da:	2400      	movs	r4, #0
 80017dc:	4015      	ands	r5, r2
 80017de:	4211      	tst	r1, r2
 80017e0:	d05b      	beq.n	800189a <__aeabi_dmul+0x4b6>
 80017e2:	210f      	movs	r1, #15
 80017e4:	2400      	movs	r4, #0
 80017e6:	4011      	ands	r1, r2
 80017e8:	2904      	cmp	r1, #4
 80017ea:	d053      	beq.n	8001894 <__aeabi_dmul+0x4b0>
 80017ec:	1d11      	adds	r1, r2, #4
 80017ee:	4291      	cmp	r1, r2
 80017f0:	4192      	sbcs	r2, r2
 80017f2:	4252      	negs	r2, r2
 80017f4:	18a4      	adds	r4, r4, r2
 80017f6:	000a      	movs	r2, r1
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d54b      	bpl.n	8001894 <__aeabi_dmul+0x4b0>
 80017fc:	2201      	movs	r2, #1
 80017fe:	2400      	movs	r4, #0
 8001800:	2500      	movs	r5, #0
 8001802:	e650      	b.n	80014a6 <__aeabi_dmul+0xc2>
 8001804:	2380      	movs	r3, #128	; 0x80
 8001806:	031b      	lsls	r3, r3, #12
 8001808:	421c      	tst	r4, r3
 800180a:	d009      	beq.n	8001820 <__aeabi_dmul+0x43c>
 800180c:	421e      	tst	r6, r3
 800180e:	d107      	bne.n	8001820 <__aeabi_dmul+0x43c>
 8001810:	4333      	orrs	r3, r6
 8001812:	031c      	lsls	r4, r3, #12
 8001814:	4643      	mov	r3, r8
 8001816:	0015      	movs	r5, r2
 8001818:	0b24      	lsrs	r4, r4, #12
 800181a:	4a25      	ldr	r2, [pc, #148]	; (80018b0 <__aeabi_dmul+0x4cc>)
 800181c:	9301      	str	r3, [sp, #4]
 800181e:	e642      	b.n	80014a6 <__aeabi_dmul+0xc2>
 8001820:	2280      	movs	r2, #128	; 0x80
 8001822:	0312      	lsls	r2, r2, #12
 8001824:	4314      	orrs	r4, r2
 8001826:	0324      	lsls	r4, r4, #12
 8001828:	4a21      	ldr	r2, [pc, #132]	; (80018b0 <__aeabi_dmul+0x4cc>)
 800182a:	0b24      	lsrs	r4, r4, #12
 800182c:	9701      	str	r7, [sp, #4]
 800182e:	e63a      	b.n	80014a6 <__aeabi_dmul+0xc2>
 8001830:	f000 fd10 	bl	8002254 <__clzsi2>
 8001834:	0001      	movs	r1, r0
 8001836:	0002      	movs	r2, r0
 8001838:	3115      	adds	r1, #21
 800183a:	3220      	adds	r2, #32
 800183c:	291c      	cmp	r1, #28
 800183e:	dc00      	bgt.n	8001842 <__aeabi_dmul+0x45e>
 8001840:	e74b      	b.n	80016da <__aeabi_dmul+0x2f6>
 8001842:	0034      	movs	r4, r6
 8001844:	3808      	subs	r0, #8
 8001846:	2500      	movs	r5, #0
 8001848:	4084      	lsls	r4, r0
 800184a:	e750      	b.n	80016ee <__aeabi_dmul+0x30a>
 800184c:	f000 fd02 	bl	8002254 <__clzsi2>
 8001850:	0003      	movs	r3, r0
 8001852:	001a      	movs	r2, r3
 8001854:	3215      	adds	r2, #21
 8001856:	3020      	adds	r0, #32
 8001858:	2a1c      	cmp	r2, #28
 800185a:	dc00      	bgt.n	800185e <__aeabi_dmul+0x47a>
 800185c:	e71e      	b.n	800169c <__aeabi_dmul+0x2b8>
 800185e:	4656      	mov	r6, sl
 8001860:	3b08      	subs	r3, #8
 8001862:	2200      	movs	r2, #0
 8001864:	409e      	lsls	r6, r3
 8001866:	e723      	b.n	80016b0 <__aeabi_dmul+0x2cc>
 8001868:	9b00      	ldr	r3, [sp, #0]
 800186a:	469c      	mov	ip, r3
 800186c:	e6e6      	b.n	800163c <__aeabi_dmul+0x258>
 800186e:	4912      	ldr	r1, [pc, #72]	; (80018b8 <__aeabi_dmul+0x4d4>)
 8001870:	0022      	movs	r2, r4
 8001872:	4461      	add	r1, ip
 8001874:	002e      	movs	r6, r5
 8001876:	408d      	lsls	r5, r1
 8001878:	408a      	lsls	r2, r1
 800187a:	40c6      	lsrs	r6, r0
 800187c:	1e69      	subs	r1, r5, #1
 800187e:	418d      	sbcs	r5, r1
 8001880:	4332      	orrs	r2, r6
 8001882:	432a      	orrs	r2, r5
 8001884:	40c4      	lsrs	r4, r0
 8001886:	0753      	lsls	r3, r2, #29
 8001888:	d0b6      	beq.n	80017f8 <__aeabi_dmul+0x414>
 800188a:	210f      	movs	r1, #15
 800188c:	4011      	ands	r1, r2
 800188e:	2904      	cmp	r1, #4
 8001890:	d1ac      	bne.n	80017ec <__aeabi_dmul+0x408>
 8001892:	e7b1      	b.n	80017f8 <__aeabi_dmul+0x414>
 8001894:	0765      	lsls	r5, r4, #29
 8001896:	0264      	lsls	r4, r4, #9
 8001898:	0b24      	lsrs	r4, r4, #12
 800189a:	08d2      	lsrs	r2, r2, #3
 800189c:	4315      	orrs	r5, r2
 800189e:	2200      	movs	r2, #0
 80018a0:	e601      	b.n	80014a6 <__aeabi_dmul+0xc2>
 80018a2:	2280      	movs	r2, #128	; 0x80
 80018a4:	0312      	lsls	r2, r2, #12
 80018a6:	4314      	orrs	r4, r2
 80018a8:	0324      	lsls	r4, r4, #12
 80018aa:	4a01      	ldr	r2, [pc, #4]	; (80018b0 <__aeabi_dmul+0x4cc>)
 80018ac:	0b24      	lsrs	r4, r4, #12
 80018ae:	e5fa      	b.n	80014a6 <__aeabi_dmul+0xc2>
 80018b0:	000007ff 	.word	0x000007ff
 80018b4:	0000043e 	.word	0x0000043e
 80018b8:	0000041e 	.word	0x0000041e

080018bc <__aeabi_dsub>:
 80018bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018be:	4657      	mov	r7, sl
 80018c0:	464e      	mov	r6, r9
 80018c2:	4645      	mov	r5, r8
 80018c4:	46de      	mov	lr, fp
 80018c6:	b5e0      	push	{r5, r6, r7, lr}
 80018c8:	001e      	movs	r6, r3
 80018ca:	0017      	movs	r7, r2
 80018cc:	004a      	lsls	r2, r1, #1
 80018ce:	030b      	lsls	r3, r1, #12
 80018d0:	0d52      	lsrs	r2, r2, #21
 80018d2:	0a5b      	lsrs	r3, r3, #9
 80018d4:	4690      	mov	r8, r2
 80018d6:	0f42      	lsrs	r2, r0, #29
 80018d8:	431a      	orrs	r2, r3
 80018da:	0fcd      	lsrs	r5, r1, #31
 80018dc:	4ccd      	ldr	r4, [pc, #820]	; (8001c14 <__aeabi_dsub+0x358>)
 80018de:	0331      	lsls	r1, r6, #12
 80018e0:	00c3      	lsls	r3, r0, #3
 80018e2:	4694      	mov	ip, r2
 80018e4:	0070      	lsls	r0, r6, #1
 80018e6:	0f7a      	lsrs	r2, r7, #29
 80018e8:	0a49      	lsrs	r1, r1, #9
 80018ea:	00ff      	lsls	r7, r7, #3
 80018ec:	469a      	mov	sl, r3
 80018ee:	46b9      	mov	r9, r7
 80018f0:	0d40      	lsrs	r0, r0, #21
 80018f2:	0ff6      	lsrs	r6, r6, #31
 80018f4:	4311      	orrs	r1, r2
 80018f6:	42a0      	cmp	r0, r4
 80018f8:	d100      	bne.n	80018fc <__aeabi_dsub+0x40>
 80018fa:	e0b1      	b.n	8001a60 <__aeabi_dsub+0x1a4>
 80018fc:	2201      	movs	r2, #1
 80018fe:	4056      	eors	r6, r2
 8001900:	46b3      	mov	fp, r6
 8001902:	42b5      	cmp	r5, r6
 8001904:	d100      	bne.n	8001908 <__aeabi_dsub+0x4c>
 8001906:	e088      	b.n	8001a1a <__aeabi_dsub+0x15e>
 8001908:	4642      	mov	r2, r8
 800190a:	1a12      	subs	r2, r2, r0
 800190c:	2a00      	cmp	r2, #0
 800190e:	dc00      	bgt.n	8001912 <__aeabi_dsub+0x56>
 8001910:	e0ae      	b.n	8001a70 <__aeabi_dsub+0x1b4>
 8001912:	2800      	cmp	r0, #0
 8001914:	d100      	bne.n	8001918 <__aeabi_dsub+0x5c>
 8001916:	e0c1      	b.n	8001a9c <__aeabi_dsub+0x1e0>
 8001918:	48be      	ldr	r0, [pc, #760]	; (8001c14 <__aeabi_dsub+0x358>)
 800191a:	4580      	cmp	r8, r0
 800191c:	d100      	bne.n	8001920 <__aeabi_dsub+0x64>
 800191e:	e151      	b.n	8001bc4 <__aeabi_dsub+0x308>
 8001920:	2080      	movs	r0, #128	; 0x80
 8001922:	0400      	lsls	r0, r0, #16
 8001924:	4301      	orrs	r1, r0
 8001926:	2a38      	cmp	r2, #56	; 0x38
 8001928:	dd00      	ble.n	800192c <__aeabi_dsub+0x70>
 800192a:	e17b      	b.n	8001c24 <__aeabi_dsub+0x368>
 800192c:	2a1f      	cmp	r2, #31
 800192e:	dd00      	ble.n	8001932 <__aeabi_dsub+0x76>
 8001930:	e1ee      	b.n	8001d10 <__aeabi_dsub+0x454>
 8001932:	2020      	movs	r0, #32
 8001934:	003e      	movs	r6, r7
 8001936:	1a80      	subs	r0, r0, r2
 8001938:	000c      	movs	r4, r1
 800193a:	40d6      	lsrs	r6, r2
 800193c:	40d1      	lsrs	r1, r2
 800193e:	4087      	lsls	r7, r0
 8001940:	4662      	mov	r2, ip
 8001942:	4084      	lsls	r4, r0
 8001944:	1a52      	subs	r2, r2, r1
 8001946:	1e78      	subs	r0, r7, #1
 8001948:	4187      	sbcs	r7, r0
 800194a:	4694      	mov	ip, r2
 800194c:	4334      	orrs	r4, r6
 800194e:	4327      	orrs	r7, r4
 8001950:	1bdc      	subs	r4, r3, r7
 8001952:	42a3      	cmp	r3, r4
 8001954:	419b      	sbcs	r3, r3
 8001956:	4662      	mov	r2, ip
 8001958:	425b      	negs	r3, r3
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	4699      	mov	r9, r3
 800195e:	464b      	mov	r3, r9
 8001960:	021b      	lsls	r3, r3, #8
 8001962:	d400      	bmi.n	8001966 <__aeabi_dsub+0xaa>
 8001964:	e118      	b.n	8001b98 <__aeabi_dsub+0x2dc>
 8001966:	464b      	mov	r3, r9
 8001968:	0258      	lsls	r0, r3, #9
 800196a:	0a43      	lsrs	r3, r0, #9
 800196c:	4699      	mov	r9, r3
 800196e:	464b      	mov	r3, r9
 8001970:	2b00      	cmp	r3, #0
 8001972:	d100      	bne.n	8001976 <__aeabi_dsub+0xba>
 8001974:	e137      	b.n	8001be6 <__aeabi_dsub+0x32a>
 8001976:	4648      	mov	r0, r9
 8001978:	f000 fc6c 	bl	8002254 <__clzsi2>
 800197c:	0001      	movs	r1, r0
 800197e:	3908      	subs	r1, #8
 8001980:	2320      	movs	r3, #32
 8001982:	0022      	movs	r2, r4
 8001984:	4648      	mov	r0, r9
 8001986:	1a5b      	subs	r3, r3, r1
 8001988:	40da      	lsrs	r2, r3
 800198a:	4088      	lsls	r0, r1
 800198c:	408c      	lsls	r4, r1
 800198e:	4643      	mov	r3, r8
 8001990:	4310      	orrs	r0, r2
 8001992:	4588      	cmp	r8, r1
 8001994:	dd00      	ble.n	8001998 <__aeabi_dsub+0xdc>
 8001996:	e136      	b.n	8001c06 <__aeabi_dsub+0x34a>
 8001998:	1ac9      	subs	r1, r1, r3
 800199a:	1c4b      	adds	r3, r1, #1
 800199c:	2b1f      	cmp	r3, #31
 800199e:	dd00      	ble.n	80019a2 <__aeabi_dsub+0xe6>
 80019a0:	e0ea      	b.n	8001b78 <__aeabi_dsub+0x2bc>
 80019a2:	2220      	movs	r2, #32
 80019a4:	0026      	movs	r6, r4
 80019a6:	1ad2      	subs	r2, r2, r3
 80019a8:	0001      	movs	r1, r0
 80019aa:	4094      	lsls	r4, r2
 80019ac:	40de      	lsrs	r6, r3
 80019ae:	40d8      	lsrs	r0, r3
 80019b0:	2300      	movs	r3, #0
 80019b2:	4091      	lsls	r1, r2
 80019b4:	1e62      	subs	r2, r4, #1
 80019b6:	4194      	sbcs	r4, r2
 80019b8:	4681      	mov	r9, r0
 80019ba:	4698      	mov	r8, r3
 80019bc:	4331      	orrs	r1, r6
 80019be:	430c      	orrs	r4, r1
 80019c0:	0763      	lsls	r3, r4, #29
 80019c2:	d009      	beq.n	80019d8 <__aeabi_dsub+0x11c>
 80019c4:	230f      	movs	r3, #15
 80019c6:	4023      	ands	r3, r4
 80019c8:	2b04      	cmp	r3, #4
 80019ca:	d005      	beq.n	80019d8 <__aeabi_dsub+0x11c>
 80019cc:	1d23      	adds	r3, r4, #4
 80019ce:	42a3      	cmp	r3, r4
 80019d0:	41a4      	sbcs	r4, r4
 80019d2:	4264      	negs	r4, r4
 80019d4:	44a1      	add	r9, r4
 80019d6:	001c      	movs	r4, r3
 80019d8:	464b      	mov	r3, r9
 80019da:	021b      	lsls	r3, r3, #8
 80019dc:	d400      	bmi.n	80019e0 <__aeabi_dsub+0x124>
 80019de:	e0de      	b.n	8001b9e <__aeabi_dsub+0x2e2>
 80019e0:	4641      	mov	r1, r8
 80019e2:	4b8c      	ldr	r3, [pc, #560]	; (8001c14 <__aeabi_dsub+0x358>)
 80019e4:	3101      	adds	r1, #1
 80019e6:	4299      	cmp	r1, r3
 80019e8:	d100      	bne.n	80019ec <__aeabi_dsub+0x130>
 80019ea:	e0e7      	b.n	8001bbc <__aeabi_dsub+0x300>
 80019ec:	464b      	mov	r3, r9
 80019ee:	488a      	ldr	r0, [pc, #552]	; (8001c18 <__aeabi_dsub+0x35c>)
 80019f0:	08e4      	lsrs	r4, r4, #3
 80019f2:	4003      	ands	r3, r0
 80019f4:	0018      	movs	r0, r3
 80019f6:	0549      	lsls	r1, r1, #21
 80019f8:	075b      	lsls	r3, r3, #29
 80019fa:	0240      	lsls	r0, r0, #9
 80019fc:	4323      	orrs	r3, r4
 80019fe:	0d4a      	lsrs	r2, r1, #21
 8001a00:	0b04      	lsrs	r4, r0, #12
 8001a02:	0512      	lsls	r2, r2, #20
 8001a04:	07ed      	lsls	r5, r5, #31
 8001a06:	4322      	orrs	r2, r4
 8001a08:	432a      	orrs	r2, r5
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	0011      	movs	r1, r2
 8001a0e:	bcf0      	pop	{r4, r5, r6, r7}
 8001a10:	46bb      	mov	fp, r7
 8001a12:	46b2      	mov	sl, r6
 8001a14:	46a9      	mov	r9, r5
 8001a16:	46a0      	mov	r8, r4
 8001a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a1a:	4642      	mov	r2, r8
 8001a1c:	1a12      	subs	r2, r2, r0
 8001a1e:	2a00      	cmp	r2, #0
 8001a20:	dd52      	ble.n	8001ac8 <__aeabi_dsub+0x20c>
 8001a22:	2800      	cmp	r0, #0
 8001a24:	d100      	bne.n	8001a28 <__aeabi_dsub+0x16c>
 8001a26:	e09c      	b.n	8001b62 <__aeabi_dsub+0x2a6>
 8001a28:	45a0      	cmp	r8, r4
 8001a2a:	d100      	bne.n	8001a2e <__aeabi_dsub+0x172>
 8001a2c:	e0ca      	b.n	8001bc4 <__aeabi_dsub+0x308>
 8001a2e:	2080      	movs	r0, #128	; 0x80
 8001a30:	0400      	lsls	r0, r0, #16
 8001a32:	4301      	orrs	r1, r0
 8001a34:	2a38      	cmp	r2, #56	; 0x38
 8001a36:	dd00      	ble.n	8001a3a <__aeabi_dsub+0x17e>
 8001a38:	e149      	b.n	8001cce <__aeabi_dsub+0x412>
 8001a3a:	2a1f      	cmp	r2, #31
 8001a3c:	dc00      	bgt.n	8001a40 <__aeabi_dsub+0x184>
 8001a3e:	e197      	b.n	8001d70 <__aeabi_dsub+0x4b4>
 8001a40:	0010      	movs	r0, r2
 8001a42:	000e      	movs	r6, r1
 8001a44:	3820      	subs	r0, #32
 8001a46:	40c6      	lsrs	r6, r0
 8001a48:	2a20      	cmp	r2, #32
 8001a4a:	d004      	beq.n	8001a56 <__aeabi_dsub+0x19a>
 8001a4c:	2040      	movs	r0, #64	; 0x40
 8001a4e:	1a82      	subs	r2, r0, r2
 8001a50:	4091      	lsls	r1, r2
 8001a52:	430f      	orrs	r7, r1
 8001a54:	46b9      	mov	r9, r7
 8001a56:	464c      	mov	r4, r9
 8001a58:	1e62      	subs	r2, r4, #1
 8001a5a:	4194      	sbcs	r4, r2
 8001a5c:	4334      	orrs	r4, r6
 8001a5e:	e13a      	b.n	8001cd6 <__aeabi_dsub+0x41a>
 8001a60:	000a      	movs	r2, r1
 8001a62:	433a      	orrs	r2, r7
 8001a64:	d028      	beq.n	8001ab8 <__aeabi_dsub+0x1fc>
 8001a66:	46b3      	mov	fp, r6
 8001a68:	42b5      	cmp	r5, r6
 8001a6a:	d02b      	beq.n	8001ac4 <__aeabi_dsub+0x208>
 8001a6c:	4a6b      	ldr	r2, [pc, #428]	; (8001c1c <__aeabi_dsub+0x360>)
 8001a6e:	4442      	add	r2, r8
 8001a70:	2a00      	cmp	r2, #0
 8001a72:	d05d      	beq.n	8001b30 <__aeabi_dsub+0x274>
 8001a74:	4642      	mov	r2, r8
 8001a76:	4644      	mov	r4, r8
 8001a78:	1a82      	subs	r2, r0, r2
 8001a7a:	2c00      	cmp	r4, #0
 8001a7c:	d000      	beq.n	8001a80 <__aeabi_dsub+0x1c4>
 8001a7e:	e0f5      	b.n	8001c6c <__aeabi_dsub+0x3b0>
 8001a80:	4665      	mov	r5, ip
 8001a82:	431d      	orrs	r5, r3
 8001a84:	d100      	bne.n	8001a88 <__aeabi_dsub+0x1cc>
 8001a86:	e19c      	b.n	8001dc2 <__aeabi_dsub+0x506>
 8001a88:	1e55      	subs	r5, r2, #1
 8001a8a:	2a01      	cmp	r2, #1
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dsub+0x1d4>
 8001a8e:	e1fb      	b.n	8001e88 <__aeabi_dsub+0x5cc>
 8001a90:	4c60      	ldr	r4, [pc, #384]	; (8001c14 <__aeabi_dsub+0x358>)
 8001a92:	42a2      	cmp	r2, r4
 8001a94:	d100      	bne.n	8001a98 <__aeabi_dsub+0x1dc>
 8001a96:	e1bd      	b.n	8001e14 <__aeabi_dsub+0x558>
 8001a98:	002a      	movs	r2, r5
 8001a9a:	e0f0      	b.n	8001c7e <__aeabi_dsub+0x3c2>
 8001a9c:	0008      	movs	r0, r1
 8001a9e:	4338      	orrs	r0, r7
 8001aa0:	d100      	bne.n	8001aa4 <__aeabi_dsub+0x1e8>
 8001aa2:	e0c3      	b.n	8001c2c <__aeabi_dsub+0x370>
 8001aa4:	1e50      	subs	r0, r2, #1
 8001aa6:	2a01      	cmp	r2, #1
 8001aa8:	d100      	bne.n	8001aac <__aeabi_dsub+0x1f0>
 8001aaa:	e1a8      	b.n	8001dfe <__aeabi_dsub+0x542>
 8001aac:	4c59      	ldr	r4, [pc, #356]	; (8001c14 <__aeabi_dsub+0x358>)
 8001aae:	42a2      	cmp	r2, r4
 8001ab0:	d100      	bne.n	8001ab4 <__aeabi_dsub+0x1f8>
 8001ab2:	e087      	b.n	8001bc4 <__aeabi_dsub+0x308>
 8001ab4:	0002      	movs	r2, r0
 8001ab6:	e736      	b.n	8001926 <__aeabi_dsub+0x6a>
 8001ab8:	2201      	movs	r2, #1
 8001aba:	4056      	eors	r6, r2
 8001abc:	46b3      	mov	fp, r6
 8001abe:	42b5      	cmp	r5, r6
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dsub+0x208>
 8001ac2:	e721      	b.n	8001908 <__aeabi_dsub+0x4c>
 8001ac4:	4a55      	ldr	r2, [pc, #340]	; (8001c1c <__aeabi_dsub+0x360>)
 8001ac6:	4442      	add	r2, r8
 8001ac8:	2a00      	cmp	r2, #0
 8001aca:	d100      	bne.n	8001ace <__aeabi_dsub+0x212>
 8001acc:	e0b5      	b.n	8001c3a <__aeabi_dsub+0x37e>
 8001ace:	4642      	mov	r2, r8
 8001ad0:	4644      	mov	r4, r8
 8001ad2:	1a82      	subs	r2, r0, r2
 8001ad4:	2c00      	cmp	r4, #0
 8001ad6:	d100      	bne.n	8001ada <__aeabi_dsub+0x21e>
 8001ad8:	e138      	b.n	8001d4c <__aeabi_dsub+0x490>
 8001ada:	4e4e      	ldr	r6, [pc, #312]	; (8001c14 <__aeabi_dsub+0x358>)
 8001adc:	42b0      	cmp	r0, r6
 8001ade:	d100      	bne.n	8001ae2 <__aeabi_dsub+0x226>
 8001ae0:	e1de      	b.n	8001ea0 <__aeabi_dsub+0x5e4>
 8001ae2:	2680      	movs	r6, #128	; 0x80
 8001ae4:	4664      	mov	r4, ip
 8001ae6:	0436      	lsls	r6, r6, #16
 8001ae8:	4334      	orrs	r4, r6
 8001aea:	46a4      	mov	ip, r4
 8001aec:	2a38      	cmp	r2, #56	; 0x38
 8001aee:	dd00      	ble.n	8001af2 <__aeabi_dsub+0x236>
 8001af0:	e196      	b.n	8001e20 <__aeabi_dsub+0x564>
 8001af2:	2a1f      	cmp	r2, #31
 8001af4:	dd00      	ble.n	8001af8 <__aeabi_dsub+0x23c>
 8001af6:	e224      	b.n	8001f42 <__aeabi_dsub+0x686>
 8001af8:	2620      	movs	r6, #32
 8001afa:	1ab4      	subs	r4, r6, r2
 8001afc:	46a2      	mov	sl, r4
 8001afe:	4664      	mov	r4, ip
 8001b00:	4656      	mov	r6, sl
 8001b02:	40b4      	lsls	r4, r6
 8001b04:	46a1      	mov	r9, r4
 8001b06:	001c      	movs	r4, r3
 8001b08:	464e      	mov	r6, r9
 8001b0a:	40d4      	lsrs	r4, r2
 8001b0c:	4326      	orrs	r6, r4
 8001b0e:	0034      	movs	r4, r6
 8001b10:	4656      	mov	r6, sl
 8001b12:	40b3      	lsls	r3, r6
 8001b14:	1e5e      	subs	r6, r3, #1
 8001b16:	41b3      	sbcs	r3, r6
 8001b18:	431c      	orrs	r4, r3
 8001b1a:	4663      	mov	r3, ip
 8001b1c:	40d3      	lsrs	r3, r2
 8001b1e:	18c9      	adds	r1, r1, r3
 8001b20:	19e4      	adds	r4, r4, r7
 8001b22:	42bc      	cmp	r4, r7
 8001b24:	41bf      	sbcs	r7, r7
 8001b26:	427f      	negs	r7, r7
 8001b28:	46b9      	mov	r9, r7
 8001b2a:	4680      	mov	r8, r0
 8001b2c:	4489      	add	r9, r1
 8001b2e:	e0d8      	b.n	8001ce2 <__aeabi_dsub+0x426>
 8001b30:	4640      	mov	r0, r8
 8001b32:	4c3b      	ldr	r4, [pc, #236]	; (8001c20 <__aeabi_dsub+0x364>)
 8001b34:	3001      	adds	r0, #1
 8001b36:	4220      	tst	r0, r4
 8001b38:	d000      	beq.n	8001b3c <__aeabi_dsub+0x280>
 8001b3a:	e0b4      	b.n	8001ca6 <__aeabi_dsub+0x3ea>
 8001b3c:	4640      	mov	r0, r8
 8001b3e:	2800      	cmp	r0, #0
 8001b40:	d000      	beq.n	8001b44 <__aeabi_dsub+0x288>
 8001b42:	e144      	b.n	8001dce <__aeabi_dsub+0x512>
 8001b44:	4660      	mov	r0, ip
 8001b46:	4318      	orrs	r0, r3
 8001b48:	d100      	bne.n	8001b4c <__aeabi_dsub+0x290>
 8001b4a:	e190      	b.n	8001e6e <__aeabi_dsub+0x5b2>
 8001b4c:	0008      	movs	r0, r1
 8001b4e:	4338      	orrs	r0, r7
 8001b50:	d000      	beq.n	8001b54 <__aeabi_dsub+0x298>
 8001b52:	e1aa      	b.n	8001eaa <__aeabi_dsub+0x5ee>
 8001b54:	4661      	mov	r1, ip
 8001b56:	08db      	lsrs	r3, r3, #3
 8001b58:	0749      	lsls	r1, r1, #29
 8001b5a:	430b      	orrs	r3, r1
 8001b5c:	4661      	mov	r1, ip
 8001b5e:	08cc      	lsrs	r4, r1, #3
 8001b60:	e027      	b.n	8001bb2 <__aeabi_dsub+0x2f6>
 8001b62:	0008      	movs	r0, r1
 8001b64:	4338      	orrs	r0, r7
 8001b66:	d061      	beq.n	8001c2c <__aeabi_dsub+0x370>
 8001b68:	1e50      	subs	r0, r2, #1
 8001b6a:	2a01      	cmp	r2, #1
 8001b6c:	d100      	bne.n	8001b70 <__aeabi_dsub+0x2b4>
 8001b6e:	e139      	b.n	8001de4 <__aeabi_dsub+0x528>
 8001b70:	42a2      	cmp	r2, r4
 8001b72:	d027      	beq.n	8001bc4 <__aeabi_dsub+0x308>
 8001b74:	0002      	movs	r2, r0
 8001b76:	e75d      	b.n	8001a34 <__aeabi_dsub+0x178>
 8001b78:	0002      	movs	r2, r0
 8001b7a:	391f      	subs	r1, #31
 8001b7c:	40ca      	lsrs	r2, r1
 8001b7e:	0011      	movs	r1, r2
 8001b80:	2b20      	cmp	r3, #32
 8001b82:	d003      	beq.n	8001b8c <__aeabi_dsub+0x2d0>
 8001b84:	2240      	movs	r2, #64	; 0x40
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	4098      	lsls	r0, r3
 8001b8a:	4304      	orrs	r4, r0
 8001b8c:	1e63      	subs	r3, r4, #1
 8001b8e:	419c      	sbcs	r4, r3
 8001b90:	2300      	movs	r3, #0
 8001b92:	4699      	mov	r9, r3
 8001b94:	4698      	mov	r8, r3
 8001b96:	430c      	orrs	r4, r1
 8001b98:	0763      	lsls	r3, r4, #29
 8001b9a:	d000      	beq.n	8001b9e <__aeabi_dsub+0x2e2>
 8001b9c:	e712      	b.n	80019c4 <__aeabi_dsub+0x108>
 8001b9e:	464b      	mov	r3, r9
 8001ba0:	464a      	mov	r2, r9
 8001ba2:	08e4      	lsrs	r4, r4, #3
 8001ba4:	075b      	lsls	r3, r3, #29
 8001ba6:	4323      	orrs	r3, r4
 8001ba8:	08d4      	lsrs	r4, r2, #3
 8001baa:	4642      	mov	r2, r8
 8001bac:	4919      	ldr	r1, [pc, #100]	; (8001c14 <__aeabi_dsub+0x358>)
 8001bae:	428a      	cmp	r2, r1
 8001bb0:	d00e      	beq.n	8001bd0 <__aeabi_dsub+0x314>
 8001bb2:	0324      	lsls	r4, r4, #12
 8001bb4:	0552      	lsls	r2, r2, #21
 8001bb6:	0b24      	lsrs	r4, r4, #12
 8001bb8:	0d52      	lsrs	r2, r2, #21
 8001bba:	e722      	b.n	8001a02 <__aeabi_dsub+0x146>
 8001bbc:	000a      	movs	r2, r1
 8001bbe:	2400      	movs	r4, #0
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	e71e      	b.n	8001a02 <__aeabi_dsub+0x146>
 8001bc4:	08db      	lsrs	r3, r3, #3
 8001bc6:	4662      	mov	r2, ip
 8001bc8:	0752      	lsls	r2, r2, #29
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	4662      	mov	r2, ip
 8001bce:	08d4      	lsrs	r4, r2, #3
 8001bd0:	001a      	movs	r2, r3
 8001bd2:	4322      	orrs	r2, r4
 8001bd4:	d100      	bne.n	8001bd8 <__aeabi_dsub+0x31c>
 8001bd6:	e1fc      	b.n	8001fd2 <__aeabi_dsub+0x716>
 8001bd8:	2280      	movs	r2, #128	; 0x80
 8001bda:	0312      	lsls	r2, r2, #12
 8001bdc:	4314      	orrs	r4, r2
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	4a0c      	ldr	r2, [pc, #48]	; (8001c14 <__aeabi_dsub+0x358>)
 8001be2:	0b24      	lsrs	r4, r4, #12
 8001be4:	e70d      	b.n	8001a02 <__aeabi_dsub+0x146>
 8001be6:	0020      	movs	r0, r4
 8001be8:	f000 fb34 	bl	8002254 <__clzsi2>
 8001bec:	0001      	movs	r1, r0
 8001bee:	3118      	adds	r1, #24
 8001bf0:	291f      	cmp	r1, #31
 8001bf2:	dc00      	bgt.n	8001bf6 <__aeabi_dsub+0x33a>
 8001bf4:	e6c4      	b.n	8001980 <__aeabi_dsub+0xc4>
 8001bf6:	3808      	subs	r0, #8
 8001bf8:	4084      	lsls	r4, r0
 8001bfa:	4643      	mov	r3, r8
 8001bfc:	0020      	movs	r0, r4
 8001bfe:	2400      	movs	r4, #0
 8001c00:	4588      	cmp	r8, r1
 8001c02:	dc00      	bgt.n	8001c06 <__aeabi_dsub+0x34a>
 8001c04:	e6c8      	b.n	8001998 <__aeabi_dsub+0xdc>
 8001c06:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <__aeabi_dsub+0x35c>)
 8001c08:	1a5b      	subs	r3, r3, r1
 8001c0a:	4010      	ands	r0, r2
 8001c0c:	4698      	mov	r8, r3
 8001c0e:	4681      	mov	r9, r0
 8001c10:	e6d6      	b.n	80019c0 <__aeabi_dsub+0x104>
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	000007ff 	.word	0x000007ff
 8001c18:	ff7fffff 	.word	0xff7fffff
 8001c1c:	fffff801 	.word	0xfffff801
 8001c20:	000007fe 	.word	0x000007fe
 8001c24:	430f      	orrs	r7, r1
 8001c26:	1e7a      	subs	r2, r7, #1
 8001c28:	4197      	sbcs	r7, r2
 8001c2a:	e691      	b.n	8001950 <__aeabi_dsub+0x94>
 8001c2c:	4661      	mov	r1, ip
 8001c2e:	08db      	lsrs	r3, r3, #3
 8001c30:	0749      	lsls	r1, r1, #29
 8001c32:	430b      	orrs	r3, r1
 8001c34:	4661      	mov	r1, ip
 8001c36:	08cc      	lsrs	r4, r1, #3
 8001c38:	e7b8      	b.n	8001bac <__aeabi_dsub+0x2f0>
 8001c3a:	4640      	mov	r0, r8
 8001c3c:	4cd3      	ldr	r4, [pc, #844]	; (8001f8c <__aeabi_dsub+0x6d0>)
 8001c3e:	3001      	adds	r0, #1
 8001c40:	4220      	tst	r0, r4
 8001c42:	d000      	beq.n	8001c46 <__aeabi_dsub+0x38a>
 8001c44:	e0a2      	b.n	8001d8c <__aeabi_dsub+0x4d0>
 8001c46:	4640      	mov	r0, r8
 8001c48:	2800      	cmp	r0, #0
 8001c4a:	d000      	beq.n	8001c4e <__aeabi_dsub+0x392>
 8001c4c:	e101      	b.n	8001e52 <__aeabi_dsub+0x596>
 8001c4e:	4660      	mov	r0, ip
 8001c50:	4318      	orrs	r0, r3
 8001c52:	d100      	bne.n	8001c56 <__aeabi_dsub+0x39a>
 8001c54:	e15e      	b.n	8001f14 <__aeabi_dsub+0x658>
 8001c56:	0008      	movs	r0, r1
 8001c58:	4338      	orrs	r0, r7
 8001c5a:	d000      	beq.n	8001c5e <__aeabi_dsub+0x3a2>
 8001c5c:	e15f      	b.n	8001f1e <__aeabi_dsub+0x662>
 8001c5e:	4661      	mov	r1, ip
 8001c60:	08db      	lsrs	r3, r3, #3
 8001c62:	0749      	lsls	r1, r1, #29
 8001c64:	430b      	orrs	r3, r1
 8001c66:	4661      	mov	r1, ip
 8001c68:	08cc      	lsrs	r4, r1, #3
 8001c6a:	e7a2      	b.n	8001bb2 <__aeabi_dsub+0x2f6>
 8001c6c:	4dc8      	ldr	r5, [pc, #800]	; (8001f90 <__aeabi_dsub+0x6d4>)
 8001c6e:	42a8      	cmp	r0, r5
 8001c70:	d100      	bne.n	8001c74 <__aeabi_dsub+0x3b8>
 8001c72:	e0cf      	b.n	8001e14 <__aeabi_dsub+0x558>
 8001c74:	2580      	movs	r5, #128	; 0x80
 8001c76:	4664      	mov	r4, ip
 8001c78:	042d      	lsls	r5, r5, #16
 8001c7a:	432c      	orrs	r4, r5
 8001c7c:	46a4      	mov	ip, r4
 8001c7e:	2a38      	cmp	r2, #56	; 0x38
 8001c80:	dc56      	bgt.n	8001d30 <__aeabi_dsub+0x474>
 8001c82:	2a1f      	cmp	r2, #31
 8001c84:	dd00      	ble.n	8001c88 <__aeabi_dsub+0x3cc>
 8001c86:	e0d1      	b.n	8001e2c <__aeabi_dsub+0x570>
 8001c88:	2520      	movs	r5, #32
 8001c8a:	001e      	movs	r6, r3
 8001c8c:	1aad      	subs	r5, r5, r2
 8001c8e:	4664      	mov	r4, ip
 8001c90:	40ab      	lsls	r3, r5
 8001c92:	40ac      	lsls	r4, r5
 8001c94:	40d6      	lsrs	r6, r2
 8001c96:	1e5d      	subs	r5, r3, #1
 8001c98:	41ab      	sbcs	r3, r5
 8001c9a:	4334      	orrs	r4, r6
 8001c9c:	4323      	orrs	r3, r4
 8001c9e:	4664      	mov	r4, ip
 8001ca0:	40d4      	lsrs	r4, r2
 8001ca2:	1b09      	subs	r1, r1, r4
 8001ca4:	e049      	b.n	8001d3a <__aeabi_dsub+0x47e>
 8001ca6:	4660      	mov	r0, ip
 8001ca8:	1bdc      	subs	r4, r3, r7
 8001caa:	1a46      	subs	r6, r0, r1
 8001cac:	42a3      	cmp	r3, r4
 8001cae:	4180      	sbcs	r0, r0
 8001cb0:	4240      	negs	r0, r0
 8001cb2:	4681      	mov	r9, r0
 8001cb4:	0030      	movs	r0, r6
 8001cb6:	464e      	mov	r6, r9
 8001cb8:	1b80      	subs	r0, r0, r6
 8001cba:	4681      	mov	r9, r0
 8001cbc:	0200      	lsls	r0, r0, #8
 8001cbe:	d476      	bmi.n	8001dae <__aeabi_dsub+0x4f2>
 8001cc0:	464b      	mov	r3, r9
 8001cc2:	4323      	orrs	r3, r4
 8001cc4:	d000      	beq.n	8001cc8 <__aeabi_dsub+0x40c>
 8001cc6:	e652      	b.n	800196e <__aeabi_dsub+0xb2>
 8001cc8:	2400      	movs	r4, #0
 8001cca:	2500      	movs	r5, #0
 8001ccc:	e771      	b.n	8001bb2 <__aeabi_dsub+0x2f6>
 8001cce:	4339      	orrs	r1, r7
 8001cd0:	000c      	movs	r4, r1
 8001cd2:	1e62      	subs	r2, r4, #1
 8001cd4:	4194      	sbcs	r4, r2
 8001cd6:	18e4      	adds	r4, r4, r3
 8001cd8:	429c      	cmp	r4, r3
 8001cda:	419b      	sbcs	r3, r3
 8001cdc:	425b      	negs	r3, r3
 8001cde:	4463      	add	r3, ip
 8001ce0:	4699      	mov	r9, r3
 8001ce2:	464b      	mov	r3, r9
 8001ce4:	021b      	lsls	r3, r3, #8
 8001ce6:	d400      	bmi.n	8001cea <__aeabi_dsub+0x42e>
 8001ce8:	e756      	b.n	8001b98 <__aeabi_dsub+0x2dc>
 8001cea:	2301      	movs	r3, #1
 8001cec:	469c      	mov	ip, r3
 8001cee:	4ba8      	ldr	r3, [pc, #672]	; (8001f90 <__aeabi_dsub+0x6d4>)
 8001cf0:	44e0      	add	r8, ip
 8001cf2:	4598      	cmp	r8, r3
 8001cf4:	d038      	beq.n	8001d68 <__aeabi_dsub+0x4ac>
 8001cf6:	464b      	mov	r3, r9
 8001cf8:	48a6      	ldr	r0, [pc, #664]	; (8001f94 <__aeabi_dsub+0x6d8>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	4003      	ands	r3, r0
 8001cfe:	0018      	movs	r0, r3
 8001d00:	0863      	lsrs	r3, r4, #1
 8001d02:	4014      	ands	r4, r2
 8001d04:	431c      	orrs	r4, r3
 8001d06:	07c3      	lsls	r3, r0, #31
 8001d08:	431c      	orrs	r4, r3
 8001d0a:	0843      	lsrs	r3, r0, #1
 8001d0c:	4699      	mov	r9, r3
 8001d0e:	e657      	b.n	80019c0 <__aeabi_dsub+0x104>
 8001d10:	0010      	movs	r0, r2
 8001d12:	000e      	movs	r6, r1
 8001d14:	3820      	subs	r0, #32
 8001d16:	40c6      	lsrs	r6, r0
 8001d18:	2a20      	cmp	r2, #32
 8001d1a:	d004      	beq.n	8001d26 <__aeabi_dsub+0x46a>
 8001d1c:	2040      	movs	r0, #64	; 0x40
 8001d1e:	1a82      	subs	r2, r0, r2
 8001d20:	4091      	lsls	r1, r2
 8001d22:	430f      	orrs	r7, r1
 8001d24:	46b9      	mov	r9, r7
 8001d26:	464f      	mov	r7, r9
 8001d28:	1e7a      	subs	r2, r7, #1
 8001d2a:	4197      	sbcs	r7, r2
 8001d2c:	4337      	orrs	r7, r6
 8001d2e:	e60f      	b.n	8001950 <__aeabi_dsub+0x94>
 8001d30:	4662      	mov	r2, ip
 8001d32:	431a      	orrs	r2, r3
 8001d34:	0013      	movs	r3, r2
 8001d36:	1e5a      	subs	r2, r3, #1
 8001d38:	4193      	sbcs	r3, r2
 8001d3a:	1afc      	subs	r4, r7, r3
 8001d3c:	42a7      	cmp	r7, r4
 8001d3e:	41bf      	sbcs	r7, r7
 8001d40:	427f      	negs	r7, r7
 8001d42:	1bcb      	subs	r3, r1, r7
 8001d44:	4699      	mov	r9, r3
 8001d46:	465d      	mov	r5, fp
 8001d48:	4680      	mov	r8, r0
 8001d4a:	e608      	b.n	800195e <__aeabi_dsub+0xa2>
 8001d4c:	4666      	mov	r6, ip
 8001d4e:	431e      	orrs	r6, r3
 8001d50:	d100      	bne.n	8001d54 <__aeabi_dsub+0x498>
 8001d52:	e0be      	b.n	8001ed2 <__aeabi_dsub+0x616>
 8001d54:	1e56      	subs	r6, r2, #1
 8001d56:	2a01      	cmp	r2, #1
 8001d58:	d100      	bne.n	8001d5c <__aeabi_dsub+0x4a0>
 8001d5a:	e109      	b.n	8001f70 <__aeabi_dsub+0x6b4>
 8001d5c:	4c8c      	ldr	r4, [pc, #560]	; (8001f90 <__aeabi_dsub+0x6d4>)
 8001d5e:	42a2      	cmp	r2, r4
 8001d60:	d100      	bne.n	8001d64 <__aeabi_dsub+0x4a8>
 8001d62:	e119      	b.n	8001f98 <__aeabi_dsub+0x6dc>
 8001d64:	0032      	movs	r2, r6
 8001d66:	e6c1      	b.n	8001aec <__aeabi_dsub+0x230>
 8001d68:	4642      	mov	r2, r8
 8001d6a:	2400      	movs	r4, #0
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	e648      	b.n	8001a02 <__aeabi_dsub+0x146>
 8001d70:	2020      	movs	r0, #32
 8001d72:	000c      	movs	r4, r1
 8001d74:	1a80      	subs	r0, r0, r2
 8001d76:	003e      	movs	r6, r7
 8001d78:	4087      	lsls	r7, r0
 8001d7a:	4084      	lsls	r4, r0
 8001d7c:	40d6      	lsrs	r6, r2
 8001d7e:	1e78      	subs	r0, r7, #1
 8001d80:	4187      	sbcs	r7, r0
 8001d82:	40d1      	lsrs	r1, r2
 8001d84:	4334      	orrs	r4, r6
 8001d86:	433c      	orrs	r4, r7
 8001d88:	448c      	add	ip, r1
 8001d8a:	e7a4      	b.n	8001cd6 <__aeabi_dsub+0x41a>
 8001d8c:	4a80      	ldr	r2, [pc, #512]	; (8001f90 <__aeabi_dsub+0x6d4>)
 8001d8e:	4290      	cmp	r0, r2
 8001d90:	d100      	bne.n	8001d94 <__aeabi_dsub+0x4d8>
 8001d92:	e0e9      	b.n	8001f68 <__aeabi_dsub+0x6ac>
 8001d94:	19df      	adds	r7, r3, r7
 8001d96:	429f      	cmp	r7, r3
 8001d98:	419b      	sbcs	r3, r3
 8001d9a:	4461      	add	r1, ip
 8001d9c:	425b      	negs	r3, r3
 8001d9e:	18c9      	adds	r1, r1, r3
 8001da0:	07cc      	lsls	r4, r1, #31
 8001da2:	087f      	lsrs	r7, r7, #1
 8001da4:	084b      	lsrs	r3, r1, #1
 8001da6:	4699      	mov	r9, r3
 8001da8:	4680      	mov	r8, r0
 8001daa:	433c      	orrs	r4, r7
 8001dac:	e6f4      	b.n	8001b98 <__aeabi_dsub+0x2dc>
 8001dae:	1afc      	subs	r4, r7, r3
 8001db0:	42a7      	cmp	r7, r4
 8001db2:	41bf      	sbcs	r7, r7
 8001db4:	4663      	mov	r3, ip
 8001db6:	427f      	negs	r7, r7
 8001db8:	1ac9      	subs	r1, r1, r3
 8001dba:	1bcb      	subs	r3, r1, r7
 8001dbc:	4699      	mov	r9, r3
 8001dbe:	465d      	mov	r5, fp
 8001dc0:	e5d5      	b.n	800196e <__aeabi_dsub+0xb2>
 8001dc2:	08ff      	lsrs	r7, r7, #3
 8001dc4:	074b      	lsls	r3, r1, #29
 8001dc6:	465d      	mov	r5, fp
 8001dc8:	433b      	orrs	r3, r7
 8001dca:	08cc      	lsrs	r4, r1, #3
 8001dcc:	e6ee      	b.n	8001bac <__aeabi_dsub+0x2f0>
 8001dce:	4662      	mov	r2, ip
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	d000      	beq.n	8001dd6 <__aeabi_dsub+0x51a>
 8001dd4:	e082      	b.n	8001edc <__aeabi_dsub+0x620>
 8001dd6:	000b      	movs	r3, r1
 8001dd8:	433b      	orrs	r3, r7
 8001dda:	d11b      	bne.n	8001e14 <__aeabi_dsub+0x558>
 8001ddc:	2480      	movs	r4, #128	; 0x80
 8001dde:	2500      	movs	r5, #0
 8001de0:	0324      	lsls	r4, r4, #12
 8001de2:	e6f9      	b.n	8001bd8 <__aeabi_dsub+0x31c>
 8001de4:	19dc      	adds	r4, r3, r7
 8001de6:	429c      	cmp	r4, r3
 8001de8:	419b      	sbcs	r3, r3
 8001dea:	4461      	add	r1, ip
 8001dec:	4689      	mov	r9, r1
 8001dee:	425b      	negs	r3, r3
 8001df0:	4499      	add	r9, r3
 8001df2:	464b      	mov	r3, r9
 8001df4:	021b      	lsls	r3, r3, #8
 8001df6:	d444      	bmi.n	8001e82 <__aeabi_dsub+0x5c6>
 8001df8:	2301      	movs	r3, #1
 8001dfa:	4698      	mov	r8, r3
 8001dfc:	e6cc      	b.n	8001b98 <__aeabi_dsub+0x2dc>
 8001dfe:	1bdc      	subs	r4, r3, r7
 8001e00:	4662      	mov	r2, ip
 8001e02:	42a3      	cmp	r3, r4
 8001e04:	419b      	sbcs	r3, r3
 8001e06:	1a51      	subs	r1, r2, r1
 8001e08:	425b      	negs	r3, r3
 8001e0a:	1acb      	subs	r3, r1, r3
 8001e0c:	4699      	mov	r9, r3
 8001e0e:	2301      	movs	r3, #1
 8001e10:	4698      	mov	r8, r3
 8001e12:	e5a4      	b.n	800195e <__aeabi_dsub+0xa2>
 8001e14:	08ff      	lsrs	r7, r7, #3
 8001e16:	074b      	lsls	r3, r1, #29
 8001e18:	465d      	mov	r5, fp
 8001e1a:	433b      	orrs	r3, r7
 8001e1c:	08cc      	lsrs	r4, r1, #3
 8001e1e:	e6d7      	b.n	8001bd0 <__aeabi_dsub+0x314>
 8001e20:	4662      	mov	r2, ip
 8001e22:	431a      	orrs	r2, r3
 8001e24:	0014      	movs	r4, r2
 8001e26:	1e63      	subs	r3, r4, #1
 8001e28:	419c      	sbcs	r4, r3
 8001e2a:	e679      	b.n	8001b20 <__aeabi_dsub+0x264>
 8001e2c:	0015      	movs	r5, r2
 8001e2e:	4664      	mov	r4, ip
 8001e30:	3d20      	subs	r5, #32
 8001e32:	40ec      	lsrs	r4, r5
 8001e34:	46a0      	mov	r8, r4
 8001e36:	2a20      	cmp	r2, #32
 8001e38:	d005      	beq.n	8001e46 <__aeabi_dsub+0x58a>
 8001e3a:	2540      	movs	r5, #64	; 0x40
 8001e3c:	4664      	mov	r4, ip
 8001e3e:	1aaa      	subs	r2, r5, r2
 8001e40:	4094      	lsls	r4, r2
 8001e42:	4323      	orrs	r3, r4
 8001e44:	469a      	mov	sl, r3
 8001e46:	4654      	mov	r4, sl
 8001e48:	1e63      	subs	r3, r4, #1
 8001e4a:	419c      	sbcs	r4, r3
 8001e4c:	4643      	mov	r3, r8
 8001e4e:	4323      	orrs	r3, r4
 8001e50:	e773      	b.n	8001d3a <__aeabi_dsub+0x47e>
 8001e52:	4662      	mov	r2, ip
 8001e54:	431a      	orrs	r2, r3
 8001e56:	d023      	beq.n	8001ea0 <__aeabi_dsub+0x5e4>
 8001e58:	000a      	movs	r2, r1
 8001e5a:	433a      	orrs	r2, r7
 8001e5c:	d000      	beq.n	8001e60 <__aeabi_dsub+0x5a4>
 8001e5e:	e0a0      	b.n	8001fa2 <__aeabi_dsub+0x6e6>
 8001e60:	4662      	mov	r2, ip
 8001e62:	08db      	lsrs	r3, r3, #3
 8001e64:	0752      	lsls	r2, r2, #29
 8001e66:	4313      	orrs	r3, r2
 8001e68:	4662      	mov	r2, ip
 8001e6a:	08d4      	lsrs	r4, r2, #3
 8001e6c:	e6b0      	b.n	8001bd0 <__aeabi_dsub+0x314>
 8001e6e:	000b      	movs	r3, r1
 8001e70:	433b      	orrs	r3, r7
 8001e72:	d100      	bne.n	8001e76 <__aeabi_dsub+0x5ba>
 8001e74:	e728      	b.n	8001cc8 <__aeabi_dsub+0x40c>
 8001e76:	08ff      	lsrs	r7, r7, #3
 8001e78:	074b      	lsls	r3, r1, #29
 8001e7a:	465d      	mov	r5, fp
 8001e7c:	433b      	orrs	r3, r7
 8001e7e:	08cc      	lsrs	r4, r1, #3
 8001e80:	e697      	b.n	8001bb2 <__aeabi_dsub+0x2f6>
 8001e82:	2302      	movs	r3, #2
 8001e84:	4698      	mov	r8, r3
 8001e86:	e736      	b.n	8001cf6 <__aeabi_dsub+0x43a>
 8001e88:	1afc      	subs	r4, r7, r3
 8001e8a:	42a7      	cmp	r7, r4
 8001e8c:	41bf      	sbcs	r7, r7
 8001e8e:	4663      	mov	r3, ip
 8001e90:	427f      	negs	r7, r7
 8001e92:	1ac9      	subs	r1, r1, r3
 8001e94:	1bcb      	subs	r3, r1, r7
 8001e96:	4699      	mov	r9, r3
 8001e98:	2301      	movs	r3, #1
 8001e9a:	465d      	mov	r5, fp
 8001e9c:	4698      	mov	r8, r3
 8001e9e:	e55e      	b.n	800195e <__aeabi_dsub+0xa2>
 8001ea0:	074b      	lsls	r3, r1, #29
 8001ea2:	08ff      	lsrs	r7, r7, #3
 8001ea4:	433b      	orrs	r3, r7
 8001ea6:	08cc      	lsrs	r4, r1, #3
 8001ea8:	e692      	b.n	8001bd0 <__aeabi_dsub+0x314>
 8001eaa:	1bdc      	subs	r4, r3, r7
 8001eac:	4660      	mov	r0, ip
 8001eae:	42a3      	cmp	r3, r4
 8001eb0:	41b6      	sbcs	r6, r6
 8001eb2:	1a40      	subs	r0, r0, r1
 8001eb4:	4276      	negs	r6, r6
 8001eb6:	1b80      	subs	r0, r0, r6
 8001eb8:	4681      	mov	r9, r0
 8001eba:	0200      	lsls	r0, r0, #8
 8001ebc:	d560      	bpl.n	8001f80 <__aeabi_dsub+0x6c4>
 8001ebe:	1afc      	subs	r4, r7, r3
 8001ec0:	42a7      	cmp	r7, r4
 8001ec2:	41bf      	sbcs	r7, r7
 8001ec4:	4663      	mov	r3, ip
 8001ec6:	427f      	negs	r7, r7
 8001ec8:	1ac9      	subs	r1, r1, r3
 8001eca:	1bcb      	subs	r3, r1, r7
 8001ecc:	4699      	mov	r9, r3
 8001ece:	465d      	mov	r5, fp
 8001ed0:	e576      	b.n	80019c0 <__aeabi_dsub+0x104>
 8001ed2:	08ff      	lsrs	r7, r7, #3
 8001ed4:	074b      	lsls	r3, r1, #29
 8001ed6:	433b      	orrs	r3, r7
 8001ed8:	08cc      	lsrs	r4, r1, #3
 8001eda:	e667      	b.n	8001bac <__aeabi_dsub+0x2f0>
 8001edc:	000a      	movs	r2, r1
 8001ede:	08db      	lsrs	r3, r3, #3
 8001ee0:	433a      	orrs	r2, r7
 8001ee2:	d100      	bne.n	8001ee6 <__aeabi_dsub+0x62a>
 8001ee4:	e66f      	b.n	8001bc6 <__aeabi_dsub+0x30a>
 8001ee6:	4662      	mov	r2, ip
 8001ee8:	0752      	lsls	r2, r2, #29
 8001eea:	4313      	orrs	r3, r2
 8001eec:	4662      	mov	r2, ip
 8001eee:	08d4      	lsrs	r4, r2, #3
 8001ef0:	2280      	movs	r2, #128	; 0x80
 8001ef2:	0312      	lsls	r2, r2, #12
 8001ef4:	4214      	tst	r4, r2
 8001ef6:	d007      	beq.n	8001f08 <__aeabi_dsub+0x64c>
 8001ef8:	08c8      	lsrs	r0, r1, #3
 8001efa:	4210      	tst	r0, r2
 8001efc:	d104      	bne.n	8001f08 <__aeabi_dsub+0x64c>
 8001efe:	465d      	mov	r5, fp
 8001f00:	0004      	movs	r4, r0
 8001f02:	08fb      	lsrs	r3, r7, #3
 8001f04:	0749      	lsls	r1, r1, #29
 8001f06:	430b      	orrs	r3, r1
 8001f08:	0f5a      	lsrs	r2, r3, #29
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	08db      	lsrs	r3, r3, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	e65d      	b.n	8001bd0 <__aeabi_dsub+0x314>
 8001f14:	074b      	lsls	r3, r1, #29
 8001f16:	08ff      	lsrs	r7, r7, #3
 8001f18:	433b      	orrs	r3, r7
 8001f1a:	08cc      	lsrs	r4, r1, #3
 8001f1c:	e649      	b.n	8001bb2 <__aeabi_dsub+0x2f6>
 8001f1e:	19dc      	adds	r4, r3, r7
 8001f20:	429c      	cmp	r4, r3
 8001f22:	419b      	sbcs	r3, r3
 8001f24:	4461      	add	r1, ip
 8001f26:	4689      	mov	r9, r1
 8001f28:	425b      	negs	r3, r3
 8001f2a:	4499      	add	r9, r3
 8001f2c:	464b      	mov	r3, r9
 8001f2e:	021b      	lsls	r3, r3, #8
 8001f30:	d400      	bmi.n	8001f34 <__aeabi_dsub+0x678>
 8001f32:	e631      	b.n	8001b98 <__aeabi_dsub+0x2dc>
 8001f34:	464a      	mov	r2, r9
 8001f36:	4b17      	ldr	r3, [pc, #92]	; (8001f94 <__aeabi_dsub+0x6d8>)
 8001f38:	401a      	ands	r2, r3
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	4691      	mov	r9, r2
 8001f3e:	4698      	mov	r8, r3
 8001f40:	e62a      	b.n	8001b98 <__aeabi_dsub+0x2dc>
 8001f42:	0016      	movs	r6, r2
 8001f44:	4664      	mov	r4, ip
 8001f46:	3e20      	subs	r6, #32
 8001f48:	40f4      	lsrs	r4, r6
 8001f4a:	46a0      	mov	r8, r4
 8001f4c:	2a20      	cmp	r2, #32
 8001f4e:	d005      	beq.n	8001f5c <__aeabi_dsub+0x6a0>
 8001f50:	2640      	movs	r6, #64	; 0x40
 8001f52:	4664      	mov	r4, ip
 8001f54:	1ab2      	subs	r2, r6, r2
 8001f56:	4094      	lsls	r4, r2
 8001f58:	4323      	orrs	r3, r4
 8001f5a:	469a      	mov	sl, r3
 8001f5c:	4654      	mov	r4, sl
 8001f5e:	1e63      	subs	r3, r4, #1
 8001f60:	419c      	sbcs	r4, r3
 8001f62:	4643      	mov	r3, r8
 8001f64:	431c      	orrs	r4, r3
 8001f66:	e5db      	b.n	8001b20 <__aeabi_dsub+0x264>
 8001f68:	0002      	movs	r2, r0
 8001f6a:	2400      	movs	r4, #0
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	e548      	b.n	8001a02 <__aeabi_dsub+0x146>
 8001f70:	19dc      	adds	r4, r3, r7
 8001f72:	42bc      	cmp	r4, r7
 8001f74:	41bf      	sbcs	r7, r7
 8001f76:	4461      	add	r1, ip
 8001f78:	4689      	mov	r9, r1
 8001f7a:	427f      	negs	r7, r7
 8001f7c:	44b9      	add	r9, r7
 8001f7e:	e738      	b.n	8001df2 <__aeabi_dsub+0x536>
 8001f80:	464b      	mov	r3, r9
 8001f82:	4323      	orrs	r3, r4
 8001f84:	d100      	bne.n	8001f88 <__aeabi_dsub+0x6cc>
 8001f86:	e69f      	b.n	8001cc8 <__aeabi_dsub+0x40c>
 8001f88:	e606      	b.n	8001b98 <__aeabi_dsub+0x2dc>
 8001f8a:	46c0      	nop			; (mov r8, r8)
 8001f8c:	000007fe 	.word	0x000007fe
 8001f90:	000007ff 	.word	0x000007ff
 8001f94:	ff7fffff 	.word	0xff7fffff
 8001f98:	08ff      	lsrs	r7, r7, #3
 8001f9a:	074b      	lsls	r3, r1, #29
 8001f9c:	433b      	orrs	r3, r7
 8001f9e:	08cc      	lsrs	r4, r1, #3
 8001fa0:	e616      	b.n	8001bd0 <__aeabi_dsub+0x314>
 8001fa2:	4662      	mov	r2, ip
 8001fa4:	08db      	lsrs	r3, r3, #3
 8001fa6:	0752      	lsls	r2, r2, #29
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	4662      	mov	r2, ip
 8001fac:	08d4      	lsrs	r4, r2, #3
 8001fae:	2280      	movs	r2, #128	; 0x80
 8001fb0:	0312      	lsls	r2, r2, #12
 8001fb2:	4214      	tst	r4, r2
 8001fb4:	d007      	beq.n	8001fc6 <__aeabi_dsub+0x70a>
 8001fb6:	08c8      	lsrs	r0, r1, #3
 8001fb8:	4210      	tst	r0, r2
 8001fba:	d104      	bne.n	8001fc6 <__aeabi_dsub+0x70a>
 8001fbc:	465d      	mov	r5, fp
 8001fbe:	0004      	movs	r4, r0
 8001fc0:	08fb      	lsrs	r3, r7, #3
 8001fc2:	0749      	lsls	r1, r1, #29
 8001fc4:	430b      	orrs	r3, r1
 8001fc6:	0f5a      	lsrs	r2, r3, #29
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	0752      	lsls	r2, r2, #29
 8001fcc:	08db      	lsrs	r3, r3, #3
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	e5fe      	b.n	8001bd0 <__aeabi_dsub+0x314>
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	4a01      	ldr	r2, [pc, #4]	; (8001fdc <__aeabi_dsub+0x720>)
 8001fd6:	001c      	movs	r4, r3
 8001fd8:	e513      	b.n	8001a02 <__aeabi_dsub+0x146>
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	000007ff 	.word	0x000007ff

08001fe0 <__aeabi_i2d>:
 8001fe0:	b570      	push	{r4, r5, r6, lr}
 8001fe2:	2800      	cmp	r0, #0
 8001fe4:	d016      	beq.n	8002014 <__aeabi_i2d+0x34>
 8001fe6:	17c3      	asrs	r3, r0, #31
 8001fe8:	18c5      	adds	r5, r0, r3
 8001fea:	405d      	eors	r5, r3
 8001fec:	0fc4      	lsrs	r4, r0, #31
 8001fee:	0028      	movs	r0, r5
 8001ff0:	f000 f930 	bl	8002254 <__clzsi2>
 8001ff4:	4a11      	ldr	r2, [pc, #68]	; (800203c <__aeabi_i2d+0x5c>)
 8001ff6:	1a12      	subs	r2, r2, r0
 8001ff8:	280a      	cmp	r0, #10
 8001ffa:	dc16      	bgt.n	800202a <__aeabi_i2d+0x4a>
 8001ffc:	0003      	movs	r3, r0
 8001ffe:	002e      	movs	r6, r5
 8002000:	3315      	adds	r3, #21
 8002002:	409e      	lsls	r6, r3
 8002004:	230b      	movs	r3, #11
 8002006:	1a18      	subs	r0, r3, r0
 8002008:	40c5      	lsrs	r5, r0
 800200a:	0552      	lsls	r2, r2, #21
 800200c:	032d      	lsls	r5, r5, #12
 800200e:	0b2d      	lsrs	r5, r5, #12
 8002010:	0d53      	lsrs	r3, r2, #21
 8002012:	e003      	b.n	800201c <__aeabi_i2d+0x3c>
 8002014:	2400      	movs	r4, #0
 8002016:	2300      	movs	r3, #0
 8002018:	2500      	movs	r5, #0
 800201a:	2600      	movs	r6, #0
 800201c:	051b      	lsls	r3, r3, #20
 800201e:	432b      	orrs	r3, r5
 8002020:	07e4      	lsls	r4, r4, #31
 8002022:	4323      	orrs	r3, r4
 8002024:	0030      	movs	r0, r6
 8002026:	0019      	movs	r1, r3
 8002028:	bd70      	pop	{r4, r5, r6, pc}
 800202a:	380b      	subs	r0, #11
 800202c:	4085      	lsls	r5, r0
 800202e:	0552      	lsls	r2, r2, #21
 8002030:	032d      	lsls	r5, r5, #12
 8002032:	2600      	movs	r6, #0
 8002034:	0b2d      	lsrs	r5, r5, #12
 8002036:	0d53      	lsrs	r3, r2, #21
 8002038:	e7f0      	b.n	800201c <__aeabi_i2d+0x3c>
 800203a:	46c0      	nop			; (mov r8, r8)
 800203c:	0000041e 	.word	0x0000041e

08002040 <__aeabi_f2d>:
 8002040:	b570      	push	{r4, r5, r6, lr}
 8002042:	0043      	lsls	r3, r0, #1
 8002044:	0246      	lsls	r6, r0, #9
 8002046:	0fc4      	lsrs	r4, r0, #31
 8002048:	20fe      	movs	r0, #254	; 0xfe
 800204a:	0e1b      	lsrs	r3, r3, #24
 800204c:	1c59      	adds	r1, r3, #1
 800204e:	0a75      	lsrs	r5, r6, #9
 8002050:	4208      	tst	r0, r1
 8002052:	d00c      	beq.n	800206e <__aeabi_f2d+0x2e>
 8002054:	22e0      	movs	r2, #224	; 0xe0
 8002056:	0092      	lsls	r2, r2, #2
 8002058:	4694      	mov	ip, r2
 800205a:	076d      	lsls	r5, r5, #29
 800205c:	0b36      	lsrs	r6, r6, #12
 800205e:	4463      	add	r3, ip
 8002060:	051b      	lsls	r3, r3, #20
 8002062:	4333      	orrs	r3, r6
 8002064:	07e4      	lsls	r4, r4, #31
 8002066:	4323      	orrs	r3, r4
 8002068:	0028      	movs	r0, r5
 800206a:	0019      	movs	r1, r3
 800206c:	bd70      	pop	{r4, r5, r6, pc}
 800206e:	2b00      	cmp	r3, #0
 8002070:	d114      	bne.n	800209c <__aeabi_f2d+0x5c>
 8002072:	2d00      	cmp	r5, #0
 8002074:	d01b      	beq.n	80020ae <__aeabi_f2d+0x6e>
 8002076:	0028      	movs	r0, r5
 8002078:	f000 f8ec 	bl	8002254 <__clzsi2>
 800207c:	280a      	cmp	r0, #10
 800207e:	dc1c      	bgt.n	80020ba <__aeabi_f2d+0x7a>
 8002080:	230b      	movs	r3, #11
 8002082:	002e      	movs	r6, r5
 8002084:	1a1b      	subs	r3, r3, r0
 8002086:	40de      	lsrs	r6, r3
 8002088:	0003      	movs	r3, r0
 800208a:	3315      	adds	r3, #21
 800208c:	409d      	lsls	r5, r3
 800208e:	4a0e      	ldr	r2, [pc, #56]	; (80020c8 <__aeabi_f2d+0x88>)
 8002090:	0336      	lsls	r6, r6, #12
 8002092:	1a12      	subs	r2, r2, r0
 8002094:	0552      	lsls	r2, r2, #21
 8002096:	0b36      	lsrs	r6, r6, #12
 8002098:	0d53      	lsrs	r3, r2, #21
 800209a:	e7e1      	b.n	8002060 <__aeabi_f2d+0x20>
 800209c:	2d00      	cmp	r5, #0
 800209e:	d009      	beq.n	80020b4 <__aeabi_f2d+0x74>
 80020a0:	2280      	movs	r2, #128	; 0x80
 80020a2:	0b36      	lsrs	r6, r6, #12
 80020a4:	0312      	lsls	r2, r2, #12
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <__aeabi_f2d+0x8c>)
 80020a8:	076d      	lsls	r5, r5, #29
 80020aa:	4316      	orrs	r6, r2
 80020ac:	e7d8      	b.n	8002060 <__aeabi_f2d+0x20>
 80020ae:	2300      	movs	r3, #0
 80020b0:	2600      	movs	r6, #0
 80020b2:	e7d5      	b.n	8002060 <__aeabi_f2d+0x20>
 80020b4:	2600      	movs	r6, #0
 80020b6:	4b05      	ldr	r3, [pc, #20]	; (80020cc <__aeabi_f2d+0x8c>)
 80020b8:	e7d2      	b.n	8002060 <__aeabi_f2d+0x20>
 80020ba:	0003      	movs	r3, r0
 80020bc:	3b0b      	subs	r3, #11
 80020be:	409d      	lsls	r5, r3
 80020c0:	002e      	movs	r6, r5
 80020c2:	2500      	movs	r5, #0
 80020c4:	e7e3      	b.n	800208e <__aeabi_f2d+0x4e>
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	00000389 	.word	0x00000389
 80020cc:	000007ff 	.word	0x000007ff

080020d0 <__aeabi_d2f>:
 80020d0:	0002      	movs	r2, r0
 80020d2:	004b      	lsls	r3, r1, #1
 80020d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020d6:	0d5b      	lsrs	r3, r3, #21
 80020d8:	030c      	lsls	r4, r1, #12
 80020da:	4e3d      	ldr	r6, [pc, #244]	; (80021d0 <__aeabi_d2f+0x100>)
 80020dc:	0a64      	lsrs	r4, r4, #9
 80020de:	0f40      	lsrs	r0, r0, #29
 80020e0:	1c5f      	adds	r7, r3, #1
 80020e2:	0fc9      	lsrs	r1, r1, #31
 80020e4:	4304      	orrs	r4, r0
 80020e6:	00d5      	lsls	r5, r2, #3
 80020e8:	4237      	tst	r7, r6
 80020ea:	d00a      	beq.n	8002102 <__aeabi_d2f+0x32>
 80020ec:	4839      	ldr	r0, [pc, #228]	; (80021d4 <__aeabi_d2f+0x104>)
 80020ee:	181e      	adds	r6, r3, r0
 80020f0:	2efe      	cmp	r6, #254	; 0xfe
 80020f2:	dd16      	ble.n	8002122 <__aeabi_d2f+0x52>
 80020f4:	20ff      	movs	r0, #255	; 0xff
 80020f6:	2400      	movs	r4, #0
 80020f8:	05c0      	lsls	r0, r0, #23
 80020fa:	4320      	orrs	r0, r4
 80020fc:	07c9      	lsls	r1, r1, #31
 80020fe:	4308      	orrs	r0, r1
 8002100:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002102:	2b00      	cmp	r3, #0
 8002104:	d106      	bne.n	8002114 <__aeabi_d2f+0x44>
 8002106:	432c      	orrs	r4, r5
 8002108:	d026      	beq.n	8002158 <__aeabi_d2f+0x88>
 800210a:	2205      	movs	r2, #5
 800210c:	0192      	lsls	r2, r2, #6
 800210e:	0a54      	lsrs	r4, r2, #9
 8002110:	b2d8      	uxtb	r0, r3
 8002112:	e7f1      	b.n	80020f8 <__aeabi_d2f+0x28>
 8002114:	4325      	orrs	r5, r4
 8002116:	d0ed      	beq.n	80020f4 <__aeabi_d2f+0x24>
 8002118:	2080      	movs	r0, #128	; 0x80
 800211a:	03c0      	lsls	r0, r0, #15
 800211c:	4304      	orrs	r4, r0
 800211e:	20ff      	movs	r0, #255	; 0xff
 8002120:	e7ea      	b.n	80020f8 <__aeabi_d2f+0x28>
 8002122:	2e00      	cmp	r6, #0
 8002124:	dd1b      	ble.n	800215e <__aeabi_d2f+0x8e>
 8002126:	0192      	lsls	r2, r2, #6
 8002128:	1e53      	subs	r3, r2, #1
 800212a:	419a      	sbcs	r2, r3
 800212c:	00e4      	lsls	r4, r4, #3
 800212e:	0f6d      	lsrs	r5, r5, #29
 8002130:	4322      	orrs	r2, r4
 8002132:	432a      	orrs	r2, r5
 8002134:	0753      	lsls	r3, r2, #29
 8002136:	d048      	beq.n	80021ca <__aeabi_d2f+0xfa>
 8002138:	230f      	movs	r3, #15
 800213a:	4013      	ands	r3, r2
 800213c:	2b04      	cmp	r3, #4
 800213e:	d000      	beq.n	8002142 <__aeabi_d2f+0x72>
 8002140:	3204      	adds	r2, #4
 8002142:	2380      	movs	r3, #128	; 0x80
 8002144:	04db      	lsls	r3, r3, #19
 8002146:	4013      	ands	r3, r2
 8002148:	d03f      	beq.n	80021ca <__aeabi_d2f+0xfa>
 800214a:	1c70      	adds	r0, r6, #1
 800214c:	2efe      	cmp	r6, #254	; 0xfe
 800214e:	d0d1      	beq.n	80020f4 <__aeabi_d2f+0x24>
 8002150:	0192      	lsls	r2, r2, #6
 8002152:	0a54      	lsrs	r4, r2, #9
 8002154:	b2c0      	uxtb	r0, r0
 8002156:	e7cf      	b.n	80020f8 <__aeabi_d2f+0x28>
 8002158:	2000      	movs	r0, #0
 800215a:	2400      	movs	r4, #0
 800215c:	e7cc      	b.n	80020f8 <__aeabi_d2f+0x28>
 800215e:	0032      	movs	r2, r6
 8002160:	3217      	adds	r2, #23
 8002162:	db22      	blt.n	80021aa <__aeabi_d2f+0xda>
 8002164:	2080      	movs	r0, #128	; 0x80
 8002166:	0400      	lsls	r0, r0, #16
 8002168:	4320      	orrs	r0, r4
 800216a:	241e      	movs	r4, #30
 800216c:	1ba4      	subs	r4, r4, r6
 800216e:	2c1f      	cmp	r4, #31
 8002170:	dd1d      	ble.n	80021ae <__aeabi_d2f+0xde>
 8002172:	2202      	movs	r2, #2
 8002174:	4252      	negs	r2, r2
 8002176:	1b96      	subs	r6, r2, r6
 8002178:	0002      	movs	r2, r0
 800217a:	40f2      	lsrs	r2, r6
 800217c:	0016      	movs	r6, r2
 800217e:	2c20      	cmp	r4, #32
 8002180:	d004      	beq.n	800218c <__aeabi_d2f+0xbc>
 8002182:	4a15      	ldr	r2, [pc, #84]	; (80021d8 <__aeabi_d2f+0x108>)
 8002184:	4694      	mov	ip, r2
 8002186:	4463      	add	r3, ip
 8002188:	4098      	lsls	r0, r3
 800218a:	4305      	orrs	r5, r0
 800218c:	002a      	movs	r2, r5
 800218e:	1e53      	subs	r3, r2, #1
 8002190:	419a      	sbcs	r2, r3
 8002192:	4332      	orrs	r2, r6
 8002194:	2600      	movs	r6, #0
 8002196:	0753      	lsls	r3, r2, #29
 8002198:	d1ce      	bne.n	8002138 <__aeabi_d2f+0x68>
 800219a:	2480      	movs	r4, #128	; 0x80
 800219c:	0013      	movs	r3, r2
 800219e:	04e4      	lsls	r4, r4, #19
 80021a0:	2001      	movs	r0, #1
 80021a2:	4023      	ands	r3, r4
 80021a4:	4222      	tst	r2, r4
 80021a6:	d1d3      	bne.n	8002150 <__aeabi_d2f+0x80>
 80021a8:	e7b0      	b.n	800210c <__aeabi_d2f+0x3c>
 80021aa:	2300      	movs	r3, #0
 80021ac:	e7ad      	b.n	800210a <__aeabi_d2f+0x3a>
 80021ae:	4a0b      	ldr	r2, [pc, #44]	; (80021dc <__aeabi_d2f+0x10c>)
 80021b0:	4694      	mov	ip, r2
 80021b2:	002a      	movs	r2, r5
 80021b4:	40e2      	lsrs	r2, r4
 80021b6:	0014      	movs	r4, r2
 80021b8:	002a      	movs	r2, r5
 80021ba:	4463      	add	r3, ip
 80021bc:	409a      	lsls	r2, r3
 80021be:	4098      	lsls	r0, r3
 80021c0:	1e55      	subs	r5, r2, #1
 80021c2:	41aa      	sbcs	r2, r5
 80021c4:	4302      	orrs	r2, r0
 80021c6:	4322      	orrs	r2, r4
 80021c8:	e7e4      	b.n	8002194 <__aeabi_d2f+0xc4>
 80021ca:	0033      	movs	r3, r6
 80021cc:	e79e      	b.n	800210c <__aeabi_d2f+0x3c>
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	000007fe 	.word	0x000007fe
 80021d4:	fffffc80 	.word	0xfffffc80
 80021d8:	fffffca2 	.word	0xfffffca2
 80021dc:	fffffc82 	.word	0xfffffc82

080021e0 <__aeabi_cfrcmple>:
 80021e0:	4684      	mov	ip, r0
 80021e2:	0008      	movs	r0, r1
 80021e4:	4661      	mov	r1, ip
 80021e6:	e7ff      	b.n	80021e8 <__aeabi_cfcmpeq>

080021e8 <__aeabi_cfcmpeq>:
 80021e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80021ea:	f000 f8c9 	bl	8002380 <__lesf2>
 80021ee:	2800      	cmp	r0, #0
 80021f0:	d401      	bmi.n	80021f6 <__aeabi_cfcmpeq+0xe>
 80021f2:	2100      	movs	r1, #0
 80021f4:	42c8      	cmn	r0, r1
 80021f6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080021f8 <__aeabi_fcmpeq>:
 80021f8:	b510      	push	{r4, lr}
 80021fa:	f000 f855 	bl	80022a8 <__eqsf2>
 80021fe:	4240      	negs	r0, r0
 8002200:	3001      	adds	r0, #1
 8002202:	bd10      	pop	{r4, pc}

08002204 <__aeabi_fcmplt>:
 8002204:	b510      	push	{r4, lr}
 8002206:	f000 f8bb 	bl	8002380 <__lesf2>
 800220a:	2800      	cmp	r0, #0
 800220c:	db01      	blt.n	8002212 <__aeabi_fcmplt+0xe>
 800220e:	2000      	movs	r0, #0
 8002210:	bd10      	pop	{r4, pc}
 8002212:	2001      	movs	r0, #1
 8002214:	bd10      	pop	{r4, pc}
 8002216:	46c0      	nop			; (mov r8, r8)

08002218 <__aeabi_fcmple>:
 8002218:	b510      	push	{r4, lr}
 800221a:	f000 f8b1 	bl	8002380 <__lesf2>
 800221e:	2800      	cmp	r0, #0
 8002220:	dd01      	ble.n	8002226 <__aeabi_fcmple+0xe>
 8002222:	2000      	movs	r0, #0
 8002224:	bd10      	pop	{r4, pc}
 8002226:	2001      	movs	r0, #1
 8002228:	bd10      	pop	{r4, pc}
 800222a:	46c0      	nop			; (mov r8, r8)

0800222c <__aeabi_fcmpgt>:
 800222c:	b510      	push	{r4, lr}
 800222e:	f000 f861 	bl	80022f4 <__gesf2>
 8002232:	2800      	cmp	r0, #0
 8002234:	dc01      	bgt.n	800223a <__aeabi_fcmpgt+0xe>
 8002236:	2000      	movs	r0, #0
 8002238:	bd10      	pop	{r4, pc}
 800223a:	2001      	movs	r0, #1
 800223c:	bd10      	pop	{r4, pc}
 800223e:	46c0      	nop			; (mov r8, r8)

08002240 <__aeabi_fcmpge>:
 8002240:	b510      	push	{r4, lr}
 8002242:	f000 f857 	bl	80022f4 <__gesf2>
 8002246:	2800      	cmp	r0, #0
 8002248:	da01      	bge.n	800224e <__aeabi_fcmpge+0xe>
 800224a:	2000      	movs	r0, #0
 800224c:	bd10      	pop	{r4, pc}
 800224e:	2001      	movs	r0, #1
 8002250:	bd10      	pop	{r4, pc}
 8002252:	46c0      	nop			; (mov r8, r8)

08002254 <__clzsi2>:
 8002254:	211c      	movs	r1, #28
 8002256:	2301      	movs	r3, #1
 8002258:	041b      	lsls	r3, r3, #16
 800225a:	4298      	cmp	r0, r3
 800225c:	d301      	bcc.n	8002262 <__clzsi2+0xe>
 800225e:	0c00      	lsrs	r0, r0, #16
 8002260:	3910      	subs	r1, #16
 8002262:	0a1b      	lsrs	r3, r3, #8
 8002264:	4298      	cmp	r0, r3
 8002266:	d301      	bcc.n	800226c <__clzsi2+0x18>
 8002268:	0a00      	lsrs	r0, r0, #8
 800226a:	3908      	subs	r1, #8
 800226c:	091b      	lsrs	r3, r3, #4
 800226e:	4298      	cmp	r0, r3
 8002270:	d301      	bcc.n	8002276 <__clzsi2+0x22>
 8002272:	0900      	lsrs	r0, r0, #4
 8002274:	3904      	subs	r1, #4
 8002276:	a202      	add	r2, pc, #8	; (adr r2, 8002280 <__clzsi2+0x2c>)
 8002278:	5c10      	ldrb	r0, [r2, r0]
 800227a:	1840      	adds	r0, r0, r1
 800227c:	4770      	bx	lr
 800227e:	46c0      	nop			; (mov r8, r8)
 8002280:	02020304 	.word	0x02020304
 8002284:	01010101 	.word	0x01010101
	...

08002290 <__clzdi2>:
 8002290:	b510      	push	{r4, lr}
 8002292:	2900      	cmp	r1, #0
 8002294:	d103      	bne.n	800229e <__clzdi2+0xe>
 8002296:	f7ff ffdd 	bl	8002254 <__clzsi2>
 800229a:	3020      	adds	r0, #32
 800229c:	e002      	b.n	80022a4 <__clzdi2+0x14>
 800229e:	0008      	movs	r0, r1
 80022a0:	f7ff ffd8 	bl	8002254 <__clzsi2>
 80022a4:	bd10      	pop	{r4, pc}
 80022a6:	46c0      	nop			; (mov r8, r8)

080022a8 <__eqsf2>:
 80022a8:	b570      	push	{r4, r5, r6, lr}
 80022aa:	0042      	lsls	r2, r0, #1
 80022ac:	0245      	lsls	r5, r0, #9
 80022ae:	024e      	lsls	r6, r1, #9
 80022b0:	004c      	lsls	r4, r1, #1
 80022b2:	0fc3      	lsrs	r3, r0, #31
 80022b4:	0a6d      	lsrs	r5, r5, #9
 80022b6:	2001      	movs	r0, #1
 80022b8:	0e12      	lsrs	r2, r2, #24
 80022ba:	0a76      	lsrs	r6, r6, #9
 80022bc:	0e24      	lsrs	r4, r4, #24
 80022be:	0fc9      	lsrs	r1, r1, #31
 80022c0:	2aff      	cmp	r2, #255	; 0xff
 80022c2:	d006      	beq.n	80022d2 <__eqsf2+0x2a>
 80022c4:	2cff      	cmp	r4, #255	; 0xff
 80022c6:	d003      	beq.n	80022d0 <__eqsf2+0x28>
 80022c8:	42a2      	cmp	r2, r4
 80022ca:	d101      	bne.n	80022d0 <__eqsf2+0x28>
 80022cc:	42b5      	cmp	r5, r6
 80022ce:	d006      	beq.n	80022de <__eqsf2+0x36>
 80022d0:	bd70      	pop	{r4, r5, r6, pc}
 80022d2:	2d00      	cmp	r5, #0
 80022d4:	d1fc      	bne.n	80022d0 <__eqsf2+0x28>
 80022d6:	2cff      	cmp	r4, #255	; 0xff
 80022d8:	d1fa      	bne.n	80022d0 <__eqsf2+0x28>
 80022da:	2e00      	cmp	r6, #0
 80022dc:	d1f8      	bne.n	80022d0 <__eqsf2+0x28>
 80022de:	428b      	cmp	r3, r1
 80022e0:	d006      	beq.n	80022f0 <__eqsf2+0x48>
 80022e2:	2001      	movs	r0, #1
 80022e4:	2a00      	cmp	r2, #0
 80022e6:	d1f3      	bne.n	80022d0 <__eqsf2+0x28>
 80022e8:	0028      	movs	r0, r5
 80022ea:	1e43      	subs	r3, r0, #1
 80022ec:	4198      	sbcs	r0, r3
 80022ee:	e7ef      	b.n	80022d0 <__eqsf2+0x28>
 80022f0:	2000      	movs	r0, #0
 80022f2:	e7ed      	b.n	80022d0 <__eqsf2+0x28>

080022f4 <__gesf2>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0042      	lsls	r2, r0, #1
 80022f8:	0245      	lsls	r5, r0, #9
 80022fa:	024e      	lsls	r6, r1, #9
 80022fc:	004c      	lsls	r4, r1, #1
 80022fe:	0fc3      	lsrs	r3, r0, #31
 8002300:	0a6d      	lsrs	r5, r5, #9
 8002302:	0e12      	lsrs	r2, r2, #24
 8002304:	0a76      	lsrs	r6, r6, #9
 8002306:	0e24      	lsrs	r4, r4, #24
 8002308:	0fc8      	lsrs	r0, r1, #31
 800230a:	2aff      	cmp	r2, #255	; 0xff
 800230c:	d01b      	beq.n	8002346 <__gesf2+0x52>
 800230e:	2cff      	cmp	r4, #255	; 0xff
 8002310:	d00e      	beq.n	8002330 <__gesf2+0x3c>
 8002312:	2a00      	cmp	r2, #0
 8002314:	d11b      	bne.n	800234e <__gesf2+0x5a>
 8002316:	2c00      	cmp	r4, #0
 8002318:	d101      	bne.n	800231e <__gesf2+0x2a>
 800231a:	2e00      	cmp	r6, #0
 800231c:	d01c      	beq.n	8002358 <__gesf2+0x64>
 800231e:	2d00      	cmp	r5, #0
 8002320:	d00c      	beq.n	800233c <__gesf2+0x48>
 8002322:	4283      	cmp	r3, r0
 8002324:	d01c      	beq.n	8002360 <__gesf2+0x6c>
 8002326:	2102      	movs	r1, #2
 8002328:	1e58      	subs	r0, r3, #1
 800232a:	4008      	ands	r0, r1
 800232c:	3801      	subs	r0, #1
 800232e:	bd70      	pop	{r4, r5, r6, pc}
 8002330:	2e00      	cmp	r6, #0
 8002332:	d122      	bne.n	800237a <__gesf2+0x86>
 8002334:	2a00      	cmp	r2, #0
 8002336:	d1f4      	bne.n	8002322 <__gesf2+0x2e>
 8002338:	2d00      	cmp	r5, #0
 800233a:	d1f2      	bne.n	8002322 <__gesf2+0x2e>
 800233c:	2800      	cmp	r0, #0
 800233e:	d1f6      	bne.n	800232e <__gesf2+0x3a>
 8002340:	2001      	movs	r0, #1
 8002342:	4240      	negs	r0, r0
 8002344:	e7f3      	b.n	800232e <__gesf2+0x3a>
 8002346:	2d00      	cmp	r5, #0
 8002348:	d117      	bne.n	800237a <__gesf2+0x86>
 800234a:	2cff      	cmp	r4, #255	; 0xff
 800234c:	d0f0      	beq.n	8002330 <__gesf2+0x3c>
 800234e:	2c00      	cmp	r4, #0
 8002350:	d1e7      	bne.n	8002322 <__gesf2+0x2e>
 8002352:	2e00      	cmp	r6, #0
 8002354:	d1e5      	bne.n	8002322 <__gesf2+0x2e>
 8002356:	e7e6      	b.n	8002326 <__gesf2+0x32>
 8002358:	2000      	movs	r0, #0
 800235a:	2d00      	cmp	r5, #0
 800235c:	d0e7      	beq.n	800232e <__gesf2+0x3a>
 800235e:	e7e2      	b.n	8002326 <__gesf2+0x32>
 8002360:	42a2      	cmp	r2, r4
 8002362:	dc05      	bgt.n	8002370 <__gesf2+0x7c>
 8002364:	dbea      	blt.n	800233c <__gesf2+0x48>
 8002366:	42b5      	cmp	r5, r6
 8002368:	d802      	bhi.n	8002370 <__gesf2+0x7c>
 800236a:	d3e7      	bcc.n	800233c <__gesf2+0x48>
 800236c:	2000      	movs	r0, #0
 800236e:	e7de      	b.n	800232e <__gesf2+0x3a>
 8002370:	4243      	negs	r3, r0
 8002372:	4158      	adcs	r0, r3
 8002374:	0040      	lsls	r0, r0, #1
 8002376:	3801      	subs	r0, #1
 8002378:	e7d9      	b.n	800232e <__gesf2+0x3a>
 800237a:	2002      	movs	r0, #2
 800237c:	4240      	negs	r0, r0
 800237e:	e7d6      	b.n	800232e <__gesf2+0x3a>

08002380 <__lesf2>:
 8002380:	b570      	push	{r4, r5, r6, lr}
 8002382:	0042      	lsls	r2, r0, #1
 8002384:	0245      	lsls	r5, r0, #9
 8002386:	024e      	lsls	r6, r1, #9
 8002388:	004c      	lsls	r4, r1, #1
 800238a:	0fc3      	lsrs	r3, r0, #31
 800238c:	0a6d      	lsrs	r5, r5, #9
 800238e:	0e12      	lsrs	r2, r2, #24
 8002390:	0a76      	lsrs	r6, r6, #9
 8002392:	0e24      	lsrs	r4, r4, #24
 8002394:	0fc8      	lsrs	r0, r1, #31
 8002396:	2aff      	cmp	r2, #255	; 0xff
 8002398:	d00b      	beq.n	80023b2 <__lesf2+0x32>
 800239a:	2cff      	cmp	r4, #255	; 0xff
 800239c:	d00d      	beq.n	80023ba <__lesf2+0x3a>
 800239e:	2a00      	cmp	r2, #0
 80023a0:	d11f      	bne.n	80023e2 <__lesf2+0x62>
 80023a2:	2c00      	cmp	r4, #0
 80023a4:	d116      	bne.n	80023d4 <__lesf2+0x54>
 80023a6:	2e00      	cmp	r6, #0
 80023a8:	d114      	bne.n	80023d4 <__lesf2+0x54>
 80023aa:	2000      	movs	r0, #0
 80023ac:	2d00      	cmp	r5, #0
 80023ae:	d010      	beq.n	80023d2 <__lesf2+0x52>
 80023b0:	e009      	b.n	80023c6 <__lesf2+0x46>
 80023b2:	2d00      	cmp	r5, #0
 80023b4:	d10c      	bne.n	80023d0 <__lesf2+0x50>
 80023b6:	2cff      	cmp	r4, #255	; 0xff
 80023b8:	d113      	bne.n	80023e2 <__lesf2+0x62>
 80023ba:	2e00      	cmp	r6, #0
 80023bc:	d108      	bne.n	80023d0 <__lesf2+0x50>
 80023be:	2a00      	cmp	r2, #0
 80023c0:	d008      	beq.n	80023d4 <__lesf2+0x54>
 80023c2:	4283      	cmp	r3, r0
 80023c4:	d012      	beq.n	80023ec <__lesf2+0x6c>
 80023c6:	2102      	movs	r1, #2
 80023c8:	1e58      	subs	r0, r3, #1
 80023ca:	4008      	ands	r0, r1
 80023cc:	3801      	subs	r0, #1
 80023ce:	e000      	b.n	80023d2 <__lesf2+0x52>
 80023d0:	2002      	movs	r0, #2
 80023d2:	bd70      	pop	{r4, r5, r6, pc}
 80023d4:	2d00      	cmp	r5, #0
 80023d6:	d1f4      	bne.n	80023c2 <__lesf2+0x42>
 80023d8:	2800      	cmp	r0, #0
 80023da:	d1fa      	bne.n	80023d2 <__lesf2+0x52>
 80023dc:	2001      	movs	r0, #1
 80023de:	4240      	negs	r0, r0
 80023e0:	e7f7      	b.n	80023d2 <__lesf2+0x52>
 80023e2:	2c00      	cmp	r4, #0
 80023e4:	d1ed      	bne.n	80023c2 <__lesf2+0x42>
 80023e6:	2e00      	cmp	r6, #0
 80023e8:	d1eb      	bne.n	80023c2 <__lesf2+0x42>
 80023ea:	e7ec      	b.n	80023c6 <__lesf2+0x46>
 80023ec:	42a2      	cmp	r2, r4
 80023ee:	dc05      	bgt.n	80023fc <__lesf2+0x7c>
 80023f0:	dbf2      	blt.n	80023d8 <__lesf2+0x58>
 80023f2:	42b5      	cmp	r5, r6
 80023f4:	d802      	bhi.n	80023fc <__lesf2+0x7c>
 80023f6:	d3ef      	bcc.n	80023d8 <__lesf2+0x58>
 80023f8:	2000      	movs	r0, #0
 80023fa:	e7ea      	b.n	80023d2 <__lesf2+0x52>
 80023fc:	4243      	negs	r3, r0
 80023fe:	4158      	adcs	r0, r3
 8002400:	0040      	lsls	r0, r0, #1
 8002402:	3801      	subs	r0, #1
 8002404:	e7e5      	b.n	80023d2 <__lesf2+0x52>
 8002406:	46c0      	nop			; (mov r8, r8)

08002408 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002408:	4b03      	ldr	r3, [pc, #12]	; (8002418 <vApplicationGetIdleTaskMemory+0x10>)
 800240a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800240c:	4b03      	ldr	r3, [pc, #12]	; (800241c <vApplicationGetIdleTaskMemory+0x14>)
 800240e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002410:	2380      	movs	r3, #128	; 0x80
 8002412:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8002414:	4770      	bx	lr
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	20000294 	.word	0x20000294
 800241c:	20000094 	.word	0x20000094

08002420 <StartDefaultTask>:
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
  /* USER CODE BEGIN 5 */
HAL_GPIO_WritePin(battery_GPIO_Port, battery_Pin, GPIO_PIN_SET);
 8002420:	2201      	movs	r2, #1
 8002422:	2140      	movs	r1, #64	; 0x40
{
 8002424:	b510      	push	{r4, lr}
HAL_GPIO_WritePin(battery_GPIO_Port, battery_Pin, GPIO_PIN_SET);
 8002426:	4803      	ldr	r0, [pc, #12]	; (8002434 <StartDefaultTask+0x14>)
 8002428:	f000 fed2 	bl	80031d0 <HAL_GPIO_WritePin>


  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800242c:	2001      	movs	r0, #1
 800242e:	f002 fab7 	bl	80049a0 <osDelay>
  for(;;)
 8002432:	e7fb      	b.n	800242c <StartDefaultTask+0xc>
 8002434:	50000400 	.word	0x50000400

08002438 <StartButton>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButton */
void StartButton(void const * argument)
{
 8002438:	b510      	push	{r4, lr}
  /* USER CODE BEGIN StartButton */
  /* Infinite loop */
  for(;;)
  {

	ButtonState = HAL_GPIO_ReadPin(Btn_GPIO_Port, Btn_Pin);
 800243a:	2102      	movs	r1, #2
 800243c:	4807      	ldr	r0, [pc, #28]	; (800245c <StartButton+0x24>)
 800243e:	f000 fec1 	bl	80031c4 <HAL_GPIO_ReadPin>
 8002442:	4b07      	ldr	r3, [pc, #28]	; (8002460 <StartButton+0x28>)

	ChargerState = HAL_GPIO_ReadPin(Charger_GPIO_Port, Charger_Pin);
 8002444:	2180      	movs	r1, #128	; 0x80
	ButtonState = HAL_GPIO_ReadPin(Btn_GPIO_Port, Btn_Pin);
 8002446:	7018      	strb	r0, [r3, #0]
	ChargerState = HAL_GPIO_ReadPin(Charger_GPIO_Port, Charger_Pin);
 8002448:	4804      	ldr	r0, [pc, #16]	; (800245c <StartButton+0x24>)
 800244a:	f000 febb 	bl	80031c4 <HAL_GPIO_ReadPin>
 800244e:	4b05      	ldr	r3, [pc, #20]	; (8002464 <StartButton+0x2c>)
 8002450:	7018      	strb	r0, [r3, #0]

    osDelay(1);
 8002452:	2001      	movs	r0, #1
 8002454:	f002 faa4 	bl	80049a0 <osDelay>
  for(;;)
 8002458:	e7ef      	b.n	800243a <StartButton+0x2>
 800245a:	46c0      	nop			; (mov r8, r8)
 800245c:	50000400 	.word	0x50000400
 8002460:	2000034c 	.word	0x2000034c
 8002464:	2000034d 	.word	0x2000034d

08002468 <lookup>:
uint16_t lookup(uint16_t input_value) {
 8002468:	b570      	push	{r4, r5, r6, lr}
 800246a:	2233      	movs	r2, #51	; 0x33
 800246c:	0004      	movs	r4, r0
    uint16_t output_value = 0;
 800246e:	2000      	movs	r0, #0
 8002470:	4909      	ldr	r1, [pc, #36]	; (8002498 <lookup+0x30>)
    uint16_t min_diff = UINT16_MAX;
 8002472:	4d0a      	ldr	r5, [pc, #40]	; (800249c <lookup+0x34>)
        uint16_t diff = abs(input_value - _Charger_lookup_table[i][0]);
 8002474:	680b      	ldr	r3, [r1, #0]
 8002476:	1ae3      	subs	r3, r4, r3
 8002478:	17de      	asrs	r6, r3, #31
 800247a:	199b      	adds	r3, r3, r6
 800247c:	4073      	eors	r3, r6
 800247e:	b29b      	uxth	r3, r3
        if (diff < min_diff) {
 8002480:	42ab      	cmp	r3, r5
 8002482:	d202      	bcs.n	800248a <lookup+0x22>
            output_value = _Charger_lookup_table[i][1];
 8002484:	001d      	movs	r5, r3
 8002486:	6848      	ldr	r0, [r1, #4]
 8002488:	b280      	uxth	r0, r0
    for (i = 0; i < Charging_TABLE_SIZE; i++) {
 800248a:	3a01      	subs	r2, #1
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	3108      	adds	r1, #8
 8002490:	2a00      	cmp	r2, #0
 8002492:	d1ef      	bne.n	8002474 <lookup+0xc>
}
 8002494:	bd70      	pop	{r4, r5, r6, pc}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	08005fe0 	.word	0x08005fe0
 800249c:	0000ffff 	.word	0x0000ffff

080024a0 <clear_indicator_leds>:
{
 80024a0:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, GPIO_PIN_RESET);
 80024a2:	24a0      	movs	r4, #160	; 0xa0
 80024a4:	05e4      	lsls	r4, r4, #23
 80024a6:	0020      	movs	r0, r4
 80024a8:	2200      	movs	r2, #0
 80024aa:	2110      	movs	r1, #16
 80024ac:	f000 fe90 	bl	80031d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_02_GPIO_Port, LED_02_Pin, GPIO_PIN_RESET);
 80024b0:	0020      	movs	r0, r4
 80024b2:	2200      	movs	r2, #0
 80024b4:	2120      	movs	r1, #32
 80024b6:	f000 fe8b 	bl	80031d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_03_GPIO_Port, LED_03_Pin, GPIO_PIN_RESET);
 80024ba:	0020      	movs	r0, r4
 80024bc:	2200      	movs	r2, #0
 80024be:	2140      	movs	r1, #64	; 0x40
 80024c0:	f000 fe86 	bl	80031d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_04_GPIO_Port, LED_04_Pin, GPIO_PIN_RESET);
 80024c4:	0020      	movs	r0, r4
 80024c6:	2200      	movs	r2, #0
 80024c8:	2180      	movs	r1, #128	; 0x80
 80024ca:	f000 fe81 	bl	80031d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_05_GPIO_Port, LED_05_Pin, GPIO_PIN_RESET);
 80024ce:	2200      	movs	r2, #0
 80024d0:	2101      	movs	r1, #1
 80024d2:	4802      	ldr	r0, [pc, #8]	; (80024dc <clear_indicator_leds+0x3c>)
 80024d4:	f000 fe7c 	bl	80031d0 <HAL_GPIO_WritePin>
}
 80024d8:	bd10      	pop	{r4, pc}
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	50000400 	.word	0x50000400

080024e0 <DisplayLevel>:
{
 80024e0:	b570      	push	{r4, r5, r6, lr}
		if(soc <= 10)	// 1000mV
 80024e2:	4b51      	ldr	r3, [pc, #324]	; (8002628 <DisplayLevel+0x148>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b0a      	cmp	r3, #10
 80024e8:	d82f      	bhi.n	800254a <DisplayLevel+0x6a>
			HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, GPIO_PIN_RESET);
 80024ea:	20a0      	movs	r0, #160	; 0xa0
 80024ec:	2200      	movs	r2, #0
 80024ee:	2110      	movs	r1, #16
 80024f0:	05c0      	lsls	r0, r0, #23
 80024f2:	f000 fe6d 	bl	80031d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_02_GPIO_Port, LED_02_Pin, GPIO_PIN_RESET);
 80024f6:	20a0      	movs	r0, #160	; 0xa0
 80024f8:	2200      	movs	r2, #0
 80024fa:	2120      	movs	r1, #32
 80024fc:	05c0      	lsls	r0, r0, #23
 80024fe:	f000 fe67 	bl	80031d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_03_GPIO_Port, LED_03_Pin, GPIO_PIN_RESET);
 8002502:	20a0      	movs	r0, #160	; 0xa0
 8002504:	2200      	movs	r2, #0
 8002506:	2140      	movs	r1, #64	; 0x40
 8002508:	05c0      	lsls	r0, r0, #23
 800250a:	f000 fe61 	bl	80031d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_04_GPIO_Port, LED_04_Pin, GPIO_PIN_RESET);
 800250e:	20a0      	movs	r0, #160	; 0xa0
 8002510:	2200      	movs	r2, #0
 8002512:	2180      	movs	r1, #128	; 0x80
 8002514:	05c0      	lsls	r0, r0, #23
 8002516:	f000 fe5b 	bl	80031d0 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(LED_01_GPIO_Port, LED_01_Pin);
 800251a:	25a0      	movs	r5, #160	; 0xa0
			HAL_GPIO_WritePin(LED_05_GPIO_Port, LED_05_Pin, GPIO_PIN_RESET);
 800251c:	2200      	movs	r2, #0
 800251e:	2101      	movs	r1, #1
 8002520:	4842      	ldr	r0, [pc, #264]	; (800262c <DisplayLevel+0x14c>)
 8002522:	f000 fe55 	bl	80031d0 <HAL_GPIO_WritePin>
 8002526:	240a      	movs	r4, #10
				HAL_GPIO_TogglePin(LED_01_GPIO_Port, LED_01_Pin);
 8002528:	05ed      	lsls	r5, r5, #23
 800252a:	2110      	movs	r1, #16
 800252c:	0028      	movs	r0, r5
 800252e:	f000 fe55 	bl	80031dc <HAL_GPIO_TogglePin>
			for(int i = 0; i < 10; i++)
 8002532:	3c01      	subs	r4, #1
				HAL_Delay(200);
 8002534:	20c8      	movs	r0, #200	; 0xc8
 8002536:	f000 fd2b 	bl	8002f90 <HAL_Delay>
			for(int i = 0; i < 10; i++)
 800253a:	2c00      	cmp	r4, #0
 800253c:	d1f5      	bne.n	800252a <DisplayLevel+0x4a>
	osDelay(3000);
 800253e:	483c      	ldr	r0, [pc, #240]	; (8002630 <DisplayLevel+0x150>)
 8002540:	f002 fa2e 	bl	80049a0 <osDelay>
	clear_indicator_leds();
 8002544:	f7ff ffac 	bl	80024a0 <clear_indicator_leds>
}
 8002548:	bd70      	pop	{r4, r5, r6, pc}
		else if(soc > 10 && soc <= 20 )
 800254a:	001a      	movs	r2, r3
 800254c:	3a0b      	subs	r2, #11
 800254e:	2a09      	cmp	r2, #9
 8002550:	d81d      	bhi.n	800258e <DisplayLevel+0xae>
			HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, GPIO_PIN_SET);
 8002552:	20a0      	movs	r0, #160	; 0xa0
 8002554:	2201      	movs	r2, #1
 8002556:	2110      	movs	r1, #16
 8002558:	05c0      	lsls	r0, r0, #23
 800255a:	f000 fe39 	bl	80031d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_02_GPIO_Port, LED_02_Pin, GPIO_PIN_RESET);
 800255e:	2200      	movs	r2, #0
			HAL_GPIO_WritePin(LED_02_GPIO_Port, LED_02_Pin, GPIO_PIN_SET);
 8002560:	20a0      	movs	r0, #160	; 0xa0
 8002562:	2120      	movs	r1, #32
 8002564:	05c0      	lsls	r0, r0, #23
 8002566:	f000 fe33 	bl	80031d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_03_GPIO_Port, LED_03_Pin, GPIO_PIN_RESET);
 800256a:	2200      	movs	r2, #0
 800256c:	20a0      	movs	r0, #160	; 0xa0
 800256e:	2140      	movs	r1, #64	; 0x40
 8002570:	05c0      	lsls	r0, r0, #23
 8002572:	f000 fe2d 	bl	80031d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_04_GPIO_Port, LED_04_Pin, GPIO_PIN_RESET);
 8002576:	2200      	movs	r2, #0
			HAL_GPIO_WritePin(LED_04_GPIO_Port, LED_04_Pin, GPIO_PIN_SET);
 8002578:	20a0      	movs	r0, #160	; 0xa0
 800257a:	2180      	movs	r1, #128	; 0x80
 800257c:	05c0      	lsls	r0, r0, #23
 800257e:	f000 fe27 	bl	80031d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_05_GPIO_Port, LED_05_Pin, GPIO_PIN_RESET);
 8002582:	2200      	movs	r2, #0
 8002584:	2101      	movs	r1, #1
			HAL_GPIO_WritePin(LED_05_GPIO_Port, LED_05_Pin, GPIO_PIN_SET);
 8002586:	4829      	ldr	r0, [pc, #164]	; (800262c <DisplayLevel+0x14c>)
 8002588:	f000 fe22 	bl	80031d0 <HAL_GPIO_WritePin>
 800258c:	e7d7      	b.n	800253e <DisplayLevel+0x5e>
		else if(soc > 20 && soc <= 40 )
 800258e:	001a      	movs	r2, r3
 8002590:	3a15      	subs	r2, #21
 8002592:	2a13      	cmp	r2, #19
 8002594:	d807      	bhi.n	80025a6 <DisplayLevel+0xc6>
			HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, GPIO_PIN_SET);
 8002596:	20a0      	movs	r0, #160	; 0xa0
 8002598:	2201      	movs	r2, #1
 800259a:	2110      	movs	r1, #16
 800259c:	05c0      	lsls	r0, r0, #23
 800259e:	f000 fe17 	bl	80031d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_02_GPIO_Port, LED_02_Pin, GPIO_PIN_SET);
 80025a2:	2201      	movs	r2, #1
 80025a4:	e7dc      	b.n	8002560 <DisplayLevel+0x80>
		else if(soc > 40 && soc <= 60 )
 80025a6:	001a      	movs	r2, r3
 80025a8:	3a29      	subs	r2, #41	; 0x29
 80025aa:	2a13      	cmp	r2, #19
 80025ac:	d80d      	bhi.n	80025ca <DisplayLevel+0xea>
			HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, GPIO_PIN_SET);
 80025ae:	20a0      	movs	r0, #160	; 0xa0
 80025b0:	2201      	movs	r2, #1
 80025b2:	2110      	movs	r1, #16
 80025b4:	05c0      	lsls	r0, r0, #23
 80025b6:	f000 fe0b 	bl	80031d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_02_GPIO_Port, LED_02_Pin, GPIO_PIN_SET);
 80025ba:	20a0      	movs	r0, #160	; 0xa0
 80025bc:	2201      	movs	r2, #1
 80025be:	2120      	movs	r1, #32
 80025c0:	05c0      	lsls	r0, r0, #23
 80025c2:	f000 fe05 	bl	80031d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_03_GPIO_Port, LED_03_Pin, GPIO_PIN_SET);
 80025c6:	2201      	movs	r2, #1
 80025c8:	e7d0      	b.n	800256c <DisplayLevel+0x8c>
			HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, GPIO_PIN_SET);
 80025ca:	20a0      	movs	r0, #160	; 0xa0
		else if (soc > 60 && soc <= 80)
 80025cc:	3b3d      	subs	r3, #61	; 0x3d
			HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, GPIO_PIN_SET);
 80025ce:	2201      	movs	r2, #1
 80025d0:	2110      	movs	r1, #16
 80025d2:	05c0      	lsls	r0, r0, #23
		else if (soc > 60 && soc <= 80)
 80025d4:	2b13      	cmp	r3, #19
 80025d6:	d80f      	bhi.n	80025f8 <DisplayLevel+0x118>
			HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, GPIO_PIN_SET);
 80025d8:	f000 fdfa 	bl	80031d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_02_GPIO_Port, LED_02_Pin, GPIO_PIN_SET);
 80025dc:	20a0      	movs	r0, #160	; 0xa0
 80025de:	2201      	movs	r2, #1
 80025e0:	2120      	movs	r1, #32
 80025e2:	05c0      	lsls	r0, r0, #23
 80025e4:	f000 fdf4 	bl	80031d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_03_GPIO_Port, LED_03_Pin, GPIO_PIN_SET);
 80025e8:	20a0      	movs	r0, #160	; 0xa0
 80025ea:	2201      	movs	r2, #1
 80025ec:	2140      	movs	r1, #64	; 0x40
 80025ee:	05c0      	lsls	r0, r0, #23
 80025f0:	f000 fdee 	bl	80031d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_04_GPIO_Port, LED_04_Pin, GPIO_PIN_SET);
 80025f4:	2201      	movs	r2, #1
 80025f6:	e7bf      	b.n	8002578 <DisplayLevel+0x98>
			HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, GPIO_PIN_SET);
 80025f8:	f000 fdea 	bl	80031d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_02_GPIO_Port, LED_02_Pin, GPIO_PIN_SET);
 80025fc:	20a0      	movs	r0, #160	; 0xa0
 80025fe:	2201      	movs	r2, #1
 8002600:	2120      	movs	r1, #32
 8002602:	05c0      	lsls	r0, r0, #23
 8002604:	f000 fde4 	bl	80031d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_03_GPIO_Port, LED_03_Pin, GPIO_PIN_SET);
 8002608:	20a0      	movs	r0, #160	; 0xa0
 800260a:	2201      	movs	r2, #1
 800260c:	2140      	movs	r1, #64	; 0x40
 800260e:	05c0      	lsls	r0, r0, #23
 8002610:	f000 fdde 	bl	80031d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_04_GPIO_Port, LED_04_Pin, GPIO_PIN_SET);
 8002614:	20a0      	movs	r0, #160	; 0xa0
 8002616:	2201      	movs	r2, #1
 8002618:	2180      	movs	r1, #128	; 0x80
 800261a:	05c0      	lsls	r0, r0, #23
 800261c:	f000 fdd8 	bl	80031d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_05_GPIO_Port, LED_05_Pin, GPIO_PIN_SET);
 8002620:	2201      	movs	r2, #1
 8002622:	0011      	movs	r1, r2
 8002624:	e7af      	b.n	8002586 <DisplayLevel+0xa6>
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	200004c8 	.word	0x200004c8
 800262c:	50000400 	.word	0x50000400
 8002630:	00000bb8 	.word	0x00000bb8

08002634 <set_indicator_leds_blink>:
{
 8002634:	b510      	push	{r4, lr}
	if(soc <= 20)	// 1000mV
 8002636:	4b2c      	ldr	r3, [pc, #176]	; (80026e8 <set_indicator_leds_blink+0xb4>)
		HAL_GPIO_TogglePin(LED_01_GPIO_Port, LED_01_Pin);
 8002638:	2110      	movs	r1, #16
	if(soc <= 20)	// 1000mV
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b14      	cmp	r3, #20
 800263e:	d90a      	bls.n	8002656 <set_indicator_leds_blink+0x22>
	else if(soc > 20 && soc <= 40 )
 8002640:	001a      	movs	r2, r3
 8002642:	3a15      	subs	r2, #21
 8002644:	2a13      	cmp	r2, #19
 8002646:	d80e      	bhi.n	8002666 <set_indicator_leds_blink+0x32>
		HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, GPIO_PIN_SET);
 8002648:	20a0      	movs	r0, #160	; 0xa0
 800264a:	2110      	movs	r1, #16
 800264c:	2201      	movs	r2, #1
 800264e:	05c0      	lsls	r0, r0, #23
 8002650:	f000 fdbe 	bl	80031d0 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(LED_02_GPIO_Port, LED_02_Pin);
 8002654:	2120      	movs	r1, #32
		HAL_GPIO_TogglePin(LED_04_GPIO_Port, LED_04_Pin);
 8002656:	20a0      	movs	r0, #160	; 0xa0
 8002658:	05c0      	lsls	r0, r0, #23
		HAL_GPIO_TogglePin(LED_05_GPIO_Port, LED_05_Pin);
 800265a:	f000 fdbf 	bl	80031dc <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 800265e:	20c8      	movs	r0, #200	; 0xc8
 8002660:	f000 fc96 	bl	8002f90 <HAL_Delay>
}
 8002664:	bd10      	pop	{r4, pc}
	else if(soc > 40 && soc <= 60 )
 8002666:	001a      	movs	r2, r3
 8002668:	3a29      	subs	r2, #41	; 0x29
 800266a:	2a13      	cmp	r2, #19
 800266c:	d80d      	bhi.n	800268a <set_indicator_leds_blink+0x56>
		HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, GPIO_PIN_SET);
 800266e:	20a0      	movs	r0, #160	; 0xa0
 8002670:	2201      	movs	r2, #1
 8002672:	2110      	movs	r1, #16
 8002674:	05c0      	lsls	r0, r0, #23
 8002676:	f000 fdab 	bl	80031d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_02_GPIO_Port, LED_02_Pin, GPIO_PIN_SET);
 800267a:	20a0      	movs	r0, #160	; 0xa0
 800267c:	2120      	movs	r1, #32
 800267e:	2201      	movs	r2, #1
 8002680:	05c0      	lsls	r0, r0, #23
 8002682:	f000 fda5 	bl	80031d0 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(LED_03_GPIO_Port, LED_03_Pin);
 8002686:	2140      	movs	r1, #64	; 0x40
 8002688:	e7e5      	b.n	8002656 <set_indicator_leds_blink+0x22>
		HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, GPIO_PIN_SET);
 800268a:	20a0      	movs	r0, #160	; 0xa0
	else if (soc > 60 && soc <= 80)
 800268c:	3b3d      	subs	r3, #61	; 0x3d
		HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, GPIO_PIN_SET);
 800268e:	2201      	movs	r2, #1
 8002690:	2110      	movs	r1, #16
 8002692:	05c0      	lsls	r0, r0, #23
	else if (soc > 60 && soc <= 80)
 8002694:	2b13      	cmp	r3, #19
 8002696:	d80f      	bhi.n	80026b8 <set_indicator_leds_blink+0x84>
		HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, GPIO_PIN_SET);
 8002698:	f000 fd9a 	bl	80031d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_02_GPIO_Port, LED_02_Pin, GPIO_PIN_SET);
 800269c:	20a0      	movs	r0, #160	; 0xa0
 800269e:	2201      	movs	r2, #1
 80026a0:	2120      	movs	r1, #32
 80026a2:	05c0      	lsls	r0, r0, #23
 80026a4:	f000 fd94 	bl	80031d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_03_GPIO_Port, LED_03_Pin, GPIO_PIN_SET);
 80026a8:	20a0      	movs	r0, #160	; 0xa0
 80026aa:	2140      	movs	r1, #64	; 0x40
 80026ac:	2201      	movs	r2, #1
 80026ae:	05c0      	lsls	r0, r0, #23
 80026b0:	f000 fd8e 	bl	80031d0 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(LED_04_GPIO_Port, LED_04_Pin);
 80026b4:	2180      	movs	r1, #128	; 0x80
 80026b6:	e7ce      	b.n	8002656 <set_indicator_leds_blink+0x22>
		HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, GPIO_PIN_SET);
 80026b8:	f000 fd8a 	bl	80031d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_02_GPIO_Port, LED_02_Pin, GPIO_PIN_SET);
 80026bc:	20a0      	movs	r0, #160	; 0xa0
 80026be:	2201      	movs	r2, #1
 80026c0:	2120      	movs	r1, #32
 80026c2:	05c0      	lsls	r0, r0, #23
 80026c4:	f000 fd84 	bl	80031d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_03_GPIO_Port, LED_03_Pin, GPIO_PIN_SET);
 80026c8:	20a0      	movs	r0, #160	; 0xa0
 80026ca:	2201      	movs	r2, #1
 80026cc:	2140      	movs	r1, #64	; 0x40
 80026ce:	05c0      	lsls	r0, r0, #23
 80026d0:	f000 fd7e 	bl	80031d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_04_GPIO_Port, LED_04_Pin, GPIO_PIN_SET);
 80026d4:	20a0      	movs	r0, #160	; 0xa0
 80026d6:	2180      	movs	r1, #128	; 0x80
 80026d8:	05c0      	lsls	r0, r0, #23
 80026da:	2201      	movs	r2, #1
 80026dc:	f000 fd78 	bl	80031d0 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(LED_05_GPIO_Port, LED_05_Pin);
 80026e0:	2101      	movs	r1, #1
 80026e2:	4802      	ldr	r0, [pc, #8]	; (80026ec <set_indicator_leds_blink+0xb8>)
 80026e4:	e7b9      	b.n	800265a <set_indicator_leds_blink+0x26>
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	200004c8 	.word	0x200004c8
 80026ec:	50000400 	.word	0x50000400

080026f0 <StartLED>:
{
 80026f0:	b570      	push	{r4, r5, r6, lr}
	  else if (status_charger == 0 && CurrentDraw < 300) {
 80026f2:	2696      	movs	r6, #150	; 0x96
			setInitialCapacity = 1;
 80026f4:	2401      	movs	r4, #1
	  else if (status_charger == 0 && CurrentDraw < 300) {
 80026f6:	0076      	lsls	r6, r6, #1
	  if (updatedValues > 20 && setInitialCapacity == 0 && status_charger == 0 && CurrentDraw > 200){
 80026f8:	4b26      	ldr	r3, [pc, #152]	; (8002794 <StartLED+0xa4>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b14      	cmp	r3, #20
 80026fe:	d917      	bls.n	8002730 <StartLED+0x40>
 8002700:	4d25      	ldr	r5, [pc, #148]	; (8002798 <StartLED+0xa8>)
 8002702:	4a26      	ldr	r2, [pc, #152]	; (800279c <StartLED+0xac>)
 8002704:	782b      	ldrb	r3, [r5, #0]
 8002706:	7812      	ldrb	r2, [r2, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d11a      	bne.n	8002742 <StartLED+0x52>
 800270c:	2a00      	cmp	r2, #0
 800270e:	d10f      	bne.n	8002730 <StartLED+0x40>
 8002710:	4a23      	ldr	r2, [pc, #140]	; (80027a0 <StartLED+0xb0>)
 8002712:	8812      	ldrh	r2, [r2, #0]
 8002714:	2ac8      	cmp	r2, #200	; 0xc8
 8002716:	d916      	bls.n	8002746 <StartLED+0x56>
		  	ampereHour = lookup(bus_voltage);
 8002718:	4b22      	ldr	r3, [pc, #136]	; (80027a4 <StartLED+0xb4>)
 800271a:	8818      	ldrh	r0, [r3, #0]
 800271c:	f7ff fea4 	bl	8002468 <lookup>
 8002720:	f7fe fae2 	bl	8000ce8 <__aeabi_ui2f>
 8002724:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <StartLED+0xb8>)
 8002726:	6018      	str	r0, [r3, #0]
		  	HAL_TIM_Base_Start_IT(&htim2);
 8002728:	4820      	ldr	r0, [pc, #128]	; (80027ac <StartLED+0xbc>)
 800272a:	f001 fca9 	bl	8004080 <HAL_TIM_Base_Start_IT>
			setInitialCapacity = 1;
 800272e:	702c      	strb	r4, [r5, #0]
	  if (!ButtonState){
 8002730:	4b1f      	ldr	r3, [pc, #124]	; (80027b0 <StartLED+0xc0>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d111      	bne.n	800275c <StartLED+0x6c>
		  DisplayLevel();
 8002738:	f7ff fed2 	bl	80024e0 <DisplayLevel>
	  		  clear_indicator_leds();
 800273c:	f7ff feb0 	bl	80024a0 <clear_indicator_leds>
 8002740:	e01d      	b.n	800277e <StartLED+0x8e>
	  }else if (updatedValues > 20 && status_charger == 0 && CurrentDraw < 200 && setInitialCapacity == 0){
 8002742:	2a00      	cmp	r2, #0
 8002744:	d1f4      	bne.n	8002730 <StartLED+0x40>
 8002746:	4a16      	ldr	r2, [pc, #88]	; (80027a0 <StartLED+0xb0>)
 8002748:	8812      	ldrh	r2, [r2, #0]
 800274a:	2ac7      	cmp	r2, #199	; 0xc7
 800274c:	d8f0      	bhi.n	8002730 <StartLED+0x40>
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1ee      	bne.n	8002730 <StartLED+0x40>
		  	ampereHour = batteryCap;
 8002752:	4b18      	ldr	r3, [pc, #96]	; (80027b4 <StartLED+0xc4>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <StartLED+0xb8>)
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	e7e5      	b.n	8002728 <StartLED+0x38>
	  else if (status_charger == 0 && CurrentDraw < 300) {
 800275c:	4d0f      	ldr	r5, [pc, #60]	; (800279c <StartLED+0xac>)
 800275e:	782b      	ldrb	r3, [r5, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d113      	bne.n	800278c <StartLED+0x9c>
 8002764:	4b0e      	ldr	r3, [pc, #56]	; (80027a0 <StartLED+0xb0>)
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	42b3      	cmp	r3, r6
 800276a:	d20c      	bcs.n	8002786 <StartLED+0x96>
		  osDelay(1000);
 800276c:	20fa      	movs	r0, #250	; 0xfa
 800276e:	0080      	lsls	r0, r0, #2
 8002770:	f002 f916 	bl	80049a0 <osDelay>
		 if (status_charger == 0) {
 8002774:	782b      	ldrb	r3, [r5, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <StartLED+0x8e>
			  set_indicator_leds_blink();
 800277a:	f7ff ff5b 	bl	8002634 <set_indicator_leds_blink>
    osDelay(1);
 800277e:	0020      	movs	r0, r4
 8002780:	f002 f90e 	bl	80049a0 <osDelay>
	  if (updatedValues > 20 && setInitialCapacity == 0 && status_charger == 0 && CurrentDraw > 200){
 8002784:	e7b8      	b.n	80026f8 <StartLED+0x8>
	  }else if (status_charger == 0 && CurrentDraw > 300){
 8002786:	42b3      	cmp	r3, r6
 8002788:	d0f9      	beq.n	800277e <StartLED+0x8e>
 800278a:	e7f6      	b.n	800277a <StartLED+0x8a>
	  else if (status_charger == 1){
 800278c:	2b01      	cmp	r3, #1
 800278e:	d1f6      	bne.n	800277e <StartLED+0x8e>
 8002790:	e7d4      	b.n	800273c <StartLED+0x4c>
 8002792:	46c0      	nop			; (mov r8, r8)
 8002794:	200004ca 	.word	0x200004ca
 8002798:	200004c4 	.word	0x200004c4
 800279c:	200004c9 	.word	0x200004c9
 80027a0:	2000034e 	.word	0x2000034e
 80027a4:	20000360 	.word	0x20000360
 80027a8:	2000035c 	.word	0x2000035c
 80027ac:	20000444 	.word	0x20000444
 80027b0:	2000034c 	.word	0x2000034c
 80027b4:	20000000 	.word	0x20000000

080027b8 <Read16>:
	HAL_I2C_Mem_Read(&hi2c1, INA220_ADDR, Register, 1, Value, 2, 1000);
 80027b8:	23fa      	movs	r3, #250	; 0xfa
{
 80027ba:	b510      	push	{r4, lr}
	HAL_I2C_Mem_Read(&hi2c1, INA220_ADDR, Register, 1, Value, 2, 1000);
 80027bc:	009b      	lsls	r3, r3, #2
{
 80027be:	b086      	sub	sp, #24
	HAL_I2C_Mem_Read(&hi2c1, INA220_ADDR, Register, 1, Value, 2, 1000);
 80027c0:	9302      	str	r3, [sp, #8]
 80027c2:	2302      	movs	r3, #2
 80027c4:	ac05      	add	r4, sp, #20
 80027c6:	0002      	movs	r2, r0
 80027c8:	9301      	str	r3, [sp, #4]
 80027ca:	218a      	movs	r1, #138	; 0x8a
 80027cc:	9400      	str	r4, [sp, #0]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	4803      	ldr	r0, [pc, #12]	; (80027e0 <Read16+0x28>)
 80027d2:	f000 fe91 	bl	80034f8 <HAL_I2C_Mem_Read>
	return ((Value[0] << 8) | Value[1]);
 80027d6:	8820      	ldrh	r0, [r4, #0]
 80027d8:	ba40      	rev16	r0, r0
 80027da:	b280      	uxth	r0, r0
}
 80027dc:	b006      	add	sp, #24
 80027de:	bd10      	pop	{r4, pc}
 80027e0:	20000368 	.word	0x20000368

080027e4 <INA219_ReadBusVoltage>:
	uint16_t result = Read16(INA219_REG_BUSVOLTAGE);
 80027e4:	2002      	movs	r0, #2
{
 80027e6:	b510      	push	{r4, lr}
	uint16_t result = Read16(INA219_REG_BUSVOLTAGE);
 80027e8:	f7ff ffe6 	bl	80027b8 <Read16>
	if(Saved == 0 && ((result >> 3  ) * 4) < 8.3){
 80027ec:	4b06      	ldr	r3, [pc, #24]	; (8002808 <INA219_ReadBusVoltage+0x24>)
 80027ee:	08c0      	lsrs	r0, r0, #3
 80027f0:	781a      	ldrb	r2, [r3, #0]
 80027f2:	2a00      	cmp	r2, #0
 80027f4:	d104      	bne.n	8002800 <INA219_ReadBusVoltage+0x1c>
 80027f6:	b282      	uxth	r2, r0
 80027f8:	2a02      	cmp	r2, #2
 80027fa:	dc01      	bgt.n	8002800 <INA219_ReadBusVoltage+0x1c>
		Saved = 1;
 80027fc:	2201      	movs	r2, #1
 80027fe:	701a      	strb	r2, [r3, #0]
	return ((result >> 3  ) * 4);
 8002800:	0080      	lsls	r0, r0, #2
 8002802:	b280      	uxth	r0, r0
}
 8002804:	bd10      	pop	{r4, pc}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	2000035a 	.word	0x2000035a

0800280c <INA219_ReadShuntVolage>:
	uint16_t result = Read16(INA219_REG_SHUNTVOLTAGE);
 800280c:	2001      	movs	r0, #1
{
 800280e:	b510      	push	{r4, lr}
	uint16_t result = Read16(INA219_REG_SHUNTVOLTAGE);
 8002810:	f7ff ffd2 	bl	80027b8 <Read16>
	uint8_t signal = result >> 15;
 8002814:	0bc3      	lsrs	r3, r0, #15
	if (signal > 0){
 8002816:	b29b      	uxth	r3, r3
 8002818:	4905      	ldr	r1, [pc, #20]	; (8002830 <INA219_ReadShuntVolage+0x24>)
 800281a:	4a06      	ldr	r2, [pc, #24]	; (8002834 <INA219_ReadShuntVolage+0x28>)
 800281c:	2b00      	cmp	r3, #0
 800281e:	d004      	beq.n	800282a <INA219_ReadShuntVolage+0x1e>
		status_charger = 1;
 8002820:	2301      	movs	r3, #1
 8002822:	700b      	strb	r3, [r1, #0]
		CurrentDraw = (~result) +1; // 2' complement
 8002824:	4243      	negs	r3, r0
 8002826:	8013      	strh	r3, [r2, #0]
}
 8002828:	bd10      	pop	{r4, pc}
		status_charger = 0;
 800282a:	700b      	strb	r3, [r1, #0]
		CurrentDraw  = result;
 800282c:	8010      	strh	r0, [r2, #0]
 800282e:	e7fb      	b.n	8002828 <INA219_ReadShuntVolage+0x1c>
 8002830:	200004c9 	.word	0x200004c9
 8002834:	2000034e 	.word	0x2000034e

08002838 <Check_INA>:
void Check_INA (){
 8002838:	b510      	push	{r4, lr}
		  bus_voltage =  INA219_ReadBusVoltage();
 800283a:	f7ff ffd3 	bl	80027e4 <INA219_ReadBusVoltage>
 800283e:	4b05      	ldr	r3, [pc, #20]	; (8002854 <Check_INA+0x1c>)
 8002840:	8018      	strh	r0, [r3, #0]
		  shunt_voltage =  INA219_ReadShuntVolage();
 8002842:	f7ff ffe3 	bl	800280c <INA219_ReadShuntVolage>
 8002846:	4b04      	ldr	r3, [pc, #16]	; (8002858 <Check_INA+0x20>)
		  updatedValues ++;
 8002848:	4a04      	ldr	r2, [pc, #16]	; (800285c <Check_INA+0x24>)
		  shunt_voltage =  INA219_ReadShuntVolage();
 800284a:	8018      	strh	r0, [r3, #0]
		  updatedValues ++;
 800284c:	7813      	ldrb	r3, [r2, #0]
 800284e:	3301      	adds	r3, #1
 8002850:	7013      	strb	r3, [r2, #0]
}
 8002852:	bd10      	pop	{r4, pc}
 8002854:	20000360 	.word	0x20000360
 8002858:	200004c6 	.word	0x200004c6
 800285c:	200004ca 	.word	0x200004ca

08002860 <StartINA220>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartINA220 */
void StartINA220(void const * argument)
{
 8002860:	b510      	push	{r4, lr}
  /* USER CODE BEGIN StartINA220 */

  /* Infinite loop */
  for(;;)
  {
	 Check_INA();
 8002862:	f7ff ffe9 	bl	8002838 <Check_INA>
	 Real_capacity = lookup(bus_voltage);
 8002866:	4b05      	ldr	r3, [pc, #20]	; (800287c <StartINA220+0x1c>)
 8002868:	8818      	ldrh	r0, [r3, #0]
 800286a:	f7ff fdfd 	bl	8002468 <lookup>
 800286e:	4b04      	ldr	r3, [pc, #16]	; (8002880 <StartINA220+0x20>)
 8002870:	8018      	strh	r0, [r3, #0]
    osDelay(50);
 8002872:	2032      	movs	r0, #50	; 0x32
 8002874:	f002 f894 	bl	80049a0 <osDelay>
  for(;;)
 8002878:	e7f3      	b.n	8002862 <StartINA220+0x2>
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	20000360 	.word	0x20000360
 8002880:	20000358 	.word	0x20000358

08002884 <SystemClock_Config>:
{
 8002884:	b500      	push	{lr}
 8002886:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002888:	2220      	movs	r2, #32
 800288a:	2100      	movs	r1, #0
 800288c:	a80c      	add	r0, sp, #48	; 0x30
 800288e:	f002 fde2 	bl	8005456 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002892:	2214      	movs	r2, #20
 8002894:	2100      	movs	r1, #0
 8002896:	4668      	mov	r0, sp
 8002898:	f002 fddd 	bl	8005456 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800289c:	2218      	movs	r2, #24
 800289e:	2100      	movs	r1, #0
 80028a0:	a805      	add	r0, sp, #20
 80028a2:	f002 fdd8 	bl	8005456 <memset>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028a6:	491d      	ldr	r1, [pc, #116]	; (800291c <SystemClock_Config+0x98>)
 80028a8:	4a1d      	ldr	r2, [pc, #116]	; (8002920 <SystemClock_Config+0x9c>)
 80028aa:	680b      	ldr	r3, [r1, #0]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028ac:	a80b      	add	r0, sp, #44	; 0x2c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028ae:	401a      	ands	r2, r3
 80028b0:	2380      	movs	r3, #128	; 0x80
 80028b2:	011b      	lsls	r3, r3, #4
 80028b4:	4313      	orrs	r3, r2
 80028b6:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028b8:	2302      	movs	r3, #2
 80028ba:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028bc:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028be:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028c0:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028c2:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 80028c4:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80028c6:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028c8:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80028ca:	041b      	lsls	r3, r3, #16
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028cc:	320f      	adds	r2, #15
 80028ce:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80028d0:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028d2:	f000 ff85 	bl	80037e0 <HAL_RCC_OscConfig>
 80028d6:	1e01      	subs	r1, r0, #0
 80028d8:	d001      	beq.n	80028de <SystemClock_Config+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028da:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028dc:	e7fe      	b.n	80028dc <SystemClock_Config+0x58>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028de:	230f      	movs	r3, #15
 80028e0:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028e2:	3b0c      	subs	r3, #12
 80028e4:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028e6:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80028e8:	337d      	adds	r3, #125	; 0x7d
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028ea:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80028ec:	4668      	mov	r0, sp
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80028ee:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80028f0:	f001 f9c4 	bl	8003c7c <HAL_RCC_ClockConfig>
 80028f4:	2800      	cmp	r0, #0
 80028f6:	d001      	beq.n	80028fc <SystemClock_Config+0x78>
 80028f8:	b672      	cpsid	i
  while (1)
 80028fa:	e7fe      	b.n	80028fa <SystemClock_Config+0x76>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
 80028fc:	230c      	movs	r3, #12
 80028fe:	9305      	str	r3, [sp, #20]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_SYSCLK;
 8002900:	2380      	movs	r3, #128	; 0x80
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002902:	9009      	str	r0, [sp, #36]	; 0x24
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_SYSCLK;
 8002904:	00db      	lsls	r3, r3, #3
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002906:	a805      	add	r0, sp, #20
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_SYSCLK;
 8002908:	9308      	str	r3, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800290a:	f001 faa5 	bl	8003e58 <HAL_RCCEx_PeriphCLKConfig>
 800290e:	2800      	cmp	r0, #0
 8002910:	d001      	beq.n	8002916 <SystemClock_Config+0x92>
 8002912:	b672      	cpsid	i
  while (1)
 8002914:	e7fe      	b.n	8002914 <SystemClock_Config+0x90>
}
 8002916:	b019      	add	sp, #100	; 0x64
 8002918:	bd00      	pop	{pc}
 800291a:	46c0      	nop			; (mov r8, r8)
 800291c:	40007000 	.word	0x40007000
 8002920:	ffffe7ff 	.word	0xffffe7ff

08002924 <main>:
{
 8002924:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002926:	2701      	movs	r7, #1
{
 8002928:	b09f      	sub	sp, #124	; 0x7c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800292a:	ac17      	add	r4, sp, #92	; 0x5c
  HAL_Init();
 800292c:	f000 fb0a 	bl	8002f44 <HAL_Init>
  SystemClock_Config();
 8002930:	f7ff ffa8 	bl	8002884 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002934:	2214      	movs	r2, #20
 8002936:	2100      	movs	r1, #0
 8002938:	0020      	movs	r0, r4
 800293a:	f002 fd8c 	bl	8005456 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800293e:	2102      	movs	r1, #2
  HAL_GPIO_WritePin(GPIOA, LED_01_Pin|LED_02_Pin|LED_03_Pin|LED_04_Pin, GPIO_PIN_RESET);
 8002940:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002942:	4b94      	ldr	r3, [pc, #592]	; (8002b94 <main+0x270>)
  HAL_GPIO_WritePin(GPIOA, LED_01_Pin|LED_02_Pin|LED_03_Pin|LED_04_Pin, GPIO_PIN_RESET);
 8002944:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2500      	movs	r5, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800294a:	433a      	orrs	r2, r7
 800294c:	62da      	str	r2, [r3, #44]	; 0x2c
 800294e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002950:	403a      	ands	r2, r7
 8002952:	9200      	str	r2, [sp, #0]
 8002954:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002958:	430a      	orrs	r2, r1
 800295a:	62da      	str	r2, [r3, #44]	; 0x2c
 800295c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, LED_01_Pin|LED_02_Pin|LED_03_Pin|LED_04_Pin, GPIO_PIN_RESET);
 800295e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002960:	400b      	ands	r3, r1
 8002962:	9301      	str	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, LED_01_Pin|LED_02_Pin|LED_03_Pin|LED_04_Pin, GPIO_PIN_RESET);
 8002964:	31ee      	adds	r1, #238	; 0xee
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002966:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, LED_01_Pin|LED_02_Pin|LED_03_Pin|LED_04_Pin, GPIO_PIN_RESET);
 8002968:	f000 fc32 	bl	80031d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED_05_Pin|battery_Pin, GPIO_PIN_RESET);
 800296c:	2200      	movs	r2, #0
 800296e:	2141      	movs	r1, #65	; 0x41
 8002970:	4889      	ldr	r0, [pc, #548]	; (8002b98 <main+0x274>)
 8002972:	f000 fc2d 	bl	80031d0 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002976:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = LED_01_Pin|LED_02_Pin|LED_03_Pin|LED_04_Pin;
 8002978:	23f0      	movs	r3, #240	; 0xf0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800297a:	0021      	movs	r1, r4
 800297c:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = LED_01_Pin|LED_02_Pin|LED_03_Pin|LED_04_Pin;
 800297e:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002980:	6067      	str	r7, [r4, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002982:	60a5      	str	r5, [r4, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002984:	60e5      	str	r5, [r4, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002986:	f000 fb65 	bl	8003054 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_05_Pin|battery_Pin;
 800298a:	2341      	movs	r3, #65	; 0x41
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800298c:	0021      	movs	r1, r4
 800298e:	4882      	ldr	r0, [pc, #520]	; (8002b98 <main+0x274>)
  GPIO_InitStruct.Pin = LED_05_Pin|battery_Pin;
 8002990:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002992:	6067      	str	r7, [r4, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002994:	60a5      	str	r5, [r4, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002996:	60e5      	str	r5, [r4, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002998:	f000 fb5c 	bl	8003054 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Btn_Pin|VCC_Bat_Pin|Charger_Pin;
 800299c:	238a      	movs	r3, #138	; 0x8a
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800299e:	0021      	movs	r1, r4
 80029a0:	487d      	ldr	r0, [pc, #500]	; (8002b98 <main+0x274>)
  GPIO_InitStruct.Pin = Btn_Pin|VCC_Bat_Pin|Charger_Pin;
 80029a2:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029a4:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	60a5      	str	r5, [r4, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a8:	f000 fb54 	bl	8003054 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029ac:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ae:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	9317      	str	r3, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b4:	0021      	movs	r1, r4
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029b6:	3bfd      	subs	r3, #253	; 0xfd
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b8:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029ba:	6063      	str	r3, [r4, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029bc:	60a5      	str	r5, [r4, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029be:	f000 fb49 	bl	8003054 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = _5V_Out_Pin;
 80029c2:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(_5V_Out_GPIO_Port, &GPIO_InitStruct);
 80029c4:	20a0      	movs	r0, #160	; 0xa0
 80029c6:	0021      	movs	r1, r4
  GPIO_InitStruct.Pin = _5V_Out_Pin;
 80029c8:	021b      	lsls	r3, r3, #8
  HAL_GPIO_Init(_5V_Out_GPIO_Port, &GPIO_InitStruct);
 80029ca:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = _5V_Out_Pin;
 80029cc:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029ce:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	60a5      	str	r5, [r4, #8]
  HAL_GPIO_Init(_5V_Out_GPIO_Port, &GPIO_InitStruct);
 80029d2:	f000 fb3f 	bl	8003054 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 80029d6:	4e71      	ldr	r6, [pc, #452]	; (8002b9c <main+0x278>)
 80029d8:	4b71      	ldr	r3, [pc, #452]	; (8002ba0 <main+0x27c>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029da:	0030      	movs	r0, r6
  hi2c1.Instance = I2C1;
 80029dc:	6033      	str	r3, [r6, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80029de:	4b71      	ldr	r3, [pc, #452]	; (8002ba4 <main+0x280>)
  hi2c1.Init.OwnAddress1 = 0;
 80029e0:	60b5      	str	r5, [r6, #8]
  hi2c1.Init.Timing = 0x0000020B;
 80029e2:	6073      	str	r3, [r6, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029e4:	60f7      	str	r7, [r6, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029e6:	6135      	str	r5, [r6, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80029e8:	6175      	str	r5, [r6, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80029ea:	61b5      	str	r5, [r6, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029ec:	61f5      	str	r5, [r6, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029ee:	6235      	str	r5, [r6, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029f0:	f000 fd2c 	bl	800344c <HAL_I2C_Init>
 80029f4:	0001      	movs	r1, r0
 80029f6:	42a8      	cmp	r0, r5
 80029f8:	d001      	beq.n	80029fe <main+0xda>
 80029fa:	b672      	cpsid	i
  while (1)
 80029fc:	e7fe      	b.n	80029fc <main+0xd8>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029fe:	0030      	movs	r0, r6
 8002a00:	f000 fe5c 	bl	80036bc <HAL_I2CEx_ConfigAnalogFilter>
 8002a04:	1e01      	subs	r1, r0, #0
 8002a06:	d001      	beq.n	8002a0c <main+0xe8>
 8002a08:	b672      	cpsid	i
  while (1)
 8002a0a:	e7fe      	b.n	8002a0a <main+0xe6>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002a0c:	0030      	movs	r0, r6
 8002a0e:	f000 fe7b 	bl	8003708 <HAL_I2CEx_ConfigDigitalFilter>
 8002a12:	1e07      	subs	r7, r0, #0
 8002a14:	d001      	beq.n	8002a1a <main+0xf6>
 8002a16:	b672      	cpsid	i
  while (1)
 8002a18:	e7fe      	b.n	8002a18 <main+0xf4>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a1a:	0001      	movs	r1, r0
 8002a1c:	2210      	movs	r2, #16
 8002a1e:	0020      	movs	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a20:	ad10      	add	r5, sp, #64	; 0x40
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a22:	f002 fd18 	bl	8005456 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a26:	2208      	movs	r2, #8
 8002a28:	0039      	movs	r1, r7
 8002a2a:	0028      	movs	r0, r5
 8002a2c:	f002 fd13 	bl	8005456 <memset>
  htim2.Instance = TIM2;
 8002a30:	2380      	movs	r3, #128	; 0x80
 8002a32:	4e5d      	ldr	r6, [pc, #372]	; (8002ba8 <main+0x284>)
 8002a34:	05db      	lsls	r3, r3, #23
 8002a36:	6033      	str	r3, [r6, #0]
  htim2.Init.Prescaler = 8000-1;
 8002a38:	4b5c      	ldr	r3, [pc, #368]	; (8002bac <main+0x288>)
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a3a:	0030      	movs	r0, r6
  htim2.Init.Prescaler = 8000-1;
 8002a3c:	6073      	str	r3, [r6, #4]
  htim2.Init.Period = 10;
 8002a3e:	230a      	movs	r3, #10
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a40:	60b7      	str	r7, [r6, #8]
  htim2.Init.Period = 10;
 8002a42:	60f3      	str	r3, [r6, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a44:	6137      	str	r7, [r6, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a46:	6177      	str	r7, [r6, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a48:	f001 faf6 	bl	8004038 <HAL_TIM_Base_Init>
 8002a4c:	2800      	cmp	r0, #0
 8002a4e:	d001      	beq.n	8002a54 <main+0x130>
 8002a50:	b672      	cpsid	i
  while (1)
 8002a52:	e7fe      	b.n	8002a52 <main+0x12e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a54:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a56:	0021      	movs	r1, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a58:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a5a:	0030      	movs	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a5c:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a5e:	f001 fb3b 	bl	80040d8 <HAL_TIM_ConfigClockSource>
 8002a62:	2800      	cmp	r0, #0
 8002a64:	d001      	beq.n	8002a6a <main+0x146>
 8002a66:	b672      	cpsid	i
  while (1)
 8002a68:	e7fe      	b.n	8002a68 <main+0x144>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a6a:	6028      	str	r0, [r5, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a6c:	6068      	str	r0, [r5, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a6e:	0029      	movs	r1, r5
 8002a70:	0030      	movs	r0, r6
 8002a72:	f001 fc6b 	bl	800434c <HAL_TIMEx_MasterConfigSynchronization>
 8002a76:	1e03      	subs	r3, r0, #0
 8002a78:	d001      	beq.n	8002a7e <main+0x15a>
 8002a7a:	b672      	cpsid	i
  while (1)
 8002a7c:	e7fe      	b.n	8002a7c <main+0x158>
  hlpuart1.Instance = LPUART1;
 8002a7e:	484c      	ldr	r0, [pc, #304]	; (8002bb0 <main+0x28c>)
 8002a80:	4a4c      	ldr	r2, [pc, #304]	; (8002bb4 <main+0x290>)
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002a82:	60c3      	str	r3, [r0, #12]
  hlpuart1.Instance = LPUART1;
 8002a84:	6002      	str	r2, [r0, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002a86:	22e1      	movs	r2, #225	; 0xe1
 8002a88:	0252      	lsls	r2, r2, #9
 8002a8a:	6042      	str	r2, [r0, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8002a8c:	2280      	movs	r2, #128	; 0x80
 8002a8e:	0552      	lsls	r2, r2, #21
 8002a90:	6082      	str	r2, [r0, #8]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002a92:	220c      	movs	r2, #12
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002a94:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002a96:	6142      	str	r2, [r0, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a98:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a9a:	6203      	str	r3, [r0, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a9c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002a9e:	f001 ff1d 	bl	80048dc <HAL_UART_Init>
 8002aa2:	1e07      	subs	r7, r0, #0
 8002aa4:	d001      	beq.n	8002aaa <main+0x186>
 8002aa6:	b672      	cpsid	i
  while (1)
 8002aa8:	e7fe      	b.n	8002aa8 <main+0x184>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002aaa:	0001      	movs	r1, r0
 8002aac:	2210      	movs	r2, #16
 8002aae:	0020      	movs	r0, r4
 8002ab0:	f002 fcd1 	bl	8005456 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ab4:	2208      	movs	r2, #8
 8002ab6:	0039      	movs	r1, r7
 8002ab8:	0028      	movs	r0, r5
 8002aba:	f002 fccc 	bl	8005456 <memset>
  htim21.Instance = TIM21;
 8002abe:	4e3e      	ldr	r6, [pc, #248]	; (8002bb8 <main+0x294>)
 8002ac0:	4b3e      	ldr	r3, [pc, #248]	; (8002bbc <main+0x298>)
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8002ac2:	0030      	movs	r0, r6
  htim21.Instance = TIM21;
 8002ac4:	6033      	str	r3, [r6, #0]
  htim21.Init.Prescaler = 8000-1;
 8002ac6:	4b39      	ldr	r3, [pc, #228]	; (8002bac <main+0x288>)
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ac8:	60b7      	str	r7, [r6, #8]
  htim21.Init.Prescaler = 8000-1;
 8002aca:	6073      	str	r3, [r6, #4]
  htim21.Init.Period = 60000;
 8002acc:	4b3c      	ldr	r3, [pc, #240]	; (8002bc0 <main+0x29c>)
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ace:	6137      	str	r7, [r6, #16]
  htim21.Init.Period = 60000;
 8002ad0:	60f3      	str	r3, [r6, #12]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ad2:	6177      	str	r7, [r6, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8002ad4:	f001 fab0 	bl	8004038 <HAL_TIM_Base_Init>
 8002ad8:	2800      	cmp	r0, #0
 8002ada:	d001      	beq.n	8002ae0 <main+0x1bc>
 8002adc:	b672      	cpsid	i
  while (1)
 8002ade:	e7fe      	b.n	8002ade <main+0x1ba>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ae0:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8002ae2:	0021      	movs	r1, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ae4:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8002ae6:	0030      	movs	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ae8:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8002aea:	f001 faf5 	bl	80040d8 <HAL_TIM_ConfigClockSource>
 8002aee:	2800      	cmp	r0, #0
 8002af0:	d001      	beq.n	8002af6 <main+0x1d2>
 8002af2:	b672      	cpsid	i
  while (1)
 8002af4:	e7fe      	b.n	8002af4 <main+0x1d0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002af6:	6028      	str	r0, [r5, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002af8:	6068      	str	r0, [r5, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8002afa:	0029      	movs	r1, r5
 8002afc:	0030      	movs	r0, r6
 8002afe:	f001 fc25 	bl	800434c <HAL_TIMEx_MasterConfigSynchronization>
 8002b02:	2800      	cmp	r0, #0
 8002b04:	d001      	beq.n	8002b0a <main+0x1e6>
 8002b06:	b672      	cpsid	i
  while (1)
 8002b08:	e7fe      	b.n	8002b08 <main+0x1e4>
  HAL_TIM_Base_Start_IT(&htim21);
 8002b0a:	0030      	movs	r0, r6
 8002b0c:	f001 fab8 	bl	8004080 <HAL_TIM_Base_Start_IT>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002b10:	4e2c      	ldr	r6, [pc, #176]	; (8002bc4 <main+0x2a0>)
 8002b12:	ab02      	add	r3, sp, #8
 8002b14:	0032      	movs	r2, r6
 8002b16:	469c      	mov	ip, r3
 8002b18:	ca83      	ldmia	r2!, {r0, r1, r7}
 8002b1a:	c383      	stmia	r3!, {r0, r1, r7}
 8002b1c:	ca83      	ldmia	r2!, {r0, r1, r7}
 8002b1e:	c383      	stmia	r3!, {r0, r1, r7}
 8002b20:	6812      	ldr	r2, [r2, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002b22:	2100      	movs	r1, #0
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002b24:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002b26:	4660      	mov	r0, ip
 8002b28:	f001 ff0f 	bl	800494a <osThreadCreate>
 8002b2c:	4b26      	ldr	r3, [pc, #152]	; (8002bc8 <main+0x2a4>)
 8002b2e:	6018      	str	r0, [r3, #0]
  osThreadDef(LED, StartLED, osPriorityNormal, 0, 128);
 8002b30:	ab09      	add	r3, sp, #36	; 0x24
 8002b32:	469c      	mov	ip, r3
 8002b34:	0033      	movs	r3, r6
 8002b36:	4662      	mov	r2, ip
 8002b38:	331c      	adds	r3, #28
 8002b3a:	cb83      	ldmia	r3!, {r0, r1, r7}
 8002b3c:	c283      	stmia	r2!, {r0, r1, r7}
 8002b3e:	cb83      	ldmia	r3!, {r0, r1, r7}
 8002b40:	c283      	stmia	r2!, {r0, r1, r7}
 8002b42:	681b      	ldr	r3, [r3, #0]
  LEDHandle = osThreadCreate(osThread(LED), NULL);
 8002b44:	2100      	movs	r1, #0
 8002b46:	4660      	mov	r0, ip
  osThreadDef(LED, StartLED, osPriorityNormal, 0, 128);
 8002b48:	6013      	str	r3, [r2, #0]
  LEDHandle = osThreadCreate(osThread(LED), NULL);
 8002b4a:	f001 fefe 	bl	800494a <osThreadCreate>
 8002b4e:	4b1f      	ldr	r3, [pc, #124]	; (8002bcc <main+0x2a8>)
  osThreadDef(Button, StartButton, osPriorityIdle, 0, 128);
 8002b50:	002a      	movs	r2, r5
  LEDHandle = osThreadCreate(osThread(LED), NULL);
 8002b52:	6018      	str	r0, [r3, #0]
  osThreadDef(Button, StartButton, osPriorityIdle, 0, 128);
 8002b54:	0033      	movs	r3, r6
 8002b56:	3338      	adds	r3, #56	; 0x38
 8002b58:	cb83      	ldmia	r3!, {r0, r1, r7}
 8002b5a:	c283      	stmia	r2!, {r0, r1, r7}
 8002b5c:	cb83      	ldmia	r3!, {r0, r1, r7}
 8002b5e:	c283      	stmia	r2!, {r0, r1, r7}
 8002b60:	681b      	ldr	r3, [r3, #0]
  ButtonHandle = osThreadCreate(osThread(Button), NULL);
 8002b62:	2100      	movs	r1, #0
  osThreadDef(Button, StartButton, osPriorityIdle, 0, 128);
 8002b64:	6013      	str	r3, [r2, #0]
  ButtonHandle = osThreadCreate(osThread(Button), NULL);
 8002b66:	0028      	movs	r0, r5
 8002b68:	f001 feef 	bl	800494a <osThreadCreate>
  osThreadDef(INA220, StartINA220, osPriorityIdle, 0, 128);
 8002b6c:	0022      	movs	r2, r4
  ButtonHandle = osThreadCreate(osThread(Button), NULL);
 8002b6e:	4b18      	ldr	r3, [pc, #96]	; (8002bd0 <main+0x2ac>)
  osThreadDef(INA220, StartINA220, osPriorityIdle, 0, 128);
 8002b70:	3654      	adds	r6, #84	; 0x54
  ButtonHandle = osThreadCreate(osThread(Button), NULL);
 8002b72:	6018      	str	r0, [r3, #0]
  osThreadDef(INA220, StartINA220, osPriorityIdle, 0, 128);
 8002b74:	ce0b      	ldmia	r6!, {r0, r1, r3}
 8002b76:	c20b      	stmia	r2!, {r0, r1, r3}
 8002b78:	ce0b      	ldmia	r6!, {r0, r1, r3}
 8002b7a:	c20b      	stmia	r2!, {r0, r1, r3}
 8002b7c:	6833      	ldr	r3, [r6, #0]
  INA220Handle = osThreadCreate(osThread(INA220), NULL);
 8002b7e:	2100      	movs	r1, #0
  osThreadDef(INA220, StartINA220, osPriorityIdle, 0, 128);
 8002b80:	6013      	str	r3, [r2, #0]
  INA220Handle = osThreadCreate(osThread(INA220), NULL);
 8002b82:	0020      	movs	r0, r4
 8002b84:	f001 fee1 	bl	800494a <osThreadCreate>
 8002b88:	4b12      	ldr	r3, [pc, #72]	; (8002bd4 <main+0x2b0>)
 8002b8a:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8002b8c:	f001 fed8 	bl	8004940 <osKernelStart>
  while (1)
 8002b90:	e7fe      	b.n	8002b90 <main+0x26c>
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	40021000 	.word	0x40021000
 8002b98:	50000400 	.word	0x50000400
 8002b9c:	20000368 	.word	0x20000368
 8002ba0:	40005400 	.word	0x40005400
 8002ba4:	0000020b 	.word	0x0000020b
 8002ba8:	20000444 	.word	0x20000444
 8002bac:	00001f3f 	.word	0x00001f3f
 8002bb0:	200003bc 	.word	0x200003bc
 8002bb4:	40004800 	.word	0x40004800
 8002bb8:	20000484 	.word	0x20000484
 8002bbc:	40010800 	.word	0x40010800
 8002bc0:	0000ea60 	.word	0x0000ea60
 8002bc4:	08005e24 	.word	0x08005e24
 8002bc8:	20000364 	.word	0x20000364
 8002bcc:	20000354 	.word	0x20000354
 8002bd0:	20000348 	.word	0x20000348
 8002bd4:	20000350 	.word	0x20000350

08002bd8 <HAL_TIM_PeriodElapsedCallback>:
  if(htim->Instance == TIM2)
 8002bd8:	2380      	movs	r3, #128	; 0x80
{
 8002bda:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(htim->Instance == TIM2)
 8002bdc:	6802      	ldr	r2, [r0, #0]
{
 8002bde:	0004      	movs	r4, r0
 8002be0:	b09b      	sub	sp, #108	; 0x6c
  if(htim->Instance == TIM2)
 8002be2:	05db      	lsls	r3, r3, #23
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d125      	bne.n	8002c34 <HAL_TIM_PeriodElapsedCallback+0x5c>
		  ampereHour -= (CurrentDraw * (10 / 3600000.0)); // Calculate Ah value if the battery is discharging
 8002be8:	4d35      	ldr	r5, [pc, #212]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002bea:	6828      	ldr	r0, [r5, #0]
 8002bec:	f7ff fa28 	bl	8002040 <__aeabi_f2d>
 8002bf0:	4b34      	ldr	r3, [pc, #208]	; (8002cc4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002bf2:	0006      	movs	r6, r0
 8002bf4:	8818      	ldrh	r0, [r3, #0]
 8002bf6:	000f      	movs	r7, r1
 8002bf8:	f7ff f9f2 	bl	8001fe0 <__aeabi_i2d>
 8002bfc:	4a32      	ldr	r2, [pc, #200]	; (8002cc8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002bfe:	4b33      	ldr	r3, [pc, #204]	; (8002ccc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002c00:	f7fe fbf0 	bl	80013e4 <__aeabi_dmul>
 8002c04:	000b      	movs	r3, r1
	  if(status_charger == 1){
 8002c06:	4932      	ldr	r1, [pc, #200]	; (8002cd0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
		  ampereHour -= (CurrentDraw * (10 / 3600000.0)); // Calculate Ah value if the battery is discharging
 8002c08:	0002      	movs	r2, r0
	  if(status_charger == 1){
 8002c0a:	7809      	ldrb	r1, [r1, #0]
		  ampereHour -= (CurrentDraw * (10 / 3600000.0)); // Calculate Ah value if the battery is discharging
 8002c0c:	0030      	movs	r0, r6
	  if(status_charger == 1){
 8002c0e:	2901      	cmp	r1, #1
 8002c10:	d151      	bne.n	8002cb6 <HAL_TIM_PeriodElapsedCallback+0xde>
		  ampereHour -= (CurrentDraw * (10 / 3600000.0)); // Calculate Ah value if the battery is discharging
 8002c12:	0039      	movs	r1, r7
 8002c14:	f7fe fe52 	bl	80018bc <__aeabi_dsub>
		  ampereHour += (CurrentDraw * (10 / 3600000.0)); // Calculate Ah value if the battery is charging
 8002c18:	f7ff fa5a 	bl	80020d0 <__aeabi_d2f>
	  soc = (ampereHour / batteryCap) * 100; // Calculate SOC in %
 8002c1c:	4b2d      	ldr	r3, [pc, #180]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002c1e:	6028      	str	r0, [r5, #0]
 8002c20:	6819      	ldr	r1, [r3, #0]
 8002c22:	f7fd fc55 	bl	80004d0 <__aeabi_fdiv>
 8002c26:	492c      	ldr	r1, [pc, #176]	; (8002cd8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002c28:	f7fd fd6a 	bl	8000700 <__aeabi_fmul>
 8002c2c:	f7fd fb6c 	bl	8000308 <__aeabi_f2uiz>
 8002c30:	4b2a      	ldr	r3, [pc, #168]	; (8002cdc <HAL_TIM_PeriodElapsedCallback+0x104>)
 8002c32:	7018      	strb	r0, [r3, #0]
  }  if(htim->Instance == TIM21)
 8002c34:	4b2a      	ldr	r3, [pc, #168]	; (8002ce0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002c36:	6822      	ldr	r2, [r4, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d131      	bne.n	8002ca0 <HAL_TIM_PeriodElapsedCallback+0xc8>
		 int CurrentInt = ampereHour;
 8002c3c:	4b20      	ldr	r3, [pc, #128]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	f7fe f832 	bl	8000ca8 <__aeabi_f2iz>
		 sprintf (str, "Voltage = %d", bus_voltage);
 8002c44:	4b27      	ldr	r3, [pc, #156]	; (8002ce4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002c46:	4928      	ldr	r1, [pc, #160]	; (8002ce8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002c48:	881a      	ldrh	r2, [r3, #0]
		 int CurrentInt = ampereHour;
 8002c4a:	0006      	movs	r6, r0
		 sprintf (str, "Voltage = %d", bus_voltage);
 8002c4c:	a801      	add	r0, sp, #4
 8002c4e:	f002 fd29 	bl	80056a4 <siprintf>
		 HAL_UART_Transmit(&hlpuart1, (uint8_t *)str, strlen(str), 1);
 8002c52:	a801      	add	r0, sp, #4
 8002c54:	f7fd fa58 	bl	8000108 <strlen>
 8002c58:	4d24      	ldr	r5, [pc, #144]	; (8002cec <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	b282      	uxth	r2, r0
 8002c5e:	a901      	add	r1, sp, #4
 8002c60:	0028      	movs	r0, r5
 8002c62:	f001 fd72 	bl	800474a <HAL_UART_Transmit>
		 sprintf (str, " Capacity  = %d", CurrentInt);
 8002c66:	0032      	movs	r2, r6
 8002c68:	4921      	ldr	r1, [pc, #132]	; (8002cf0 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002c6a:	a801      	add	r0, sp, #4
 8002c6c:	f002 fd1a 	bl	80056a4 <siprintf>
		 HAL_UART_Transmit(&hlpuart1, (uint8_t *)str, strlen(str), 1);
 8002c70:	a801      	add	r0, sp, #4
 8002c72:	f7fd fa49 	bl	8000108 <strlen>
 8002c76:	2301      	movs	r3, #1
 8002c78:	b282      	uxth	r2, r0
 8002c7a:	a901      	add	r1, sp, #4
 8002c7c:	0028      	movs	r0, r5
 8002c7e:	f001 fd64 	bl	800474a <HAL_UART_Transmit>
		 sprintf (str, " Current = %d\n", CurrentDraw);
 8002c82:	4b10      	ldr	r3, [pc, #64]	; (8002cc4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002c84:	491b      	ldr	r1, [pc, #108]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8002c86:	881a      	ldrh	r2, [r3, #0]
 8002c88:	a801      	add	r0, sp, #4
 8002c8a:	f002 fd0b 	bl	80056a4 <siprintf>
		 HAL_UART_Transmit(&hlpuart1, (uint8_t *)str, strlen(str), 1);
 8002c8e:	a801      	add	r0, sp, #4
 8002c90:	f7fd fa3a 	bl	8000108 <strlen>
 8002c94:	2301      	movs	r3, #1
 8002c96:	b282      	uxth	r2, r0
 8002c98:	a901      	add	r1, sp, #4
 8002c9a:	0028      	movs	r0, r5
 8002c9c:	f001 fd55 	bl	800474a <HAL_UART_Transmit>
  if(htim->Instance == TIM22)
 8002ca0:	4b15      	ldr	r3, [pc, #84]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002ca2:	6822      	ldr	r2, [r4, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d104      	bne.n	8002cb2 <HAL_TIM_PeriodElapsedCallback+0xda>
	  HAL_GPIO_TogglePin(LED_01_GPIO_Port, LED_01_Pin);
 8002ca8:	20a0      	movs	r0, #160	; 0xa0
 8002caa:	2110      	movs	r1, #16
 8002cac:	05c0      	lsls	r0, r0, #23
 8002cae:	f000 fa95 	bl	80031dc <HAL_GPIO_TogglePin>
}
 8002cb2:	b01b      	add	sp, #108	; 0x6c
 8002cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		  ampereHour += (CurrentDraw * (10 / 3600000.0)); // Calculate Ah value if the battery is charging
 8002cb6:	0039      	movs	r1, r7
 8002cb8:	f7fe f858 	bl	8000d6c <__aeabi_dadd>
 8002cbc:	e7ac      	b.n	8002c18 <HAL_TIM_PeriodElapsedCallback+0x40>
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	2000035c 	.word	0x2000035c
 8002cc4:	2000034e 	.word	0x2000034e
 8002cc8:	7ba75828 	.word	0x7ba75828
 8002ccc:	3ec74d3b 	.word	0x3ec74d3b
 8002cd0:	200004c9 	.word	0x200004c9
 8002cd4:	20000000 	.word	0x20000000
 8002cd8:	42c80000 	.word	0x42c80000
 8002cdc:	200004c8 	.word	0x200004c8
 8002ce0:	40010800 	.word	0x40010800
 8002ce4:	20000360 	.word	0x20000360
 8002ce8:	08005fb2 	.word	0x08005fb2
 8002cec:	200003bc 	.word	0x200003bc
 8002cf0:	08005fbf 	.word	0x08005fbf
 8002cf4:	08005fcf 	.word	0x08005fcf
 8002cf8:	40011400 	.word	0x40011400

08002cfc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <HAL_MspInit+0x24>)
{
 8002d00:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d02:	6b59      	ldr	r1, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8002d04:	2002      	movs	r0, #2
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d06:	430a      	orrs	r2, r1
 8002d08:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d0a:	2280      	movs	r2, #128	; 0x80
 8002d0c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002d0e:	0552      	lsls	r2, r2, #21
 8002d10:	430a      	orrs	r2, r1
 8002d12:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8002d14:	2103      	movs	r1, #3
 8002d16:	2200      	movs	r2, #0
 8002d18:	4240      	negs	r0, r0
 8002d1a:	f000 f94b 	bl	8002fb4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d1e:	bd10      	pop	{r4, pc}
 8002d20:	40021000 	.word	0x40021000

08002d24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d24:	b510      	push	{r4, lr}
 8002d26:	0004      	movs	r4, r0
 8002d28:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d2a:	2214      	movs	r2, #20
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	a801      	add	r0, sp, #4
 8002d30:	f002 fb91 	bl	8005456 <memset>
  if(hi2c->Instance==I2C1)
 8002d34:	4b10      	ldr	r3, [pc, #64]	; (8002d78 <HAL_I2C_MspInit+0x54>)
 8002d36:	6822      	ldr	r2, [r4, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d11a      	bne.n	8002d72 <HAL_I2C_MspInit+0x4e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	4c0f      	ldr	r4, [pc, #60]	; (8002d7c <HAL_I2C_MspInit+0x58>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d40:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d42:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d44:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d46:	431a      	orrs	r2, r3
 8002d48:	62e2      	str	r2, [r4, #44]	; 0x2c
 8002d4a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d4c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4e:	401a      	ands	r2, r3
 8002d50:	9200      	str	r2, [sp, #0]
 8002d52:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d54:	22c0      	movs	r2, #192	; 0xc0
 8002d56:	00d2      	lsls	r2, r2, #3
 8002d58:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d5a:	2212      	movs	r2, #18
 8002d5c:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d5e:	3a0f      	subs	r2, #15
 8002d60:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002d62:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d64:	f000 f976 	bl	8003054 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d68:	2380      	movs	r3, #128	; 0x80
 8002d6a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002d6c:	039b      	lsls	r3, r3, #14
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d72:	b006      	add	sp, #24
 8002d74:	bd10      	pop	{r4, pc}
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	40005400 	.word	0x40005400
 8002d7c:	40021000 	.word	0x40021000

08002d80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d80:	b510      	push	{r4, lr}
 8002d82:	0004      	movs	r4, r0
 8002d84:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d86:	2214      	movs	r2, #20
 8002d88:	2100      	movs	r1, #0
 8002d8a:	a801      	add	r0, sp, #4
 8002d8c:	f002 fb63 	bl	8005456 <memset>
  if(huart->Instance==LPUART1)
 8002d90:	4b10      	ldr	r3, [pc, #64]	; (8002dd4 <HAL_UART_MspInit+0x54>)
 8002d92:	6822      	ldr	r2, [r4, #0]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d11a      	bne.n	8002dce <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002d98:	2280      	movs	r2, #128	; 0x80
 8002d9a:	4b0f      	ldr	r3, [pc, #60]	; (8002dd8 <HAL_UART_MspInit+0x58>)
 8002d9c:	02d2      	lsls	r2, r2, #11
 8002d9e:	6b99      	ldr	r1, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da0:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002da2:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da4:	2101      	movs	r1, #1
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002da6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002daa:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dac:	430a      	orrs	r2, r1
 8002dae:	62da      	str	r2, [r3, #44]	; 0x2c
 8002db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db2:	400b      	ands	r3, r1
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002db8:	230c      	movs	r3, #12
 8002dba:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbc:	3b0a      	subs	r3, #10
 8002dbe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc0:	185b      	adds	r3, r3, r1
 8002dc2:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc4:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8002dc6:	3303      	adds	r3, #3
 8002dc8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dca:	f000 f943 	bl	8003054 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002dce:	b006      	add	sp, #24
 8002dd0:	bd10      	pop	{r4, pc}
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	40004800 	.word	0x40004800
 8002dd8:	40021000 	.word	0x40021000

08002ddc <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8002ddc:	2280      	movs	r2, #128	; 0x80
 8002dde:	6803      	ldr	r3, [r0, #0]
{
 8002de0:	b510      	push	{r4, lr}
  if(htim_base->Instance==TIM2)
 8002de2:	05d2      	lsls	r2, r2, #23
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d10d      	bne.n	8002e04 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002de8:	2301      	movs	r3, #1
 8002dea:	4a0e      	ldr	r2, [pc, #56]	; (8002e24 <HAL_TIM_Base_MspInit+0x48>)
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8002dec:	200f      	movs	r0, #15
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dee:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8002df0:	430b      	orrs	r3, r1
 8002df2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8002df4:	2103      	movs	r1, #3
 8002df6:	2200      	movs	r2, #0
 8002df8:	f000 f8dc 	bl	8002fb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002dfc:	200f      	movs	r0, #15
  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
    /* TIM21 interrupt Init */
    HAL_NVIC_SetPriority(TIM21_IRQn, 3, 0);
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8002dfe:	f000 f903 	bl	8003008 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 8002e02:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM21)
 8002e04:	4a08      	ldr	r2, [pc, #32]	; (8002e28 <HAL_TIM_Base_MspInit+0x4c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d1fb      	bne.n	8002e02 <HAL_TIM_Base_MspInit+0x26>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8002e0a:	2304      	movs	r3, #4
 8002e0c:	4a05      	ldr	r2, [pc, #20]	; (8002e24 <HAL_TIM_Base_MspInit+0x48>)
    HAL_NVIC_SetPriority(TIM21_IRQn, 3, 0);
 8002e0e:	2014      	movs	r0, #20
    __HAL_RCC_TIM21_CLK_ENABLE();
 8002e10:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8002e12:	430b      	orrs	r3, r1
 8002e14:	6353      	str	r3, [r2, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 3, 0);
 8002e16:	2103      	movs	r1, #3
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f000 f8cb 	bl	8002fb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8002e1e:	2014      	movs	r0, #20
 8002e20:	e7ed      	b.n	8002dfe <HAL_TIM_Base_MspInit+0x22>
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	40021000 	.word	0x40021000
 8002e28:	40010800 	.word	0x40010800

08002e2c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e2c:	e7fe      	b.n	8002e2c <NMI_Handler>

08002e2e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e2e:	e7fe      	b.n	8002e2e <HardFault_Handler>

08002e30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e30:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e32:	f000 f89b 	bl	8002f6c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002e36:	f002 f927 	bl	8005088 <xTaskGetSchedulerState>
 8002e3a:	2801      	cmp	r0, #1
 8002e3c:	d001      	beq.n	8002e42 <SysTick_Handler+0x12>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002e3e:	f002 f9f9 	bl	8005234 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e42:	bd10      	pop	{r4, pc}

08002e44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e44:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e46:	4802      	ldr	r0, [pc, #8]	; (8002e50 <TIM2_IRQHandler+0xc>)
 8002e48:	f001 f9f8 	bl	800423c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e4c:	bd10      	pop	{r4, pc}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	20000444 	.word	0x20000444

08002e54 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8002e54:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8002e56:	4802      	ldr	r0, [pc, #8]	; (8002e60 <TIM21_IRQHandler+0xc>)
 8002e58:	f001 f9f0 	bl	800423c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8002e5c:	bd10      	pop	{r4, pc}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	20000484 	.word	0x20000484

08002e64 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e64:	4a0b      	ldr	r2, [pc, #44]	; (8002e94 <_sbrk+0x30>)
 8002e66:	490c      	ldr	r1, [pc, #48]	; (8002e98 <_sbrk+0x34>)
{
 8002e68:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e6a:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e6c:	4a0b      	ldr	r2, [pc, #44]	; (8002e9c <_sbrk+0x38>)
{
 8002e6e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8002e70:	6810      	ldr	r0, [r2, #0]
 8002e72:	2800      	cmp	r0, #0
 8002e74:	d101      	bne.n	8002e7a <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8002e76:	480a      	ldr	r0, [pc, #40]	; (8002ea0 <_sbrk+0x3c>)
 8002e78:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e7a:	6810      	ldr	r0, [r2, #0]
 8002e7c:	18c3      	adds	r3, r0, r3
 8002e7e:	428b      	cmp	r3, r1
 8002e80:	d906      	bls.n	8002e90 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8002e82:	f002 fab3 	bl	80053ec <__errno>
 8002e86:	230c      	movs	r3, #12
 8002e88:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002e8a:	2001      	movs	r0, #1
 8002e8c:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002e8e:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8002e90:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8002e92:	e7fc      	b.n	8002e8e <_sbrk+0x2a>
 8002e94:	00000400 	.word	0x00000400
 8002e98:	20002000 	.word	0x20002000
 8002e9c:	200004cc 	.word	0x200004cc
 8002ea0:	20001228 	.word	0x20001228

08002ea4 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ea4:	4770      	bx	lr
	...

08002ea8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002ea8:	480d      	ldr	r0, [pc, #52]	; (8002ee0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002eaa:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002eac:	f7ff fffa 	bl	8002ea4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002eb0:	480c      	ldr	r0, [pc, #48]	; (8002ee4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002eb2:	490d      	ldr	r1, [pc, #52]	; (8002ee8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002eb4:	4a0d      	ldr	r2, [pc, #52]	; (8002eec <LoopForever+0xe>)
  movs r3, #0
 8002eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002eb8:	e002      	b.n	8002ec0 <LoopCopyDataInit>

08002eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ebe:	3304      	adds	r3, #4

08002ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ec4:	d3f9      	bcc.n	8002eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ec6:	4a0a      	ldr	r2, [pc, #40]	; (8002ef0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ec8:	4c0a      	ldr	r4, [pc, #40]	; (8002ef4 <LoopForever+0x16>)
  movs r3, #0
 8002eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ecc:	e001      	b.n	8002ed2 <LoopFillZerobss>

08002ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ed0:	3204      	adds	r2, #4

08002ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ed4:	d3fb      	bcc.n	8002ece <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ed6:	f002 fa8f 	bl	80053f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eda:	f7ff fd23 	bl	8002924 <main>

08002ede <LoopForever>:

LoopForever:
    b LoopForever
 8002ede:	e7fe      	b.n	8002ede <LoopForever>
   ldr   r0, =_estack
 8002ee0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ee8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002eec:	08006250 	.word	0x08006250
  ldr r2, =_sbss
 8002ef0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002ef4:	20001224 	.word	0x20001224

08002ef8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ef8:	e7fe      	b.n	8002ef8 <ADC1_COMP_IRQHandler>
	...

08002efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002efc:	b570      	push	{r4, r5, r6, lr}
 8002efe:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f00:	20fa      	movs	r0, #250	; 0xfa
 8002f02:	4b0d      	ldr	r3, [pc, #52]	; (8002f38 <HAL_InitTick+0x3c>)
 8002f04:	0080      	lsls	r0, r0, #2
 8002f06:	7819      	ldrb	r1, [r3, #0]
 8002f08:	f7fd f924 	bl	8000154 <__udivsi3>
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <HAL_InitTick+0x40>)
 8002f0e:	0001      	movs	r1, r0
 8002f10:	6818      	ldr	r0, [r3, #0]
 8002f12:	f7fd f91f 	bl	8000154 <__udivsi3>
 8002f16:	f000 f883 	bl	8003020 <HAL_SYSTICK_Config>
 8002f1a:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8002f1c:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f1e:	2c00      	cmp	r4, #0
 8002f20:	d109      	bne.n	8002f36 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f22:	2d03      	cmp	r5, #3
 8002f24:	d807      	bhi.n	8002f36 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f26:	3802      	subs	r0, #2
 8002f28:	0022      	movs	r2, r4
 8002f2a:	0029      	movs	r1, r5
 8002f2c:	f000 f842 	bl	8002fb4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f30:	0020      	movs	r0, r4
 8002f32:	4b03      	ldr	r3, [pc, #12]	; (8002f40 <HAL_InitTick+0x44>)
 8002f34:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002f36:	bd70      	pop	{r4, r5, r6, pc}
 8002f38:	20000008 	.word	0x20000008
 8002f3c:	20000004 	.word	0x20000004
 8002f40:	2000000c 	.word	0x2000000c

08002f44 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002f44:	2340      	movs	r3, #64	; 0x40
 8002f46:	4a08      	ldr	r2, [pc, #32]	; (8002f68 <HAL_Init+0x24>)
{
 8002f48:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002f4a:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f4c:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002f4e:	430b      	orrs	r3, r1
 8002f50:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f52:	f7ff ffd3 	bl	8002efc <HAL_InitTick>
 8002f56:	1e04      	subs	r4, r0, #0
 8002f58:	d103      	bne.n	8002f62 <HAL_Init+0x1e>
    HAL_MspInit();
 8002f5a:	f7ff fecf 	bl	8002cfc <HAL_MspInit>
}
 8002f5e:	0020      	movs	r0, r4
 8002f60:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002f62:	2401      	movs	r4, #1
 8002f64:	e7fb      	b.n	8002f5e <HAL_Init+0x1a>
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	40022000 	.word	0x40022000

08002f6c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002f6c:	4a03      	ldr	r2, [pc, #12]	; (8002f7c <HAL_IncTick+0x10>)
 8002f6e:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <HAL_IncTick+0x14>)
 8002f70:	6811      	ldr	r1, [r2, #0]
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	185b      	adds	r3, r3, r1
 8002f76:	6013      	str	r3, [r2, #0]
}
 8002f78:	4770      	bx	lr
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	200004d0 	.word	0x200004d0
 8002f80:	20000008 	.word	0x20000008

08002f84 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002f84:	4b01      	ldr	r3, [pc, #4]	; (8002f8c <HAL_GetTick+0x8>)
 8002f86:	6818      	ldr	r0, [r3, #0]
}
 8002f88:	4770      	bx	lr
 8002f8a:	46c0      	nop			; (mov r8, r8)
 8002f8c:	200004d0 	.word	0x200004d0

08002f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f90:	b570      	push	{r4, r5, r6, lr}
 8002f92:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002f94:	f7ff fff6 	bl	8002f84 <HAL_GetTick>
 8002f98:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f9a:	1c63      	adds	r3, r4, #1
 8002f9c:	d002      	beq.n	8002fa4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f9e:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <HAL_Delay+0x20>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fa4:	f7ff ffee 	bl	8002f84 <HAL_GetTick>
 8002fa8:	1b40      	subs	r0, r0, r5
 8002faa:	42a0      	cmp	r0, r4
 8002fac:	d3fa      	bcc.n	8002fa4 <HAL_Delay+0x14>
  {
  }
}
 8002fae:	bd70      	pop	{r4, r5, r6, pc}
 8002fb0:	20000008 	.word	0x20000008

08002fb4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fb4:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fb6:	25ff      	movs	r5, #255	; 0xff
 8002fb8:	2403      	movs	r4, #3
 8002fba:	002a      	movs	r2, r5
 8002fbc:	4004      	ands	r4, r0
 8002fbe:	00e4      	lsls	r4, r4, #3
 8002fc0:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002fc2:	0189      	lsls	r1, r1, #6
 8002fc4:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fc6:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002fc8:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fca:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8002fcc:	2800      	cmp	r0, #0
 8002fce:	db0a      	blt.n	8002fe6 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fd0:	24c0      	movs	r4, #192	; 0xc0
 8002fd2:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <HAL_NVIC_SetPriority+0x4c>)
 8002fd4:	0880      	lsrs	r0, r0, #2
 8002fd6:	0080      	lsls	r0, r0, #2
 8002fd8:	18c0      	adds	r0, r0, r3
 8002fda:	00a4      	lsls	r4, r4, #2
 8002fdc:	5903      	ldr	r3, [r0, r4]
 8002fde:	401a      	ands	r2, r3
 8002fe0:	4311      	orrs	r1, r2
 8002fe2:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8002fe4:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fe6:	200f      	movs	r0, #15
 8002fe8:	4003      	ands	r3, r0
 8002fea:	3b08      	subs	r3, #8
 8002fec:	4805      	ldr	r0, [pc, #20]	; (8003004 <HAL_NVIC_SetPriority+0x50>)
 8002fee:	089b      	lsrs	r3, r3, #2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	181b      	adds	r3, r3, r0
 8002ff4:	69d8      	ldr	r0, [r3, #28]
 8002ff6:	4002      	ands	r2, r0
 8002ff8:	4311      	orrs	r1, r2
 8002ffa:	61d9      	str	r1, [r3, #28]
 8002ffc:	e7f2      	b.n	8002fe4 <HAL_NVIC_SetPriority+0x30>
 8002ffe:	46c0      	nop			; (mov r8, r8)
 8003000:	e000e100 	.word	0xe000e100
 8003004:	e000ed00 	.word	0xe000ed00

08003008 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003008:	2800      	cmp	r0, #0
 800300a:	db05      	blt.n	8003018 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800300c:	231f      	movs	r3, #31
 800300e:	4018      	ands	r0, r3
 8003010:	3b1e      	subs	r3, #30
 8003012:	4083      	lsls	r3, r0
 8003014:	4a01      	ldr	r2, [pc, #4]	; (800301c <HAL_NVIC_EnableIRQ+0x14>)
 8003016:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003018:	4770      	bx	lr
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	e000e100 	.word	0xe000e100

08003020 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003020:	2280      	movs	r2, #128	; 0x80
 8003022:	1e43      	subs	r3, r0, #1
 8003024:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8003026:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003028:	4293      	cmp	r3, r2
 800302a:	d20d      	bcs.n	8003048 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800302c:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800302e:	4a07      	ldr	r2, [pc, #28]	; (800304c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003030:	4807      	ldr	r0, [pc, #28]	; (8003050 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003032:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003034:	6a03      	ldr	r3, [r0, #32]
 8003036:	0609      	lsls	r1, r1, #24
 8003038:	021b      	lsls	r3, r3, #8
 800303a:	0a1b      	lsrs	r3, r3, #8
 800303c:	430b      	orrs	r3, r1
 800303e:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003040:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003042:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003044:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003046:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003048:	4770      	bx	lr
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	e000e010 	.word	0xe000e010
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003054:	4a55      	ldr	r2, [pc, #340]	; (80031ac <HAL_GPIO_Init+0x158>)
{
 8003056:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003058:	1882      	adds	r2, r0, r2
 800305a:	1e54      	subs	r4, r2, #1
 800305c:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 800305e:	2300      	movs	r3, #0
{
 8003060:	b085      	sub	sp, #20
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003062:	3205      	adds	r2, #5
 8003064:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003066:	680a      	ldr	r2, [r1, #0]
 8003068:	0014      	movs	r4, r2
 800306a:	40dc      	lsrs	r4, r3
 800306c:	d101      	bne.n	8003072 <HAL_GPIO_Init+0x1e>
        EXTI->IMR = temp;
      }
    }
    position++;
  }
}
 800306e:	b005      	add	sp, #20
 8003070:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003072:	2701      	movs	r7, #1
 8003074:	003c      	movs	r4, r7
 8003076:	0015      	movs	r5, r2
 8003078:	409c      	lsls	r4, r3
 800307a:	4025      	ands	r5, r4
 800307c:	9501      	str	r5, [sp, #4]
    if (iocurrent)
 800307e:	4222      	tst	r2, r4
 8003080:	d100      	bne.n	8003084 <HAL_GPIO_Init+0x30>
 8003082:	e090      	b.n	80031a6 <HAL_GPIO_Init+0x152>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003084:	684a      	ldr	r2, [r1, #4]
 8003086:	9200      	str	r2, [sp, #0]
 8003088:	2203      	movs	r2, #3
 800308a:	9d00      	ldr	r5, [sp, #0]
 800308c:	4015      	ands	r5, r2
 800308e:	46ac      	mov	ip, r5
 8003090:	005d      	lsls	r5, r3, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003092:	40aa      	lsls	r2, r5
 8003094:	43d2      	mvns	r2, r2
 8003096:	9202      	str	r2, [sp, #8]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003098:	4662      	mov	r2, ip
 800309a:	3a01      	subs	r2, #1
 800309c:	42ba      	cmp	r2, r7
 800309e:	d828      	bhi.n	80030f2 <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR;
 80030a0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80030a2:	9a02      	ldr	r2, [sp, #8]
 80030a4:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030a6:	68ca      	ldr	r2, [r1, #12]
 80030a8:	40aa      	lsls	r2, r5
 80030aa:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 80030ac:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 80030ae:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030b0:	43a2      	bics	r2, r4
 80030b2:	0014      	movs	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030b4:	9a00      	ldr	r2, [sp, #0]
 80030b6:	0912      	lsrs	r2, r2, #4
 80030b8:	403a      	ands	r2, r7
 80030ba:	409a      	lsls	r2, r3
 80030bc:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80030be:	6042      	str	r2, [r0, #4]
        temp = GPIOx->PUPDR;
 80030c0:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030c2:	9a02      	ldr	r2, [sp, #8]
 80030c4:	4014      	ands	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030c6:	688a      	ldr	r2, [r1, #8]
 80030c8:	40aa      	lsls	r2, r5
 80030ca:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80030cc:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030ce:	4662      	mov	r2, ip
 80030d0:	2a02      	cmp	r2, #2
 80030d2:	d111      	bne.n	80030f8 <HAL_GPIO_Init+0xa4>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80030d4:	2407      	movs	r4, #7
 80030d6:	270f      	movs	r7, #15
 80030d8:	401c      	ands	r4, r3
 80030da:	00a4      	lsls	r4, r4, #2
 80030dc:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 80030de:	08da      	lsrs	r2, r3, #3
 80030e0:	0092      	lsls	r2, r2, #2
 80030e2:	1882      	adds	r2, r0, r2
 80030e4:	6a16      	ldr	r6, [r2, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80030e6:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80030e8:	690f      	ldr	r7, [r1, #16]
 80030ea:	40a7      	lsls	r7, r4
 80030ec:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 80030ee:	6216      	str	r6, [r2, #32]
 80030f0:	e002      	b.n	80030f8 <HAL_GPIO_Init+0xa4>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030f2:	4662      	mov	r2, ip
 80030f4:	2a03      	cmp	r2, #3
 80030f6:	d1e3      	bne.n	80030c0 <HAL_GPIO_Init+0x6c>
      temp = GPIOx->MODER;
 80030f8:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030fa:	9c02      	ldr	r4, [sp, #8]
 80030fc:	4014      	ands	r4, r2
 80030fe:	0022      	movs	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003100:	4664      	mov	r4, ip
 8003102:	40ac      	lsls	r4, r5
 8003104:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8003106:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003108:	22c0      	movs	r2, #192	; 0xc0
 800310a:	9c00      	ldr	r4, [sp, #0]
 800310c:	0292      	lsls	r2, r2, #10
 800310e:	4214      	tst	r4, r2
 8003110:	d049      	beq.n	80031a6 <HAL_GPIO_Init+0x152>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003112:	2701      	movs	r7, #1
 8003114:	4c26      	ldr	r4, [pc, #152]	; (80031b0 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003116:	2503      	movs	r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003118:	6b62      	ldr	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800311a:	401d      	ands	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800311c:	433a      	orrs	r2, r7
 800311e:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8003120:	4a24      	ldr	r2, [pc, #144]	; (80031b4 <HAL_GPIO_Init+0x160>)
 8003122:	089c      	lsrs	r4, r3, #2
 8003124:	00a4      	lsls	r4, r4, #2
 8003126:	18a4      	adds	r4, r4, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003128:	220f      	movs	r2, #15
 800312a:	00ad      	lsls	r5, r5, #2
 800312c:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2U];
 800312e:	68a6      	ldr	r6, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003130:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003132:	22a0      	movs	r2, #160	; 0xa0
 8003134:	05d2      	lsls	r2, r2, #23
 8003136:	4694      	mov	ip, r2
 8003138:	2200      	movs	r2, #0
 800313a:	4560      	cmp	r0, ip
 800313c:	d009      	beq.n	8003152 <HAL_GPIO_Init+0xfe>
 800313e:	4a1e      	ldr	r2, [pc, #120]	; (80031b8 <HAL_GPIO_Init+0x164>)
 8003140:	4694      	mov	ip, r2
 8003142:	003a      	movs	r2, r7
 8003144:	4560      	cmp	r0, ip
 8003146:	d004      	beq.n	8003152 <HAL_GPIO_Init+0xfe>
 8003148:	4f1c      	ldr	r7, [pc, #112]	; (80031bc <HAL_GPIO_Init+0x168>)
 800314a:	1892      	adds	r2, r2, r2
 800314c:	42b8      	cmp	r0, r7
 800314e:	d000      	beq.n	8003152 <HAL_GPIO_Init+0xfe>
 8003150:	9a03      	ldr	r2, [sp, #12]
 8003152:	40aa      	lsls	r2, r5
 8003154:	4316      	orrs	r6, r2
        temp = EXTI->RTSR;
 8003156:	4a1a      	ldr	r2, [pc, #104]	; (80031c0 <HAL_GPIO_Init+0x16c>)
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003158:	60a6      	str	r6, [r4, #8]
        temp = EXTI->RTSR;
 800315a:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800315c:	9c01      	ldr	r4, [sp, #4]
          temp |= iocurrent;
 800315e:	9d01      	ldr	r5, [sp, #4]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003160:	9f00      	ldr	r7, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 8003162:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8003164:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003166:	02ff      	lsls	r7, r7, #11
 8003168:	d401      	bmi.n	800316e <HAL_GPIO_Init+0x11a>
        temp &= ~((uint32_t)iocurrent);
 800316a:	0035      	movs	r5, r6
 800316c:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 800316e:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8003170:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8003172:	9d01      	ldr	r5, [sp, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003174:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 8003176:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003178:	02bf      	lsls	r7, r7, #10
 800317a:	d401      	bmi.n	8003180 <HAL_GPIO_Init+0x12c>
        temp &= ~((uint32_t)iocurrent);
 800317c:	0035      	movs	r5, r6
 800317e:	4025      	ands	r5, r4
        EXTI->FTSR = temp;
 8003180:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 8003182:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8003184:	9d01      	ldr	r5, [sp, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003186:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 8003188:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800318a:	03bf      	lsls	r7, r7, #14
 800318c:	d401      	bmi.n	8003192 <HAL_GPIO_Init+0x13e>
        temp &= ~((uint32_t)iocurrent);
 800318e:	0035      	movs	r5, r6
 8003190:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8003192:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 8003194:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 8003196:	9e01      	ldr	r6, [sp, #4]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003198:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 800319a:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800319c:	03ff      	lsls	r7, r7, #15
 800319e:	d401      	bmi.n	80031a4 <HAL_GPIO_Init+0x150>
        temp &= ~((uint32_t)iocurrent);
 80031a0:	4025      	ands	r5, r4
 80031a2:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 80031a4:	6016      	str	r6, [r2, #0]
    position++;
 80031a6:	3301      	adds	r3, #1
 80031a8:	e75d      	b.n	8003066 <HAL_GPIO_Init+0x12>
 80031aa:	46c0      	nop			; (mov r8, r8)
 80031ac:	afffe400 	.word	0xafffe400
 80031b0:	40021000 	.word	0x40021000
 80031b4:	40010000 	.word	0x40010000
 80031b8:	50000400 	.word	0x50000400
 80031bc:	50000800 	.word	0x50000800
 80031c0:	40010400 	.word	0x40010400

080031c4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031c4:	6900      	ldr	r0, [r0, #16]
 80031c6:	4008      	ands	r0, r1
 80031c8:	1e43      	subs	r3, r0, #1
 80031ca:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80031cc:	b2c0      	uxtb	r0, r0
}
 80031ce:	4770      	bx	lr

080031d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031d0:	2a00      	cmp	r2, #0
 80031d2:	d001      	beq.n	80031d8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031d4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80031d6:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80031d8:	6281      	str	r1, [r0, #40]	; 0x28
}
 80031da:	e7fc      	b.n	80031d6 <HAL_GPIO_WritePin+0x6>

080031dc <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80031dc:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031de:	0013      	movs	r3, r2
 80031e0:	400b      	ands	r3, r1
 80031e2:	041b      	lsls	r3, r3, #16
 80031e4:	4391      	bics	r1, r2
 80031e6:	4319      	orrs	r1, r3
 80031e8:	6181      	str	r1, [r0, #24]
}
 80031ea:	4770      	bx	lr

080031ec <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80031ec:	6803      	ldr	r3, [r0, #0]
 80031ee:	699a      	ldr	r2, [r3, #24]
 80031f0:	0792      	lsls	r2, r2, #30
 80031f2:	d501      	bpl.n	80031f8 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80031f4:	2200      	movs	r2, #0
 80031f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031f8:	2201      	movs	r2, #1
 80031fa:	6999      	ldr	r1, [r3, #24]
 80031fc:	4211      	tst	r1, r2
 80031fe:	d102      	bne.n	8003206 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003200:	6999      	ldr	r1, [r3, #24]
 8003202:	430a      	orrs	r2, r1
 8003204:	619a      	str	r2, [r3, #24]
  }
}
 8003206:	4770      	bx	lr

08003208 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003208:	b530      	push	{r4, r5, lr}
 800320a:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800320c:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800320e:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003210:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003212:	0589      	lsls	r1, r1, #22
 8003214:	431a      	orrs	r2, r3
 8003216:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8003218:	4b05      	ldr	r3, [pc, #20]	; (8003230 <I2C_TransferConfig+0x28>)
 800321a:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800321c:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800321e:	0d64      	lsrs	r4, r4, #21
 8003220:	431c      	orrs	r4, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003222:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8003224:	43a5      	bics	r5, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003226:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8003228:	432a      	orrs	r2, r5
 800322a:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800322c:	bd30      	pop	{r4, r5, pc}
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	03ff63ff 	.word	0x03ff63ff

08003234 <I2C_IsErrorOccurred>:
{
 8003234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003236:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8003238:	6802      	ldr	r2, [r0, #0]
{
 800323a:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 800323c:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800323e:	2310      	movs	r3, #16
 8003240:	000f      	movs	r7, r1
{
 8003242:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003244:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 8003246:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003248:	4219      	tst	r1, r3
 800324a:	d00e      	beq.n	800326a <I2C_IsErrorOccurred+0x36>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800324c:	2720      	movs	r7, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800324e:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 8003250:	9000      	str	r0, [sp, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003252:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003254:	6823      	ldr	r3, [r4, #0]
 8003256:	699a      	ldr	r2, [r3, #24]
 8003258:	423a      	tst	r2, r7
 800325a:	d164      	bne.n	8003326 <I2C_IsErrorOccurred+0xf2>
 800325c:	9a01      	ldr	r2, [sp, #4]
 800325e:	2a00      	cmp	r2, #0
 8003260:	d032      	beq.n	80032c8 <I2C_IsErrorOccurred+0x94>
    error_code |= HAL_I2C_ERROR_AF;
 8003262:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8003264:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 8003266:	9b00      	ldr	r3, [sp, #0]
 8003268:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800326a:	2180      	movs	r1, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 800326c:	6823      	ldr	r3, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800326e:	0049      	lsls	r1, r1, #1
  itflag = hi2c->Instance->ISR;
 8003270:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003272:	420a      	tst	r2, r1
 8003274:	d002      	beq.n	800327c <I2C_IsErrorOccurred+0x48>
    error_code |= HAL_I2C_ERROR_BERR;
 8003276:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003278:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 800327a:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800327c:	2180      	movs	r1, #128	; 0x80
 800327e:	00c9      	lsls	r1, r1, #3
 8003280:	420a      	tst	r2, r1
 8003282:	d003      	beq.n	800328c <I2C_IsErrorOccurred+0x58>
    error_code |= HAL_I2C_ERROR_OVR;
 8003284:	2008      	movs	r0, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003286:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 8003288:	4307      	orrs	r7, r0
    status = HAL_ERROR;
 800328a:	3807      	subs	r0, #7
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800328c:	2180      	movs	r1, #128	; 0x80
 800328e:	0089      	lsls	r1, r1, #2
 8003290:	420a      	tst	r2, r1
 8003292:	d04d      	beq.n	8003330 <I2C_IsErrorOccurred+0xfc>
    error_code |= HAL_I2C_ERROR_ARLO;
 8003294:	2202      	movs	r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003296:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 8003298:	4317      	orrs	r7, r2
    I2C_Flush_TXDR(hi2c);
 800329a:	0020      	movs	r0, r4
 800329c:	f7ff ffa6 	bl	80031ec <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80032a0:	6822      	ldr	r2, [r4, #0]
 80032a2:	4925      	ldr	r1, [pc, #148]	; (8003338 <I2C_IsErrorOccurred+0x104>)
 80032a4:	6853      	ldr	r3, [r2, #4]
 80032a6:	400b      	ands	r3, r1
 80032a8:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80032aa:	0023      	movs	r3, r4
 80032ac:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 80032ae:	6c60      	ldr	r0, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80032b0:	3341      	adds	r3, #65	; 0x41
    hi2c->ErrorCode |= error_code;
 80032b2:	4307      	orrs	r7, r0
 80032b4:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80032b6:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b8:	0022      	movs	r2, r4
 80032ba:	2300      	movs	r3, #0
 80032bc:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 80032be:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c0:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80032c2:	2001      	movs	r0, #1
 80032c4:	7023      	strb	r3, [r4, #0]
 80032c6:	e035      	b.n	8003334 <I2C_IsErrorOccurred+0x100>
      if (Timeout != HAL_MAX_DELAY)
 80032c8:	1c72      	adds	r2, r6, #1
 80032ca:	d0c4      	beq.n	8003256 <I2C_IsErrorOccurred+0x22>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032cc:	f7ff fe5a 	bl	8002f84 <HAL_GetTick>
 80032d0:	1b40      	subs	r0, r0, r5
 80032d2:	42b0      	cmp	r0, r6
 80032d4:	d801      	bhi.n	80032da <I2C_IsErrorOccurred+0xa6>
 80032d6:	2e00      	cmp	r6, #0
 80032d8:	d1bc      	bne.n	8003254 <I2C_IsErrorOccurred+0x20>
          tmp2 = hi2c->Mode;
 80032da:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80032dc:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 80032de:	3242      	adds	r2, #66	; 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80032e0:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 80032e2:	7811      	ldrb	r1, [r2, #0]
 80032e4:	b2ca      	uxtb	r2, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80032e6:	2180      	movs	r1, #128	; 0x80
          tmp2 = hi2c->Mode;
 80032e8:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80032ea:	699a      	ldr	r2, [r3, #24]
 80032ec:	0209      	lsls	r1, r1, #8
 80032ee:	420a      	tst	r2, r1
 80032f0:	d00c      	beq.n	800330c <I2C_IsErrorOccurred+0xd8>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80032f2:	2280      	movs	r2, #128	; 0x80
 80032f4:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80032f6:	4210      	tst	r0, r2
 80032f8:	d108      	bne.n	800330c <I2C_IsErrorOccurred+0xd8>
              (tmp1 != I2C_CR2_STOP) && \
 80032fa:	4661      	mov	r1, ip
 80032fc:	2920      	cmp	r1, #32
 80032fe:	d005      	beq.n	800330c <I2C_IsErrorOccurred+0xd8>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003300:	6859      	ldr	r1, [r3, #4]
 8003302:	430a      	orrs	r2, r1
 8003304:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8003306:	f7ff fe3d 	bl	8002f84 <HAL_GetTick>
 800330a:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800330c:	6823      	ldr	r3, [r4, #0]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	423b      	tst	r3, r7
 8003312:	d19f      	bne.n	8003254 <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003314:	f7ff fe36 	bl	8002f84 <HAL_GetTick>
 8003318:	1b40      	subs	r0, r0, r5
 800331a:	2819      	cmp	r0, #25
 800331c:	d9f6      	bls.n	800330c <I2C_IsErrorOccurred+0xd8>
              status = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003320:	9700      	str	r7, [sp, #0]
              status = HAL_ERROR;
 8003322:	9301      	str	r3, [sp, #4]
 8003324:	e796      	b.n	8003254 <I2C_IsErrorOccurred+0x20>
    if (status == HAL_OK)
 8003326:	9a01      	ldr	r2, [sp, #4]
 8003328:	2a00      	cmp	r2, #0
 800332a:	d19a      	bne.n	8003262 <I2C_IsErrorOccurred+0x2e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800332c:	61df      	str	r7, [r3, #28]
 800332e:	e798      	b.n	8003262 <I2C_IsErrorOccurred+0x2e>
  if (status != HAL_OK)
 8003330:	2800      	cmp	r0, #0
 8003332:	d1b2      	bne.n	800329a <I2C_IsErrorOccurred+0x66>
}
 8003334:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	fe00e800 	.word	0xfe00e800

0800333c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800333c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800333e:	0004      	movs	r4, r0
 8003340:	000d      	movs	r5, r1
 8003342:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003344:	2702      	movs	r7, #2
 8003346:	6823      	ldr	r3, [r4, #0]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	423b      	tst	r3, r7
 800334c:	d001      	beq.n	8003352 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 800334e:	2000      	movs	r0, #0
}
 8003350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003352:	0032      	movs	r2, r6
 8003354:	0029      	movs	r1, r5
 8003356:	0020      	movs	r0, r4
 8003358:	f7ff ff6c 	bl	8003234 <I2C_IsErrorOccurred>
 800335c:	2800      	cmp	r0, #0
 800335e:	d118      	bne.n	8003392 <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8003360:	1c6b      	adds	r3, r5, #1
 8003362:	d0f0      	beq.n	8003346 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003364:	f7ff fe0e 	bl	8002f84 <HAL_GetTick>
 8003368:	1b80      	subs	r0, r0, r6
 800336a:	42a8      	cmp	r0, r5
 800336c:	d801      	bhi.n	8003372 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 800336e:	2d00      	cmp	r5, #0
 8003370:	d1e9      	bne.n	8003346 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003372:	6823      	ldr	r3, [r4, #0]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	001a      	movs	r2, r3
 8003378:	403a      	ands	r2, r7
 800337a:	423b      	tst	r3, r7
 800337c:	d1e3      	bne.n	8003346 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800337e:	2120      	movs	r1, #32
 8003380:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003382:	430b      	orrs	r3, r1
 8003384:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003386:	0023      	movs	r3, r4
          __HAL_UNLOCK(hi2c);
 8003388:	3440      	adds	r4, #64	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 800338a:	3341      	adds	r3, #65	; 0x41
 800338c:	7019      	strb	r1, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800338e:	705a      	strb	r2, [r3, #1]
          __HAL_UNLOCK(hi2c);
 8003390:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8003392:	2001      	movs	r0, #1
 8003394:	e7dc      	b.n	8003350 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

08003396 <I2C_WaitOnFlagUntilTimeout>:
{
 8003396:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003398:	0004      	movs	r4, r0
 800339a:	000d      	movs	r5, r1
 800339c:	0017      	movs	r7, r2
 800339e:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033a0:	6822      	ldr	r2, [r4, #0]
 80033a2:	6993      	ldr	r3, [r2, #24]
 80033a4:	402b      	ands	r3, r5
 80033a6:	1b5b      	subs	r3, r3, r5
 80033a8:	4259      	negs	r1, r3
 80033aa:	414b      	adcs	r3, r1
 80033ac:	42bb      	cmp	r3, r7
 80033ae:	d001      	beq.n	80033b4 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80033b0:	2000      	movs	r0, #0
 80033b2:	e01f      	b.n	80033f4 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 80033b4:	1c73      	adds	r3, r6, #1
 80033b6:	d0f4      	beq.n	80033a2 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b8:	f7ff fde4 	bl	8002f84 <HAL_GetTick>
 80033bc:	9b06      	ldr	r3, [sp, #24]
 80033be:	1ac0      	subs	r0, r0, r3
 80033c0:	42b0      	cmp	r0, r6
 80033c2:	d801      	bhi.n	80033c8 <I2C_WaitOnFlagUntilTimeout+0x32>
 80033c4:	2e00      	cmp	r6, #0
 80033c6:	d1eb      	bne.n	80033a0 <I2C_WaitOnFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033c8:	6823      	ldr	r3, [r4, #0]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	402b      	ands	r3, r5
 80033ce:	1b5b      	subs	r3, r3, r5
 80033d0:	425a      	negs	r2, r3
 80033d2:	4153      	adcs	r3, r2
 80033d4:	42bb      	cmp	r3, r7
 80033d6:	d1e3      	bne.n	80033a0 <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033d8:	2220      	movs	r2, #32
 80033da:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 80033dc:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033de:	4313      	orrs	r3, r2
 80033e0:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80033e2:	0023      	movs	r3, r4
 80033e4:	3341      	adds	r3, #65	; 0x41
 80033e6:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e8:	0022      	movs	r2, r4
 80033ea:	2300      	movs	r3, #0
 80033ec:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 80033ee:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f0:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 80033f2:	7023      	strb	r3, [r4, #0]
}
 80033f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080033f6 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80033f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033f8:	0004      	movs	r4, r0
 80033fa:	000e      	movs	r6, r1
 80033fc:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033fe:	2520      	movs	r5, #32
 8003400:	6823      	ldr	r3, [r4, #0]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	422b      	tst	r3, r5
 8003406:	d001      	beq.n	800340c <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8003408:	2000      	movs	r0, #0
}
 800340a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800340c:	003a      	movs	r2, r7
 800340e:	0031      	movs	r1, r6
 8003410:	0020      	movs	r0, r4
 8003412:	f7ff ff0f 	bl	8003234 <I2C_IsErrorOccurred>
 8003416:	2800      	cmp	r0, #0
 8003418:	d115      	bne.n	8003446 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800341a:	f7ff fdb3 	bl	8002f84 <HAL_GetTick>
 800341e:	1bc0      	subs	r0, r0, r7
 8003420:	42b0      	cmp	r0, r6
 8003422:	d801      	bhi.n	8003428 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8003424:	2e00      	cmp	r6, #0
 8003426:	d1eb      	bne.n	8003400 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003428:	6823      	ldr	r3, [r4, #0]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	001a      	movs	r2, r3
 800342e:	402a      	ands	r2, r5
 8003430:	422b      	tst	r3, r5
 8003432:	d1e5      	bne.n	8003400 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003434:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003436:	432b      	orrs	r3, r5
 8003438:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800343a:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 800343c:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800343e:	3341      	adds	r3, #65	; 0x41
 8003440:	701d      	strb	r5, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003442:	705a      	strb	r2, [r3, #1]
        __HAL_UNLOCK(hi2c);
 8003444:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8003446:	2001      	movs	r0, #1
 8003448:	e7df      	b.n	800340a <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
	...

0800344c <HAL_I2C_Init>:
{
 800344c:	b570      	push	{r4, r5, r6, lr}
 800344e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003450:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8003452:	2c00      	cmp	r4, #0
 8003454:	d03f      	beq.n	80034d6 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003456:	0025      	movs	r5, r4
 8003458:	3541      	adds	r5, #65	; 0x41
 800345a:	782b      	ldrb	r3, [r5, #0]
 800345c:	b2da      	uxtb	r2, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d105      	bne.n	800346e <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8003462:	0023      	movs	r3, r4
 8003464:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 8003466:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8003468:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 800346a:	f7ff fc5b 	bl	8002d24 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800346e:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8003470:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003472:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8003474:	6823      	ldr	r3, [r4, #0]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003476:	481d      	ldr	r0, [pc, #116]	; (80034ec <HAL_I2C_Init+0xa0>)
  __HAL_I2C_DISABLE(hi2c);
 8003478:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800347a:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 800347c:	438a      	bics	r2, r1
 800347e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003480:	6861      	ldr	r1, [r4, #4]
 8003482:	4a1b      	ldr	r2, [pc, #108]	; (80034f0 <HAL_I2C_Init+0xa4>)
 8003484:	400a      	ands	r2, r1
 8003486:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	4002      	ands	r2, r0
 800348c:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800348e:	68e2      	ldr	r2, [r4, #12]
 8003490:	2a01      	cmp	r2, #1
 8003492:	d121      	bne.n	80034d8 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003494:	2180      	movs	r1, #128	; 0x80
 8003496:	0209      	lsls	r1, r1, #8
 8003498:	4331      	orrs	r1, r6
 800349a:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	4915      	ldr	r1, [pc, #84]	; (80034f4 <HAL_I2C_Init+0xa8>)
 80034a0:	4311      	orrs	r1, r2
 80034a2:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034a4:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034a6:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034a8:	4002      	ands	r2, r0
 80034aa:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034ac:	6922      	ldr	r2, [r4, #16]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034ae:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034b0:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80034b2:	69a1      	ldr	r1, [r4, #24]
 80034b4:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034b6:	430a      	orrs	r2, r1
 80034b8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034ba:	6a21      	ldr	r1, [r4, #32]
 80034bc:	69e2      	ldr	r2, [r4, #28]
 80034be:	430a      	orrs	r2, r1
 80034c0:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80034c2:	2201      	movs	r2, #1
 80034c4:	6819      	ldr	r1, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80034ca:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034cc:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034ce:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80034d0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d2:	3442      	adds	r4, #66	; 0x42
 80034d4:	7020      	strb	r0, [r4, #0]
}
 80034d6:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034d8:	2184      	movs	r1, #132	; 0x84
 80034da:	0209      	lsls	r1, r1, #8
 80034dc:	4331      	orrs	r1, r6
 80034de:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034e0:	2a02      	cmp	r2, #2
 80034e2:	d1db      	bne.n	800349c <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80034e4:	2280      	movs	r2, #128	; 0x80
 80034e6:	0112      	lsls	r2, r2, #4
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	e7d7      	b.n	800349c <HAL_I2C_Init+0x50>
 80034ec:	ffff7fff 	.word	0xffff7fff
 80034f0:	f0ffffff 	.word	0xf0ffffff
 80034f4:	02008000 	.word	0x02008000

080034f8 <HAL_I2C_Mem_Read>:
{
 80034f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034fa:	b089      	sub	sp, #36	; 0x24
 80034fc:	9304      	str	r3, [sp, #16]
 80034fe:	ab0e      	add	r3, sp, #56	; 0x38
 8003500:	9203      	str	r2, [sp, #12]
 8003502:	cb04      	ldmia	r3!, {r2}
 8003504:	0004      	movs	r4, r0
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	9205      	str	r2, [sp, #20]
 800350a:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800350c:	0003      	movs	r3, r0
 800350e:	3341      	adds	r3, #65	; 0x41
 8003510:	9307      	str	r3, [sp, #28]
 8003512:	781b      	ldrb	r3, [r3, #0]
{
 8003514:	000f      	movs	r7, r1
    return HAL_BUSY;
 8003516:	2002      	movs	r0, #2
{
 8003518:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 800351a:	2b20      	cmp	r3, #32
 800351c:	d108      	bne.n	8003530 <HAL_I2C_Mem_Read+0x38>
    if ((pData == NULL) || (Size == 0U))
 800351e:	2a00      	cmp	r2, #0
 8003520:	d002      	beq.n	8003528 <HAL_I2C_Mem_Read+0x30>
 8003522:	9b06      	ldr	r3, [sp, #24]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d105      	bne.n	8003534 <HAL_I2C_Mem_Read+0x3c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003528:	2380      	movs	r3, #128	; 0x80
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800352e:	2001      	movs	r0, #1
}
 8003530:	b009      	add	sp, #36	; 0x24
 8003532:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8003534:	0023      	movs	r3, r4
 8003536:	3340      	adds	r3, #64	; 0x40
 8003538:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 800353a:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 800353c:	2a01      	cmp	r2, #1
 800353e:	d0f7      	beq.n	8003530 <HAL_I2C_Mem_Read+0x38>
 8003540:	2201      	movs	r2, #1
 8003542:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003544:	f7ff fd1e 	bl	8002f84 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003548:	2180      	movs	r1, #128	; 0x80
 800354a:	2319      	movs	r3, #25
 800354c:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800354e:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003550:	2201      	movs	r2, #1
 8003552:	0020      	movs	r0, r4
 8003554:	0209      	lsls	r1, r1, #8
 8003556:	f7ff ff1e 	bl	8003396 <I2C_WaitOnFlagUntilTimeout>
 800355a:	1e03      	subs	r3, r0, #0
 800355c:	d1e7      	bne.n	800352e <HAL_I2C_Mem_Read+0x36>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800355e:	2222      	movs	r2, #34	; 0x22
 8003560:	9907      	ldr	r1, [sp, #28]
 8003562:	700a      	strb	r2, [r1, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003564:	0022      	movs	r2, r4
 8003566:	3242      	adds	r2, #66	; 0x42
 8003568:	9207      	str	r2, [sp, #28]
 800356a:	2240      	movs	r2, #64	; 0x40
 800356c:	9907      	ldr	r1, [sp, #28]
 800356e:	700a      	strb	r2, [r1, #0]
    hi2c->pBuffPtr  = pData;
 8003570:	9a05      	ldr	r2, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003572:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003574:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003576:	9a06      	ldr	r2, [sp, #24]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003578:	494d      	ldr	r1, [pc, #308]	; (80036b0 <HAL_I2C_Mem_Read+0x1b8>)
    hi2c->XferCount = Size;
 800357a:	8562      	strh	r2, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800357c:	466a      	mov	r2, sp
    hi2c->XferISR   = NULL;
 800357e:	6360      	str	r0, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003580:	7c12      	ldrb	r2, [r2, #16]
 8003582:	0020      	movs	r0, r4
 8003584:	9100      	str	r1, [sp, #0]
 8003586:	0039      	movs	r1, r7
 8003588:	f7ff fe3e 	bl	8003208 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800358c:	002a      	movs	r2, r5
 800358e:	0031      	movs	r1, r6
 8003590:	0020      	movs	r0, r4
 8003592:	f7ff fed3 	bl	800333c <I2C_WaitOnTXISFlagUntilTimeout>
 8003596:	2800      	cmp	r0, #0
 8003598:	d127      	bne.n	80035ea <HAL_I2C_Mem_Read+0xf2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800359a:	9a04      	ldr	r2, [sp, #16]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800359c:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800359e:	2a01      	cmp	r2, #1
 80035a0:	d117      	bne.n	80035d2 <HAL_I2C_Mem_Read+0xda>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035a2:	466a      	mov	r2, sp
 80035a4:	7b12      	ldrb	r2, [r2, #12]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80035a6:	2140      	movs	r1, #64	; 0x40
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035a8:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80035aa:	0020      	movs	r0, r4
 80035ac:	0033      	movs	r3, r6
 80035ae:	2200      	movs	r2, #0
 80035b0:	9500      	str	r5, [sp, #0]
 80035b2:	f7ff fef0 	bl	8003396 <I2C_WaitOnFlagUntilTimeout>
 80035b6:	2800      	cmp	r0, #0
 80035b8:	d117      	bne.n	80035ea <HAL_I2C_Mem_Read+0xf2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035ba:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80035bc:	4b3d      	ldr	r3, [pc, #244]	; (80036b4 <HAL_I2C_Mem_Read+0x1bc>)
 80035be:	2aff      	cmp	r2, #255	; 0xff
 80035c0:	d817      	bhi.n	80035f2 <HAL_I2C_Mem_Read+0xfa>
      hi2c->XferSize = hi2c->XferCount;
 80035c2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80035c4:	b292      	uxth	r2, r2
 80035c6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	2380      	movs	r3, #128	; 0x80
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	049b      	lsls	r3, r3, #18
 80035d0:	e014      	b.n	80035fc <HAL_I2C_Mem_Read+0x104>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80035d2:	9a03      	ldr	r2, [sp, #12]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035d4:	0031      	movs	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80035d6:	0a12      	lsrs	r2, r2, #8
 80035d8:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035da:	0020      	movs	r0, r4
 80035dc:	002a      	movs	r2, r5
 80035de:	f7ff fead 	bl	800333c <I2C_WaitOnTXISFlagUntilTimeout>
 80035e2:	2800      	cmp	r0, #0
 80035e4:	d101      	bne.n	80035ea <HAL_I2C_Mem_Read+0xf2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035e6:	6823      	ldr	r3, [r4, #0]
 80035e8:	e7db      	b.n	80035a2 <HAL_I2C_Mem_Read+0xaa>
      __HAL_UNLOCK(hi2c);
 80035ea:	2300      	movs	r3, #0
 80035ec:	3440      	adds	r4, #64	; 0x40
 80035ee:	7023      	strb	r3, [r4, #0]
 80035f0:	e79d      	b.n	800352e <HAL_I2C_Mem_Read+0x36>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035f2:	22ff      	movs	r2, #255	; 0xff
 80035f4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	2380      	movs	r3, #128	; 0x80
 80035fa:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035fc:	0039      	movs	r1, r7
 80035fe:	0020      	movs	r0, r4
 8003600:	f7ff fe02 	bl	8003208 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003604:	0033      	movs	r3, r6
 8003606:	2200      	movs	r2, #0
 8003608:	2104      	movs	r1, #4
 800360a:	0020      	movs	r0, r4
 800360c:	9500      	str	r5, [sp, #0]
 800360e:	f7ff fec2 	bl	8003396 <I2C_WaitOnFlagUntilTimeout>
 8003612:	2800      	cmp	r0, #0
 8003614:	d000      	beq.n	8003618 <HAL_I2C_Mem_Read+0x120>
 8003616:	e78a      	b.n	800352e <HAL_I2C_Mem_Read+0x36>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003618:	6823      	ldr	r3, [r4, #0]
 800361a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800361c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361e:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8003620:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003622:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003624:	3301      	adds	r3, #1
 8003626:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003628:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800362a:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800362c:	3b01      	subs	r3, #1
 800362e:	b29b      	uxth	r3, r3
 8003630:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003632:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003634:	b292      	uxth	r2, r2
 8003636:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003638:	2b00      	cmp	r3, #0
 800363a:	d017      	beq.n	800366c <HAL_I2C_Mem_Read+0x174>
 800363c:	2a00      	cmp	r2, #0
 800363e:	d115      	bne.n	800366c <HAL_I2C_Mem_Read+0x174>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003640:	0033      	movs	r3, r6
 8003642:	2180      	movs	r1, #128	; 0x80
 8003644:	0020      	movs	r0, r4
 8003646:	9500      	str	r5, [sp, #0]
 8003648:	f7ff fea5 	bl	8003396 <I2C_WaitOnFlagUntilTimeout>
 800364c:	2800      	cmp	r0, #0
 800364e:	d000      	beq.n	8003652 <HAL_I2C_Mem_Read+0x15a>
 8003650:	e76d      	b.n	800352e <HAL_I2C_Mem_Read+0x36>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003652:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003654:	2bff      	cmp	r3, #255	; 0xff
 8003656:	d923      	bls.n	80036a0 <HAL_I2C_Mem_Read+0x1a8>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003658:	23ff      	movs	r3, #255	; 0xff
 800365a:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800365c:	2380      	movs	r3, #128	; 0x80
 800365e:	22ff      	movs	r2, #255	; 0xff
 8003660:	9000      	str	r0, [sp, #0]
 8003662:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003664:	0039      	movs	r1, r7
 8003666:	0020      	movs	r0, r4
 8003668:	f7ff fdce 	bl	8003208 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800366c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1c8      	bne.n	8003604 <HAL_I2C_Mem_Read+0x10c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003672:	002a      	movs	r2, r5
 8003674:	0031      	movs	r1, r6
 8003676:	0020      	movs	r0, r4
 8003678:	f7ff febd 	bl	80033f6 <I2C_WaitOnSTOPFlagUntilTimeout>
 800367c:	2800      	cmp	r0, #0
 800367e:	d000      	beq.n	8003682 <HAL_I2C_Mem_Read+0x18a>
 8003680:	e755      	b.n	800352e <HAL_I2C_Mem_Read+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003682:	2120      	movs	r1, #32
 8003684:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8003686:	4d0c      	ldr	r5, [pc, #48]	; (80036b8 <HAL_I2C_Mem_Read+0x1c0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003688:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	402a      	ands	r2, r5
 800368e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003690:	0023      	movs	r3, r4
 8003692:	3341      	adds	r3, #65	; 0x41
 8003694:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003696:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 8003698:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800369a:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800369c:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800369e:	e747      	b.n	8003530 <HAL_I2C_Mem_Read+0x38>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036a0:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 80036a2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036a4:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 80036a6:	b292      	uxth	r2, r2
 80036a8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	9000      	str	r0, [sp, #0]
 80036ae:	e7d9      	b.n	8003664 <HAL_I2C_Mem_Read+0x16c>
 80036b0:	80002000 	.word	0x80002000
 80036b4:	80002400 	.word	0x80002400
 80036b8:	fe00e800 	.word	0xfe00e800

080036bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036be:	0004      	movs	r4, r0
 80036c0:	3441      	adds	r4, #65	; 0x41
 80036c2:	7822      	ldrb	r2, [r4, #0]
{
 80036c4:	0003      	movs	r3, r0
 80036c6:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80036c8:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ca:	b2d6      	uxtb	r6, r2
 80036cc:	2a20      	cmp	r2, #32
 80036ce:	d118      	bne.n	8003702 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 80036d0:	001d      	movs	r5, r3
 80036d2:	3540      	adds	r5, #64	; 0x40
 80036d4:	782a      	ldrb	r2, [r5, #0]
 80036d6:	2a01      	cmp	r2, #1
 80036d8:	d013      	beq.n	8003702 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 80036da:	2224      	movs	r2, #36	; 0x24
 80036dc:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	3a23      	subs	r2, #35	; 0x23
 80036e2:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036e4:	4807      	ldr	r0, [pc, #28]	; (8003704 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 80036e6:	4391      	bics	r1, r2
 80036e8:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036ea:	6819      	ldr	r1, [r3, #0]
 80036ec:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 80036ee:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036f0:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80036f2:	6819      	ldr	r1, [r3, #0]
 80036f4:	4339      	orrs	r1, r7
 80036f6:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80036f8:	6819      	ldr	r1, [r3, #0]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80036fe:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8003700:	7028      	strb	r0, [r5, #0]
  }
}
 8003702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003704:	ffffefff 	.word	0xffffefff

08003708 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003708:	0002      	movs	r2, r0
{
 800370a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800370c:	3241      	adds	r2, #65	; 0x41
 800370e:	7814      	ldrb	r4, [r2, #0]
{
 8003710:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003712:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003714:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003716:	2c20      	cmp	r4, #32
 8003718:	d117      	bne.n	800374a <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 800371a:	001c      	movs	r4, r3
 800371c:	3440      	adds	r4, #64	; 0x40
 800371e:	7826      	ldrb	r6, [r4, #0]
 8003720:	2e01      	cmp	r6, #1
 8003722:	d012      	beq.n	800374a <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003724:	3022      	adds	r0, #34	; 0x22
 8003726:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3823      	subs	r0, #35	; 0x23
 800372c:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800372e:	4f07      	ldr	r7, [pc, #28]	; (800374c <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8003730:	4386      	bics	r6, r0
 8003732:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8003734:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 8003736:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8003738:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 800373a:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 800373c:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800373e:	6819      	ldr	r1, [r3, #0]
 8003740:	4308      	orrs	r0, r1
 8003742:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8003744:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003746:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8003748:	7020      	strb	r0, [r4, #0]
  }
}
 800374a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800374c:	fffff0ff 	.word	0xfffff0ff

08003750 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003750:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8003752:	4b1d      	ldr	r3, [pc, #116]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x78>)
{
 8003754:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8003756:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8003758:	4022      	ands	r2, r4
 800375a:	2a08      	cmp	r2, #8
 800375c:	d031      	beq.n	80037c2 <HAL_RCC_GetSysClockFreq+0x72>
 800375e:	2a0c      	cmp	r2, #12
 8003760:	d009      	beq.n	8003776 <HAL_RCC_GetSysClockFreq+0x26>
 8003762:	2a04      	cmp	r2, #4
 8003764:	d125      	bne.n	80037b2 <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003766:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8003768:	4b18      	ldr	r3, [pc, #96]	; (80037cc <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800376a:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 800376c:	17c0      	asrs	r0, r0, #31
 800376e:	4018      	ands	r0, r3
 8003770:	4b17      	ldr	r3, [pc, #92]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x80>)
 8003772:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8003774:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003776:	02a2      	lsls	r2, r4, #10
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003778:	4816      	ldr	r0, [pc, #88]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x84>)
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800377a:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800377c:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800377e:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003780:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003782:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003784:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003786:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003788:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800378a:	4211      	tst	r1, r2
 800378c:	d009      	beq.n	80037a2 <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800378e:	4a12      	ldr	r2, [pc, #72]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x88>)
 8003790:	2300      	movs	r3, #0
 8003792:	2100      	movs	r1, #0
 8003794:	f7fc fd8a 	bl	80002ac <__aeabi_lmul>
 8003798:	0022      	movs	r2, r4
 800379a:	2300      	movs	r3, #0
 800379c:	f7fc fd66 	bl	800026c <__aeabi_uldivmod>
 80037a0:	e7e8      	b.n	8003774 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	2310      	movs	r3, #16
 80037a6:	421a      	tst	r2, r3
 80037a8:	d001      	beq.n	80037ae <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80037aa:	4a0c      	ldr	r2, [pc, #48]	; (80037dc <HAL_RCC_GetSysClockFreq+0x8c>)
 80037ac:	e7f0      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80037ae:	4a08      	ldr	r2, [pc, #32]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x80>)
 80037b0:	e7ee      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80037b2:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80037b4:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80037b6:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80037b8:	041b      	lsls	r3, r3, #16
 80037ba:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80037bc:	3301      	adds	r3, #1
 80037be:	4098      	lsls	r0, r3
      break;
 80037c0:	e7d8      	b.n	8003774 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 80037c2:	4805      	ldr	r0, [pc, #20]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x88>)
 80037c4:	e7d6      	b.n	8003774 <HAL_RCC_GetSysClockFreq+0x24>
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	40021000 	.word	0x40021000
 80037cc:	ff48e500 	.word	0xff48e500
 80037d0:	00f42400 	.word	0x00f42400
 80037d4:	08006190 	.word	0x08006190
 80037d8:	007a1200 	.word	0x007a1200
 80037dc:	003d0900 	.word	0x003d0900

080037e0 <HAL_RCC_OscConfig>:
{
 80037e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037e2:	0005      	movs	r5, r0
 80037e4:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 80037e6:	2800      	cmp	r0, #0
 80037e8:	d056      	beq.n	8003898 <HAL_RCC_OscConfig+0xb8>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037ea:	230c      	movs	r3, #12
 80037ec:	4cb6      	ldr	r4, [pc, #728]	; (8003ac8 <HAL_RCC_OscConfig+0x2e8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ee:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037f0:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037f2:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037f4:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037f6:	2380      	movs	r3, #128	; 0x80
 80037f8:	025b      	lsls	r3, r3, #9
 80037fa:	0019      	movs	r1, r3
 80037fc:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037fe:	07d2      	lsls	r2, r2, #31
 8003800:	d43e      	bmi.n	8003880 <HAL_RCC_OscConfig+0xa0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003802:	682b      	ldr	r3, [r5, #0]
 8003804:	079b      	lsls	r3, r3, #30
 8003806:	d500      	bpl.n	800380a <HAL_RCC_OscConfig+0x2a>
 8003808:	e087      	b.n	800391a <HAL_RCC_OscConfig+0x13a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800380a:	682b      	ldr	r3, [r5, #0]
 800380c:	06db      	lsls	r3, r3, #27
 800380e:	d529      	bpl.n	8003864 <HAL_RCC_OscConfig+0x84>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003810:	2e00      	cmp	r6, #0
 8003812:	d000      	beq.n	8003816 <HAL_RCC_OscConfig+0x36>
 8003814:	e0e0      	b.n	80039d8 <HAL_RCC_OscConfig+0x1f8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003816:	6823      	ldr	r3, [r4, #0]
 8003818:	059b      	lsls	r3, r3, #22
 800381a:	d502      	bpl.n	8003822 <HAL_RCC_OscConfig+0x42>
 800381c:	69ab      	ldr	r3, [r5, #24]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d03a      	beq.n	8003898 <HAL_RCC_OscConfig+0xb8>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003822:	6862      	ldr	r2, [r4, #4]
 8003824:	49a9      	ldr	r1, [pc, #676]	; (8003acc <HAL_RCC_OscConfig+0x2ec>)
 8003826:	6a2b      	ldr	r3, [r5, #32]
 8003828:	400a      	ands	r2, r1
 800382a:	431a      	orrs	r2, r3
 800382c:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800382e:	6861      	ldr	r1, [r4, #4]
 8003830:	69ea      	ldr	r2, [r5, #28]
 8003832:	0209      	lsls	r1, r1, #8
 8003834:	0a09      	lsrs	r1, r1, #8
 8003836:	0612      	lsls	r2, r2, #24
 8003838:	430a      	orrs	r2, r1
 800383a:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800383c:	2280      	movs	r2, #128	; 0x80
 800383e:	0b5b      	lsrs	r3, r3, #13
 8003840:	3301      	adds	r3, #1
 8003842:	0212      	lsls	r2, r2, #8
 8003844:	409a      	lsls	r2, r3
 8003846:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003848:	68e1      	ldr	r1, [r4, #12]
 800384a:	060a      	lsls	r2, r1, #24
 800384c:	49a0      	ldr	r1, [pc, #640]	; (8003ad0 <HAL_RCC_OscConfig+0x2f0>)
 800384e:	0f12      	lsrs	r2, r2, #28
 8003850:	5c8a      	ldrb	r2, [r1, r2]
 8003852:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003854:	4a9f      	ldr	r2, [pc, #636]	; (8003ad4 <HAL_RCC_OscConfig+0x2f4>)
 8003856:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8003858:	4b9f      	ldr	r3, [pc, #636]	; (8003ad8 <HAL_RCC_OscConfig+0x2f8>)
 800385a:	6818      	ldr	r0, [r3, #0]
 800385c:	f7ff fb4e 	bl	8002efc <HAL_InitTick>
        if(status != HAL_OK)
 8003860:	2800      	cmp	r0, #0
 8003862:	d130      	bne.n	80038c6 <HAL_RCC_OscConfig+0xe6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003864:	682b      	ldr	r3, [r5, #0]
 8003866:	071b      	lsls	r3, r3, #28
 8003868:	d500      	bpl.n	800386c <HAL_RCC_OscConfig+0x8c>
 800386a:	e0ec      	b.n	8003a46 <HAL_RCC_OscConfig+0x266>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800386c:	682b      	ldr	r3, [r5, #0]
 800386e:	075b      	lsls	r3, r3, #29
 8003870:	d500      	bpl.n	8003874 <HAL_RCC_OscConfig+0x94>
 8003872:	e10e      	b.n	8003a92 <HAL_RCC_OscConfig+0x2b2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003874:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003876:	2b00      	cmp	r3, #0
 8003878:	d000      	beq.n	800387c <HAL_RCC_OscConfig+0x9c>
 800387a:	e192      	b.n	8003ba2 <HAL_RCC_OscConfig+0x3c2>
  return HAL_OK;
 800387c:	2000      	movs	r0, #0
 800387e:	e022      	b.n	80038c6 <HAL_RCC_OscConfig+0xe6>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003880:	2e08      	cmp	r6, #8
 8003882:	d003      	beq.n	800388c <HAL_RCC_OscConfig+0xac>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003884:	2e0c      	cmp	r6, #12
 8003886:	d109      	bne.n	800389c <HAL_RCC_OscConfig+0xbc>
 8003888:	2f00      	cmp	r7, #0
 800388a:	d007      	beq.n	800389c <HAL_RCC_OscConfig+0xbc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800388c:	6823      	ldr	r3, [r4, #0]
 800388e:	039b      	lsls	r3, r3, #14
 8003890:	d5b7      	bpl.n	8003802 <HAL_RCC_OscConfig+0x22>
 8003892:	686b      	ldr	r3, [r5, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1b4      	bne.n	8003802 <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 8003898:	2001      	movs	r0, #1
 800389a:	e014      	b.n	80038c6 <HAL_RCC_OscConfig+0xe6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800389c:	686a      	ldr	r2, [r5, #4]
 800389e:	428a      	cmp	r2, r1
 80038a0:	d113      	bne.n	80038ca <HAL_RCC_OscConfig+0xea>
 80038a2:	6822      	ldr	r2, [r4, #0]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80038a8:	f7ff fb6c 	bl	8002f84 <HAL_GetTick>
 80038ac:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038ae:	2280      	movs	r2, #128	; 0x80
 80038b0:	6823      	ldr	r3, [r4, #0]
 80038b2:	0292      	lsls	r2, r2, #10
 80038b4:	4213      	tst	r3, r2
 80038b6:	d1a4      	bne.n	8003802 <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038b8:	f7ff fb64 	bl	8002f84 <HAL_GetTick>
 80038bc:	9b00      	ldr	r3, [sp, #0]
 80038be:	1ac0      	subs	r0, r0, r3
 80038c0:	2864      	cmp	r0, #100	; 0x64
 80038c2:	d9f4      	bls.n	80038ae <HAL_RCC_OscConfig+0xce>
            return HAL_TIMEOUT;
 80038c4:	2003      	movs	r0, #3
}
 80038c6:	b005      	add	sp, #20
 80038c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ca:	21a0      	movs	r1, #160	; 0xa0
 80038cc:	02c9      	lsls	r1, r1, #11
 80038ce:	428a      	cmp	r2, r1
 80038d0:	d105      	bne.n	80038de <HAL_RCC_OscConfig+0xfe>
 80038d2:	2280      	movs	r2, #128	; 0x80
 80038d4:	6821      	ldr	r1, [r4, #0]
 80038d6:	02d2      	lsls	r2, r2, #11
 80038d8:	430a      	orrs	r2, r1
 80038da:	6022      	str	r2, [r4, #0]
 80038dc:	e7e1      	b.n	80038a2 <HAL_RCC_OscConfig+0xc2>
 80038de:	6821      	ldr	r1, [r4, #0]
 80038e0:	487e      	ldr	r0, [pc, #504]	; (8003adc <HAL_RCC_OscConfig+0x2fc>)
 80038e2:	4001      	ands	r1, r0
 80038e4:	6021      	str	r1, [r4, #0]
 80038e6:	6821      	ldr	r1, [r4, #0]
 80038e8:	400b      	ands	r3, r1
 80038ea:	9303      	str	r3, [sp, #12]
 80038ec:	9b03      	ldr	r3, [sp, #12]
 80038ee:	497c      	ldr	r1, [pc, #496]	; (8003ae0 <HAL_RCC_OscConfig+0x300>)
 80038f0:	6823      	ldr	r3, [r4, #0]
 80038f2:	400b      	ands	r3, r1
 80038f4:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038f6:	2a00      	cmp	r2, #0
 80038f8:	d1d6      	bne.n	80038a8 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 80038fa:	f7ff fb43 	bl	8002f84 <HAL_GetTick>
 80038fe:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003900:	2280      	movs	r2, #128	; 0x80
 8003902:	6823      	ldr	r3, [r4, #0]
 8003904:	0292      	lsls	r2, r2, #10
 8003906:	4213      	tst	r3, r2
 8003908:	d100      	bne.n	800390c <HAL_RCC_OscConfig+0x12c>
 800390a:	e77a      	b.n	8003802 <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800390c:	f7ff fb3a 	bl	8002f84 <HAL_GetTick>
 8003910:	9b00      	ldr	r3, [sp, #0]
 8003912:	1ac0      	subs	r0, r0, r3
 8003914:	2864      	cmp	r0, #100	; 0x64
 8003916:	d9f3      	bls.n	8003900 <HAL_RCC_OscConfig+0x120>
 8003918:	e7d4      	b.n	80038c4 <HAL_RCC_OscConfig+0xe4>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800391a:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 800391c:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800391e:	4213      	tst	r3, r2
 8003920:	d003      	beq.n	800392a <HAL_RCC_OscConfig+0x14a>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003922:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003924:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003926:	4311      	orrs	r1, r2
 8003928:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800392a:	2e04      	cmp	r6, #4
 800392c:	d003      	beq.n	8003936 <HAL_RCC_OscConfig+0x156>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800392e:	2e0c      	cmp	r6, #12
 8003930:	d124      	bne.n	800397c <HAL_RCC_OscConfig+0x19c>
 8003932:	2f00      	cmp	r7, #0
 8003934:	d122      	bne.n	800397c <HAL_RCC_OscConfig+0x19c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003936:	6822      	ldr	r2, [r4, #0]
 8003938:	0752      	lsls	r2, r2, #29
 800393a:	d501      	bpl.n	8003940 <HAL_RCC_OscConfig+0x160>
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0ab      	beq.n	8003898 <HAL_RCC_OscConfig+0xb8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003940:	6861      	ldr	r1, [r4, #4]
 8003942:	692a      	ldr	r2, [r5, #16]
 8003944:	4867      	ldr	r0, [pc, #412]	; (8003ae4 <HAL_RCC_OscConfig+0x304>)
 8003946:	0212      	lsls	r2, r2, #8
 8003948:	4001      	ands	r1, r0
 800394a:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800394c:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800394e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003950:	6822      	ldr	r2, [r4, #0]
 8003952:	438a      	bics	r2, r1
 8003954:	4313      	orrs	r3, r2
 8003956:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003958:	f7ff fefa 	bl	8003750 <HAL_RCC_GetSysClockFreq>
 800395c:	68e3      	ldr	r3, [r4, #12]
 800395e:	4a5c      	ldr	r2, [pc, #368]	; (8003ad0 <HAL_RCC_OscConfig+0x2f0>)
 8003960:	061b      	lsls	r3, r3, #24
 8003962:	0f1b      	lsrs	r3, r3, #28
 8003964:	5cd3      	ldrb	r3, [r2, r3]
 8003966:	40d8      	lsrs	r0, r3
 8003968:	4b5a      	ldr	r3, [pc, #360]	; (8003ad4 <HAL_RCC_OscConfig+0x2f4>)
 800396a:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 800396c:	4b5a      	ldr	r3, [pc, #360]	; (8003ad8 <HAL_RCC_OscConfig+0x2f8>)
 800396e:	6818      	ldr	r0, [r3, #0]
 8003970:	f7ff fac4 	bl	8002efc <HAL_InitTick>
      if(status != HAL_OK)
 8003974:	2800      	cmp	r0, #0
 8003976:	d100      	bne.n	800397a <HAL_RCC_OscConfig+0x19a>
 8003978:	e747      	b.n	800380a <HAL_RCC_OscConfig+0x2a>
 800397a:	e7a4      	b.n	80038c6 <HAL_RCC_OscConfig+0xe6>
      if(hsi_state != RCC_HSI_OFF)
 800397c:	2b00      	cmp	r3, #0
 800397e:	d019      	beq.n	80039b4 <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003980:	2109      	movs	r1, #9
 8003982:	6822      	ldr	r2, [r4, #0]
 8003984:	438a      	bics	r2, r1
 8003986:	4313      	orrs	r3, r2
 8003988:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800398a:	f7ff fafb 	bl	8002f84 <HAL_GetTick>
 800398e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003990:	2204      	movs	r2, #4
 8003992:	6823      	ldr	r3, [r4, #0]
 8003994:	4213      	tst	r3, r2
 8003996:	d007      	beq.n	80039a8 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003998:	6862      	ldr	r2, [r4, #4]
 800399a:	692b      	ldr	r3, [r5, #16]
 800399c:	4951      	ldr	r1, [pc, #324]	; (8003ae4 <HAL_RCC_OscConfig+0x304>)
 800399e:	021b      	lsls	r3, r3, #8
 80039a0:	400a      	ands	r2, r1
 80039a2:	4313      	orrs	r3, r2
 80039a4:	6063      	str	r3, [r4, #4]
 80039a6:	e730      	b.n	800380a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039a8:	f7ff faec 	bl	8002f84 <HAL_GetTick>
 80039ac:	1bc0      	subs	r0, r0, r7
 80039ae:	2802      	cmp	r0, #2
 80039b0:	d9ee      	bls.n	8003990 <HAL_RCC_OscConfig+0x1b0>
 80039b2:	e787      	b.n	80038c4 <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_HSI_DISABLE();
 80039b4:	2201      	movs	r2, #1
 80039b6:	6823      	ldr	r3, [r4, #0]
 80039b8:	4393      	bics	r3, r2
 80039ba:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80039bc:	f7ff fae2 	bl	8002f84 <HAL_GetTick>
 80039c0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80039c2:	2204      	movs	r2, #4
 80039c4:	6823      	ldr	r3, [r4, #0]
 80039c6:	4213      	tst	r3, r2
 80039c8:	d100      	bne.n	80039cc <HAL_RCC_OscConfig+0x1ec>
 80039ca:	e71e      	b.n	800380a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039cc:	f7ff fada 	bl	8002f84 <HAL_GetTick>
 80039d0:	1bc0      	subs	r0, r0, r7
 80039d2:	2802      	cmp	r0, #2
 80039d4:	d9f5      	bls.n	80039c2 <HAL_RCC_OscConfig+0x1e2>
 80039d6:	e775      	b.n	80038c4 <HAL_RCC_OscConfig+0xe4>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80039d8:	69ab      	ldr	r3, [r5, #24]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d020      	beq.n	8003a20 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_MSI_ENABLE();
 80039de:	2380      	movs	r3, #128	; 0x80
 80039e0:	6822      	ldr	r2, [r4, #0]
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	4313      	orrs	r3, r2
 80039e6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80039e8:	f7ff facc 	bl	8002f84 <HAL_GetTick>
 80039ec:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80039ee:	2280      	movs	r2, #128	; 0x80
 80039f0:	6823      	ldr	r3, [r4, #0]
 80039f2:	0092      	lsls	r2, r2, #2
 80039f4:	4213      	tst	r3, r2
 80039f6:	d00d      	beq.n	8003a14 <HAL_RCC_OscConfig+0x234>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039f8:	6863      	ldr	r3, [r4, #4]
 80039fa:	4a34      	ldr	r2, [pc, #208]	; (8003acc <HAL_RCC_OscConfig+0x2ec>)
 80039fc:	4013      	ands	r3, r2
 80039fe:	6a2a      	ldr	r2, [r5, #32]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a04:	6862      	ldr	r2, [r4, #4]
 8003a06:	69eb      	ldr	r3, [r5, #28]
 8003a08:	0212      	lsls	r2, r2, #8
 8003a0a:	061b      	lsls	r3, r3, #24
 8003a0c:	0a12      	lsrs	r2, r2, #8
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	6063      	str	r3, [r4, #4]
 8003a12:	e727      	b.n	8003864 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a14:	f7ff fab6 	bl	8002f84 <HAL_GetTick>
 8003a18:	1bc0      	subs	r0, r0, r7
 8003a1a:	2802      	cmp	r0, #2
 8003a1c:	d9e7      	bls.n	80039ee <HAL_RCC_OscConfig+0x20e>
 8003a1e:	e751      	b.n	80038c4 <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_MSI_DISABLE();
 8003a20:	6823      	ldr	r3, [r4, #0]
 8003a22:	4a31      	ldr	r2, [pc, #196]	; (8003ae8 <HAL_RCC_OscConfig+0x308>)
 8003a24:	4013      	ands	r3, r2
 8003a26:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003a28:	f7ff faac 	bl	8002f84 <HAL_GetTick>
 8003a2c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003a2e:	2280      	movs	r2, #128	; 0x80
 8003a30:	6823      	ldr	r3, [r4, #0]
 8003a32:	0092      	lsls	r2, r2, #2
 8003a34:	4213      	tst	r3, r2
 8003a36:	d100      	bne.n	8003a3a <HAL_RCC_OscConfig+0x25a>
 8003a38:	e714      	b.n	8003864 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a3a:	f7ff faa3 	bl	8002f84 <HAL_GetTick>
 8003a3e:	1bc0      	subs	r0, r0, r7
 8003a40:	2802      	cmp	r0, #2
 8003a42:	d9f4      	bls.n	8003a2e <HAL_RCC_OscConfig+0x24e>
 8003a44:	e73e      	b.n	80038c4 <HAL_RCC_OscConfig+0xe4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a46:	696a      	ldr	r2, [r5, #20]
 8003a48:	2301      	movs	r3, #1
 8003a4a:	2a00      	cmp	r2, #0
 8003a4c:	d010      	beq.n	8003a70 <HAL_RCC_OscConfig+0x290>
      __HAL_RCC_LSI_ENABLE();
 8003a4e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003a50:	4313      	orrs	r3, r2
 8003a52:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003a54:	f7ff fa96 	bl	8002f84 <HAL_GetTick>
 8003a58:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003a5e:	4213      	tst	r3, r2
 8003a60:	d000      	beq.n	8003a64 <HAL_RCC_OscConfig+0x284>
 8003a62:	e703      	b.n	800386c <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a64:	f7ff fa8e 	bl	8002f84 <HAL_GetTick>
 8003a68:	1bc0      	subs	r0, r0, r7
 8003a6a:	2802      	cmp	r0, #2
 8003a6c:	d9f5      	bls.n	8003a5a <HAL_RCC_OscConfig+0x27a>
 8003a6e:	e729      	b.n	80038c4 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_LSI_DISABLE();
 8003a70:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003a72:	439a      	bics	r2, r3
 8003a74:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003a76:	f7ff fa85 	bl	8002f84 <HAL_GetTick>
 8003a7a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003a80:	4213      	tst	r3, r2
 8003a82:	d100      	bne.n	8003a86 <HAL_RCC_OscConfig+0x2a6>
 8003a84:	e6f2      	b.n	800386c <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a86:	f7ff fa7d 	bl	8002f84 <HAL_GetTick>
 8003a8a:	1bc0      	subs	r0, r0, r7
 8003a8c:	2802      	cmp	r0, #2
 8003a8e:	d9f5      	bls.n	8003a7c <HAL_RCC_OscConfig+0x29c>
 8003a90:	e718      	b.n	80038c4 <HAL_RCC_OscConfig+0xe4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a92:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003a94:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a96:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003a98:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8003a9a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a9c:	421a      	tst	r2, r3
 8003a9e:	d104      	bne.n	8003aaa <HAL_RCC_OscConfig+0x2ca>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aa0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aaa:	2280      	movs	r2, #128	; 0x80
 8003aac:	4f0f      	ldr	r7, [pc, #60]	; (8003aec <HAL_RCC_OscConfig+0x30c>)
 8003aae:	0052      	lsls	r2, r2, #1
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	4213      	tst	r3, r2
 8003ab4:	d01c      	beq.n	8003af0 <HAL_RCC_OscConfig+0x310>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ab6:	2280      	movs	r2, #128	; 0x80
 8003ab8:	68ab      	ldr	r3, [r5, #8]
 8003aba:	0052      	lsls	r2, r2, #1
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d12b      	bne.n	8003b18 <HAL_RCC_OscConfig+0x338>
 8003ac0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	6523      	str	r3, [r4, #80]	; 0x50
 8003ac6:	e04c      	b.n	8003b62 <HAL_RCC_OscConfig+0x382>
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	ffff1fff 	.word	0xffff1fff
 8003ad0:	08006178 	.word	0x08006178
 8003ad4:	20000004 	.word	0x20000004
 8003ad8:	2000000c 	.word	0x2000000c
 8003adc:	fffeffff 	.word	0xfffeffff
 8003ae0:	fffbffff 	.word	0xfffbffff
 8003ae4:	ffffe0ff 	.word	0xffffe0ff
 8003ae8:	fffffeff 	.word	0xfffffeff
 8003aec:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003af0:	2280      	movs	r2, #128	; 0x80
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	0052      	lsls	r2, r2, #1
 8003af6:	4313      	orrs	r3, r2
 8003af8:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003afa:	f7ff fa43 	bl	8002f84 <HAL_GetTick>
 8003afe:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b00:	2280      	movs	r2, #128	; 0x80
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	0052      	lsls	r2, r2, #1
 8003b06:	4213      	tst	r3, r2
 8003b08:	d1d5      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b0a:	f7ff fa3b 	bl	8002f84 <HAL_GetTick>
 8003b0e:	9b01      	ldr	r3, [sp, #4]
 8003b10:	1ac0      	subs	r0, r0, r3
 8003b12:	2864      	cmp	r0, #100	; 0x64
 8003b14:	d9f4      	bls.n	8003b00 <HAL_RCC_OscConfig+0x320>
 8003b16:	e6d5      	b.n	80038c4 <HAL_RCC_OscConfig+0xe4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d116      	bne.n	8003b4a <HAL_RCC_OscConfig+0x36a>
 8003b1c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003b1e:	4a51      	ldr	r2, [pc, #324]	; (8003c64 <HAL_RCC_OscConfig+0x484>)
 8003b20:	4013      	ands	r3, r2
 8003b22:	6523      	str	r3, [r4, #80]	; 0x50
 8003b24:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003b26:	4a50      	ldr	r2, [pc, #320]	; (8003c68 <HAL_RCC_OscConfig+0x488>)
 8003b28:	4013      	ands	r3, r2
 8003b2a:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003b2c:	f7ff fa2a 	bl	8002f84 <HAL_GetTick>
 8003b30:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b32:	2280      	movs	r2, #128	; 0x80
 8003b34:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003b36:	0092      	lsls	r2, r2, #2
 8003b38:	4213      	tst	r3, r2
 8003b3a:	d01a      	beq.n	8003b72 <HAL_RCC_OscConfig+0x392>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b3c:	f7ff fa22 	bl	8002f84 <HAL_GetTick>
 8003b40:	4b4a      	ldr	r3, [pc, #296]	; (8003c6c <HAL_RCC_OscConfig+0x48c>)
 8003b42:	1bc0      	subs	r0, r0, r7
 8003b44:	4298      	cmp	r0, r3
 8003b46:	d9f4      	bls.n	8003b32 <HAL_RCC_OscConfig+0x352>
 8003b48:	e6bc      	b.n	80038c4 <HAL_RCC_OscConfig+0xe4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b4a:	21a0      	movs	r1, #160	; 0xa0
 8003b4c:	00c9      	lsls	r1, r1, #3
 8003b4e:	428b      	cmp	r3, r1
 8003b50:	d118      	bne.n	8003b84 <HAL_RCC_OscConfig+0x3a4>
 8003b52:	2380      	movs	r3, #128	; 0x80
 8003b54:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	430b      	orrs	r3, r1
 8003b5a:	6523      	str	r3, [r4, #80]	; 0x50
 8003b5c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003b62:	f7ff fa0f 	bl	8002f84 <HAL_GetTick>
 8003b66:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b68:	2280      	movs	r2, #128	; 0x80
 8003b6a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003b6c:	0092      	lsls	r2, r2, #2
 8003b6e:	4213      	tst	r3, r2
 8003b70:	d010      	beq.n	8003b94 <HAL_RCC_OscConfig+0x3b4>
    if(pwrclkchanged == SET)
 8003b72:	9b00      	ldr	r3, [sp, #0]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d000      	beq.n	8003b7a <HAL_RCC_OscConfig+0x39a>
 8003b78:	e67c      	b.n	8003874 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003b7c:	4a3c      	ldr	r2, [pc, #240]	; (8003c70 <HAL_RCC_OscConfig+0x490>)
 8003b7e:	4013      	ands	r3, r2
 8003b80:	63a3      	str	r3, [r4, #56]	; 0x38
 8003b82:	e677      	b.n	8003874 <HAL_RCC_OscConfig+0x94>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b84:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003b86:	4a37      	ldr	r2, [pc, #220]	; (8003c64 <HAL_RCC_OscConfig+0x484>)
 8003b88:	4013      	ands	r3, r2
 8003b8a:	6523      	str	r3, [r4, #80]	; 0x50
 8003b8c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003b8e:	4a36      	ldr	r2, [pc, #216]	; (8003c68 <HAL_RCC_OscConfig+0x488>)
 8003b90:	4013      	ands	r3, r2
 8003b92:	e797      	b.n	8003ac4 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b94:	f7ff f9f6 	bl	8002f84 <HAL_GetTick>
 8003b98:	4b34      	ldr	r3, [pc, #208]	; (8003c6c <HAL_RCC_OscConfig+0x48c>)
 8003b9a:	1bc0      	subs	r0, r0, r7
 8003b9c:	4298      	cmp	r0, r3
 8003b9e:	d9e3      	bls.n	8003b68 <HAL_RCC_OscConfig+0x388>
 8003ba0:	e690      	b.n	80038c4 <HAL_RCC_OscConfig+0xe4>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ba2:	2e0c      	cmp	r6, #12
 8003ba4:	d043      	beq.n	8003c2e <HAL_RCC_OscConfig+0x44e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ba6:	4a33      	ldr	r2, [pc, #204]	; (8003c74 <HAL_RCC_OscConfig+0x494>)
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d12e      	bne.n	8003c0a <HAL_RCC_OscConfig+0x42a>
        __HAL_RCC_PLL_DISABLE();
 8003bac:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003bae:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003bb4:	f7ff f9e6 	bl	8002f84 <HAL_GetTick>
 8003bb8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003bba:	04bf      	lsls	r7, r7, #18
 8003bbc:	6823      	ldr	r3, [r4, #0]
 8003bbe:	423b      	tst	r3, r7
 8003bc0:	d11d      	bne.n	8003bfe <HAL_RCC_OscConfig+0x41e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bc2:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8003bc4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003bc6:	68e2      	ldr	r2, [r4, #12]
 8003bc8:	430b      	orrs	r3, r1
 8003bca:	492b      	ldr	r1, [pc, #172]	; (8003c78 <HAL_RCC_OscConfig+0x498>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003bcc:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bce:	400a      	ands	r2, r1
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003bd4:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8003bda:	2380      	movs	r3, #128	; 0x80
 8003bdc:	6822      	ldr	r2, [r4, #0]
 8003bde:	045b      	lsls	r3, r3, #17
 8003be0:	4313      	orrs	r3, r2
 8003be2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003be4:	f7ff f9ce 	bl	8002f84 <HAL_GetTick>
 8003be8:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003bea:	6823      	ldr	r3, [r4, #0]
 8003bec:	4233      	tst	r3, r6
 8003bee:	d000      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x412>
 8003bf0:	e644      	b.n	800387c <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bf2:	f7ff f9c7 	bl	8002f84 <HAL_GetTick>
 8003bf6:	1b40      	subs	r0, r0, r5
 8003bf8:	2802      	cmp	r0, #2
 8003bfa:	d9f6      	bls.n	8003bea <HAL_RCC_OscConfig+0x40a>
 8003bfc:	e662      	b.n	80038c4 <HAL_RCC_OscConfig+0xe4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bfe:	f7ff f9c1 	bl	8002f84 <HAL_GetTick>
 8003c02:	1b80      	subs	r0, r0, r6
 8003c04:	2802      	cmp	r0, #2
 8003c06:	d9d9      	bls.n	8003bbc <HAL_RCC_OscConfig+0x3dc>
 8003c08:	e65c      	b.n	80038c4 <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_PLL_DISABLE();
 8003c0a:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003c0c:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003c0e:	4013      	ands	r3, r2
 8003c10:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003c12:	f7ff f9b7 	bl	8002f84 <HAL_GetTick>
 8003c16:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003c18:	04b6      	lsls	r6, r6, #18
 8003c1a:	6823      	ldr	r3, [r4, #0]
 8003c1c:	4233      	tst	r3, r6
 8003c1e:	d100      	bne.n	8003c22 <HAL_RCC_OscConfig+0x442>
 8003c20:	e62c      	b.n	800387c <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c22:	f7ff f9af 	bl	8002f84 <HAL_GetTick>
 8003c26:	1b40      	subs	r0, r0, r5
 8003c28:	2802      	cmp	r0, #2
 8003c2a:	d9f6      	bls.n	8003c1a <HAL_RCC_OscConfig+0x43a>
 8003c2c:	e64a      	b.n	80038c4 <HAL_RCC_OscConfig+0xe4>
        return HAL_ERROR;
 8003c2e:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d100      	bne.n	8003c36 <HAL_RCC_OscConfig+0x456>
 8003c34:	e647      	b.n	80038c6 <HAL_RCC_OscConfig+0xe6>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c36:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8003c38:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c3a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8003c3c:	0252      	lsls	r2, r2, #9
 8003c3e:	401a      	ands	r2, r3
 8003c40:	428a      	cmp	r2, r1
 8003c42:	d000      	beq.n	8003c46 <HAL_RCC_OscConfig+0x466>
 8003c44:	e628      	b.n	8003898 <HAL_RCC_OscConfig+0xb8>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003c46:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c48:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003c4a:	0392      	lsls	r2, r2, #14
 8003c4c:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c4e:	428a      	cmp	r2, r1
 8003c50:	d000      	beq.n	8003c54 <HAL_RCC_OscConfig+0x474>
 8003c52:	e621      	b.n	8003898 <HAL_RCC_OscConfig+0xb8>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003c54:	22c0      	movs	r2, #192	; 0xc0
 8003c56:	0412      	lsls	r2, r2, #16
 8003c58:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003c5a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d100      	bne.n	8003c62 <HAL_RCC_OscConfig+0x482>
 8003c60:	e60c      	b.n	800387c <HAL_RCC_OscConfig+0x9c>
 8003c62:	e619      	b.n	8003898 <HAL_RCC_OscConfig+0xb8>
 8003c64:	fffffeff 	.word	0xfffffeff
 8003c68:	fffffbff 	.word	0xfffffbff
 8003c6c:	00001388 	.word	0x00001388
 8003c70:	efffffff 	.word	0xefffffff
 8003c74:	feffffff 	.word	0xfeffffff
 8003c78:	ff02ffff 	.word	0xff02ffff

08003c7c <HAL_RCC_ClockConfig>:
{
 8003c7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c7e:	1e04      	subs	r4, r0, #0
 8003c80:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8003c82:	d101      	bne.n	8003c88 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8003c84:	2001      	movs	r0, #1
}
 8003c86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c88:	2501      	movs	r5, #1
 8003c8a:	4e5b      	ldr	r6, [pc, #364]	; (8003df8 <HAL_RCC_ClockConfig+0x17c>)
 8003c8c:	9a01      	ldr	r2, [sp, #4]
 8003c8e:	6833      	ldr	r3, [r6, #0]
 8003c90:	402b      	ands	r3, r5
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d331      	bcc.n	8003cfa <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c96:	6822      	ldr	r2, [r4, #0]
 8003c98:	0793      	lsls	r3, r2, #30
 8003c9a:	d443      	bmi.n	8003d24 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c9c:	07d3      	lsls	r3, r2, #31
 8003c9e:	d449      	bmi.n	8003d34 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ca0:	2501      	movs	r5, #1
 8003ca2:	6833      	ldr	r3, [r6, #0]
 8003ca4:	9a01      	ldr	r2, [sp, #4]
 8003ca6:	402b      	ands	r3, r5
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d909      	bls.n	8003cc0 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cac:	6833      	ldr	r3, [r6, #0]
 8003cae:	43ab      	bics	r3, r5
 8003cb0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003cb2:	f7ff f967 	bl	8002f84 <HAL_GetTick>
 8003cb6:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb8:	6833      	ldr	r3, [r6, #0]
 8003cba:	422b      	tst	r3, r5
 8003cbc:	d000      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x44>
 8003cbe:	e08c      	b.n	8003dda <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc0:	6822      	ldr	r2, [r4, #0]
 8003cc2:	4d4e      	ldr	r5, [pc, #312]	; (8003dfc <HAL_RCC_ClockConfig+0x180>)
 8003cc4:	0753      	lsls	r3, r2, #29
 8003cc6:	d500      	bpl.n	8003cca <HAL_RCC_ClockConfig+0x4e>
 8003cc8:	e08f      	b.n	8003dea <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cca:	0713      	lsls	r3, r2, #28
 8003ccc:	d506      	bpl.n	8003cdc <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cce:	68e9      	ldr	r1, [r5, #12]
 8003cd0:	6923      	ldr	r3, [r4, #16]
 8003cd2:	4a4b      	ldr	r2, [pc, #300]	; (8003e00 <HAL_RCC_ClockConfig+0x184>)
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	400a      	ands	r2, r1
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cdc:	f7ff fd38 	bl	8003750 <HAL_RCC_GetSysClockFreq>
 8003ce0:	68eb      	ldr	r3, [r5, #12]
 8003ce2:	4a48      	ldr	r2, [pc, #288]	; (8003e04 <HAL_RCC_ClockConfig+0x188>)
 8003ce4:	061b      	lsls	r3, r3, #24
 8003ce6:	0f1b      	lsrs	r3, r3, #28
 8003ce8:	5cd3      	ldrb	r3, [r2, r3]
 8003cea:	40d8      	lsrs	r0, r3
 8003cec:	4b46      	ldr	r3, [pc, #280]	; (8003e08 <HAL_RCC_ClockConfig+0x18c>)
 8003cee:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8003cf0:	4b46      	ldr	r3, [pc, #280]	; (8003e0c <HAL_RCC_ClockConfig+0x190>)
 8003cf2:	6818      	ldr	r0, [r3, #0]
 8003cf4:	f7ff f902 	bl	8002efc <HAL_InitTick>
  if(status != HAL_OK)
 8003cf8:	e7c5      	b.n	8003c86 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cfa:	6833      	ldr	r3, [r6, #0]
 8003cfc:	9a01      	ldr	r2, [sp, #4]
 8003cfe:	43ab      	bics	r3, r5
 8003d00:	4313      	orrs	r3, r2
 8003d02:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003d04:	f7ff f93e 	bl	8002f84 <HAL_GetTick>
 8003d08:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d0a:	6833      	ldr	r3, [r6, #0]
 8003d0c:	9a01      	ldr	r2, [sp, #4]
 8003d0e:	402b      	ands	r3, r5
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d0c0      	beq.n	8003c96 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d14:	f7ff f936 	bl	8002f84 <HAL_GetTick>
 8003d18:	4b3d      	ldr	r3, [pc, #244]	; (8003e10 <HAL_RCC_ClockConfig+0x194>)
 8003d1a:	1bc0      	subs	r0, r0, r7
 8003d1c:	4298      	cmp	r0, r3
 8003d1e:	d9f4      	bls.n	8003d0a <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8003d20:	2003      	movs	r0, #3
 8003d22:	e7b0      	b.n	8003c86 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d24:	20f0      	movs	r0, #240	; 0xf0
 8003d26:	4935      	ldr	r1, [pc, #212]	; (8003dfc <HAL_RCC_ClockConfig+0x180>)
 8003d28:	68cb      	ldr	r3, [r1, #12]
 8003d2a:	4383      	bics	r3, r0
 8003d2c:	68a0      	ldr	r0, [r4, #8]
 8003d2e:	4303      	orrs	r3, r0
 8003d30:	60cb      	str	r3, [r1, #12]
 8003d32:	e7b3      	b.n	8003c9c <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d34:	4d31      	ldr	r5, [pc, #196]	; (8003dfc <HAL_RCC_ClockConfig+0x180>)
 8003d36:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d38:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d3a:	2a02      	cmp	r2, #2
 8003d3c:	d118      	bne.n	8003d70 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d3e:	039b      	lsls	r3, r3, #14
 8003d40:	d5a0      	bpl.n	8003c84 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d42:	2103      	movs	r1, #3
 8003d44:	68eb      	ldr	r3, [r5, #12]
 8003d46:	438b      	bics	r3, r1
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8003d4c:	f7ff f91a 	bl	8002f84 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d50:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8003d52:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d118      	bne.n	8003d8a <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d58:	220c      	movs	r2, #12
 8003d5a:	68eb      	ldr	r3, [r5, #12]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	2b08      	cmp	r3, #8
 8003d60:	d09e      	beq.n	8003ca0 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d62:	f7ff f90f 	bl	8002f84 <HAL_GetTick>
 8003d66:	4b2a      	ldr	r3, [pc, #168]	; (8003e10 <HAL_RCC_ClockConfig+0x194>)
 8003d68:	1bc0      	subs	r0, r0, r7
 8003d6a:	4298      	cmp	r0, r3
 8003d6c:	d9f4      	bls.n	8003d58 <HAL_RCC_ClockConfig+0xdc>
 8003d6e:	e7d7      	b.n	8003d20 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d70:	2a03      	cmp	r2, #3
 8003d72:	d102      	bne.n	8003d7a <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d74:	019b      	lsls	r3, r3, #6
 8003d76:	d4e4      	bmi.n	8003d42 <HAL_RCC_ClockConfig+0xc6>
 8003d78:	e784      	b.n	8003c84 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003d7a:	2a01      	cmp	r2, #1
 8003d7c:	d102      	bne.n	8003d84 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d7e:	075b      	lsls	r3, r3, #29
 8003d80:	d4df      	bmi.n	8003d42 <HAL_RCC_ClockConfig+0xc6>
 8003d82:	e77f      	b.n	8003c84 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003d84:	059b      	lsls	r3, r3, #22
 8003d86:	d4dc      	bmi.n	8003d42 <HAL_RCC_ClockConfig+0xc6>
 8003d88:	e77c      	b.n	8003c84 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d8a:	2b03      	cmp	r3, #3
 8003d8c:	d10b      	bne.n	8003da6 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d8e:	220c      	movs	r2, #12
 8003d90:	68eb      	ldr	r3, [r5, #12]
 8003d92:	4013      	ands	r3, r2
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d083      	beq.n	8003ca0 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d98:	f7ff f8f4 	bl	8002f84 <HAL_GetTick>
 8003d9c:	4b1c      	ldr	r3, [pc, #112]	; (8003e10 <HAL_RCC_ClockConfig+0x194>)
 8003d9e:	1bc0      	subs	r0, r0, r7
 8003da0:	4298      	cmp	r0, r3
 8003da2:	d9f4      	bls.n	8003d8e <HAL_RCC_ClockConfig+0x112>
 8003da4:	e7bc      	b.n	8003d20 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d011      	beq.n	8003dce <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003daa:	220c      	movs	r2, #12
 8003dac:	68eb      	ldr	r3, [r5, #12]
 8003dae:	4213      	tst	r3, r2
 8003db0:	d100      	bne.n	8003db4 <HAL_RCC_ClockConfig+0x138>
 8003db2:	e775      	b.n	8003ca0 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003db4:	f7ff f8e6 	bl	8002f84 <HAL_GetTick>
 8003db8:	4b15      	ldr	r3, [pc, #84]	; (8003e10 <HAL_RCC_ClockConfig+0x194>)
 8003dba:	1bc0      	subs	r0, r0, r7
 8003dbc:	4298      	cmp	r0, r3
 8003dbe:	d9f4      	bls.n	8003daa <HAL_RCC_ClockConfig+0x12e>
 8003dc0:	e7ae      	b.n	8003d20 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc2:	f7ff f8df 	bl	8002f84 <HAL_GetTick>
 8003dc6:	4b12      	ldr	r3, [pc, #72]	; (8003e10 <HAL_RCC_ClockConfig+0x194>)
 8003dc8:	1bc0      	subs	r0, r0, r7
 8003dca:	4298      	cmp	r0, r3
 8003dcc:	d8a8      	bhi.n	8003d20 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dce:	220c      	movs	r2, #12
 8003dd0:	68eb      	ldr	r3, [r5, #12]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d1f4      	bne.n	8003dc2 <HAL_RCC_ClockConfig+0x146>
 8003dd8:	e762      	b.n	8003ca0 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dda:	f7ff f8d3 	bl	8002f84 <HAL_GetTick>
 8003dde:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <HAL_RCC_ClockConfig+0x194>)
 8003de0:	1bc0      	subs	r0, r0, r7
 8003de2:	4298      	cmp	r0, r3
 8003de4:	d800      	bhi.n	8003de8 <HAL_RCC_ClockConfig+0x16c>
 8003de6:	e767      	b.n	8003cb8 <HAL_RCC_ClockConfig+0x3c>
 8003de8:	e79a      	b.n	8003d20 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dea:	68eb      	ldr	r3, [r5, #12]
 8003dec:	4909      	ldr	r1, [pc, #36]	; (8003e14 <HAL_RCC_ClockConfig+0x198>)
 8003dee:	400b      	ands	r3, r1
 8003df0:	68e1      	ldr	r1, [r4, #12]
 8003df2:	430b      	orrs	r3, r1
 8003df4:	60eb      	str	r3, [r5, #12]
 8003df6:	e768      	b.n	8003cca <HAL_RCC_ClockConfig+0x4e>
 8003df8:	40022000 	.word	0x40022000
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	ffffc7ff 	.word	0xffffc7ff
 8003e04:	08006178 	.word	0x08006178
 8003e08:	20000004 	.word	0x20000004
 8003e0c:	2000000c 	.word	0x2000000c
 8003e10:	00001388 	.word	0x00001388
 8003e14:	fffff8ff 	.word	0xfffff8ff

08003e18 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e18:	4b04      	ldr	r3, [pc, #16]	; (8003e2c <HAL_RCC_GetPCLK1Freq+0x14>)
 8003e1a:	4a05      	ldr	r2, [pc, #20]	; (8003e30 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	055b      	lsls	r3, r3, #21
 8003e20:	0f5b      	lsrs	r3, r3, #29
 8003e22:	5cd3      	ldrb	r3, [r2, r3]
 8003e24:	4a03      	ldr	r2, [pc, #12]	; (8003e34 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003e26:	6810      	ldr	r0, [r2, #0]
 8003e28:	40d8      	lsrs	r0, r3
}
 8003e2a:	4770      	bx	lr
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	08006188 	.word	0x08006188
 8003e34:	20000004 	.word	0x20000004

08003e38 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e38:	4b04      	ldr	r3, [pc, #16]	; (8003e4c <HAL_RCC_GetPCLK2Freq+0x14>)
 8003e3a:	4a05      	ldr	r2, [pc, #20]	; (8003e50 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	049b      	lsls	r3, r3, #18
 8003e40:	0f5b      	lsrs	r3, r3, #29
 8003e42:	5cd3      	ldrb	r3, [r2, r3]
 8003e44:	4a03      	ldr	r2, [pc, #12]	; (8003e54 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003e46:	6810      	ldr	r0, [r2, #0]
 8003e48:	40d8      	lsrs	r0, r3
}
 8003e4a:	4770      	bx	lr
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	08006188 	.word	0x08006188
 8003e54:	20000004 	.word	0x20000004

08003e58 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e58:	6803      	ldr	r3, [r0, #0]
{
 8003e5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e5c:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e5e:	069b      	lsls	r3, r3, #26
 8003e60:	d52c      	bpl.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x64>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e62:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 8003e64:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e66:	4c53      	ldr	r4, [pc, #332]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003e68:	055b      	lsls	r3, r3, #21
 8003e6a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 8003e6c:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e6e:	421a      	tst	r2, r3
 8003e70:	d104      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e72:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003e74:	4313      	orrs	r3, r2
 8003e76:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e7c:	2780      	movs	r7, #128	; 0x80
 8003e7e:	4e4e      	ldr	r6, [pc, #312]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e80:	007f      	lsls	r7, r7, #1
 8003e82:	6833      	ldr	r3, [r6, #0]
 8003e84:	423b      	tst	r3, r7
 8003e86:	d040      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xb2>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003e88:	686b      	ldr	r3, [r5, #4]
 8003e8a:	21c0      	movs	r1, #192	; 0xc0
 8003e8c:	0018      	movs	r0, r3
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003e8e:	6822      	ldr	r2, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003e90:	0389      	lsls	r1, r1, #14
 8003e92:	4008      	ands	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003e94:	400a      	ands	r2, r1
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003e96:	4290      	cmp	r0, r2
 8003e98:	d148      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003e9a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003e9c:	22c0      	movs	r2, #192	; 0xc0
 8003e9e:	0008      	movs	r0, r1
 8003ea0:	0292      	lsls	r2, r2, #10
 8003ea2:	4010      	ands	r0, r2

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003ea4:	4211      	tst	r1, r2
 8003ea6:	d14c      	bne.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ea8:	682b      	ldr	r3, [r5, #0]
 8003eaa:	069b      	lsls	r3, r3, #26
 8003eac:	d45e      	bmi.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003eae:	9b00      	ldr	r3, [sp, #0]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d103      	bne.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003eb6:	4a41      	ldr	r2, [pc, #260]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003eb8:	4013      	ands	r3, r2
 8003eba:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ebc:	682a      	ldr	r2, [r5, #0]
 8003ebe:	0793      	lsls	r3, r2, #30
 8003ec0:	d506      	bpl.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ec2:	200c      	movs	r0, #12
 8003ec4:	493b      	ldr	r1, [pc, #236]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003ec6:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8003ec8:	4383      	bics	r3, r0
 8003eca:	68a8      	ldr	r0, [r5, #8]
 8003ecc:	4303      	orrs	r3, r0
 8003ece:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ed0:	0753      	lsls	r3, r2, #29
 8003ed2:	d506      	bpl.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ed4:	4937      	ldr	r1, [pc, #220]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003ed6:	483a      	ldr	r0, [pc, #232]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ed8:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8003eda:	4003      	ands	r3, r0
 8003edc:	68e8      	ldr	r0, [r5, #12]
 8003ede:	4303      	orrs	r3, r0
 8003ee0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ee2:	0713      	lsls	r3, r2, #28
 8003ee4:	d506      	bpl.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ee6:	4933      	ldr	r1, [pc, #204]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003ee8:	4836      	ldr	r0, [pc, #216]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8003eea:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8003eec:	4003      	ands	r3, r0
 8003eee:	6928      	ldr	r0, [r5, #16]
 8003ef0:	4303      	orrs	r3, r0
 8003ef2:	64cb      	str	r3, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8003ef4:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ef6:	0613      	lsls	r3, r2, #24
 8003ef8:	d517      	bpl.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003efa:	4a2e      	ldr	r2, [pc, #184]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003efc:	4932      	ldr	r1, [pc, #200]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8003efe:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003f00:	400b      	ands	r3, r1
 8003f02:	6969      	ldr	r1, [r5, #20]
 8003f04:	430b      	orrs	r3, r1
 8003f06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f08:	e00f      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f0a:	6833      	ldr	r3, [r6, #0]
 8003f0c:	433b      	orrs	r3, r7
 8003f0e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003f10:	f7ff f838 	bl	8002f84 <HAL_GetTick>
 8003f14:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f16:	6833      	ldr	r3, [r6, #0]
 8003f18:	423b      	tst	r3, r7
 8003f1a:	d1b5      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f1c:	f7ff f832 	bl	8002f84 <HAL_GetTick>
 8003f20:	9b01      	ldr	r3, [sp, #4]
 8003f22:	1ac0      	subs	r0, r0, r3
 8003f24:	2864      	cmp	r0, #100	; 0x64
 8003f26:	d9f6      	bls.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 8003f28:	2003      	movs	r0, #3
}
 8003f2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003f2c:	22c0      	movs	r2, #192	; 0xc0
 8003f2e:	0019      	movs	r1, r3
 8003f30:	0292      	lsls	r2, r2, #10
 8003f32:	4011      	ands	r1, r2
 8003f34:	4291      	cmp	r1, r2
 8003f36:	d1b0      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x42>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003f38:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 8003f3a:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003f3c:	0392      	lsls	r2, r2, #14
 8003f3e:	d5ac      	bpl.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003f40:	e7f3      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003f42:	4013      	ands	r3, r2
 8003f44:	4283      	cmp	r3, r0
 8003f46:	d0af      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x50>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f48:	682b      	ldr	r3, [r5, #0]
 8003f4a:	069b      	lsls	r3, r3, #26
 8003f4c:	d5af      	bpl.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f4e:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003f50:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f52:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003f54:	0312      	lsls	r2, r2, #12
 8003f56:	4302      	orrs	r2, r0
 8003f58:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f5a:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003f5c:	4b1b      	ldr	r3, [pc, #108]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x174>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f5e:	481c      	ldr	r0, [pc, #112]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x178>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003f60:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f62:	4002      	ands	r2, r0
 8003f64:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8003f66:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003f68:	05cb      	lsls	r3, r1, #23
 8003f6a:	d412      	bmi.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x13a>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f6c:	6869      	ldr	r1, [r5, #4]
 8003f6e:	23c0      	movs	r3, #192	; 0xc0
 8003f70:	000a      	movs	r2, r1
 8003f72:	029b      	lsls	r3, r3, #10
 8003f74:	401a      	ands	r2, r3
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d107      	bne.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x132>
 8003f7a:	6823      	ldr	r3, [r4, #0]
 8003f7c:	4815      	ldr	r0, [pc, #84]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8003f7e:	4003      	ands	r3, r0
 8003f80:	20c0      	movs	r0, #192	; 0xc0
 8003f82:	0380      	lsls	r0, r0, #14
 8003f84:	4001      	ands	r1, r0
 8003f86:	430b      	orrs	r3, r1
 8003f88:	6023      	str	r3, [r4, #0]
 8003f8a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	6522      	str	r2, [r4, #80]	; 0x50
 8003f90:	e78d      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x56>
        tickstart = HAL_GetTick();
 8003f92:	f7fe fff7 	bl	8002f84 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f96:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8003f98:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f9a:	00bf      	lsls	r7, r7, #2
 8003f9c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003f9e:	423b      	tst	r3, r7
 8003fa0:	d000      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003fa2:	e781      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x50>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fa4:	f7fe ffee 	bl	8002f84 <HAL_GetTick>
 8003fa8:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8003faa:	1b80      	subs	r0, r0, r6
 8003fac:	4298      	cmp	r0, r3
 8003fae:	d9f5      	bls.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x144>
 8003fb0:	e7ba      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8003fb2:	46c0      	nop			; (mov r8, r8)
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	40007000 	.word	0x40007000
 8003fbc:	efffffff 	.word	0xefffffff
 8003fc0:	fffff3ff 	.word	0xfffff3ff
 8003fc4:	ffffcfff 	.word	0xffffcfff
 8003fc8:	fff3ffff 	.word	0xfff3ffff
 8003fcc:	fffcffff 	.word	0xfffcffff
 8003fd0:	fff7ffff 	.word	0xfff7ffff
 8003fd4:	ffcfffff 	.word	0xffcfffff
 8003fd8:	00001388 	.word	0x00001388

08003fdc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fdc:	2280      	movs	r2, #128	; 0x80
{
 8003fde:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8003fe0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fe2:	05d2      	lsls	r2, r2, #23
 8003fe4:	4290      	cmp	r0, r2
 8003fe6:	d005      	beq.n	8003ff4 <TIM_Base_SetConfig+0x18>
 8003fe8:	4c10      	ldr	r4, [pc, #64]	; (800402c <TIM_Base_SetConfig+0x50>)
 8003fea:	42a0      	cmp	r0, r4
 8003fec:	d002      	beq.n	8003ff4 <TIM_Base_SetConfig+0x18>
 8003fee:	4c10      	ldr	r4, [pc, #64]	; (8004030 <TIM_Base_SetConfig+0x54>)
 8003ff0:	42a0      	cmp	r0, r4
 8003ff2:	d10f      	bne.n	8004014 <TIM_Base_SetConfig+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ff4:	2470      	movs	r4, #112	; 0x70
 8003ff6:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8003ff8:	684c      	ldr	r4, [r1, #4]
 8003ffa:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ffc:	4290      	cmp	r0, r2
 8003ffe:	d005      	beq.n	800400c <TIM_Base_SetConfig+0x30>
 8004000:	4a0a      	ldr	r2, [pc, #40]	; (800402c <TIM_Base_SetConfig+0x50>)
 8004002:	4290      	cmp	r0, r2
 8004004:	d002      	beq.n	800400c <TIM_Base_SetConfig+0x30>
 8004006:	4a0a      	ldr	r2, [pc, #40]	; (8004030 <TIM_Base_SetConfig+0x54>)
 8004008:	4290      	cmp	r0, r2
 800400a:	d103      	bne.n	8004014 <TIM_Base_SetConfig+0x38>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800400c:	4a09      	ldr	r2, [pc, #36]	; (8004034 <TIM_Base_SetConfig+0x58>)
 800400e:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004010:	68ca      	ldr	r2, [r1, #12]
 8004012:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004014:	2280      	movs	r2, #128	; 0x80
 8004016:	4393      	bics	r3, r2
 8004018:	690a      	ldr	r2, [r1, #16]
 800401a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800401c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800401e:	688b      	ldr	r3, [r1, #8]
 8004020:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004022:	680b      	ldr	r3, [r1, #0]
 8004024:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004026:	2301      	movs	r3, #1
 8004028:	6143      	str	r3, [r0, #20]
}
 800402a:	bd10      	pop	{r4, pc}
 800402c:	40010800 	.word	0x40010800
 8004030:	40011400 	.word	0x40011400
 8004034:	fffffcff 	.word	0xfffffcff

08004038 <HAL_TIM_Base_Init>:
{
 8004038:	b570      	push	{r4, r5, r6, lr}
 800403a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800403c:	2001      	movs	r0, #1
  if (htim == NULL)
 800403e:	2c00      	cmp	r4, #0
 8004040:	d01d      	beq.n	800407e <HAL_TIM_Base_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004042:	0025      	movs	r5, r4
 8004044:	3539      	adds	r5, #57	; 0x39
 8004046:	782b      	ldrb	r3, [r5, #0]
 8004048:	b2da      	uxtb	r2, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d105      	bne.n	800405a <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800404e:	0023      	movs	r3, r4
 8004050:	3338      	adds	r3, #56	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8004052:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8004054:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8004056:	f7fe fec1 	bl	8002ddc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800405a:	2302      	movs	r3, #2
 800405c:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800405e:	6820      	ldr	r0, [r4, #0]
 8004060:	1d21      	adds	r1, r4, #4
 8004062:	f7ff ffbb 	bl	8003fdc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004066:	0022      	movs	r2, r4
 8004068:	2301      	movs	r3, #1
  return HAL_OK;
 800406a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800406c:	323e      	adds	r2, #62	; 0x3e
 800406e:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004070:	343d      	adds	r4, #61	; 0x3d
 8004072:	3a04      	subs	r2, #4
 8004074:	7013      	strb	r3, [r2, #0]
 8004076:	7053      	strb	r3, [r2, #1]
 8004078:	7093      	strb	r3, [r2, #2]
 800407a:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 800407c:	702b      	strb	r3, [r5, #0]
}
 800407e:	bd70      	pop	{r4, r5, r6, pc}

08004080 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004080:	0002      	movs	r2, r0
{
 8004082:	0003      	movs	r3, r0
    return HAL_ERROR;
 8004084:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8004086:	3239      	adds	r2, #57	; 0x39
 8004088:	7811      	ldrb	r1, [r2, #0]
 800408a:	4281      	cmp	r1, r0
 800408c:	d119      	bne.n	80040c2 <HAL_TIM_Base_Start_IT+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 800408e:	2102      	movs	r1, #2
 8004090:	7011      	strb	r1, [r2, #0]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	4302      	orrs	r2, r0
 8004098:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800409a:	2280      	movs	r2, #128	; 0x80
 800409c:	05d2      	lsls	r2, r2, #23
 800409e:	4293      	cmp	r3, r2
 80040a0:	d005      	beq.n	80040ae <HAL_TIM_Base_Start_IT+0x2e>
 80040a2:	4a0b      	ldr	r2, [pc, #44]	; (80040d0 <HAL_TIM_Base_Start_IT+0x50>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d002      	beq.n	80040ae <HAL_TIM_Base_Start_IT+0x2e>
 80040a8:	4a0a      	ldr	r2, [pc, #40]	; (80040d4 <HAL_TIM_Base_Start_IT+0x54>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d10a      	bne.n	80040c4 <HAL_TIM_Base_Start_IT+0x44>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040ae:	2107      	movs	r1, #7
 80040b0:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 80040b2:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040b4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b6:	2a06      	cmp	r2, #6
 80040b8:	d003      	beq.n	80040c2 <HAL_TIM_Base_Start_IT+0x42>
      __HAL_TIM_ENABLE(htim);
 80040ba:	2201      	movs	r2, #1
 80040bc:	6819      	ldr	r1, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	601a      	str	r2, [r3, #0]
}
 80040c2:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	4310      	orrs	r0, r2
 80040c8:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 80040ca:	2000      	movs	r0, #0
 80040cc:	e7f9      	b.n	80040c2 <HAL_TIM_Base_Start_IT+0x42>
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	40010800 	.word	0x40010800
 80040d4:	40011400 	.word	0x40011400

080040d8 <HAL_TIM_ConfigClockSource>:
{
 80040d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80040da:	0005      	movs	r5, r0
 80040dc:	2202      	movs	r2, #2
 80040de:	3538      	adds	r5, #56	; 0x38
 80040e0:	782c      	ldrb	r4, [r5, #0]
{
 80040e2:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80040e4:	0010      	movs	r0, r2
 80040e6:	2c01      	cmp	r4, #1
 80040e8:	d01d      	beq.n	8004126 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 80040ea:	001e      	movs	r6, r3
  __HAL_LOCK(htim);
 80040ec:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80040ee:	3639      	adds	r6, #57	; 0x39
  __HAL_LOCK(htim);
 80040f0:	702c      	strb	r4, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80040f2:	7032      	strb	r2, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 80040f4:	681b      	ldr	r3, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040f6:	484c      	ldr	r0, [pc, #304]	; (8004228 <HAL_TIM_ConfigClockSource+0x150>)
  tmpsmcr = htim->Instance->SMCR;
 80040f8:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040fa:	4002      	ands	r2, r0
  htim->Instance->SMCR = tmpsmcr;
 80040fc:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80040fe:	680a      	ldr	r2, [r1, #0]
 8004100:	2a60      	cmp	r2, #96	; 0x60
 8004102:	d05f      	beq.n	80041c4 <HAL_TIM_ConfigClockSource+0xec>
 8004104:	d832      	bhi.n	800416c <HAL_TIM_ConfigClockSource+0x94>
 8004106:	2a40      	cmp	r2, #64	; 0x40
 8004108:	d100      	bne.n	800410c <HAL_TIM_ConfigClockSource+0x34>
 800410a:	e074      	b.n	80041f6 <HAL_TIM_ConfigClockSource+0x11e>
 800410c:	d814      	bhi.n	8004138 <HAL_TIM_ConfigClockSource+0x60>
 800410e:	2a20      	cmp	r2, #32
 8004110:	d00c      	beq.n	800412c <HAL_TIM_ConfigClockSource+0x54>
 8004112:	d809      	bhi.n	8004128 <HAL_TIM_ConfigClockSource+0x50>
 8004114:	2110      	movs	r1, #16
 8004116:	0010      	movs	r0, r2
 8004118:	4388      	bics	r0, r1
 800411a:	d007      	beq.n	800412c <HAL_TIM_ConfigClockSource+0x54>
 800411c:	0020      	movs	r0, r4
  htim->State = HAL_TIM_STATE_READY;
 800411e:	2301      	movs	r3, #1
 8004120:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8004122:	2300      	movs	r3, #0
 8004124:	702b      	strb	r3, [r5, #0]
}
 8004126:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8004128:	2a30      	cmp	r2, #48	; 0x30
 800412a:	d1f7      	bne.n	800411c <HAL_TIM_ConfigClockSource+0x44>
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800412c:	2070      	movs	r0, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 800412e:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004130:	4381      	bics	r1, r0
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004132:	430a      	orrs	r2, r1
 8004134:	2107      	movs	r1, #7
 8004136:	e032      	b.n	800419e <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8004138:	2a50      	cmp	r2, #80	; 0x50
 800413a:	d1ef      	bne.n	800411c <HAL_TIM_ConfigClockSource+0x44>
  tmpccer = TIMx->CCER;
 800413c:	6a1f      	ldr	r7, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800413e:	6a1a      	ldr	r2, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004140:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004142:	43a2      	bics	r2, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004144:	24f0      	movs	r4, #240	; 0xf0
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004146:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800414a:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800414c:	43a2      	bics	r2, r4
 800414e:	0014      	movs	r4, r2
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004150:	010a      	lsls	r2, r1, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004152:	210a      	movs	r1, #10
 8004154:	438f      	bics	r7, r1
 8004156:	0039      	movs	r1, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004158:	4322      	orrs	r2, r4
  tmpccer |= TIM_ICPolarity;
 800415a:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800415c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800415e:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004160:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8004162:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004164:	438a      	bics	r2, r1
 8004166:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004168:	2257      	movs	r2, #87	; 0x57
 800416a:	e018      	b.n	800419e <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 800416c:	2780      	movs	r7, #128	; 0x80
  HAL_StatusTypeDef status = HAL_OK;
 800416e:	2000      	movs	r0, #0
  switch (sClockSourceConfig->ClockSource)
 8004170:	017f      	lsls	r7, r7, #5
 8004172:	42ba      	cmp	r2, r7
 8004174:	d0d3      	beq.n	800411e <HAL_TIM_ConfigClockSource+0x46>
 8004176:	2080      	movs	r0, #128	; 0x80
 8004178:	0180      	lsls	r0, r0, #6
 800417a:	4282      	cmp	r2, r0
 800417c:	d013      	beq.n	80041a6 <HAL_TIM_ConfigClockSource+0xce>
 800417e:	0020      	movs	r0, r4
 8004180:	2a70      	cmp	r2, #112	; 0x70
 8004182:	d1cc      	bne.n	800411e <HAL_TIM_ConfigClockSource+0x46>
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004184:	689a      	ldr	r2, [r3, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004186:	4829      	ldr	r0, [pc, #164]	; (800422c <HAL_TIM_ConfigClockSource+0x154>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004188:	684c      	ldr	r4, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800418a:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800418c:	688a      	ldr	r2, [r1, #8]
 800418e:	68c9      	ldr	r1, [r1, #12]
 8004190:	4322      	orrs	r2, r4
 8004192:	0209      	lsls	r1, r1, #8
 8004194:	430a      	orrs	r2, r1
 8004196:	4302      	orrs	r2, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004198:	609a      	str	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800419a:	2277      	movs	r2, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 800419c:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800419e:	430a      	orrs	r2, r1
  HAL_StatusTypeDef status = HAL_OK;
 80041a0:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 80041a2:	609a      	str	r2, [r3, #8]
}
 80041a4:	e7bb      	b.n	800411e <HAL_TIM_ConfigClockSource+0x46>
  tmpsmcr = TIMx->SMCR;
 80041a6:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041a8:	4820      	ldr	r0, [pc, #128]	; (800422c <HAL_TIM_ConfigClockSource+0x154>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041aa:	684c      	ldr	r4, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041ac:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041ae:	688a      	ldr	r2, [r1, #8]
 80041b0:	68c9      	ldr	r1, [r1, #12]
 80041b2:	4322      	orrs	r2, r4
 80041b4:	0209      	lsls	r1, r1, #8
 80041b6:	430a      	orrs	r2, r1
 80041b8:	4302      	orrs	r2, r0
  TIMx->SMCR = tmpsmcr;
 80041ba:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041bc:	2280      	movs	r2, #128	; 0x80
 80041be:	6899      	ldr	r1, [r3, #8]
 80041c0:	01d2      	lsls	r2, r2, #7
 80041c2:	e7ec      	b.n	800419e <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041c4:	6848      	ldr	r0, [r1, #4]
 80041c6:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041c8:	2110      	movs	r1, #16
 80041ca:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041cc:	4c18      	ldr	r4, [pc, #96]	; (8004230 <HAL_TIM_ConfigClockSource+0x158>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041ce:	438a      	bics	r2, r1
 80041d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041d2:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80041d4:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041d6:	4021      	ands	r1, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041d8:	24a0      	movs	r4, #160	; 0xa0
 80041da:	43a2      	bics	r2, r4
 80041dc:	0014      	movs	r4, r2
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041de:	033f      	lsls	r7, r7, #12
 80041e0:	4339      	orrs	r1, r7
  TIMx->CCMR1 = tmpccmr1 ;
 80041e2:	6199      	str	r1, [r3, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 80041e4:	2170      	movs	r1, #112	; 0x70
  tmpccer |= (TIM_ICPolarity << 4U);
 80041e6:	0102      	lsls	r2, r0, #4
 80041e8:	4322      	orrs	r2, r4
  TIMx->CCER = tmpccer;
 80041ea:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80041ec:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80041ee:	438a      	bics	r2, r1
 80041f0:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041f2:	2267      	movs	r2, #103	; 0x67
 80041f4:	e7d3      	b.n	800419e <HAL_TIM_ConfigClockSource+0xc6>
  tmpccer = TIMx->CCER;
 80041f6:	6a1f      	ldr	r7, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041f8:	6a1a      	ldr	r2, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041fa:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041fc:	43a2      	bics	r2, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041fe:	24f0      	movs	r4, #240	; 0xf0
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004200:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004202:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004204:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004206:	43a2      	bics	r2, r4
 8004208:	0014      	movs	r4, r2
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800420a:	010a      	lsls	r2, r1, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800420c:	210a      	movs	r1, #10
 800420e:	438f      	bics	r7, r1
 8004210:	0039      	movs	r1, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004212:	4322      	orrs	r2, r4
  tmpccer |= TIM_ICPolarity;
 8004214:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8004216:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004218:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 800421a:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 800421c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800421e:	438a      	bics	r2, r1
 8004220:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004222:	2247      	movs	r2, #71	; 0x47
 8004224:	e7bb      	b.n	800419e <HAL_TIM_ConfigClockSource+0xc6>
 8004226:	46c0      	nop			; (mov r8, r8)
 8004228:	ffff0088 	.word	0xffff0088
 800422c:	ffff00ff 	.word	0xffff00ff
 8004230:	ffff0fff 	.word	0xffff0fff

08004234 <HAL_TIM_OC_DelayElapsedCallback>:
 8004234:	4770      	bx	lr

08004236 <HAL_TIM_IC_CaptureCallback>:
 8004236:	4770      	bx	lr

08004238 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004238:	4770      	bx	lr

0800423a <HAL_TIM_TriggerCallback>:
 800423a:	4770      	bx	lr

0800423c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800423c:	2202      	movs	r2, #2
 800423e:	6803      	ldr	r3, [r0, #0]
{
 8004240:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004242:	6919      	ldr	r1, [r3, #16]
{
 8004244:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004246:	4211      	tst	r1, r2
 8004248:	d00d      	beq.n	8004266 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800424a:	68d9      	ldr	r1, [r3, #12]
 800424c:	4211      	tst	r1, r2
 800424e:	d00a      	beq.n	8004266 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004250:	3a05      	subs	r2, #5
 8004252:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004254:	3204      	adds	r2, #4
 8004256:	7602      	strb	r2, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	079b      	lsls	r3, r3, #30
 800425c:	d05e      	beq.n	800431c <HAL_TIM_IRQHandler+0xe0>
          HAL_TIM_IC_CaptureCallback(htim);
 800425e:	f7ff ffea 	bl	8004236 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004262:	2300      	movs	r3, #0
 8004264:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004266:	2204      	movs	r2, #4
 8004268:	6823      	ldr	r3, [r4, #0]
 800426a:	6919      	ldr	r1, [r3, #16]
 800426c:	4211      	tst	r1, r2
 800426e:	d010      	beq.n	8004292 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004270:	68d9      	ldr	r1, [r3, #12]
 8004272:	4211      	tst	r1, r2
 8004274:	d00d      	beq.n	8004292 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004276:	3a09      	subs	r2, #9
 8004278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800427a:	3207      	adds	r2, #7
 800427c:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800427e:	699a      	ldr	r2, [r3, #24]
 8004280:	23c0      	movs	r3, #192	; 0xc0
 8004282:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8004284:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004286:	421a      	tst	r2, r3
 8004288:	d04e      	beq.n	8004328 <HAL_TIM_IRQHandler+0xec>
        HAL_TIM_IC_CaptureCallback(htim);
 800428a:	f7ff ffd4 	bl	8004236 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800428e:	2300      	movs	r3, #0
 8004290:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004292:	2208      	movs	r2, #8
 8004294:	6823      	ldr	r3, [r4, #0]
 8004296:	6919      	ldr	r1, [r3, #16]
 8004298:	4211      	tst	r1, r2
 800429a:	d00e      	beq.n	80042ba <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800429c:	68d9      	ldr	r1, [r3, #12]
 800429e:	4211      	tst	r1, r2
 80042a0:	d00b      	beq.n	80042ba <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042a2:	3a11      	subs	r2, #17
 80042a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042a6:	320d      	adds	r2, #13
 80042a8:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042aa:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80042ac:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042ae:	079b      	lsls	r3, r3, #30
 80042b0:	d040      	beq.n	8004334 <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 80042b2:	f7ff ffc0 	bl	8004236 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042b6:	2300      	movs	r3, #0
 80042b8:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042ba:	2210      	movs	r2, #16
 80042bc:	6823      	ldr	r3, [r4, #0]
 80042be:	6919      	ldr	r1, [r3, #16]
 80042c0:	4211      	tst	r1, r2
 80042c2:	d010      	beq.n	80042e6 <HAL_TIM_IRQHandler+0xaa>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042c4:	68d9      	ldr	r1, [r3, #12]
 80042c6:	4211      	tst	r1, r2
 80042c8:	d00d      	beq.n	80042e6 <HAL_TIM_IRQHandler+0xaa>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042ca:	3a21      	subs	r2, #33	; 0x21
 80042cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042ce:	3219      	adds	r2, #25
 80042d0:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042d2:	69da      	ldr	r2, [r3, #28]
 80042d4:	23c0      	movs	r3, #192	; 0xc0
 80042d6:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80042d8:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042da:	421a      	tst	r2, r3
 80042dc:	d030      	beq.n	8004340 <HAL_TIM_IRQHandler+0x104>
        HAL_TIM_IC_CaptureCallback(htim);
 80042de:	f7ff ffaa 	bl	8004236 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042e2:	2300      	movs	r3, #0
 80042e4:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042e6:	2201      	movs	r2, #1
 80042e8:	6823      	ldr	r3, [r4, #0]
 80042ea:	6919      	ldr	r1, [r3, #16]
 80042ec:	4211      	tst	r1, r2
 80042ee:	d007      	beq.n	8004300 <HAL_TIM_IRQHandler+0xc4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042f0:	68d9      	ldr	r1, [r3, #12]
 80042f2:	4211      	tst	r1, r2
 80042f4:	d004      	beq.n	8004300 <HAL_TIM_IRQHandler+0xc4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042f6:	3a03      	subs	r2, #3
      HAL_TIM_PeriodElapsedCallback(htim);
 80042f8:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042fa:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80042fc:	f7fe fc6c 	bl	8002bd8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004300:	2240      	movs	r2, #64	; 0x40
 8004302:	6823      	ldr	r3, [r4, #0]
 8004304:	6919      	ldr	r1, [r3, #16]
 8004306:	4211      	tst	r1, r2
 8004308:	d007      	beq.n	800431a <HAL_TIM_IRQHandler+0xde>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800430a:	68d9      	ldr	r1, [r3, #12]
 800430c:	4211      	tst	r1, r2
 800430e:	d004      	beq.n	800431a <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004310:	3a81      	subs	r2, #129	; 0x81
      HAL_TIM_TriggerCallback(htim);
 8004312:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004314:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004316:	f7ff ff90 	bl	800423a <HAL_TIM_TriggerCallback>
}
 800431a:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800431c:	f7ff ff8a 	bl	8004234 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004320:	0020      	movs	r0, r4
 8004322:	f7ff ff89 	bl	8004238 <HAL_TIM_PWM_PulseFinishedCallback>
 8004326:	e79c      	b.n	8004262 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004328:	f7ff ff84 	bl	8004234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800432c:	0020      	movs	r0, r4
 800432e:	f7ff ff83 	bl	8004238 <HAL_TIM_PWM_PulseFinishedCallback>
 8004332:	e7ac      	b.n	800428e <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004334:	f7ff ff7e 	bl	8004234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004338:	0020      	movs	r0, r4
 800433a:	f7ff ff7d 	bl	8004238 <HAL_TIM_PWM_PulseFinishedCallback>
 800433e:	e7ba      	b.n	80042b6 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004340:	f7ff ff78 	bl	8004234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004344:	0020      	movs	r0, r4
 8004346:	f7ff ff77 	bl	8004238 <HAL_TIM_PWM_PulseFinishedCallback>
 800434a:	e7ca      	b.n	80042e2 <HAL_TIM_IRQHandler+0xa6>

0800434c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800434c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800434e:	0004      	movs	r4, r0
 8004350:	2202      	movs	r2, #2
 8004352:	3438      	adds	r4, #56	; 0x38
 8004354:	7825      	ldrb	r5, [r4, #0]
{
 8004356:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8004358:	0010      	movs	r0, r2
 800435a:	2d01      	cmp	r5, #1
 800435c:	d01d      	beq.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800435e:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004360:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8004362:	3539      	adds	r5, #57	; 0x39
 8004364:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800436a:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800436c:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800436e:	680e      	ldr	r6, [r1, #0]
 8004370:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004372:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004374:	2080      	movs	r0, #128	; 0x80
 8004376:	05c0      	lsls	r0, r0, #23
 8004378:	4283      	cmp	r3, r0
 800437a:	d005      	beq.n	8004388 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800437c:	4807      	ldr	r0, [pc, #28]	; (800439c <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 800437e:	4283      	cmp	r3, r0
 8004380:	d002      	beq.n	8004388 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004382:	4807      	ldr	r0, [pc, #28]	; (80043a0 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8004384:	4283      	cmp	r3, r0
 8004386:	d104      	bne.n	8004392 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004388:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800438a:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800438c:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800438e:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004390:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004392:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8004394:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004396:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8004398:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 800439a:	bd70      	pop	{r4, r5, r6, pc}
 800439c:	40010800 	.word	0x40010800
 80043a0:	40011400 	.word	0x40011400

080043a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043a4:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043a6:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043aa:	2201      	movs	r2, #1
 80043ac:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043b0:	6801      	ldr	r1, [r0, #0]
 80043b2:	4d12      	ldr	r5, [pc, #72]	; (80043fc <UART_EndRxTransfer+0x58>)
 80043b4:	680b      	ldr	r3, [r1, #0]
 80043b6:	402b      	ands	r3, r5
 80043b8:	600b      	str	r3, [r1, #0]
 80043ba:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043be:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043c2:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c6:	6801      	ldr	r1, [r0, #0]
 80043c8:	688b      	ldr	r3, [r1, #8]
 80043ca:	4393      	bics	r3, r2
 80043cc:	608b      	str	r3, [r1, #8]
 80043ce:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043d2:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d10a      	bne.n	80043ee <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043d8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043dc:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043e0:	2410      	movs	r4, #16
 80043e2:	6802      	ldr	r2, [r0, #0]
 80043e4:	6813      	ldr	r3, [r2, #0]
 80043e6:	43a3      	bics	r3, r4
 80043e8:	6013      	str	r3, [r2, #0]
 80043ea:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043ee:	2220      	movs	r2, #32
 80043f0:	1d03      	adds	r3, r0, #4
 80043f2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043f4:	2300      	movs	r3, #0
 80043f6:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043f8:	6683      	str	r3, [r0, #104]	; 0x68
}
 80043fa:	bd30      	pop	{r4, r5, pc}
 80043fc:	fffffedf 	.word	0xfffffedf

08004400 <UART_SetConfig>:
{
 8004400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004402:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004404:	6925      	ldr	r5, [r4, #16]
 8004406:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8004408:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800440a:	4329      	orrs	r1, r5
 800440c:	6965      	ldr	r5, [r4, #20]
 800440e:	69c3      	ldr	r3, [r0, #28]
 8004410:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004412:	6810      	ldr	r0, [r2, #0]
 8004414:	4d6a      	ldr	r5, [pc, #424]	; (80045c0 <UART_SetConfig+0x1c0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004416:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004418:	4028      	ands	r0, r5
 800441a:	4301      	orrs	r1, r0
 800441c:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800441e:	6851      	ldr	r1, [r2, #4]
 8004420:	4868      	ldr	r0, [pc, #416]	; (80045c4 <UART_SetConfig+0x1c4>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004422:	4d69      	ldr	r5, [pc, #420]	; (80045c8 <UART_SetConfig+0x1c8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004424:	4001      	ands	r1, r0
 8004426:	68e0      	ldr	r0, [r4, #12]
 8004428:	4301      	orrs	r1, r0
 800442a:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800442c:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800442e:	42aa      	cmp	r2, r5
 8004430:	d001      	beq.n	8004436 <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8004432:	6a21      	ldr	r1, [r4, #32]
 8004434:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004436:	6891      	ldr	r1, [r2, #8]
 8004438:	4e64      	ldr	r6, [pc, #400]	; (80045cc <UART_SetConfig+0x1cc>)
 800443a:	4031      	ands	r1, r6
 800443c:	4301      	orrs	r1, r0
 800443e:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004440:	4963      	ldr	r1, [pc, #396]	; (80045d0 <UART_SetConfig+0x1d0>)
 8004442:	428a      	cmp	r2, r1
 8004444:	d113      	bne.n	800446e <UART_SetConfig+0x6e>
 8004446:	200c      	movs	r0, #12
 8004448:	4a62      	ldr	r2, [pc, #392]	; (80045d4 <UART_SetConfig+0x1d4>)
 800444a:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800444c:	4001      	ands	r1, r0
 800444e:	4862      	ldr	r0, [pc, #392]	; (80045d8 <UART_SetConfig+0x1d8>)
 8004450:	5c40      	ldrb	r0, [r0, r1]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004452:	2180      	movs	r1, #128	; 0x80
 8004454:	0209      	lsls	r1, r1, #8
 8004456:	428b      	cmp	r3, r1
 8004458:	d000      	beq.n	800445c <UART_SetConfig+0x5c>
 800445a:	e07f      	b.n	800455c <UART_SetConfig+0x15c>
    switch (clocksource)
 800445c:	2808      	cmp	r0, #8
 800445e:	d819      	bhi.n	8004494 <UART_SetConfig+0x94>
 8004460:	f7fb fe64 	bl	800012c <__gnu_thumb1_case_uqi>
 8004464:	18595651 	.word	0x18595651
 8004468:	18181879 	.word	0x18181879
 800446c:	63          	.byte	0x63
 800446d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800446e:	42aa      	cmp	r2, r5
 8004470:	d000      	beq.n	8004474 <UART_SetConfig+0x74>
 8004472:	e09e      	b.n	80045b2 <UART_SetConfig+0x1b2>
 8004474:	21c0      	movs	r1, #192	; 0xc0
 8004476:	2080      	movs	r0, #128	; 0x80
 8004478:	4a56      	ldr	r2, [pc, #344]	; (80045d4 <UART_SetConfig+0x1d4>)
 800447a:	0109      	lsls	r1, r1, #4
 800447c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800447e:	0100      	lsls	r0, r0, #4
 8004480:	400b      	ands	r3, r1
 8004482:	4283      	cmp	r3, r0
 8004484:	d016      	beq.n	80044b4 <UART_SetConfig+0xb4>
 8004486:	d807      	bhi.n	8004498 <UART_SetConfig+0x98>
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00a      	beq.n	80044a2 <UART_SetConfig+0xa2>
 800448c:	2280      	movs	r2, #128	; 0x80
 800448e:	00d2      	lsls	r2, r2, #3
 8004490:	4293      	cmp	r3, r2
 8004492:	d035      	beq.n	8004500 <UART_SetConfig+0x100>
    switch (clocksource)
 8004494:	2001      	movs	r0, #1
 8004496:	e009      	b.n	80044ac <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004498:	428b      	cmp	r3, r1
 800449a:	d1fb      	bne.n	8004494 <UART_SetConfig+0x94>
 800449c:	2080      	movs	r0, #128	; 0x80
 800449e:	0200      	lsls	r0, r0, #8
 80044a0:	e012      	b.n	80044c8 <UART_SetConfig+0xc8>
        pclk = HAL_RCC_GetPCLK1Freq();
 80044a2:	f7ff fcb9 	bl	8003e18 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80044a6:	2800      	cmp	r0, #0
 80044a8:	d10e      	bne.n	80044c8 <UART_SetConfig+0xc8>
 80044aa:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80044ac:	2300      	movs	r3, #0
 80044ae:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 80044b0:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 80044b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044b4:	2310      	movs	r3, #16
 80044b6:	6810      	ldr	r0, [r2, #0]
 80044b8:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80044ba:	4243      	negs	r3, r0
 80044bc:	4158      	adcs	r0, r3
 80044be:	4b47      	ldr	r3, [pc, #284]	; (80045dc <UART_SetConfig+0x1dc>)
 80044c0:	4240      	negs	r0, r0
 80044c2:	4018      	ands	r0, r3
 80044c4:	4b46      	ldr	r3, [pc, #280]	; (80045e0 <UART_SetConfig+0x1e0>)
 80044c6:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044c8:	2203      	movs	r2, #3
 80044ca:	6863      	ldr	r3, [r4, #4]
 80044cc:	435a      	muls	r2, r3
 80044ce:	4282      	cmp	r2, r0
 80044d0:	d8e0      	bhi.n	8004494 <UART_SetConfig+0x94>
          (pclk > (4096U * huart->Init.BaudRate)))
 80044d2:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044d4:	4282      	cmp	r2, r0
 80044d6:	d3dd      	bcc.n	8004494 <UART_SetConfig+0x94>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80044d8:	2700      	movs	r7, #0
 80044da:	0e02      	lsrs	r2, r0, #24
 80044dc:	0201      	lsls	r1, r0, #8
 80044de:	085e      	lsrs	r6, r3, #1
 80044e0:	1989      	adds	r1, r1, r6
 80044e2:	417a      	adcs	r2, r7
 80044e4:	0008      	movs	r0, r1
 80044e6:	0011      	movs	r1, r2
 80044e8:	001a      	movs	r2, r3
 80044ea:	003b      	movs	r3, r7
 80044ec:	f7fb febe 	bl	800026c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044f0:	4b3c      	ldr	r3, [pc, #240]	; (80045e4 <UART_SetConfig+0x1e4>)
 80044f2:	18c2      	adds	r2, r0, r3
 80044f4:	4b3c      	ldr	r3, [pc, #240]	; (80045e8 <UART_SetConfig+0x1e8>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d8cc      	bhi.n	8004494 <UART_SetConfig+0x94>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044fa:	6823      	ldr	r3, [r4, #0]
 80044fc:	60d8      	str	r0, [r3, #12]
 80044fe:	e7d4      	b.n	80044aa <UART_SetConfig+0xaa>
        pclk = HAL_RCC_GetSysClockFreq();
 8004500:	f7ff f926 	bl	8003750 <HAL_RCC_GetSysClockFreq>
        break;
 8004504:	e7cf      	b.n	80044a6 <UART_SetConfig+0xa6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004506:	f7ff fc87 	bl	8003e18 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 800450a:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 800450c:	d0cd      	beq.n	80044aa <UART_SetConfig+0xaa>
 800450e:	e00c      	b.n	800452a <UART_SetConfig+0x12a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004510:	f7ff fc92 	bl	8003e38 <HAL_RCC_GetPCLK2Freq>
 8004514:	e7f9      	b.n	800450a <UART_SetConfig+0x10a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004516:	2310      	movs	r3, #16
 8004518:	6810      	ldr	r0, [r2, #0]
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800451a:	4a31      	ldr	r2, [pc, #196]	; (80045e0 <UART_SetConfig+0x1e0>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800451c:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800451e:	4243      	negs	r3, r0
 8004520:	4158      	adcs	r0, r3
 8004522:	4b2e      	ldr	r3, [pc, #184]	; (80045dc <UART_SetConfig+0x1dc>)
 8004524:	4240      	negs	r0, r0
 8004526:	4003      	ands	r3, r0
 8004528:	189b      	adds	r3, r3, r2
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800452a:	0058      	lsls	r0, r3, #1
 800452c:	6863      	ldr	r3, [r4, #4]
 800452e:	6861      	ldr	r1, [r4, #4]
 8004530:	085b      	lsrs	r3, r3, #1
 8004532:	18c0      	adds	r0, r0, r3
 8004534:	f7fb fe0e 	bl	8000154 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004538:	0002      	movs	r2, r0
 800453a:	4b2c      	ldr	r3, [pc, #176]	; (80045ec <UART_SetConfig+0x1ec>)
 800453c:	3a10      	subs	r2, #16
 800453e:	429a      	cmp	r2, r3
 8004540:	d8a8      	bhi.n	8004494 <UART_SetConfig+0x94>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004542:	230f      	movs	r3, #15
 8004544:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004546:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004548:	439a      	bics	r2, r3
 800454a:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800454c:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 800454e:	6822      	ldr	r2, [r4, #0]
 8004550:	4318      	orrs	r0, r3
 8004552:	60d0      	str	r0, [r2, #12]
 8004554:	e7a9      	b.n	80044aa <UART_SetConfig+0xaa>
        pclk = HAL_RCC_GetSysClockFreq();
 8004556:	f7ff f8fb 	bl	8003750 <HAL_RCC_GetSysClockFreq>
 800455a:	e7d6      	b.n	800450a <UART_SetConfig+0x10a>
    switch (clocksource)
 800455c:	2808      	cmp	r0, #8
 800455e:	d899      	bhi.n	8004494 <UART_SetConfig+0x94>
 8004560:	f7fb fdda 	bl	8000118 <__gnu_thumb1_case_sqi>
 8004564:	980d0a05 	.word	0x980d0a05
 8004568:	98989821 	.word	0x98989821
 800456c:	24          	.byte	0x24
 800456d:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 800456e:	f7ff fc53 	bl	8003e18 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004572:	2800      	cmp	r0, #0
 8004574:	d099      	beq.n	80044aa <UART_SetConfig+0xaa>
 8004576:	e00c      	b.n	8004592 <UART_SetConfig+0x192>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004578:	f7ff fc5e 	bl	8003e38 <HAL_RCC_GetPCLK2Freq>
        break;
 800457c:	e7f9      	b.n	8004572 <UART_SetConfig+0x172>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800457e:	2310      	movs	r3, #16
 8004580:	6810      	ldr	r0, [r2, #0]
 8004582:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004584:	4243      	negs	r3, r0
 8004586:	4158      	adcs	r0, r3
 8004588:	4b14      	ldr	r3, [pc, #80]	; (80045dc <UART_SetConfig+0x1dc>)
 800458a:	4240      	negs	r0, r0
 800458c:	4018      	ands	r0, r3
 800458e:	4b14      	ldr	r3, [pc, #80]	; (80045e0 <UART_SetConfig+0x1e0>)
 8004590:	18c0      	adds	r0, r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004592:	6863      	ldr	r3, [r4, #4]
 8004594:	6861      	ldr	r1, [r4, #4]
 8004596:	085b      	lsrs	r3, r3, #1
 8004598:	1818      	adds	r0, r3, r0
 800459a:	f7fb fddb 	bl	8000154 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800459e:	0002      	movs	r2, r0
 80045a0:	4b12      	ldr	r3, [pc, #72]	; (80045ec <UART_SetConfig+0x1ec>)
 80045a2:	3a10      	subs	r2, #16
 80045a4:	e7a7      	b.n	80044f6 <UART_SetConfig+0xf6>
        pclk = HAL_RCC_GetSysClockFreq();
 80045a6:	f7ff f8d3 	bl	8003750 <HAL_RCC_GetSysClockFreq>
        break;
 80045aa:	e7e2      	b.n	8004572 <UART_SetConfig+0x172>
    switch (clocksource)
 80045ac:	2080      	movs	r0, #128	; 0x80
 80045ae:	0200      	lsls	r0, r0, #8
 80045b0:	e7ef      	b.n	8004592 <UART_SetConfig+0x192>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045b2:	2280      	movs	r2, #128	; 0x80
 80045b4:	2001      	movs	r0, #1
 80045b6:	0212      	lsls	r2, r2, #8
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d100      	bne.n	80045be <UART_SetConfig+0x1be>
 80045bc:	e776      	b.n	80044ac <UART_SetConfig+0xac>
 80045be:	e769      	b.n	8004494 <UART_SetConfig+0x94>
 80045c0:	efff69f3 	.word	0xefff69f3
 80045c4:	ffffcfff 	.word	0xffffcfff
 80045c8:	40004800 	.word	0x40004800
 80045cc:	fffff4ff 	.word	0xfffff4ff
 80045d0:	40004400 	.word	0x40004400
 80045d4:	40021000 	.word	0x40021000
 80045d8:	08006199 	.word	0x08006199
 80045dc:	00b71b00 	.word	0x00b71b00
 80045e0:	003d0900 	.word	0x003d0900
 80045e4:	fffffd00 	.word	0xfffffd00
 80045e8:	000ffcff 	.word	0x000ffcff
 80045ec:	0000ffef 	.word	0x0000ffef

080045f0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80045f2:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045f4:	07da      	lsls	r2, r3, #31
 80045f6:	d506      	bpl.n	8004606 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045f8:	6801      	ldr	r1, [r0, #0]
 80045fa:	4c28      	ldr	r4, [pc, #160]	; (800469c <UART_AdvFeatureConfig+0xac>)
 80045fc:	684a      	ldr	r2, [r1, #4]
 80045fe:	4022      	ands	r2, r4
 8004600:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004602:	4322      	orrs	r2, r4
 8004604:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004606:	079a      	lsls	r2, r3, #30
 8004608:	d506      	bpl.n	8004618 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800460a:	6801      	ldr	r1, [r0, #0]
 800460c:	4c24      	ldr	r4, [pc, #144]	; (80046a0 <UART_AdvFeatureConfig+0xb0>)
 800460e:	684a      	ldr	r2, [r1, #4]
 8004610:	4022      	ands	r2, r4
 8004612:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004614:	4322      	orrs	r2, r4
 8004616:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004618:	075a      	lsls	r2, r3, #29
 800461a:	d506      	bpl.n	800462a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800461c:	6801      	ldr	r1, [r0, #0]
 800461e:	4c21      	ldr	r4, [pc, #132]	; (80046a4 <UART_AdvFeatureConfig+0xb4>)
 8004620:	684a      	ldr	r2, [r1, #4]
 8004622:	4022      	ands	r2, r4
 8004624:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004626:	4322      	orrs	r2, r4
 8004628:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800462a:	071a      	lsls	r2, r3, #28
 800462c:	d506      	bpl.n	800463c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800462e:	6801      	ldr	r1, [r0, #0]
 8004630:	4c1d      	ldr	r4, [pc, #116]	; (80046a8 <UART_AdvFeatureConfig+0xb8>)
 8004632:	684a      	ldr	r2, [r1, #4]
 8004634:	4022      	ands	r2, r4
 8004636:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004638:	4322      	orrs	r2, r4
 800463a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800463c:	06da      	lsls	r2, r3, #27
 800463e:	d506      	bpl.n	800464e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004640:	6801      	ldr	r1, [r0, #0]
 8004642:	4c1a      	ldr	r4, [pc, #104]	; (80046ac <UART_AdvFeatureConfig+0xbc>)
 8004644:	688a      	ldr	r2, [r1, #8]
 8004646:	4022      	ands	r2, r4
 8004648:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800464a:	4322      	orrs	r2, r4
 800464c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800464e:	069a      	lsls	r2, r3, #26
 8004650:	d506      	bpl.n	8004660 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004652:	6801      	ldr	r1, [r0, #0]
 8004654:	4c16      	ldr	r4, [pc, #88]	; (80046b0 <UART_AdvFeatureConfig+0xc0>)
 8004656:	688a      	ldr	r2, [r1, #8]
 8004658:	4022      	ands	r2, r4
 800465a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800465c:	4322      	orrs	r2, r4
 800465e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004660:	065a      	lsls	r2, r3, #25
 8004662:	d510      	bpl.n	8004686 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004664:	6801      	ldr	r1, [r0, #0]
 8004666:	4d13      	ldr	r5, [pc, #76]	; (80046b4 <UART_AdvFeatureConfig+0xc4>)
 8004668:	684a      	ldr	r2, [r1, #4]
 800466a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800466c:	402a      	ands	r2, r5
 800466e:	4322      	orrs	r2, r4
 8004670:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004672:	2280      	movs	r2, #128	; 0x80
 8004674:	0352      	lsls	r2, r2, #13
 8004676:	4294      	cmp	r4, r2
 8004678:	d105      	bne.n	8004686 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800467a:	684a      	ldr	r2, [r1, #4]
 800467c:	4c0e      	ldr	r4, [pc, #56]	; (80046b8 <UART_AdvFeatureConfig+0xc8>)
 800467e:	4022      	ands	r2, r4
 8004680:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004682:	4322      	orrs	r2, r4
 8004684:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004686:	061b      	lsls	r3, r3, #24
 8004688:	d506      	bpl.n	8004698 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800468a:	6802      	ldr	r2, [r0, #0]
 800468c:	490b      	ldr	r1, [pc, #44]	; (80046bc <UART_AdvFeatureConfig+0xcc>)
 800468e:	6853      	ldr	r3, [r2, #4]
 8004690:	400b      	ands	r3, r1
 8004692:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004694:	430b      	orrs	r3, r1
 8004696:	6053      	str	r3, [r2, #4]
}
 8004698:	bd30      	pop	{r4, r5, pc}
 800469a:	46c0      	nop			; (mov r8, r8)
 800469c:	fffdffff 	.word	0xfffdffff
 80046a0:	fffeffff 	.word	0xfffeffff
 80046a4:	fffbffff 	.word	0xfffbffff
 80046a8:	ffff7fff 	.word	0xffff7fff
 80046ac:	ffffefff 	.word	0xffffefff
 80046b0:	ffffdfff 	.word	0xffffdfff
 80046b4:	ffefffff 	.word	0xffefffff
 80046b8:	ff9fffff 	.word	0xff9fffff
 80046bc:	fff7ffff 	.word	0xfff7ffff

080046c0 <UART_WaitOnFlagUntilTimeout>:
{
 80046c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046c2:	0004      	movs	r4, r0
 80046c4:	000d      	movs	r5, r1
 80046c6:	0017      	movs	r7, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046c8:	2608      	movs	r6, #8
{
 80046ca:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046cc:	6822      	ldr	r2, [r4, #0]
 80046ce:	69d3      	ldr	r3, [r2, #28]
 80046d0:	402b      	ands	r3, r5
 80046d2:	1b5b      	subs	r3, r3, r5
 80046d4:	4259      	negs	r1, r3
 80046d6:	414b      	adcs	r3, r1
 80046d8:	42bb      	cmp	r3, r7
 80046da:	d001      	beq.n	80046e0 <UART_WaitOnFlagUntilTimeout+0x20>
  return HAL_OK;
 80046dc:	2000      	movs	r0, #0
 80046de:	e021      	b.n	8004724 <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 80046e0:	9b08      	ldr	r3, [sp, #32]
 80046e2:	3301      	adds	r3, #1
 80046e4:	d0f3      	beq.n	80046ce <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e6:	f7fe fc4d 	bl	8002f84 <HAL_GetTick>
 80046ea:	9b00      	ldr	r3, [sp, #0]
 80046ec:	1ac0      	subs	r0, r0, r3
 80046ee:	9b08      	ldr	r3, [sp, #32]
 80046f0:	4298      	cmp	r0, r3
 80046f2:	d828      	bhi.n	8004746 <UART_WaitOnFlagUntilTimeout+0x86>
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d026      	beq.n	8004746 <UART_WaitOnFlagUntilTimeout+0x86>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046f8:	2104      	movs	r1, #4
 80046fa:	6823      	ldr	r3, [r4, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	420a      	tst	r2, r1
 8004700:	d0e4      	beq.n	80046cc <UART_WaitOnFlagUntilTimeout+0xc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004702:	69da      	ldr	r2, [r3, #28]
 8004704:	0011      	movs	r1, r2
 8004706:	4031      	ands	r1, r6
 8004708:	9101      	str	r1, [sp, #4]
 800470a:	4232      	tst	r2, r6
 800470c:	d00b      	beq.n	8004726 <UART_WaitOnFlagUntilTimeout+0x66>
           UART_EndRxTransfer(huart);
 800470e:	0020      	movs	r0, r4
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004710:	621e      	str	r6, [r3, #32]
           UART_EndRxTransfer(huart);
 8004712:	f7ff fe47 	bl	80043a4 <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004716:	0023      	movs	r3, r4
 8004718:	3308      	adds	r3, #8
 800471a:	67de      	str	r6, [r3, #124]	; 0x7c
           __HAL_UNLOCK(huart);
 800471c:	2300      	movs	r3, #0
           return HAL_ERROR;
 800471e:	2001      	movs	r0, #1
           __HAL_UNLOCK(huart);
 8004720:	3478      	adds	r4, #120	; 0x78
 8004722:	7023      	strb	r3, [r4, #0]
}
 8004724:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004726:	2280      	movs	r2, #128	; 0x80
 8004728:	69d9      	ldr	r1, [r3, #28]
 800472a:	0112      	lsls	r2, r2, #4
 800472c:	4211      	tst	r1, r2
 800472e:	d0cd      	beq.n	80046cc <UART_WaitOnFlagUntilTimeout+0xc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004730:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8004732:	0020      	movs	r0, r4
 8004734:	f7ff fe36 	bl	80043a4 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004738:	0023      	movs	r3, r4
 800473a:	2220      	movs	r2, #32
 800473c:	3308      	adds	r3, #8
 800473e:	67da      	str	r2, [r3, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8004740:	9b01      	ldr	r3, [sp, #4]
 8004742:	3478      	adds	r4, #120	; 0x78
 8004744:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8004746:	2003      	movs	r0, #3
 8004748:	e7ec      	b.n	8004724 <UART_WaitOnFlagUntilTimeout+0x64>

0800474a <HAL_UART_Transmit>:
{
 800474a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800474c:	b085      	sub	sp, #20
 800474e:	9303      	str	r3, [sp, #12]
  if (huart->gState == HAL_UART_STATE_READY)
 8004750:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8004752:	0004      	movs	r4, r0
 8004754:	000d      	movs	r5, r1
 8004756:	0016      	movs	r6, r2
    return HAL_BUSY;
 8004758:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 800475a:	2b20      	cmp	r3, #32
 800475c:	d139      	bne.n	80047d2 <HAL_UART_Transmit+0x88>
      return  HAL_ERROR;
 800475e:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8004760:	2900      	cmp	r1, #0
 8004762:	d036      	beq.n	80047d2 <HAL_UART_Transmit+0x88>
 8004764:	2a00      	cmp	r2, #0
 8004766:	d034      	beq.n	80047d2 <HAL_UART_Transmit+0x88>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004768:	2380      	movs	r3, #128	; 0x80
 800476a:	68a2      	ldr	r2, [r4, #8]
 800476c:	015b      	lsls	r3, r3, #5
 800476e:	429a      	cmp	r2, r3
 8004770:	d104      	bne.n	800477c <HAL_UART_Transmit+0x32>
 8004772:	6923      	ldr	r3, [r4, #16]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 8004778:	4201      	tst	r1, r0
 800477a:	d12a      	bne.n	80047d2 <HAL_UART_Transmit+0x88>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800477c:	0023      	movs	r3, r4
 800477e:	2200      	movs	r2, #0
 8004780:	3308      	adds	r3, #8
 8004782:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004784:	2321      	movs	r3, #33	; 0x21
 8004786:	67e3      	str	r3, [r4, #124]	; 0x7c
    tickstart = HAL_GetTick();
 8004788:	f7fe fbfc 	bl	8002f84 <HAL_GetTick>
    huart->TxXferSize  = Size;
 800478c:	0023      	movs	r3, r4
 800478e:	3350      	adds	r3, #80	; 0x50
 8004790:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8004792:	3302      	adds	r3, #2
 8004794:	801e      	strh	r6, [r3, #0]
 8004796:	9302      	str	r3, [sp, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004798:	2380      	movs	r3, #128	; 0x80
 800479a:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800479c:	0007      	movs	r7, r0
      pdata16bits = NULL;
 800479e:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047a0:	015b      	lsls	r3, r3, #5
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d104      	bne.n	80047b0 <HAL_UART_Transmit+0x66>
 80047a6:	6923      	ldr	r3, [r4, #16]
 80047a8:	42b3      	cmp	r3, r6
 80047aa:	d101      	bne.n	80047b0 <HAL_UART_Transmit+0x66>
 80047ac:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 80047ae:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 80047b0:	0023      	movs	r3, r4
 80047b2:	3352      	adds	r3, #82	; 0x52
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10c      	bne.n	80047d6 <HAL_UART_Transmit+0x8c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047bc:	9b03      	ldr	r3, [sp, #12]
 80047be:	2140      	movs	r1, #64	; 0x40
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	0020      	movs	r0, r4
 80047c4:	003b      	movs	r3, r7
 80047c6:	f7ff ff7b 	bl	80046c0 <UART_WaitOnFlagUntilTimeout>
 80047ca:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 80047cc:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047ce:	2800      	cmp	r0, #0
 80047d0:	d10d      	bne.n	80047ee <HAL_UART_Transmit+0xa4>
}
 80047d2:	b005      	add	sp, #20
 80047d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047d6:	9b03      	ldr	r3, [sp, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	2180      	movs	r1, #128	; 0x80
 80047de:	003b      	movs	r3, r7
 80047e0:	0020      	movs	r0, r4
 80047e2:	f7ff ff6d 	bl	80046c0 <UART_WaitOnFlagUntilTimeout>
 80047e6:	2800      	cmp	r0, #0
 80047e8:	d003      	beq.n	80047f2 <HAL_UART_Transmit+0xa8>
        huart->gState = HAL_UART_STATE_READY;
 80047ea:	2320      	movs	r3, #32
 80047ec:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 80047ee:	2003      	movs	r0, #3
 80047f0:	e7ef      	b.n	80047d2 <HAL_UART_Transmit+0x88>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047f2:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80047f4:	2d00      	cmp	r5, #0
 80047f6:	d10b      	bne.n	8004810 <HAL_UART_Transmit+0xc6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047f8:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 80047fa:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047fc:	05db      	lsls	r3, r3, #23
 80047fe:	0ddb      	lsrs	r3, r3, #23
 8004800:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8004802:	9b02      	ldr	r3, [sp, #8]
 8004804:	9a02      	ldr	r2, [sp, #8]
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	3b01      	subs	r3, #1
 800480a:	b29b      	uxth	r3, r3
 800480c:	8013      	strh	r3, [r2, #0]
 800480e:	e7cf      	b.n	80047b0 <HAL_UART_Transmit+0x66>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004810:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8004812:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004814:	6293      	str	r3, [r2, #40]	; 0x28
        pdata8bits++;
 8004816:	e7f4      	b.n	8004802 <HAL_UART_Transmit+0xb8>

08004818 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004818:	0003      	movs	r3, r0
{
 800481a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800481c:	2500      	movs	r5, #0
{
 800481e:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004820:	3308      	adds	r3, #8
 8004822:	67dd      	str	r5, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8004824:	f7fe fbae 	bl	8002f84 <HAL_GetTick>
 8004828:	0026      	movs	r6, r4
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800482a:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800482c:	0007      	movs	r7, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	3678      	adds	r6, #120	; 0x78
 8004832:	071b      	lsls	r3, r3, #28
 8004834:	d51b      	bpl.n	800486e <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004836:	2180      	movs	r1, #128	; 0x80
 8004838:	4b26      	ldr	r3, [pc, #152]	; (80048d4 <UART_CheckIdleState+0xbc>)
 800483a:	002a      	movs	r2, r5
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	0389      	lsls	r1, r1, #14
 8004840:	0003      	movs	r3, r0
 8004842:	0020      	movs	r0, r4
 8004844:	f7ff ff3c 	bl	80046c0 <UART_WaitOnFlagUntilTimeout>
 8004848:	42a8      	cmp	r0, r5
 800484a:	d010      	beq.n	800486e <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800484c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004850:	2301      	movs	r3, #1
 8004852:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004856:	2080      	movs	r0, #128	; 0x80
 8004858:	6822      	ldr	r2, [r4, #0]
 800485a:	6813      	ldr	r3, [r2, #0]
 800485c:	4383      	bics	r3, r0
 800485e:	6013      	str	r3, [r2, #0]
 8004860:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8004864:	2320      	movs	r3, #32
 8004866:	67e3      	str	r3, [r4, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 8004868:	7035      	strb	r5, [r6, #0]
      return HAL_TIMEOUT;
 800486a:	2003      	movs	r0, #3
}
 800486c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800486e:	0025      	movs	r5, r4
 8004870:	cd08      	ldmia	r5!, {r3}
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	075b      	lsls	r3, r3, #29
 8004876:	d525      	bpl.n	80048c4 <UART_CheckIdleState+0xac>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004878:	2180      	movs	r1, #128	; 0x80
 800487a:	4b16      	ldr	r3, [pc, #88]	; (80048d4 <UART_CheckIdleState+0xbc>)
 800487c:	2200      	movs	r2, #0
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	0020      	movs	r0, r4
 8004882:	003b      	movs	r3, r7
 8004884:	03c9      	lsls	r1, r1, #15
 8004886:	f7ff ff1b 	bl	80046c0 <UART_WaitOnFlagUntilTimeout>
 800488a:	2800      	cmp	r0, #0
 800488c:	d01a      	beq.n	80048c4 <UART_CheckIdleState+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800488e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004892:	2201      	movs	r2, #1
 8004894:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004898:	6821      	ldr	r1, [r4, #0]
 800489a:	4f0f      	ldr	r7, [pc, #60]	; (80048d8 <UART_CheckIdleState+0xc0>)
 800489c:	680b      	ldr	r3, [r1, #0]
 800489e:	403b      	ands	r3, r7
 80048a0:	600b      	str	r3, [r1, #0]
 80048a2:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048a6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048aa:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ae:	6821      	ldr	r1, [r4, #0]
 80048b0:	688b      	ldr	r3, [r1, #8]
 80048b2:	4393      	bics	r3, r2
 80048b4:	608b      	str	r3, [r1, #8]
 80048b6:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 80048ba:	2320      	movs	r3, #32
 80048bc:	67eb      	str	r3, [r5, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 80048be:	2300      	movs	r3, #0
 80048c0:	7033      	strb	r3, [r6, #0]
 80048c2:	e7d2      	b.n	800486a <UART_CheckIdleState+0x52>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048c4:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80048c6:	2320      	movs	r3, #32
 80048c8:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80048ca:	67eb      	str	r3, [r5, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048cc:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048ce:	6660      	str	r0, [r4, #100]	; 0x64
  __HAL_UNLOCK(huart);
 80048d0:	7030      	strb	r0, [r6, #0]
  return HAL_OK;
 80048d2:	e7cb      	b.n	800486c <UART_CheckIdleState+0x54>
 80048d4:	01ffffff 	.word	0x01ffffff
 80048d8:	fffffedf 	.word	0xfffffedf

080048dc <HAL_UART_Init>:
{
 80048dc:	b510      	push	{r4, lr}
 80048de:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80048e0:	d101      	bne.n	80048e6 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80048e2:	2001      	movs	r0, #1
}
 80048e4:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80048e6:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d104      	bne.n	80048f6 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 80048ec:	0002      	movs	r2, r0
 80048ee:	3278      	adds	r2, #120	; 0x78
 80048f0:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80048f2:	f7fe fa45 	bl	8002d80 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80048f6:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80048f8:	2101      	movs	r1, #1
 80048fa:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80048fc:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 80048fe:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004900:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8004902:	438b      	bics	r3, r1
 8004904:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004906:	f7ff fd7b 	bl	8004400 <UART_SetConfig>
 800490a:	2801      	cmp	r0, #1
 800490c:	d0e9      	beq.n	80048e2 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800490e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004910:	2b00      	cmp	r3, #0
 8004912:	d002      	beq.n	800491a <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8004914:	0020      	movs	r0, r4
 8004916:	f7ff fe6b 	bl	80045f0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800491a:	6823      	ldr	r3, [r4, #0]
 800491c:	4907      	ldr	r1, [pc, #28]	; (800493c <HAL_UART_Init+0x60>)
 800491e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8004920:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004922:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004924:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004926:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004928:	689a      	ldr	r2, [r3, #8]
 800492a:	438a      	bics	r2, r1
 800492c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800492e:	2201      	movs	r2, #1
 8004930:	6819      	ldr	r1, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004936:	f7ff ff6f 	bl	8004818 <UART_CheckIdleState>
 800493a:	e7d3      	b.n	80048e4 <HAL_UART_Init+0x8>
 800493c:	ffffb7ff 	.word	0xffffb7ff

08004940 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004940:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 8004942:	f000 fa23 	bl	8004d8c <vTaskStartScheduler>
  
  return osOK;
}
 8004946:	2000      	movs	r0, #0
 8004948:	bd10      	pop	{r4, pc}

0800494a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800494a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800494c:	0004      	movs	r4, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800494e:	6946      	ldr	r6, [r0, #20]
{
 8004950:	000b      	movs	r3, r1
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004952:	6840      	ldr	r0, [r0, #4]
 8004954:	6821      	ldr	r1, [r4, #0]
 8004956:	6922      	ldr	r2, [r4, #16]
 8004958:	2708      	movs	r7, #8
 800495a:	5fe5      	ldrsh	r5, [r4, r7]
{
 800495c:	b087      	sub	sp, #28
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800495e:	2e00      	cmp	r6, #0
 8004960:	d00e      	beq.n	8004980 <osThreadCreate+0x36>
 8004962:	69a7      	ldr	r7, [r4, #24]
 8004964:	2f00      	cmp	r7, #0
 8004966:	d00b      	beq.n	8004980 <osThreadCreate+0x36>
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004968:	2400      	movs	r4, #0
  if (priority != osPriorityError) {
 800496a:	2d84      	cmp	r5, #132	; 0x84
 800496c:	d000      	beq.n	8004970 <osThreadCreate+0x26>
    fpriority += (priority - osPriorityIdle);
 800496e:	1cec      	adds	r4, r5, #3
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004970:	9702      	str	r7, [sp, #8]
 8004972:	9601      	str	r6, [sp, #4]
 8004974:	9400      	str	r4, [sp, #0]
 8004976:	f000 f9b7 	bl	8004ce8 <xTaskCreateStatic>
 800497a:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800497c:	9b05      	ldr	r3, [sp, #20]
 800497e:	e00c      	b.n	800499a <osThreadCreate+0x50>
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004980:	2400      	movs	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004982:	b292      	uxth	r2, r2
  if (priority != osPriorityError) {
 8004984:	2d84      	cmp	r5, #132	; 0x84
 8004986:	d000      	beq.n	800498a <osThreadCreate+0x40>
    fpriority += (priority - osPriorityIdle);
 8004988:	1cec      	adds	r4, r5, #3
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800498a:	ad05      	add	r5, sp, #20
 800498c:	9501      	str	r5, [sp, #4]
 800498e:	9400      	str	r4, [sp, #0]
 8004990:	f000 f9d0 	bl	8004d34 <xTaskCreate>
      return NULL;
 8004994:	2300      	movs	r3, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004996:	2801      	cmp	r0, #1
 8004998:	d0f0      	beq.n	800497c <osThreadCreate+0x32>
}
 800499a:	0018      	movs	r0, r3
 800499c:	b007      	add	sp, #28
 800499e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049a0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80049a0:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80049a2:	2800      	cmp	r0, #0
 80049a4:	d100      	bne.n	80049a8 <osDelay+0x8>
 80049a6:	3001      	adds	r0, #1
 80049a8:	f000 fb18 	bl	8004fdc <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80049ac:	2000      	movs	r0, #0
 80049ae:	bd10      	pop	{r4, pc}

080049b0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049b0:	0003      	movs	r3, r0
 80049b2:	3308      	adds	r3, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80049b4:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049b6:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049b8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049ba:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80049bc:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80049be:	4252      	negs	r2, r2
 80049c0:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80049c2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80049c4:	4770      	bx	lr

080049c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80049c6:	2300      	movs	r3, #0
 80049c8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80049ca:	4770      	bx	lr

080049cc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80049cc:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80049ce:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80049d0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80049d2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80049d4:	689a      	ldr	r2, [r3, #8]
 80049d6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80049d8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80049da:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80049dc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80049de:	3301      	adds	r3, #1
 80049e0:	6003      	str	r3, [r0, #0]
}
 80049e2:	4770      	bx	lr

080049e4 <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80049e4:	0002      	movs	r2, r0
{
 80049e6:	b530      	push	{r4, r5, lr}
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80049e8:	680c      	ldr	r4, [r1, #0]
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80049ea:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 80049ec:	1c63      	adds	r3, r4, #1
 80049ee:	d10a      	bne.n	8004a06 <vListInsert+0x22>
		pxIterator = pxList->xListEnd.pxPrevious;
 80049f0:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049f6:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80049f8:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80049fa:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80049fc:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80049fe:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004a00:	3301      	adds	r3, #1
 8004a02:	6003      	str	r3, [r0, #0]
}
 8004a04:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004a06:	0013      	movs	r3, r2
 8004a08:	6852      	ldr	r2, [r2, #4]
 8004a0a:	6815      	ldr	r5, [r2, #0]
 8004a0c:	42a5      	cmp	r5, r4
 8004a0e:	d9fa      	bls.n	8004a06 <vListInsert+0x22>
 8004a10:	e7ef      	b.n	80049f2 <vListInsert+0xe>

08004a12 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a12:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a14:	6841      	ldr	r1, [r0, #4]
 8004a16:	6882      	ldr	r2, [r0, #8]
 8004a18:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a1a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a1c:	6859      	ldr	r1, [r3, #4]
 8004a1e:	4281      	cmp	r1, r0
 8004a20:	d100      	bne.n	8004a24 <uxListRemove+0x12>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a24:	2200      	movs	r2, #0
 8004a26:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	3a01      	subs	r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a2e:	6818      	ldr	r0, [r3, #0]
}
 8004a30:	4770      	bx	lr
	...

08004a34 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a36:	0004      	movs	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a38:	f000 fbb4 	bl	80051a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a3c:	4b2a      	ldr	r3, [pc, #168]	; (8004ae8 <prvAddNewTaskToReadyList+0xb4>)
		if( pxCurrentTCB == NULL )
 8004a3e:	4d2b      	ldr	r5, [pc, #172]	; (8004aec <prvAddNewTaskToReadyList+0xb8>)
		uxCurrentNumberOfTasks++;
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	3201      	adds	r2, #1
 8004a44:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004a46:	682e      	ldr	r6, [r5, #0]
 8004a48:	2e00      	cmp	r6, #0
 8004a4a:	d141      	bne.n	8004ad0 <prvAddNewTaskToReadyList+0x9c>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a4c:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d11e      	bne.n	8004a92 <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a54:	2714      	movs	r7, #20
 8004a56:	0038      	movs	r0, r7
 8004a58:	4370      	muls	r0, r6
 8004a5a:	4b25      	ldr	r3, [pc, #148]	; (8004af0 <prvAddNewTaskToReadyList+0xbc>)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a5c:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a5e:	1818      	adds	r0, r3, r0
 8004a60:	f7ff ffa6 	bl	80049b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a64:	2e07      	cmp	r6, #7
 8004a66:	d1f6      	bne.n	8004a56 <prvAddNewTaskToReadyList+0x22>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a68:	4f22      	ldr	r7, [pc, #136]	; (8004af4 <prvAddNewTaskToReadyList+0xc0>)
 8004a6a:	0038      	movs	r0, r7
 8004a6c:	f7ff ffa0 	bl	80049b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a70:	4e21      	ldr	r6, [pc, #132]	; (8004af8 <prvAddNewTaskToReadyList+0xc4>)
 8004a72:	0030      	movs	r0, r6
 8004a74:	f7ff ff9c 	bl	80049b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a78:	4820      	ldr	r0, [pc, #128]	; (8004afc <prvAddNewTaskToReadyList+0xc8>)
 8004a7a:	f7ff ff99 	bl	80049b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a7e:	4820      	ldr	r0, [pc, #128]	; (8004b00 <prvAddNewTaskToReadyList+0xcc>)
 8004a80:	f7ff ff96 	bl	80049b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a84:	481f      	ldr	r0, [pc, #124]	; (8004b04 <prvAddNewTaskToReadyList+0xd0>)
 8004a86:	f7ff ff93 	bl	80049b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a8a:	4b1f      	ldr	r3, [pc, #124]	; (8004b08 <prvAddNewTaskToReadyList+0xd4>)
 8004a8c:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a8e:	4b1f      	ldr	r3, [pc, #124]	; (8004b0c <prvAddNewTaskToReadyList+0xd8>)
 8004a90:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 8004a92:	4a1f      	ldr	r2, [pc, #124]	; (8004b10 <prvAddNewTaskToReadyList+0xdc>)
 8004a94:	6813      	ldr	r3, [r2, #0]
 8004a96:	3301      	adds	r3, #1
 8004a98:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004a9a:	4a1e      	ldr	r2, [pc, #120]	; (8004b14 <prvAddNewTaskToReadyList+0xe0>)
 8004a9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004a9e:	6811      	ldr	r1, [r2, #0]
 8004aa0:	428b      	cmp	r3, r1
 8004aa2:	d900      	bls.n	8004aa6 <prvAddNewTaskToReadyList+0x72>
 8004aa4:	6013      	str	r3, [r2, #0]
 8004aa6:	2014      	movs	r0, #20
 8004aa8:	4358      	muls	r0, r3
 8004aaa:	4b11      	ldr	r3, [pc, #68]	; (8004af0 <prvAddNewTaskToReadyList+0xbc>)
 8004aac:	1d21      	adds	r1, r4, #4
 8004aae:	1818      	adds	r0, r3, r0
 8004ab0:	f7ff ff8c 	bl	80049cc <vListInsertEnd>
	taskEXIT_CRITICAL();
 8004ab4:	f000 fb82 	bl	80051bc <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8004ab8:	4b17      	ldr	r3, [pc, #92]	; (8004b18 <prvAddNewTaskToReadyList+0xe4>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d006      	beq.n	8004ace <prvAddNewTaskToReadyList+0x9a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ac0:	682b      	ldr	r3, [r5, #0]
 8004ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d201      	bcs.n	8004ace <prvAddNewTaskToReadyList+0x9a>
			taskYIELD_IF_USING_PREEMPTION();
 8004aca:	f000 fb5f 	bl	800518c <vPortYield>
}
 8004ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( xSchedulerRunning == pdFALSE )
 8004ad0:	4b11      	ldr	r3, [pc, #68]	; (8004b18 <prvAddNewTaskToReadyList+0xe4>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1dc      	bne.n	8004a92 <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ad8:	682b      	ldr	r3, [r5, #0]
 8004ada:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d8d7      	bhi.n	8004a92 <prvAddNewTaskToReadyList+0x5e>
					pxCurrentTCB = pxNewTCB;
 8004ae2:	602c      	str	r4, [r5, #0]
 8004ae4:	e7d5      	b.n	8004a92 <prvAddNewTaskToReadyList+0x5e>
 8004ae6:	46c0      	nop			; (mov r8, r8)
 8004ae8:	2000056c 	.word	0x2000056c
 8004aec:	200004d4 	.word	0x200004d4
 8004af0:	200004e0 	.word	0x200004e0
 8004af4:	20000584 	.word	0x20000584
 8004af8:	20000598 	.word	0x20000598
 8004afc:	200005b4 	.word	0x200005b4
 8004b00:	200005e0 	.word	0x200005e0
 8004b04:	200005cc 	.word	0x200005cc
 8004b08:	200004d8 	.word	0x200004d8
 8004b0c:	200004dc 	.word	0x200004dc
 8004b10:	2000057c 	.word	0x2000057c
 8004b14:	20000580 	.word	0x20000580
 8004b18:	200005c8 	.word	0x200005c8

08004b1c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b1e:	0004      	movs	r4, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b20:	4b14      	ldr	r3, [pc, #80]	; (8004b74 <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b22:	4d15      	ldr	r5, [pc, #84]	; (8004b78 <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 8004b24:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b26:	6828      	ldr	r0, [r5, #0]
{
 8004b28:	000f      	movs	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b2a:	3004      	adds	r0, #4
 8004b2c:	f7ff ff71 	bl	8004a12 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b30:	1c63      	adds	r3, r4, #1
 8004b32:	d107      	bne.n	8004b44 <prvAddCurrentTaskToDelayedList+0x28>
 8004b34:	2f00      	cmp	r7, #0
 8004b36:	d005      	beq.n	8004b44 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b38:	6829      	ldr	r1, [r5, #0]
 8004b3a:	4810      	ldr	r0, [pc, #64]	; (8004b7c <prvAddCurrentTaskToDelayedList+0x60>)
 8004b3c:	3104      	adds	r1, #4
 8004b3e:	f7ff ff45 	bl	80049cc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b44:	682b      	ldr	r3, [r5, #0]
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b46:	1934      	adds	r4, r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b48:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b4a:	42a6      	cmp	r6, r4
 8004b4c:	d906      	bls.n	8004b5c <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b4e:	4b0c      	ldr	r3, [pc, #48]	; (8004b80 <prvAddCurrentTaskToDelayedList+0x64>)
 8004b50:	6818      	ldr	r0, [r3, #0]
 8004b52:	6829      	ldr	r1, [r5, #0]
 8004b54:	3104      	adds	r1, #4
 8004b56:	f7ff ff45 	bl	80049e4 <vListInsert>
 8004b5a:	e7f2      	b.n	8004b42 <prvAddCurrentTaskToDelayedList+0x26>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b5c:	4b09      	ldr	r3, [pc, #36]	; (8004b84 <prvAddCurrentTaskToDelayedList+0x68>)
 8004b5e:	6818      	ldr	r0, [r3, #0]
 8004b60:	6829      	ldr	r1, [r5, #0]
 8004b62:	3104      	adds	r1, #4
 8004b64:	f7ff ff3e 	bl	80049e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b68:	4b07      	ldr	r3, [pc, #28]	; (8004b88 <prvAddCurrentTaskToDelayedList+0x6c>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	42a2      	cmp	r2, r4
 8004b6e:	d9e8      	bls.n	8004b42 <prvAddCurrentTaskToDelayedList+0x26>
					xNextTaskUnblockTime = xTimeToWake;
 8004b70:	601c      	str	r4, [r3, #0]
}
 8004b72:	e7e6      	b.n	8004b42 <prvAddCurrentTaskToDelayedList+0x26>
 8004b74:	200005f4 	.word	0x200005f4
 8004b78:	200004d4 	.word	0x200004d4
 8004b7c:	200005cc 	.word	0x200005cc
 8004b80:	200004dc 	.word	0x200004dc
 8004b84:	200004d8 	.word	0x200004d8
 8004b88:	200005ac 	.word	0x200005ac

08004b8c <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b8c:	4a07      	ldr	r2, [pc, #28]	; (8004bac <prvResetNextTaskUnblockTime+0x20>)
 8004b8e:	6813      	ldr	r3, [r2, #0]
 8004b90:	6819      	ldr	r1, [r3, #0]
 8004b92:	4b07      	ldr	r3, [pc, #28]	; (8004bb0 <prvResetNextTaskUnblockTime+0x24>)
 8004b94:	2900      	cmp	r1, #0
 8004b96:	d103      	bne.n	8004ba0 <prvResetNextTaskUnblockTime+0x14>
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b98:	2201      	movs	r2, #1
 8004b9a:	4252      	negs	r2, r2
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b9c:	601a      	str	r2, [r3, #0]
}
 8004b9e:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ba0:	6812      	ldr	r2, [r2, #0]
 8004ba2:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ba4:	68d2      	ldr	r2, [r2, #12]
 8004ba6:	6852      	ldr	r2, [r2, #4]
 8004ba8:	e7f8      	b.n	8004b9c <prvResetNextTaskUnblockTime+0x10>
 8004baa:	46c0      	nop			; (mov r8, r8)
 8004bac:	200004d8 	.word	0x200004d8
 8004bb0:	200005ac 	.word	0x200005ac

08004bb4 <prvDeleteTCB>:
	{
 8004bb4:	b510      	push	{r4, lr}
 8004bb6:	0004      	movs	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004bb8:	304c      	adds	r0, #76	; 0x4c
 8004bba:	f000 fcfb 	bl	80055b4 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004bbe:	0023      	movs	r3, r4
 8004bc0:	33b1      	adds	r3, #177	; 0xb1
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d106      	bne.n	8004bd6 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8004bc8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004bca:	f000 fbeb 	bl	80053a4 <vPortFree>
				vPortFree( pxTCB );
 8004bce:	0020      	movs	r0, r4
 8004bd0:	f000 fbe8 	bl	80053a4 <vPortFree>
	}
 8004bd4:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d0f9      	beq.n	8004bce <prvDeleteTCB+0x1a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d0fa      	beq.n	8004bd4 <prvDeleteTCB+0x20>
 8004bde:	b672      	cpsid	i
 8004be0:	e7fe      	b.n	8004be0 <prvDeleteTCB+0x2c>
	...

08004be4 <prvIdleTask>:
{
 8004be4:	b570      	push	{r4, r5, r6, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004be6:	4c10      	ldr	r4, [pc, #64]	; (8004c28 <prvIdleTask+0x44>)
 8004be8:	6823      	ldr	r3, [r4, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d106      	bne.n	8004bfc <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004bee:	4b0f      	ldr	r3, [pc, #60]	; (8004c2c <prvIdleTask+0x48>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d9f7      	bls.n	8004be6 <prvIdleTask+0x2>
				taskYIELD();
 8004bf6:	f000 fac9 	bl	800518c <vPortYield>
 8004bfa:	e7f4      	b.n	8004be6 <prvIdleTask+0x2>
			taskENTER_CRITICAL();
 8004bfc:	f000 fad2 	bl	80051a4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c00:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <prvIdleTask+0x4c>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c06:	1d28      	adds	r0, r5, #4
 8004c08:	f7ff ff03 	bl	8004a12 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c0c:	4a09      	ldr	r2, [pc, #36]	; (8004c34 <prvIdleTask+0x50>)
 8004c0e:	6813      	ldr	r3, [r2, #0]
 8004c10:	3b01      	subs	r3, #1
 8004c12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c14:	6823      	ldr	r3, [r4, #0]
 8004c16:	3b01      	subs	r3, #1
 8004c18:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8004c1a:	f000 facf 	bl	80051bc <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8004c1e:	0028      	movs	r0, r5
 8004c20:	f7ff ffc8 	bl	8004bb4 <prvDeleteTCB>
 8004c24:	e7df      	b.n	8004be6 <prvIdleTask+0x2>
 8004c26:	46c0      	nop			; (mov r8, r8)
 8004c28:	20000570 	.word	0x20000570
 8004c2c:	200004e0 	.word	0x200004e0
 8004c30:	200005e0 	.word	0x200005e0
 8004c34:	2000056c 	.word	0x2000056c

08004c38 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8004c38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c3a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004c3c:	9301      	str	r3, [sp, #4]
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c3e:	4b26      	ldr	r3, [pc, #152]	; (8004cd8 <prvInitialiseNewTask.constprop.0+0xa0>)
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8004c40:	9000      	str	r0, [sp, #0]
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c42:	18d2      	adds	r2, r2, r3
 8004c44:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004c46:	0092      	lsls	r2, r2, #2
 8004c48:	189a      	adds	r2, r3, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004c4a:	2307      	movs	r3, #7
 8004c4c:	439a      	bics	r2, r3
 8004c4e:	0017      	movs	r7, r2
	if( pcName != NULL )
 8004c50:	2900      	cmp	r1, #0
 8004c52:	d03c      	beq.n	8004cce <prvInitialiseNewTask.constprop.0+0x96>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c54:	0020      	movs	r0, r4
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c56:	2300      	movs	r3, #0
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c58:	3034      	adds	r0, #52	; 0x34
 8004c5a:	5cca      	ldrb	r2, [r1, r3]
 8004c5c:	54c2      	strb	r2, [r0, r3]
			if( pcName[ x ] == ( char ) 0x00 )
 8004c5e:	2a00      	cmp	r2, #0
 8004c60:	d002      	beq.n	8004c68 <prvInitialiseNewTask.constprop.0+0x30>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c62:	3301      	adds	r3, #1
 8004c64:	2b10      	cmp	r3, #16
 8004c66:	d1f8      	bne.n	8004c5a <prvInitialiseNewTask.constprop.0+0x22>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c68:	0023      	movs	r3, r4
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	3343      	adds	r3, #67	; 0x43
 8004c6e:	701a      	strb	r2, [r3, #0]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c70:	9d08      	ldr	r5, [sp, #32]
 8004c72:	2d06      	cmp	r5, #6
 8004c74:	d900      	bls.n	8004c78 <prvInitialiseNewTask.constprop.0+0x40>
 8004c76:	2506      	movs	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 8004c78:	2600      	movs	r6, #0
	pxNewTCB->uxPriority = uxPriority;
 8004c7a:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004c7c:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c7e:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8004c80:	64a6      	str	r6, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c82:	f7ff fea0 	bl	80049c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c86:	0020      	movs	r0, r4
 8004c88:	3018      	adds	r0, #24
 8004c8a:	f7ff fe9c 	bl	80049c6 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c8e:	2307      	movs	r3, #7
 8004c90:	1b5d      	subs	r5, r3, r5
		pxNewTCB->ulNotifiedValue = 0;
 8004c92:	0023      	movs	r3, r4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004c94:	0020      	movs	r0, r4
		pxNewTCB->ulNotifiedValue = 0;
 8004c96:	33ac      	adds	r3, #172	; 0xac
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c98:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c9a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c9c:	6264      	str	r4, [r4, #36]	; 0x24
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004c9e:	2260      	movs	r2, #96	; 0x60
		pxNewTCB->ulNotifiedValue = 0;
 8004ca0:	601e      	str	r6, [r3, #0]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004ca2:	0031      	movs	r1, r6
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ca4:	711e      	strb	r6, [r3, #4]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004ca6:	304c      	adds	r0, #76	; 0x4c
 8004ca8:	f000 fbd5 	bl	8005456 <memset>
 8004cac:	4b0b      	ldr	r3, [pc, #44]	; (8004cdc <prvInitialiseNewTask.constprop.0+0xa4>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004cae:	0038      	movs	r0, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004cb0:	6523      	str	r3, [r4, #80]	; 0x50
 8004cb2:	4b0b      	ldr	r3, [pc, #44]	; (8004ce0 <prvInitialiseNewTask.constprop.0+0xa8>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004cb4:	9a01      	ldr	r2, [sp, #4]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004cb6:	6563      	str	r3, [r4, #84]	; 0x54
 8004cb8:	4b0a      	ldr	r3, [pc, #40]	; (8004ce4 <prvInitialiseNewTask.constprop.0+0xac>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004cba:	9900      	ldr	r1, [sp, #0]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004cbc:	65a3      	str	r3, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004cbe:	f000 fa21 	bl	8005104 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 8004cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004cc4:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8004cc6:	42b3      	cmp	r3, r6
 8004cc8:	d000      	beq.n	8004ccc <prvInitialiseNewTask.constprop.0+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004cca:	601c      	str	r4, [r3, #0]
}
 8004ccc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004cce:	0023      	movs	r3, r4
 8004cd0:	3334      	adds	r3, #52	; 0x34
 8004cd2:	7019      	strb	r1, [r3, #0]
 8004cd4:	e7cc      	b.n	8004c70 <prvInitialiseNewTask.constprop.0+0x38>
 8004cd6:	46c0      	nop			; (mov r8, r8)
 8004cd8:	3fffffff 	.word	0x3fffffff
 8004cdc:	080061cc 	.word	0x080061cc
 8004ce0:	080061ec 	.word	0x080061ec
 8004ce4:	080061ac 	.word	0x080061ac

08004ce8 <xTaskCreateStatic>:
	{
 8004ce8:	b570      	push	{r4, r5, r6, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004cee:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8004cf0:	2d00      	cmp	r5, #0
 8004cf2:	d101      	bne.n	8004cf8 <xTaskCreateStatic+0x10>
 8004cf4:	b672      	cpsid	i
 8004cf6:	e7fe      	b.n	8004cf6 <xTaskCreateStatic+0xe>
		configASSERT( pxTaskBuffer != NULL );
 8004cf8:	2c00      	cmp	r4, #0
 8004cfa:	d101      	bne.n	8004d00 <xTaskCreateStatic+0x18>
 8004cfc:	b672      	cpsid	i
 8004cfe:	e7fe      	b.n	8004cfe <xTaskCreateStatic+0x16>
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d00:	26b4      	movs	r6, #180	; 0xb4
 8004d02:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d04:	9e05      	ldr	r6, [sp, #20]
 8004d06:	2eb4      	cmp	r6, #180	; 0xb4
 8004d08:	d001      	beq.n	8004d0e <xTaskCreateStatic+0x26>
 8004d0a:	b672      	cpsid	i
 8004d0c:	e7fe      	b.n	8004d0c <xTaskCreateStatic+0x24>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d0e:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d10:	0025      	movs	r5, r4
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004d12:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d14:	2602      	movs	r6, #2
 8004d16:	35b1      	adds	r5, #177	; 0xb1
 8004d18:	702e      	strb	r6, [r5, #0]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d1a:	ad04      	add	r5, sp, #16
 8004d1c:	9501      	str	r5, [sp, #4]
 8004d1e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004d20:	9402      	str	r4, [sp, #8]
 8004d22:	9500      	str	r5, [sp, #0]
 8004d24:	f7ff ff88 	bl	8004c38 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d28:	0020      	movs	r0, r4
 8004d2a:	f7ff fe83 	bl	8004a34 <prvAddNewTaskToReadyList>
	}
 8004d2e:	9804      	ldr	r0, [sp, #16]
 8004d30:	b006      	add	sp, #24
 8004d32:	bd70      	pop	{r4, r5, r6, pc}

08004d34 <xTaskCreate>:
	{
 8004d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d36:	0007      	movs	r7, r0
 8004d38:	b087      	sub	sp, #28
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004d3a:	0090      	lsls	r0, r2, #2
	{
 8004d3c:	0016      	movs	r6, r2
 8004d3e:	9104      	str	r1, [sp, #16]
 8004d40:	9305      	str	r3, [sp, #20]
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004d42:	f000 faad 	bl	80052a0 <pvPortMalloc>
 8004d46:	1e05      	subs	r5, r0, #0
			if( pxStack != NULL )
 8004d48:	d01d      	beq.n	8004d86 <xTaskCreate+0x52>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004d4a:	20b4      	movs	r0, #180	; 0xb4
 8004d4c:	f000 faa8 	bl	80052a0 <pvPortMalloc>
 8004d50:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
 8004d52:	d015      	beq.n	8004d80 <xTaskCreate+0x4c>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004d54:	0003      	movs	r3, r0
 8004d56:	2200      	movs	r2, #0
 8004d58:	33b1      	adds	r3, #177	; 0xb1
					pxNewTCB->pxStack = pxStack;
 8004d5a:	6305      	str	r5, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004d5c:	701a      	strb	r2, [r3, #0]
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d60:	0032      	movs	r2, r6
 8004d62:	9301      	str	r3, [sp, #4]
 8004d64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d66:	9904      	ldr	r1, [sp, #16]
 8004d68:	9002      	str	r0, [sp, #8]
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	0038      	movs	r0, r7
 8004d6e:	9b05      	ldr	r3, [sp, #20]
 8004d70:	f7ff ff62 	bl	8004c38 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d74:	0020      	movs	r0, r4
 8004d76:	f7ff fe5d 	bl	8004a34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d7a:	2001      	movs	r0, #1
	}
 8004d7c:	b007      	add	sp, #28
 8004d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
 8004d80:	0028      	movs	r0, r5
 8004d82:	f000 fb0f 	bl	80053a4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d86:	2001      	movs	r0, #1
 8004d88:	4240      	negs	r0, r0
		return xReturn;
 8004d8a:	e7f7      	b.n	8004d7c <xTaskCreate+0x48>

08004d8c <vTaskStartScheduler>:
{
 8004d8c:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004d8e:	2400      	movs	r4, #0
{
 8004d90:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004d92:	aa07      	add	r2, sp, #28
 8004d94:	a906      	add	r1, sp, #24
 8004d96:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004d98:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004d9a:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004d9c:	f7fd fb34 	bl	8002408 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004da0:	9b05      	ldr	r3, [sp, #20]
 8004da2:	9a07      	ldr	r2, [sp, #28]
 8004da4:	9302      	str	r3, [sp, #8]
 8004da6:	9b06      	ldr	r3, [sp, #24]
 8004da8:	490d      	ldr	r1, [pc, #52]	; (8004de0 <vTaskStartScheduler+0x54>)
 8004daa:	9301      	str	r3, [sp, #4]
 8004dac:	480d      	ldr	r0, [pc, #52]	; (8004de4 <vTaskStartScheduler+0x58>)
 8004dae:	0023      	movs	r3, r4
 8004db0:	9400      	str	r4, [sp, #0]
 8004db2:	f7ff ff99 	bl	8004ce8 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8004db6:	42a0      	cmp	r0, r4
 8004db8:	d010      	beq.n	8004ddc <vTaskStartScheduler+0x50>
		portDISABLE_INTERRUPTS();
 8004dba:	b672      	cpsid	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004dbc:	4b0a      	ldr	r3, [pc, #40]	; (8004de8 <vTaskStartScheduler+0x5c>)
 8004dbe:	4a0b      	ldr	r2, [pc, #44]	; (8004dec <vTaskStartScheduler+0x60>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	334c      	adds	r3, #76	; 0x4c
 8004dc4:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	4b09      	ldr	r3, [pc, #36]	; (8004df0 <vTaskStartScheduler+0x64>)
 8004dca:	4252      	negs	r2, r2
 8004dcc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004dce:	4b09      	ldr	r3, [pc, #36]	; (8004df4 <vTaskStartScheduler+0x68>)
 8004dd0:	3202      	adds	r2, #2
 8004dd2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004dd4:	4b08      	ldr	r3, [pc, #32]	; (8004df8 <vTaskStartScheduler+0x6c>)
 8004dd6:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8004dd8:	f000 f9a6 	bl	8005128 <xPortStartScheduler>
}
 8004ddc:	b008      	add	sp, #32
 8004dde:	bd10      	pop	{r4, pc}
 8004de0:	080061a6 	.word	0x080061a6
 8004de4:	08004be5 	.word	0x08004be5
 8004de8:	200004d4 	.word	0x200004d4
 8004dec:	20000014 	.word	0x20000014
 8004df0:	200005ac 	.word	0x200005ac
 8004df4:	200005c8 	.word	0x200005c8
 8004df8:	200005f4 	.word	0x200005f4

08004dfc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004dfc:	4a02      	ldr	r2, [pc, #8]	; (8004e08 <vTaskSuspendAll+0xc>)
 8004dfe:	6813      	ldr	r3, [r2, #0]
 8004e00:	3301      	adds	r3, #1
 8004e02:	6013      	str	r3, [r2, #0]
}
 8004e04:	4770      	bx	lr
 8004e06:	46c0      	nop			; (mov r8, r8)
 8004e08:	20000578 	.word	0x20000578

08004e0c <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e0c:	4b34      	ldr	r3, [pc, #208]	; (8004ee0 <xTaskIncrementTick+0xd4>)
{
 8004e0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d15e      	bne.n	8004ed4 <xTaskIncrementTick+0xc8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e16:	4b33      	ldr	r3, [pc, #204]	; (8004ee4 <xTaskIncrementTick+0xd8>)
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	3201      	adds	r2, #1
 8004e1c:	9200      	str	r2, [sp, #0]
		xTickCount = xConstTickCount;
 8004e1e:	601a      	str	r2, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e20:	2a00      	cmp	r2, #0
 8004e22:	d111      	bne.n	8004e48 <xTaskIncrementTick+0x3c>
			taskSWITCH_DELAYED_LISTS();
 8004e24:	4b30      	ldr	r3, [pc, #192]	; (8004ee8 <xTaskIncrementTick+0xdc>)
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	6812      	ldr	r2, [r2, #0]
 8004e2a:	2a00      	cmp	r2, #0
 8004e2c:	d001      	beq.n	8004e32 <xTaskIncrementTick+0x26>
 8004e2e:	b672      	cpsid	i
 8004e30:	e7fe      	b.n	8004e30 <xTaskIncrementTick+0x24>
 8004e32:	4a2e      	ldr	r2, [pc, #184]	; (8004eec <xTaskIncrementTick+0xe0>)
 8004e34:	6819      	ldr	r1, [r3, #0]
 8004e36:	6810      	ldr	r0, [r2, #0]
 8004e38:	6018      	str	r0, [r3, #0]
 8004e3a:	6011      	str	r1, [r2, #0]
 8004e3c:	4a2c      	ldr	r2, [pc, #176]	; (8004ef0 <xTaskIncrementTick+0xe4>)
 8004e3e:	6813      	ldr	r3, [r2, #0]
 8004e40:	3301      	adds	r3, #1
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	f7ff fea2 	bl	8004b8c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e48:	4e2a      	ldr	r6, [pc, #168]	; (8004ef4 <xTaskIncrementTick+0xe8>)
 8004e4a:	9a00      	ldr	r2, [sp, #0]
 8004e4c:	6833      	ldr	r3, [r6, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8004e4e:	2400      	movs	r4, #0
 8004e50:	4f29      	ldr	r7, [pc, #164]	; (8004ef8 <xTaskIncrementTick+0xec>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d935      	bls.n	8004ec2 <xTaskIncrementTick+0xb6>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e5a:	2314      	movs	r3, #20
 8004e5c:	4353      	muls	r3, r2
 8004e5e:	4a27      	ldr	r2, [pc, #156]	; (8004efc <xTaskIncrementTick+0xf0>)
 8004e60:	58d3      	ldr	r3, [r2, r3]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d900      	bls.n	8004e68 <xTaskIncrementTick+0x5c>
				xSwitchRequired = pdTRUE;
 8004e66:	2401      	movs	r4, #1
		if( xYieldPending != pdFALSE )
 8004e68:	4b25      	ldr	r3, [pc, #148]	; (8004f00 <xTaskIncrementTick+0xf4>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d000      	beq.n	8004e72 <xTaskIncrementTick+0x66>
			xSwitchRequired = pdTRUE;
 8004e70:	2401      	movs	r4, #1
}
 8004e72:	0020      	movs	r0, r4
 8004e74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e76:	681b      	ldr	r3, [r3, #0]
					if( xConstTickCount < xItemValue )
 8004e78:	9a00      	ldr	r2, [sp, #0]
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	68dd      	ldr	r5, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e7e:	686b      	ldr	r3, [r5, #4]
					if( xConstTickCount < xItemValue )
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d325      	bcc.n	8004ed0 <xTaskIncrementTick+0xc4>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e84:	1d2b      	adds	r3, r5, #4
 8004e86:	0018      	movs	r0, r3
 8004e88:	9301      	str	r3, [sp, #4]
 8004e8a:	f7ff fdc2 	bl	8004a12 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e8e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d003      	beq.n	8004e9c <xTaskIncrementTick+0x90>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e94:	0028      	movs	r0, r5
 8004e96:	3018      	adds	r0, #24
 8004e98:	f7ff fdbb 	bl	8004a12 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e9c:	4b19      	ldr	r3, [pc, #100]	; (8004f04 <xTaskIncrementTick+0xf8>)
 8004e9e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	4290      	cmp	r0, r2
 8004ea4:	d900      	bls.n	8004ea8 <xTaskIncrementTick+0x9c>
 8004ea6:	6018      	str	r0, [r3, #0]
 8004ea8:	2314      	movs	r3, #20
 8004eaa:	4358      	muls	r0, r3
 8004eac:	4b13      	ldr	r3, [pc, #76]	; (8004efc <xTaskIncrementTick+0xf0>)
 8004eae:	1d29      	adds	r1, r5, #4
 8004eb0:	1818      	adds	r0, r3, r0
 8004eb2:	f7ff fd8b 	bl	80049cc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d300      	bcc.n	8004ec2 <xTaskIncrementTick+0xb6>
							xSwitchRequired = pdTRUE;
 8004ec0:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ec2:	4b09      	ldr	r3, [pc, #36]	; (8004ee8 <xTaskIncrementTick+0xdc>)
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	6812      	ldr	r2, [r2, #0]
 8004ec8:	2a00      	cmp	r2, #0
 8004eca:	d1d4      	bne.n	8004e76 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ecc:	2301      	movs	r3, #1
 8004ece:	425b      	negs	r3, r3
						xNextTaskUnblockTime = xItemValue;
 8004ed0:	6033      	str	r3, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004ed2:	e7c0      	b.n	8004e56 <xTaskIncrementTick+0x4a>
		++uxPendedTicks;
 8004ed4:	4a0c      	ldr	r2, [pc, #48]	; (8004f08 <xTaskIncrementTick+0xfc>)
BaseType_t xSwitchRequired = pdFALSE;
 8004ed6:	2400      	movs	r4, #0
		++uxPendedTicks;
 8004ed8:	6813      	ldr	r3, [r2, #0]
 8004eda:	3301      	adds	r3, #1
 8004edc:	6013      	str	r3, [r2, #0]
 8004ede:	e7c3      	b.n	8004e68 <xTaskIncrementTick+0x5c>
 8004ee0:	20000578 	.word	0x20000578
 8004ee4:	200005f4 	.word	0x200005f4
 8004ee8:	200004d8 	.word	0x200004d8
 8004eec:	200004dc 	.word	0x200004dc
 8004ef0:	200005b0 	.word	0x200005b0
 8004ef4:	200005ac 	.word	0x200005ac
 8004ef8:	200004d4 	.word	0x200004d4
 8004efc:	200004e0 	.word	0x200004e0
 8004f00:	200005f8 	.word	0x200005f8
 8004f04:	20000580 	.word	0x20000580
 8004f08:	20000574 	.word	0x20000574

08004f0c <xTaskResumeAll>:
{
 8004f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 8004f0e:	4c2b      	ldr	r4, [pc, #172]	; (8004fbc <xTaskResumeAll+0xb0>)
 8004f10:	6823      	ldr	r3, [r4, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <xTaskResumeAll+0xe>
 8004f16:	b672      	cpsid	i
 8004f18:	e7fe      	b.n	8004f18 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 8004f1a:	f000 f943 	bl	80051a4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	3b01      	subs	r3, #1
 8004f22:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f24:	6824      	ldr	r4, [r4, #0]
 8004f26:	2c00      	cmp	r4, #0
 8004f28:	d004      	beq.n	8004f34 <xTaskResumeAll+0x28>
BaseType_t xAlreadyYielded = pdFALSE;
 8004f2a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004f2c:	f000 f946 	bl	80051bc <vPortExitCritical>
}
 8004f30:	0020      	movs	r0, r4
 8004f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004f34:	4b22      	ldr	r3, [pc, #136]	; (8004fc0 <xTaskResumeAll+0xb4>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d0f6      	beq.n	8004f2a <xTaskResumeAll+0x1e>
					prvAddTaskToReadyList( pxTCB );
 8004f3c:	2614      	movs	r6, #20
						xYieldPending = pdTRUE;
 8004f3e:	2701      	movs	r7, #1
 8004f40:	e01d      	b.n	8004f7e <xTaskResumeAll+0x72>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f46:	0020      	movs	r0, r4
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f48:	1d25      	adds	r5, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f4a:	3018      	adds	r0, #24
 8004f4c:	f7ff fd61 	bl	8004a12 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f50:	0028      	movs	r0, r5
 8004f52:	f7ff fd5e 	bl	8004a12 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f56:	4b1b      	ldr	r3, [pc, #108]	; (8004fc4 <xTaskResumeAll+0xb8>)
 8004f58:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	4290      	cmp	r0, r2
 8004f5e:	d900      	bls.n	8004f62 <xTaskResumeAll+0x56>
 8004f60:	6018      	str	r0, [r3, #0]
 8004f62:	4370      	muls	r0, r6
 8004f64:	4b18      	ldr	r3, [pc, #96]	; (8004fc8 <xTaskResumeAll+0xbc>)
 8004f66:	0029      	movs	r1, r5
 8004f68:	18c0      	adds	r0, r0, r3
 8004f6a:	f7ff fd2f 	bl	80049cc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f6e:	4b17      	ldr	r3, [pc, #92]	; (8004fcc <xTaskResumeAll+0xc0>)
 8004f70:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d301      	bcc.n	8004f7e <xTaskResumeAll+0x72>
						xYieldPending = pdTRUE;
 8004f7a:	4b15      	ldr	r3, [pc, #84]	; (8004fd0 <xTaskResumeAll+0xc4>)
 8004f7c:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f7e:	4b15      	ldr	r3, [pc, #84]	; (8004fd4 <xTaskResumeAll+0xc8>)
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	2a00      	cmp	r2, #0
 8004f84:	d1dd      	bne.n	8004f42 <xTaskResumeAll+0x36>
				if( pxTCB != NULL )
 8004f86:	2c00      	cmp	r4, #0
 8004f88:	d001      	beq.n	8004f8e <xTaskResumeAll+0x82>
					prvResetNextTaskUnblockTime();
 8004f8a:	f7ff fdff 	bl	8004b8c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004f8e:	4d12      	ldr	r5, [pc, #72]	; (8004fd8 <xTaskResumeAll+0xcc>)
 8004f90:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004f92:	2c00      	cmp	r4, #0
 8004f94:	d00a      	beq.n	8004fac <xTaskResumeAll+0xa0>
								xYieldPending = pdTRUE;
 8004f96:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 8004f98:	f7ff ff38 	bl	8004e0c <xTaskIncrementTick>
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	d001      	beq.n	8004fa4 <xTaskResumeAll+0x98>
								xYieldPending = pdTRUE;
 8004fa0:	4b0b      	ldr	r3, [pc, #44]	; (8004fd0 <xTaskResumeAll+0xc4>)
 8004fa2:	601e      	str	r6, [r3, #0]
							--uxPendedCounts;
 8004fa4:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004fa6:	2c00      	cmp	r4, #0
 8004fa8:	d1f6      	bne.n	8004f98 <xTaskResumeAll+0x8c>
						uxPendedTicks = 0;
 8004faa:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8004fac:	4b08      	ldr	r3, [pc, #32]	; (8004fd0 <xTaskResumeAll+0xc4>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0ba      	beq.n	8004f2a <xTaskResumeAll+0x1e>
					taskYIELD_IF_USING_PREEMPTION();
 8004fb4:	f000 f8ea 	bl	800518c <vPortYield>
						xAlreadyYielded = pdTRUE;
 8004fb8:	2401      	movs	r4, #1
 8004fba:	e7b7      	b.n	8004f2c <xTaskResumeAll+0x20>
 8004fbc:	20000578 	.word	0x20000578
 8004fc0:	2000056c 	.word	0x2000056c
 8004fc4:	20000580 	.word	0x20000580
 8004fc8:	200004e0 	.word	0x200004e0
 8004fcc:	200004d4 	.word	0x200004d4
 8004fd0:	200005f8 	.word	0x200005f8
 8004fd4:	200005b4 	.word	0x200005b4
 8004fd8:	20000574 	.word	0x20000574

08004fdc <vTaskDelay>:
	{
 8004fdc:	b570      	push	{r4, r5, r6, lr}
 8004fde:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004fe0:	d102      	bne.n	8004fe8 <vTaskDelay+0xc>
			portYIELD_WITHIN_API();
 8004fe2:	f000 f8d3 	bl	800518c <vPortYield>
	}
 8004fe6:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8004fe8:	4b08      	ldr	r3, [pc, #32]	; (800500c <vTaskDelay+0x30>)
 8004fea:	681d      	ldr	r5, [r3, #0]
 8004fec:	2d00      	cmp	r5, #0
 8004fee:	d001      	beq.n	8004ff4 <vTaskDelay+0x18>
 8004ff0:	b672      	cpsid	i
 8004ff2:	e7fe      	b.n	8004ff2 <vTaskDelay+0x16>
			vTaskSuspendAll();
 8004ff4:	f7ff ff02 	bl	8004dfc <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ff8:	0029      	movs	r1, r5
 8004ffa:	0020      	movs	r0, r4
 8004ffc:	f7ff fd8e 	bl	8004b1c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8005000:	f7ff ff84 	bl	8004f0c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8005004:	2800      	cmp	r0, #0
 8005006:	d0ec      	beq.n	8004fe2 <vTaskDelay+0x6>
 8005008:	e7ed      	b.n	8004fe6 <vTaskDelay+0xa>
 800500a:	46c0      	nop			; (mov r8, r8)
 800500c:	20000578 	.word	0x20000578

08005010 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005010:	4b17      	ldr	r3, [pc, #92]	; (8005070 <vTaskSwitchContext+0x60>)
{
 8005012:	b530      	push	{r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	4b17      	ldr	r3, [pc, #92]	; (8005074 <vTaskSwitchContext+0x64>)
 8005018:	2a00      	cmp	r2, #0
 800501a:	d002      	beq.n	8005022 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800501c:	2201      	movs	r2, #1
 800501e:	601a      	str	r2, [r3, #0]
}
 8005020:	bd30      	pop	{r4, r5, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005022:	2514      	movs	r5, #20
 8005024:	4814      	ldr	r0, [pc, #80]	; (8005078 <vTaskSwitchContext+0x68>)
		xYieldPending = pdFALSE;
 8005026:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005028:	6802      	ldr	r2, [r0, #0]
 800502a:	4914      	ldr	r1, [pc, #80]	; (800507c <vTaskSwitchContext+0x6c>)
 800502c:	002b      	movs	r3, r5
 800502e:	4353      	muls	r3, r2
 8005030:	585c      	ldr	r4, [r3, r1]
 8005032:	2c00      	cmp	r4, #0
 8005034:	d016      	beq.n	8005064 <vTaskSwitchContext+0x54>
 8005036:	18cc      	adds	r4, r1, r3
 8005038:	6865      	ldr	r5, [r4, #4]
 800503a:	3308      	adds	r3, #8
 800503c:	686d      	ldr	r5, [r5, #4]
 800503e:	185b      	adds	r3, r3, r1
 8005040:	6065      	str	r5, [r4, #4]
 8005042:	429d      	cmp	r5, r3
 8005044:	d101      	bne.n	800504a <vTaskSwitchContext+0x3a>
 8005046:	686b      	ldr	r3, [r5, #4]
 8005048:	6063      	str	r3, [r4, #4]
 800504a:	2314      	movs	r3, #20
 800504c:	4353      	muls	r3, r2
 800504e:	18c9      	adds	r1, r1, r3
 8005050:	684b      	ldr	r3, [r1, #4]
 8005052:	68d9      	ldr	r1, [r3, #12]
 8005054:	4b0a      	ldr	r3, [pc, #40]	; (8005080 <vTaskSwitchContext+0x70>)
 8005056:	6019      	str	r1, [r3, #0]
 8005058:	6002      	str	r2, [r0, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a09      	ldr	r2, [pc, #36]	; (8005084 <vTaskSwitchContext+0x74>)
 800505e:	334c      	adds	r3, #76	; 0x4c
 8005060:	6013      	str	r3, [r2, #0]
}
 8005062:	e7dd      	b.n	8005020 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005064:	2a00      	cmp	r2, #0
 8005066:	d101      	bne.n	800506c <vTaskSwitchContext+0x5c>
 8005068:	b672      	cpsid	i
 800506a:	e7fe      	b.n	800506a <vTaskSwitchContext+0x5a>
 800506c:	3a01      	subs	r2, #1
 800506e:	e7dd      	b.n	800502c <vTaskSwitchContext+0x1c>
 8005070:	20000578 	.word	0x20000578
 8005074:	200005f8 	.word	0x200005f8
 8005078:	20000580 	.word	0x20000580
 800507c:	200004e0 	.word	0x200004e0
 8005080:	200004d4 	.word	0x200004d4
 8005084:	20000014 	.word	0x20000014

08005088 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8005088:	4b05      	ldr	r3, [pc, #20]	; (80050a0 <xTaskGetSchedulerState+0x18>)
			xReturn = taskSCHEDULER_NOT_STARTED;
 800508a:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d004      	beq.n	800509c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005092:	4b04      	ldr	r3, [pc, #16]	; (80050a4 <xTaskGetSchedulerState+0x1c>)
 8005094:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8005096:	4243      	negs	r3, r0
 8005098:	4158      	adcs	r0, r3
 800509a:	0040      	lsls	r0, r0, #1
	}
 800509c:	4770      	bx	lr
 800509e:	46c0      	nop			; (mov r8, r8)
 80050a0:	200005c8 	.word	0x200005c8
 80050a4:	20000578 	.word	0x20000578

080050a8 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 80050a8:	2300      	movs	r3, #0
{
 80050aa:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 80050ac:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80050ae:	4b06      	ldr	r3, [pc, #24]	; (80050c8 <prvTaskExitError+0x20>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	3301      	adds	r3, #1
 80050b4:	d001      	beq.n	80050ba <prvTaskExitError+0x12>
 80050b6:	b672      	cpsid	i
 80050b8:	e7fe      	b.n	80050b8 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
 80050ba:	b672      	cpsid	i
	while( ulDummy == 0 )
 80050bc:	9b01      	ldr	r3, [sp, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d0fc      	beq.n	80050bc <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050c2:	b002      	add	sp, #8
 80050c4:	4770      	bx	lr
 80050c6:	46c0      	nop			; (mov r8, r8)
 80050c8:	20000010 	.word	0x20000010
 80050cc:	00000000 	.word	0x00000000

080050d0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80050d0:	4a0b      	ldr	r2, [pc, #44]	; (8005100 <pxCurrentTCBConst2>)
 80050d2:	6813      	ldr	r3, [r2, #0]
 80050d4:	6818      	ldr	r0, [r3, #0]
 80050d6:	3020      	adds	r0, #32
 80050d8:	f380 8809 	msr	PSP, r0
 80050dc:	2002      	movs	r0, #2
 80050de:	f380 8814 	msr	CONTROL, r0
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80050e8:	46ae      	mov	lr, r5
 80050ea:	bc08      	pop	{r3}
 80050ec:	bc04      	pop	{r2}
 80050ee:	b662      	cpsie	i
 80050f0:	4718      	bx	r3
 80050f2:	46c0      	nop			; (mov r8, r8)
 80050f4:	46c0      	nop			; (mov r8, r8)
 80050f6:	46c0      	nop			; (mov r8, r8)
 80050f8:	46c0      	nop			; (mov r8, r8)
 80050fa:	46c0      	nop			; (mov r8, r8)
 80050fc:	46c0      	nop			; (mov r8, r8)
 80050fe:	46c0      	nop			; (mov r8, r8)

08005100 <pxCurrentTCBConst2>:
 8005100:	200004d4 	.word	0x200004d4

08005104 <pxPortInitialiseStack>:
{
 8005104:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005106:	2480      	movs	r4, #128	; 0x80
 8005108:	1f03      	subs	r3, r0, #4
 800510a:	0464      	lsls	r4, r4, #17
 800510c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800510e:	3b04      	subs	r3, #4
 8005110:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005112:	4903      	ldr	r1, [pc, #12]	; (8005120 <pxPortInitialiseStack+0x1c>)
 8005114:	3b04      	subs	r3, #4
 8005116:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005118:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 800511a:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800511c:	601a      	str	r2, [r3, #0]
}
 800511e:	bd10      	pop	{r4, pc}
 8005120:	080050a9 	.word	0x080050a9

08005124 <SVC_Handler>:
}
 8005124:	4770      	bx	lr
	...

08005128 <xPortStartScheduler>:
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8005128:	22ff      	movs	r2, #255	; 0xff
 800512a:	4b12      	ldr	r3, [pc, #72]	; (8005174 <xPortStartScheduler+0x4c>)
 800512c:	0412      	lsls	r2, r2, #16
 800512e:	6819      	ldr	r1, [r3, #0]
{
 8005130:	b570      	push	{r4, r5, r6, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8005132:	430a      	orrs	r2, r1
 8005134:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8005136:	22ff      	movs	r2, #255	; 0xff
 8005138:	6819      	ldr	r1, [r3, #0]
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 800513a:	2400      	movs	r4, #0
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800513c:	0612      	lsls	r2, r2, #24
 800513e:	430a      	orrs	r2, r1
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005140:	21fa      	movs	r1, #250	; 0xfa
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8005142:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL = 0UL;
 8005144:	4d0c      	ldr	r5, [pc, #48]	; (8005178 <xPortStartScheduler+0x50>)
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8005146:	4b0d      	ldr	r3, [pc, #52]	; (800517c <xPortStartScheduler+0x54>)
	portNVIC_SYSTICK_CTRL = 0UL;
 8005148:	602c      	str	r4, [r5, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 800514a:	601c      	str	r4, [r3, #0]
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800514c:	4b0c      	ldr	r3, [pc, #48]	; (8005180 <xPortStartScheduler+0x58>)
 800514e:	0089      	lsls	r1, r1, #2
 8005150:	6818      	ldr	r0, [r3, #0]
 8005152:	f7fa ffff 	bl	8000154 <__udivsi3>
 8005156:	4b0b      	ldr	r3, [pc, #44]	; (8005184 <xPortStartScheduler+0x5c>)
 8005158:	3801      	subs	r0, #1
 800515a:	6018      	str	r0, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800515c:	2307      	movs	r3, #7
 800515e:	602b      	str	r3, [r5, #0]
	uxCriticalNesting = 0;
 8005160:	4b09      	ldr	r3, [pc, #36]	; (8005188 <xPortStartScheduler+0x60>)
 8005162:	601c      	str	r4, [r3, #0]
	vPortStartFirstTask();
 8005164:	f7ff ffb4 	bl	80050d0 <vPortStartFirstTask>
	vTaskSwitchContext();
 8005168:	f7ff ff52 	bl	8005010 <vTaskSwitchContext>
	prvTaskExitError();
 800516c:	f7ff ff9c 	bl	80050a8 <prvTaskExitError>
}
 8005170:	0020      	movs	r0, r4
 8005172:	bd70      	pop	{r4, r5, r6, pc}
 8005174:	e000ed20 	.word	0xe000ed20
 8005178:	e000e010 	.word	0xe000e010
 800517c:	e000e018 	.word	0xe000e018
 8005180:	20000004 	.word	0x20000004
 8005184:	e000e014 	.word	0xe000e014
 8005188:	20000010 	.word	0x20000010

0800518c <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800518c:	2280      	movs	r2, #128	; 0x80
 800518e:	4b04      	ldr	r3, [pc, #16]	; (80051a0 <vPortYield+0x14>)
 8005190:	0552      	lsls	r2, r2, #21
 8005192:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005194:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005198:	f3bf 8f6f 	isb	sy
}
 800519c:	4770      	bx	lr
 800519e:	46c0      	nop			; (mov r8, r8)
 80051a0:	e000ed04 	.word	0xe000ed04

080051a4 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 80051a4:	b672      	cpsid	i
    uxCriticalNesting++;
 80051a6:	4a04      	ldr	r2, [pc, #16]	; (80051b8 <vPortEnterCritical+0x14>)
 80051a8:	6813      	ldr	r3, [r2, #0]
 80051aa:	3301      	adds	r3, #1
 80051ac:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
 80051ae:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80051b2:	f3bf 8f6f 	isb	sy
}
 80051b6:	4770      	bx	lr
 80051b8:	20000010 	.word	0x20000010

080051bc <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80051bc:	4a05      	ldr	r2, [pc, #20]	; (80051d4 <vPortExitCritical+0x18>)
 80051be:	6813      	ldr	r3, [r2, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <vPortExitCritical+0xc>
 80051c4:	b672      	cpsid	i
 80051c6:	e7fe      	b.n	80051c6 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 80051c8:	3b01      	subs	r3, #1
 80051ca:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d100      	bne.n	80051d2 <vPortExitCritical+0x16>
        portENABLE_INTERRUPTS();
 80051d0:	b662      	cpsie	i
}
 80051d2:	4770      	bx	lr
 80051d4:	20000010 	.word	0x20000010

080051d8 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 80051d8:	f3ef 8010 	mrs	r0, PRIMASK
 80051dc:	b672      	cpsid	i
 80051de:	4770      	bx	lr

080051e0 <vClearInterruptMaskFromISR>:
	__asm volatile(
 80051e0:	f380 8810 	msr	PRIMASK, r0
 80051e4:	4770      	bx	lr
	...

080051f0 <PendSV_Handler>:
	__asm volatile
 80051f0:	f3ef 8009 	mrs	r0, PSP
 80051f4:	4b0e      	ldr	r3, [pc, #56]	; (8005230 <pxCurrentTCBConst>)
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	3820      	subs	r0, #32
 80051fa:	6010      	str	r0, [r2, #0]
 80051fc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80051fe:	4644      	mov	r4, r8
 8005200:	464d      	mov	r5, r9
 8005202:	4656      	mov	r6, sl
 8005204:	465f      	mov	r7, fp
 8005206:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005208:	b508      	push	{r3, lr}
 800520a:	b672      	cpsid	i
 800520c:	f7ff ff00 	bl	8005010 <vTaskSwitchContext>
 8005210:	b662      	cpsie	i
 8005212:	bc0c      	pop	{r2, r3}
 8005214:	6811      	ldr	r1, [r2, #0]
 8005216:	6808      	ldr	r0, [r1, #0]
 8005218:	3010      	adds	r0, #16
 800521a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800521c:	46a0      	mov	r8, r4
 800521e:	46a9      	mov	r9, r5
 8005220:	46b2      	mov	sl, r6
 8005222:	46bb      	mov	fp, r7
 8005224:	f380 8809 	msr	PSP, r0
 8005228:	3820      	subs	r0, #32
 800522a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800522c:	4718      	bx	r3
 800522e:	46c0      	nop			; (mov r8, r8)

08005230 <pxCurrentTCBConst>:
 8005230:	200004d4 	.word	0x200004d4

08005234 <xPortSysTickHandler>:
{
 8005234:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8005236:	f7ff ffcf 	bl	80051d8 <ulSetInterruptMaskFromISR>
 800523a:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800523c:	f7ff fde6 	bl	8004e0c <xTaskIncrementTick>
 8005240:	2800      	cmp	r0, #0
 8005242:	d003      	beq.n	800524c <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8005244:	2280      	movs	r2, #128	; 0x80
 8005246:	4b03      	ldr	r3, [pc, #12]	; (8005254 <xPortSysTickHandler+0x20>)
 8005248:	0552      	lsls	r2, r2, #21
 800524a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800524c:	0020      	movs	r0, r4
 800524e:	f7ff ffc7 	bl	80051e0 <vClearInterruptMaskFromISR>
}
 8005252:	bd10      	pop	{r4, pc}
 8005254:	e000ed04 	.word	0xe000ed04

08005258 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005258:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800525a:	4b0f      	ldr	r3, [pc, #60]	; (8005298 <prvInsertBlockIntoFreeList+0x40>)
 800525c:	001a      	movs	r2, r3
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4283      	cmp	r3, r0
 8005262:	d3fb      	bcc.n	800525c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005264:	6854      	ldr	r4, [r2, #4]
 8005266:	1911      	adds	r1, r2, r4
 8005268:	4288      	cmp	r0, r1
 800526a:	d103      	bne.n	8005274 <prvInsertBlockIntoFreeList+0x1c>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800526c:	6841      	ldr	r1, [r0, #4]
 800526e:	0010      	movs	r0, r2
 8005270:	1909      	adds	r1, r1, r4
 8005272:	6051      	str	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005274:	6841      	ldr	r1, [r0, #4]
 8005276:	1844      	adds	r4, r0, r1
 8005278:	42a3      	cmp	r3, r4
 800527a:	d107      	bne.n	800528c <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800527c:	4c07      	ldr	r4, [pc, #28]	; (800529c <prvInsertBlockIntoFreeList+0x44>)
 800527e:	6824      	ldr	r4, [r4, #0]
 8005280:	42a3      	cmp	r3, r4
 8005282:	d003      	beq.n	800528c <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005284:	685c      	ldr	r4, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005286:	681b      	ldr	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005288:	1861      	adds	r1, r4, r1
 800528a:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800528c:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800528e:	4290      	cmp	r0, r2
 8005290:	d000      	beq.n	8005294 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005292:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005294:	bd10      	pop	{r4, pc}
 8005296:	46c0      	nop			; (mov r8, r8)
 8005298:	2000120c 	.word	0x2000120c
 800529c:	200005fc 	.word	0x200005fc

080052a0 <pvPortMalloc>:
{
 80052a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a2:	0004      	movs	r4, r0
	vTaskSuspendAll();
 80052a4:	f7ff fdaa 	bl	8004dfc <vTaskSuspendAll>
		if( pxEnd == NULL )
 80052a8:	4a38      	ldr	r2, [pc, #224]	; (800538c <pvPortMalloc+0xec>)
 80052aa:	4839      	ldr	r0, [pc, #228]	; (8005390 <pvPortMalloc+0xf0>)
 80052ac:	6813      	ldr	r3, [r2, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d11e      	bne.n	80052f0 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 80052b2:	4938      	ldr	r1, [pc, #224]	; (8005394 <pvPortMalloc+0xf4>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80052b4:	3307      	adds	r3, #7
 80052b6:	4219      	tst	r1, r3
 80052b8:	d044      	beq.n	8005344 <pvPortMalloc+0xa4>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80052ba:	18cd      	adds	r5, r1, r3
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052bc:	439d      	bics	r5, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80052be:	23c0      	movs	r3, #192	; 0xc0
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	18c9      	adds	r1, r1, r3
 80052c4:	1b4b      	subs	r3, r1, r5
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052c6:	0029      	movs	r1, r5
	xStart.xBlockSize = ( size_t ) 0;
 80052c8:	2500      	movs	r5, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80052ca:	4e33      	ldr	r6, [pc, #204]	; (8005398 <pvPortMalloc+0xf8>)
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80052cc:	18cb      	adds	r3, r1, r3
	xStart.xBlockSize = ( size_t ) 0;
 80052ce:	6075      	str	r5, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80052d0:	6031      	str	r1, [r6, #0]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052d2:	2607      	movs	r6, #7
	uxAddress -= xHeapStructSize;
 80052d4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052d6:	43b3      	bics	r3, r6
	pxEnd->pxNextFreeBlock = NULL;
 80052d8:	601d      	str	r5, [r3, #0]
	pxEnd->xBlockSize = 0;
 80052da:	605d      	str	r5, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80052dc:	1a5d      	subs	r5, r3, r1
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80052de:	c128      	stmia	r1!, {r3, r5}
	pxEnd = ( void * ) uxAddress;
 80052e0:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052e2:	4b2e      	ldr	r3, [pc, #184]	; (800539c <pvPortMalloc+0xfc>)
 80052e4:	601d      	str	r5, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052e6:	4b2e      	ldr	r3, [pc, #184]	; (80053a0 <pvPortMalloc+0x100>)
 80052e8:	601d      	str	r5, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80052ea:	2380      	movs	r3, #128	; 0x80
 80052ec:	061b      	lsls	r3, r3, #24
 80052ee:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80052f0:	6806      	ldr	r6, [r0, #0]
 80052f2:	4234      	tst	r4, r6
 80052f4:	d145      	bne.n	8005382 <pvPortMalloc+0xe2>
			if( xWantedSize > 0 )
 80052f6:	2c00      	cmp	r4, #0
 80052f8:	d043      	beq.n	8005382 <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 80052fa:	0023      	movs	r3, r4
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052fc:	2107      	movs	r1, #7
				xWantedSize += xHeapStructSize;
 80052fe:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005300:	420b      	tst	r3, r1
 8005302:	d001      	beq.n	8005308 <pvPortMalloc+0x68>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005304:	438b      	bics	r3, r1
 8005306:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005308:	2b00      	cmp	r3, #0
 800530a:	d03a      	beq.n	8005382 <pvPortMalloc+0xe2>
 800530c:	4924      	ldr	r1, [pc, #144]	; (80053a0 <pvPortMalloc+0x100>)
 800530e:	680d      	ldr	r5, [r1, #0]
 8005310:	429d      	cmp	r5, r3
 8005312:	d336      	bcc.n	8005382 <pvPortMalloc+0xe2>
				pxBlock = xStart.pxNextFreeBlock;
 8005314:	4920      	ldr	r1, [pc, #128]	; (8005398 <pvPortMalloc+0xf8>)
 8005316:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005318:	6860      	ldr	r0, [r4, #4]
 800531a:	4298      	cmp	r0, r3
 800531c:	d203      	bcs.n	8005326 <pvPortMalloc+0x86>
 800531e:	6827      	ldr	r7, [r4, #0]
 8005320:	46bc      	mov	ip, r7
 8005322:	2f00      	cmp	r7, #0
 8005324:	d111      	bne.n	800534a <pvPortMalloc+0xaa>
				if( pxBlock != pxEnd )
 8005326:	6812      	ldr	r2, [r2, #0]
 8005328:	42a2      	cmp	r2, r4
 800532a:	d02a      	beq.n	8005382 <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800532c:	680a      	ldr	r2, [r1, #0]
 800532e:	0017      	movs	r7, r2
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005330:	6822      	ldr	r2, [r4, #0]
 8005332:	600a      	str	r2, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005334:	1ac2      	subs	r2, r0, r3
 8005336:	2a10      	cmp	r2, #16
 8005338:	d90e      	bls.n	8005358 <pvPortMalloc+0xb8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800533a:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800533c:	0741      	lsls	r1, r0, #29
 800533e:	d007      	beq.n	8005350 <pvPortMalloc+0xb0>
 8005340:	b672      	cpsid	i
 8005342:	e7fe      	b.n	8005342 <pvPortMalloc+0xa2>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005344:	23c0      	movs	r3, #192	; 0xc0
 8005346:	011b      	lsls	r3, r3, #4
 8005348:	e7be      	b.n	80052c8 <pvPortMalloc+0x28>
 800534a:	0021      	movs	r1, r4
 800534c:	4664      	mov	r4, ip
 800534e:	e7e3      	b.n	8005318 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005350:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005352:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005354:	f7ff ff80 	bl	8005258 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005358:	6863      	ldr	r3, [r4, #4]
 800535a:	4a11      	ldr	r2, [pc, #68]	; (80053a0 <pvPortMalloc+0x100>)
 800535c:	1aed      	subs	r5, r5, r3
 800535e:	6015      	str	r5, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005360:	4a0e      	ldr	r2, [pc, #56]	; (800539c <pvPortMalloc+0xfc>)
 8005362:	6811      	ldr	r1, [r2, #0]
 8005364:	428d      	cmp	r5, r1
 8005366:	d200      	bcs.n	800536a <pvPortMalloc+0xca>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005368:	6015      	str	r5, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800536a:	431e      	orrs	r6, r3
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800536c:	003d      	movs	r5, r7
					pxBlock->pxNextFreeBlock = NULL;
 800536e:	2300      	movs	r3, #0
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005370:	3508      	adds	r5, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005372:	6066      	str	r6, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005374:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 8005376:	f7ff fdc9 	bl	8004f0c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800537a:	076b      	lsls	r3, r5, #29
 800537c:	d003      	beq.n	8005386 <pvPortMalloc+0xe6>
 800537e:	b672      	cpsid	i
 8005380:	e7fe      	b.n	8005380 <pvPortMalloc+0xe0>
void *pvReturn = NULL;
 8005382:	2500      	movs	r5, #0
 8005384:	e7f7      	b.n	8005376 <pvPortMalloc+0xd6>
}
 8005386:	0028      	movs	r0, r5
 8005388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800538a:	46c0      	nop			; (mov r8, r8)
 800538c:	200005fc 	.word	0x200005fc
 8005390:	20001200 	.word	0x20001200
 8005394:	20000600 	.word	0x20000600
 8005398:	2000120c 	.word	0x2000120c
 800539c:	20001208 	.word	0x20001208
 80053a0:	20001204 	.word	0x20001204

080053a4 <vPortFree>:
{
 80053a4:	b510      	push	{r4, lr}
	if( pv != NULL )
 80053a6:	2800      	cmp	r0, #0
 80053a8:	d01b      	beq.n	80053e2 <vPortFree+0x3e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80053aa:	4a0e      	ldr	r2, [pc, #56]	; (80053e4 <vPortFree+0x40>)
 80053ac:	3808      	subs	r0, #8
 80053ae:	6843      	ldr	r3, [r0, #4]
 80053b0:	6812      	ldr	r2, [r2, #0]
 80053b2:	0004      	movs	r4, r0
 80053b4:	421a      	tst	r2, r3
 80053b6:	d101      	bne.n	80053bc <vPortFree+0x18>
 80053b8:	b672      	cpsid	i
 80053ba:	e7fe      	b.n	80053ba <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80053bc:	6801      	ldr	r1, [r0, #0]
 80053be:	2900      	cmp	r1, #0
 80053c0:	d001      	beq.n	80053c6 <vPortFree+0x22>
 80053c2:	b672      	cpsid	i
 80053c4:	e7fe      	b.n	80053c4 <vPortFree+0x20>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80053c6:	4393      	bics	r3, r2
 80053c8:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 80053ca:	f7ff fd17 	bl	8004dfc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053ce:	4a06      	ldr	r2, [pc, #24]	; (80053e8 <vPortFree+0x44>)
 80053d0:	6863      	ldr	r3, [r4, #4]
 80053d2:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80053d4:	0020      	movs	r0, r4
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053d6:	185b      	adds	r3, r3, r1
 80053d8:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80053da:	f7ff ff3d 	bl	8005258 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80053de:	f7ff fd95 	bl	8004f0c <xTaskResumeAll>
}
 80053e2:	bd10      	pop	{r4, pc}
 80053e4:	20001200 	.word	0x20001200
 80053e8:	20001204 	.word	0x20001204

080053ec <__errno>:
 80053ec:	4b01      	ldr	r3, [pc, #4]	; (80053f4 <__errno+0x8>)
 80053ee:	6818      	ldr	r0, [r3, #0]
 80053f0:	4770      	bx	lr
 80053f2:	46c0      	nop			; (mov r8, r8)
 80053f4:	20000014 	.word	0x20000014

080053f8 <__libc_init_array>:
 80053f8:	b570      	push	{r4, r5, r6, lr}
 80053fa:	2600      	movs	r6, #0
 80053fc:	4d0c      	ldr	r5, [pc, #48]	; (8005430 <__libc_init_array+0x38>)
 80053fe:	4c0d      	ldr	r4, [pc, #52]	; (8005434 <__libc_init_array+0x3c>)
 8005400:	1b64      	subs	r4, r4, r5
 8005402:	10a4      	asrs	r4, r4, #2
 8005404:	42a6      	cmp	r6, r4
 8005406:	d109      	bne.n	800541c <__libc_init_array+0x24>
 8005408:	2600      	movs	r6, #0
 800540a:	f000 fcff 	bl	8005e0c <_init>
 800540e:	4d0a      	ldr	r5, [pc, #40]	; (8005438 <__libc_init_array+0x40>)
 8005410:	4c0a      	ldr	r4, [pc, #40]	; (800543c <__libc_init_array+0x44>)
 8005412:	1b64      	subs	r4, r4, r5
 8005414:	10a4      	asrs	r4, r4, #2
 8005416:	42a6      	cmp	r6, r4
 8005418:	d105      	bne.n	8005426 <__libc_init_array+0x2e>
 800541a:	bd70      	pop	{r4, r5, r6, pc}
 800541c:	00b3      	lsls	r3, r6, #2
 800541e:	58eb      	ldr	r3, [r5, r3]
 8005420:	4798      	blx	r3
 8005422:	3601      	adds	r6, #1
 8005424:	e7ee      	b.n	8005404 <__libc_init_array+0xc>
 8005426:	00b3      	lsls	r3, r6, #2
 8005428:	58eb      	ldr	r3, [r5, r3]
 800542a:	4798      	blx	r3
 800542c:	3601      	adds	r6, #1
 800542e:	e7f2      	b.n	8005416 <__libc_init_array+0x1e>
 8005430:	08006248 	.word	0x08006248
 8005434:	08006248 	.word	0x08006248
 8005438:	08006248 	.word	0x08006248
 800543c:	0800624c 	.word	0x0800624c

08005440 <__retarget_lock_acquire_recursive>:
 8005440:	4770      	bx	lr

08005442 <__retarget_lock_release_recursive>:
 8005442:	4770      	bx	lr

08005444 <memcpy>:
 8005444:	2300      	movs	r3, #0
 8005446:	b510      	push	{r4, lr}
 8005448:	429a      	cmp	r2, r3
 800544a:	d100      	bne.n	800544e <memcpy+0xa>
 800544c:	bd10      	pop	{r4, pc}
 800544e:	5ccc      	ldrb	r4, [r1, r3]
 8005450:	54c4      	strb	r4, [r0, r3]
 8005452:	3301      	adds	r3, #1
 8005454:	e7f8      	b.n	8005448 <memcpy+0x4>

08005456 <memset>:
 8005456:	0003      	movs	r3, r0
 8005458:	1882      	adds	r2, r0, r2
 800545a:	4293      	cmp	r3, r2
 800545c:	d100      	bne.n	8005460 <memset+0xa>
 800545e:	4770      	bx	lr
 8005460:	7019      	strb	r1, [r3, #0]
 8005462:	3301      	adds	r3, #1
 8005464:	e7f9      	b.n	800545a <memset+0x4>
	...

08005468 <sbrk_aligned>:
 8005468:	b570      	push	{r4, r5, r6, lr}
 800546a:	4e0f      	ldr	r6, [pc, #60]	; (80054a8 <sbrk_aligned+0x40>)
 800546c:	000d      	movs	r5, r1
 800546e:	6831      	ldr	r1, [r6, #0]
 8005470:	0004      	movs	r4, r0
 8005472:	2900      	cmp	r1, #0
 8005474:	d102      	bne.n	800547c <sbrk_aligned+0x14>
 8005476:	f000 f903 	bl	8005680 <_sbrk_r>
 800547a:	6030      	str	r0, [r6, #0]
 800547c:	0029      	movs	r1, r5
 800547e:	0020      	movs	r0, r4
 8005480:	f000 f8fe 	bl	8005680 <_sbrk_r>
 8005484:	1c43      	adds	r3, r0, #1
 8005486:	d00a      	beq.n	800549e <sbrk_aligned+0x36>
 8005488:	2303      	movs	r3, #3
 800548a:	1cc5      	adds	r5, r0, #3
 800548c:	439d      	bics	r5, r3
 800548e:	42a8      	cmp	r0, r5
 8005490:	d007      	beq.n	80054a2 <sbrk_aligned+0x3a>
 8005492:	1a29      	subs	r1, r5, r0
 8005494:	0020      	movs	r0, r4
 8005496:	f000 f8f3 	bl	8005680 <_sbrk_r>
 800549a:	1c43      	adds	r3, r0, #1
 800549c:	d101      	bne.n	80054a2 <sbrk_aligned+0x3a>
 800549e:	2501      	movs	r5, #1
 80054a0:	426d      	negs	r5, r5
 80054a2:	0028      	movs	r0, r5
 80054a4:	bd70      	pop	{r4, r5, r6, pc}
 80054a6:	46c0      	nop			; (mov r8, r8)
 80054a8:	2000121c 	.word	0x2000121c

080054ac <_malloc_r>:
 80054ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054ae:	2203      	movs	r2, #3
 80054b0:	1ccb      	adds	r3, r1, #3
 80054b2:	4393      	bics	r3, r2
 80054b4:	3308      	adds	r3, #8
 80054b6:	0006      	movs	r6, r0
 80054b8:	001f      	movs	r7, r3
 80054ba:	2b0c      	cmp	r3, #12
 80054bc:	d232      	bcs.n	8005524 <_malloc_r+0x78>
 80054be:	270c      	movs	r7, #12
 80054c0:	42b9      	cmp	r1, r7
 80054c2:	d831      	bhi.n	8005528 <_malloc_r+0x7c>
 80054c4:	0030      	movs	r0, r6
 80054c6:	f000 f90d 	bl	80056e4 <__malloc_lock>
 80054ca:	4d32      	ldr	r5, [pc, #200]	; (8005594 <_malloc_r+0xe8>)
 80054cc:	682b      	ldr	r3, [r5, #0]
 80054ce:	001c      	movs	r4, r3
 80054d0:	2c00      	cmp	r4, #0
 80054d2:	d12e      	bne.n	8005532 <_malloc_r+0x86>
 80054d4:	0039      	movs	r1, r7
 80054d6:	0030      	movs	r0, r6
 80054d8:	f7ff ffc6 	bl	8005468 <sbrk_aligned>
 80054dc:	0004      	movs	r4, r0
 80054de:	1c43      	adds	r3, r0, #1
 80054e0:	d11e      	bne.n	8005520 <_malloc_r+0x74>
 80054e2:	682c      	ldr	r4, [r5, #0]
 80054e4:	0025      	movs	r5, r4
 80054e6:	2d00      	cmp	r5, #0
 80054e8:	d14a      	bne.n	8005580 <_malloc_r+0xd4>
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	0029      	movs	r1, r5
 80054ee:	18e3      	adds	r3, r4, r3
 80054f0:	0030      	movs	r0, r6
 80054f2:	9301      	str	r3, [sp, #4]
 80054f4:	f000 f8c4 	bl	8005680 <_sbrk_r>
 80054f8:	9b01      	ldr	r3, [sp, #4]
 80054fa:	4283      	cmp	r3, r0
 80054fc:	d143      	bne.n	8005586 <_malloc_r+0xda>
 80054fe:	6823      	ldr	r3, [r4, #0]
 8005500:	3703      	adds	r7, #3
 8005502:	1aff      	subs	r7, r7, r3
 8005504:	2303      	movs	r3, #3
 8005506:	439f      	bics	r7, r3
 8005508:	3708      	adds	r7, #8
 800550a:	2f0c      	cmp	r7, #12
 800550c:	d200      	bcs.n	8005510 <_malloc_r+0x64>
 800550e:	270c      	movs	r7, #12
 8005510:	0039      	movs	r1, r7
 8005512:	0030      	movs	r0, r6
 8005514:	f7ff ffa8 	bl	8005468 <sbrk_aligned>
 8005518:	1c43      	adds	r3, r0, #1
 800551a:	d034      	beq.n	8005586 <_malloc_r+0xda>
 800551c:	6823      	ldr	r3, [r4, #0]
 800551e:	19df      	adds	r7, r3, r7
 8005520:	6027      	str	r7, [r4, #0]
 8005522:	e013      	b.n	800554c <_malloc_r+0xa0>
 8005524:	2b00      	cmp	r3, #0
 8005526:	dacb      	bge.n	80054c0 <_malloc_r+0x14>
 8005528:	230c      	movs	r3, #12
 800552a:	2500      	movs	r5, #0
 800552c:	6033      	str	r3, [r6, #0]
 800552e:	0028      	movs	r0, r5
 8005530:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005532:	6822      	ldr	r2, [r4, #0]
 8005534:	1bd1      	subs	r1, r2, r7
 8005536:	d420      	bmi.n	800557a <_malloc_r+0xce>
 8005538:	290b      	cmp	r1, #11
 800553a:	d917      	bls.n	800556c <_malloc_r+0xc0>
 800553c:	19e2      	adds	r2, r4, r7
 800553e:	6027      	str	r7, [r4, #0]
 8005540:	42a3      	cmp	r3, r4
 8005542:	d111      	bne.n	8005568 <_malloc_r+0xbc>
 8005544:	602a      	str	r2, [r5, #0]
 8005546:	6863      	ldr	r3, [r4, #4]
 8005548:	6011      	str	r1, [r2, #0]
 800554a:	6053      	str	r3, [r2, #4]
 800554c:	0030      	movs	r0, r6
 800554e:	0025      	movs	r5, r4
 8005550:	f000 f8d0 	bl	80056f4 <__malloc_unlock>
 8005554:	2207      	movs	r2, #7
 8005556:	350b      	adds	r5, #11
 8005558:	1d23      	adds	r3, r4, #4
 800555a:	4395      	bics	r5, r2
 800555c:	1aea      	subs	r2, r5, r3
 800555e:	429d      	cmp	r5, r3
 8005560:	d0e5      	beq.n	800552e <_malloc_r+0x82>
 8005562:	1b5b      	subs	r3, r3, r5
 8005564:	50a3      	str	r3, [r4, r2]
 8005566:	e7e2      	b.n	800552e <_malloc_r+0x82>
 8005568:	605a      	str	r2, [r3, #4]
 800556a:	e7ec      	b.n	8005546 <_malloc_r+0x9a>
 800556c:	6862      	ldr	r2, [r4, #4]
 800556e:	42a3      	cmp	r3, r4
 8005570:	d101      	bne.n	8005576 <_malloc_r+0xca>
 8005572:	602a      	str	r2, [r5, #0]
 8005574:	e7ea      	b.n	800554c <_malloc_r+0xa0>
 8005576:	605a      	str	r2, [r3, #4]
 8005578:	e7e8      	b.n	800554c <_malloc_r+0xa0>
 800557a:	0023      	movs	r3, r4
 800557c:	6864      	ldr	r4, [r4, #4]
 800557e:	e7a7      	b.n	80054d0 <_malloc_r+0x24>
 8005580:	002c      	movs	r4, r5
 8005582:	686d      	ldr	r5, [r5, #4]
 8005584:	e7af      	b.n	80054e6 <_malloc_r+0x3a>
 8005586:	230c      	movs	r3, #12
 8005588:	0030      	movs	r0, r6
 800558a:	6033      	str	r3, [r6, #0]
 800558c:	f000 f8b2 	bl	80056f4 <__malloc_unlock>
 8005590:	e7cd      	b.n	800552e <_malloc_r+0x82>
 8005592:	46c0      	nop			; (mov r8, r8)
 8005594:	20001218 	.word	0x20001218

08005598 <cleanup_glue>:
 8005598:	b570      	push	{r4, r5, r6, lr}
 800559a:	000d      	movs	r5, r1
 800559c:	6809      	ldr	r1, [r1, #0]
 800559e:	0004      	movs	r4, r0
 80055a0:	2900      	cmp	r1, #0
 80055a2:	d001      	beq.n	80055a8 <cleanup_glue+0x10>
 80055a4:	f7ff fff8 	bl	8005598 <cleanup_glue>
 80055a8:	0029      	movs	r1, r5
 80055aa:	0020      	movs	r0, r4
 80055ac:	f000 f8aa 	bl	8005704 <_free_r>
 80055b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080055b4 <_reclaim_reent>:
 80055b4:	4b31      	ldr	r3, [pc, #196]	; (800567c <_reclaim_reent+0xc8>)
 80055b6:	b570      	push	{r4, r5, r6, lr}
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	0004      	movs	r4, r0
 80055bc:	4283      	cmp	r3, r0
 80055be:	d049      	beq.n	8005654 <_reclaim_reent+0xa0>
 80055c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00a      	beq.n	80055dc <_reclaim_reent+0x28>
 80055c6:	2500      	movs	r5, #0
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	42ab      	cmp	r3, r5
 80055cc:	d147      	bne.n	800565e <_reclaim_reent+0xaa>
 80055ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055d0:	6819      	ldr	r1, [r3, #0]
 80055d2:	2900      	cmp	r1, #0
 80055d4:	d002      	beq.n	80055dc <_reclaim_reent+0x28>
 80055d6:	0020      	movs	r0, r4
 80055d8:	f000 f894 	bl	8005704 <_free_r>
 80055dc:	6961      	ldr	r1, [r4, #20]
 80055de:	2900      	cmp	r1, #0
 80055e0:	d002      	beq.n	80055e8 <_reclaim_reent+0x34>
 80055e2:	0020      	movs	r0, r4
 80055e4:	f000 f88e 	bl	8005704 <_free_r>
 80055e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80055ea:	2900      	cmp	r1, #0
 80055ec:	d002      	beq.n	80055f4 <_reclaim_reent+0x40>
 80055ee:	0020      	movs	r0, r4
 80055f0:	f000 f888 	bl	8005704 <_free_r>
 80055f4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80055f6:	2900      	cmp	r1, #0
 80055f8:	d002      	beq.n	8005600 <_reclaim_reent+0x4c>
 80055fa:	0020      	movs	r0, r4
 80055fc:	f000 f882 	bl	8005704 <_free_r>
 8005600:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005602:	2900      	cmp	r1, #0
 8005604:	d002      	beq.n	800560c <_reclaim_reent+0x58>
 8005606:	0020      	movs	r0, r4
 8005608:	f000 f87c 	bl	8005704 <_free_r>
 800560c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800560e:	2900      	cmp	r1, #0
 8005610:	d002      	beq.n	8005618 <_reclaim_reent+0x64>
 8005612:	0020      	movs	r0, r4
 8005614:	f000 f876 	bl	8005704 <_free_r>
 8005618:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800561a:	2900      	cmp	r1, #0
 800561c:	d002      	beq.n	8005624 <_reclaim_reent+0x70>
 800561e:	0020      	movs	r0, r4
 8005620:	f000 f870 	bl	8005704 <_free_r>
 8005624:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005626:	2900      	cmp	r1, #0
 8005628:	d002      	beq.n	8005630 <_reclaim_reent+0x7c>
 800562a:	0020      	movs	r0, r4
 800562c:	f000 f86a 	bl	8005704 <_free_r>
 8005630:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005632:	2900      	cmp	r1, #0
 8005634:	d002      	beq.n	800563c <_reclaim_reent+0x88>
 8005636:	0020      	movs	r0, r4
 8005638:	f000 f864 	bl	8005704 <_free_r>
 800563c:	69a3      	ldr	r3, [r4, #24]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d008      	beq.n	8005654 <_reclaim_reent+0xa0>
 8005642:	0020      	movs	r0, r4
 8005644:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005646:	4798      	blx	r3
 8005648:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800564a:	2900      	cmp	r1, #0
 800564c:	d002      	beq.n	8005654 <_reclaim_reent+0xa0>
 800564e:	0020      	movs	r0, r4
 8005650:	f7ff ffa2 	bl	8005598 <cleanup_glue>
 8005654:	bd70      	pop	{r4, r5, r6, pc}
 8005656:	5949      	ldr	r1, [r1, r5]
 8005658:	2900      	cmp	r1, #0
 800565a:	d108      	bne.n	800566e <_reclaim_reent+0xba>
 800565c:	3504      	adds	r5, #4
 800565e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005660:	68d9      	ldr	r1, [r3, #12]
 8005662:	2d80      	cmp	r5, #128	; 0x80
 8005664:	d1f7      	bne.n	8005656 <_reclaim_reent+0xa2>
 8005666:	0020      	movs	r0, r4
 8005668:	f000 f84c 	bl	8005704 <_free_r>
 800566c:	e7af      	b.n	80055ce <_reclaim_reent+0x1a>
 800566e:	680e      	ldr	r6, [r1, #0]
 8005670:	0020      	movs	r0, r4
 8005672:	f000 f847 	bl	8005704 <_free_r>
 8005676:	0031      	movs	r1, r6
 8005678:	e7ee      	b.n	8005658 <_reclaim_reent+0xa4>
 800567a:	46c0      	nop			; (mov r8, r8)
 800567c:	20000014 	.word	0x20000014

08005680 <_sbrk_r>:
 8005680:	2300      	movs	r3, #0
 8005682:	b570      	push	{r4, r5, r6, lr}
 8005684:	4d06      	ldr	r5, [pc, #24]	; (80056a0 <_sbrk_r+0x20>)
 8005686:	0004      	movs	r4, r0
 8005688:	0008      	movs	r0, r1
 800568a:	602b      	str	r3, [r5, #0]
 800568c:	f7fd fbea 	bl	8002e64 <_sbrk>
 8005690:	1c43      	adds	r3, r0, #1
 8005692:	d103      	bne.n	800569c <_sbrk_r+0x1c>
 8005694:	682b      	ldr	r3, [r5, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d000      	beq.n	800569c <_sbrk_r+0x1c>
 800569a:	6023      	str	r3, [r4, #0]
 800569c:	bd70      	pop	{r4, r5, r6, pc}
 800569e:	46c0      	nop			; (mov r8, r8)
 80056a0:	20001220 	.word	0x20001220

080056a4 <siprintf>:
 80056a4:	b40e      	push	{r1, r2, r3}
 80056a6:	b500      	push	{lr}
 80056a8:	490b      	ldr	r1, [pc, #44]	; (80056d8 <siprintf+0x34>)
 80056aa:	b09c      	sub	sp, #112	; 0x70
 80056ac:	ab1d      	add	r3, sp, #116	; 0x74
 80056ae:	9002      	str	r0, [sp, #8]
 80056b0:	9006      	str	r0, [sp, #24]
 80056b2:	9107      	str	r1, [sp, #28]
 80056b4:	9104      	str	r1, [sp, #16]
 80056b6:	4809      	ldr	r0, [pc, #36]	; (80056dc <siprintf+0x38>)
 80056b8:	4909      	ldr	r1, [pc, #36]	; (80056e0 <siprintf+0x3c>)
 80056ba:	cb04      	ldmia	r3!, {r2}
 80056bc:	9105      	str	r1, [sp, #20]
 80056be:	6800      	ldr	r0, [r0, #0]
 80056c0:	a902      	add	r1, sp, #8
 80056c2:	9301      	str	r3, [sp, #4]
 80056c4:	f000 f8ca 	bl	800585c <_svfiprintf_r>
 80056c8:	2300      	movs	r3, #0
 80056ca:	9a02      	ldr	r2, [sp, #8]
 80056cc:	7013      	strb	r3, [r2, #0]
 80056ce:	b01c      	add	sp, #112	; 0x70
 80056d0:	bc08      	pop	{r3}
 80056d2:	b003      	add	sp, #12
 80056d4:	4718      	bx	r3
 80056d6:	46c0      	nop			; (mov r8, r8)
 80056d8:	7fffffff 	.word	0x7fffffff
 80056dc:	20000014 	.word	0x20000014
 80056e0:	ffff0208 	.word	0xffff0208

080056e4 <__malloc_lock>:
 80056e4:	b510      	push	{r4, lr}
 80056e6:	4802      	ldr	r0, [pc, #8]	; (80056f0 <__malloc_lock+0xc>)
 80056e8:	f7ff feaa 	bl	8005440 <__retarget_lock_acquire_recursive>
 80056ec:	bd10      	pop	{r4, pc}
 80056ee:	46c0      	nop			; (mov r8, r8)
 80056f0:	20001214 	.word	0x20001214

080056f4 <__malloc_unlock>:
 80056f4:	b510      	push	{r4, lr}
 80056f6:	4802      	ldr	r0, [pc, #8]	; (8005700 <__malloc_unlock+0xc>)
 80056f8:	f7ff fea3 	bl	8005442 <__retarget_lock_release_recursive>
 80056fc:	bd10      	pop	{r4, pc}
 80056fe:	46c0      	nop			; (mov r8, r8)
 8005700:	20001214 	.word	0x20001214

08005704 <_free_r>:
 8005704:	b570      	push	{r4, r5, r6, lr}
 8005706:	0005      	movs	r5, r0
 8005708:	2900      	cmp	r1, #0
 800570a:	d010      	beq.n	800572e <_free_r+0x2a>
 800570c:	1f0c      	subs	r4, r1, #4
 800570e:	6823      	ldr	r3, [r4, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	da00      	bge.n	8005716 <_free_r+0x12>
 8005714:	18e4      	adds	r4, r4, r3
 8005716:	0028      	movs	r0, r5
 8005718:	f7ff ffe4 	bl	80056e4 <__malloc_lock>
 800571c:	4a1d      	ldr	r2, [pc, #116]	; (8005794 <_free_r+0x90>)
 800571e:	6813      	ldr	r3, [r2, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d105      	bne.n	8005730 <_free_r+0x2c>
 8005724:	6063      	str	r3, [r4, #4]
 8005726:	6014      	str	r4, [r2, #0]
 8005728:	0028      	movs	r0, r5
 800572a:	f7ff ffe3 	bl	80056f4 <__malloc_unlock>
 800572e:	bd70      	pop	{r4, r5, r6, pc}
 8005730:	42a3      	cmp	r3, r4
 8005732:	d908      	bls.n	8005746 <_free_r+0x42>
 8005734:	6821      	ldr	r1, [r4, #0]
 8005736:	1860      	adds	r0, r4, r1
 8005738:	4283      	cmp	r3, r0
 800573a:	d1f3      	bne.n	8005724 <_free_r+0x20>
 800573c:	6818      	ldr	r0, [r3, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	1841      	adds	r1, r0, r1
 8005742:	6021      	str	r1, [r4, #0]
 8005744:	e7ee      	b.n	8005724 <_free_r+0x20>
 8005746:	001a      	movs	r2, r3
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <_free_r+0x4e>
 800574e:	42a3      	cmp	r3, r4
 8005750:	d9f9      	bls.n	8005746 <_free_r+0x42>
 8005752:	6811      	ldr	r1, [r2, #0]
 8005754:	1850      	adds	r0, r2, r1
 8005756:	42a0      	cmp	r0, r4
 8005758:	d10b      	bne.n	8005772 <_free_r+0x6e>
 800575a:	6820      	ldr	r0, [r4, #0]
 800575c:	1809      	adds	r1, r1, r0
 800575e:	1850      	adds	r0, r2, r1
 8005760:	6011      	str	r1, [r2, #0]
 8005762:	4283      	cmp	r3, r0
 8005764:	d1e0      	bne.n	8005728 <_free_r+0x24>
 8005766:	6818      	ldr	r0, [r3, #0]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	1841      	adds	r1, r0, r1
 800576c:	6011      	str	r1, [r2, #0]
 800576e:	6053      	str	r3, [r2, #4]
 8005770:	e7da      	b.n	8005728 <_free_r+0x24>
 8005772:	42a0      	cmp	r0, r4
 8005774:	d902      	bls.n	800577c <_free_r+0x78>
 8005776:	230c      	movs	r3, #12
 8005778:	602b      	str	r3, [r5, #0]
 800577a:	e7d5      	b.n	8005728 <_free_r+0x24>
 800577c:	6821      	ldr	r1, [r4, #0]
 800577e:	1860      	adds	r0, r4, r1
 8005780:	4283      	cmp	r3, r0
 8005782:	d103      	bne.n	800578c <_free_r+0x88>
 8005784:	6818      	ldr	r0, [r3, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	1841      	adds	r1, r0, r1
 800578a:	6021      	str	r1, [r4, #0]
 800578c:	6063      	str	r3, [r4, #4]
 800578e:	6054      	str	r4, [r2, #4]
 8005790:	e7ca      	b.n	8005728 <_free_r+0x24>
 8005792:	46c0      	nop			; (mov r8, r8)
 8005794:	20001218 	.word	0x20001218

08005798 <__ssputs_r>:
 8005798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800579a:	688e      	ldr	r6, [r1, #8]
 800579c:	b085      	sub	sp, #20
 800579e:	0007      	movs	r7, r0
 80057a0:	000c      	movs	r4, r1
 80057a2:	9203      	str	r2, [sp, #12]
 80057a4:	9301      	str	r3, [sp, #4]
 80057a6:	429e      	cmp	r6, r3
 80057a8:	d83c      	bhi.n	8005824 <__ssputs_r+0x8c>
 80057aa:	2390      	movs	r3, #144	; 0x90
 80057ac:	898a      	ldrh	r2, [r1, #12]
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	421a      	tst	r2, r3
 80057b2:	d034      	beq.n	800581e <__ssputs_r+0x86>
 80057b4:	6909      	ldr	r1, [r1, #16]
 80057b6:	6823      	ldr	r3, [r4, #0]
 80057b8:	6960      	ldr	r0, [r4, #20]
 80057ba:	1a5b      	subs	r3, r3, r1
 80057bc:	9302      	str	r3, [sp, #8]
 80057be:	2303      	movs	r3, #3
 80057c0:	4343      	muls	r3, r0
 80057c2:	0fdd      	lsrs	r5, r3, #31
 80057c4:	18ed      	adds	r5, r5, r3
 80057c6:	9b01      	ldr	r3, [sp, #4]
 80057c8:	9802      	ldr	r0, [sp, #8]
 80057ca:	3301      	adds	r3, #1
 80057cc:	181b      	adds	r3, r3, r0
 80057ce:	106d      	asrs	r5, r5, #1
 80057d0:	42ab      	cmp	r3, r5
 80057d2:	d900      	bls.n	80057d6 <__ssputs_r+0x3e>
 80057d4:	001d      	movs	r5, r3
 80057d6:	0553      	lsls	r3, r2, #21
 80057d8:	d532      	bpl.n	8005840 <__ssputs_r+0xa8>
 80057da:	0029      	movs	r1, r5
 80057dc:	0038      	movs	r0, r7
 80057de:	f7ff fe65 	bl	80054ac <_malloc_r>
 80057e2:	1e06      	subs	r6, r0, #0
 80057e4:	d109      	bne.n	80057fa <__ssputs_r+0x62>
 80057e6:	230c      	movs	r3, #12
 80057e8:	603b      	str	r3, [r7, #0]
 80057ea:	2340      	movs	r3, #64	; 0x40
 80057ec:	2001      	movs	r0, #1
 80057ee:	89a2      	ldrh	r2, [r4, #12]
 80057f0:	4240      	negs	r0, r0
 80057f2:	4313      	orrs	r3, r2
 80057f4:	81a3      	strh	r3, [r4, #12]
 80057f6:	b005      	add	sp, #20
 80057f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057fa:	9a02      	ldr	r2, [sp, #8]
 80057fc:	6921      	ldr	r1, [r4, #16]
 80057fe:	f7ff fe21 	bl	8005444 <memcpy>
 8005802:	89a3      	ldrh	r3, [r4, #12]
 8005804:	4a14      	ldr	r2, [pc, #80]	; (8005858 <__ssputs_r+0xc0>)
 8005806:	401a      	ands	r2, r3
 8005808:	2380      	movs	r3, #128	; 0x80
 800580a:	4313      	orrs	r3, r2
 800580c:	81a3      	strh	r3, [r4, #12]
 800580e:	9b02      	ldr	r3, [sp, #8]
 8005810:	6126      	str	r6, [r4, #16]
 8005812:	18f6      	adds	r6, r6, r3
 8005814:	6026      	str	r6, [r4, #0]
 8005816:	6165      	str	r5, [r4, #20]
 8005818:	9e01      	ldr	r6, [sp, #4]
 800581a:	1aed      	subs	r5, r5, r3
 800581c:	60a5      	str	r5, [r4, #8]
 800581e:	9b01      	ldr	r3, [sp, #4]
 8005820:	429e      	cmp	r6, r3
 8005822:	d900      	bls.n	8005826 <__ssputs_r+0x8e>
 8005824:	9e01      	ldr	r6, [sp, #4]
 8005826:	0032      	movs	r2, r6
 8005828:	9903      	ldr	r1, [sp, #12]
 800582a:	6820      	ldr	r0, [r4, #0]
 800582c:	f000 faa3 	bl	8005d76 <memmove>
 8005830:	68a3      	ldr	r3, [r4, #8]
 8005832:	2000      	movs	r0, #0
 8005834:	1b9b      	subs	r3, r3, r6
 8005836:	60a3      	str	r3, [r4, #8]
 8005838:	6823      	ldr	r3, [r4, #0]
 800583a:	199e      	adds	r6, r3, r6
 800583c:	6026      	str	r6, [r4, #0]
 800583e:	e7da      	b.n	80057f6 <__ssputs_r+0x5e>
 8005840:	002a      	movs	r2, r5
 8005842:	0038      	movs	r0, r7
 8005844:	f000 faaa 	bl	8005d9c <_realloc_r>
 8005848:	1e06      	subs	r6, r0, #0
 800584a:	d1e0      	bne.n	800580e <__ssputs_r+0x76>
 800584c:	0038      	movs	r0, r7
 800584e:	6921      	ldr	r1, [r4, #16]
 8005850:	f7ff ff58 	bl	8005704 <_free_r>
 8005854:	e7c7      	b.n	80057e6 <__ssputs_r+0x4e>
 8005856:	46c0      	nop			; (mov r8, r8)
 8005858:	fffffb7f 	.word	0xfffffb7f

0800585c <_svfiprintf_r>:
 800585c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800585e:	b0a1      	sub	sp, #132	; 0x84
 8005860:	9003      	str	r0, [sp, #12]
 8005862:	001d      	movs	r5, r3
 8005864:	898b      	ldrh	r3, [r1, #12]
 8005866:	000f      	movs	r7, r1
 8005868:	0016      	movs	r6, r2
 800586a:	061b      	lsls	r3, r3, #24
 800586c:	d511      	bpl.n	8005892 <_svfiprintf_r+0x36>
 800586e:	690b      	ldr	r3, [r1, #16]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10e      	bne.n	8005892 <_svfiprintf_r+0x36>
 8005874:	2140      	movs	r1, #64	; 0x40
 8005876:	f7ff fe19 	bl	80054ac <_malloc_r>
 800587a:	6038      	str	r0, [r7, #0]
 800587c:	6138      	str	r0, [r7, #16]
 800587e:	2800      	cmp	r0, #0
 8005880:	d105      	bne.n	800588e <_svfiprintf_r+0x32>
 8005882:	230c      	movs	r3, #12
 8005884:	9a03      	ldr	r2, [sp, #12]
 8005886:	3801      	subs	r0, #1
 8005888:	6013      	str	r3, [r2, #0]
 800588a:	b021      	add	sp, #132	; 0x84
 800588c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800588e:	2340      	movs	r3, #64	; 0x40
 8005890:	617b      	str	r3, [r7, #20]
 8005892:	2300      	movs	r3, #0
 8005894:	ac08      	add	r4, sp, #32
 8005896:	6163      	str	r3, [r4, #20]
 8005898:	3320      	adds	r3, #32
 800589a:	7663      	strb	r3, [r4, #25]
 800589c:	3310      	adds	r3, #16
 800589e:	76a3      	strb	r3, [r4, #26]
 80058a0:	9507      	str	r5, [sp, #28]
 80058a2:	0035      	movs	r5, r6
 80058a4:	782b      	ldrb	r3, [r5, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <_svfiprintf_r+0x52>
 80058aa:	2b25      	cmp	r3, #37	; 0x25
 80058ac:	d147      	bne.n	800593e <_svfiprintf_r+0xe2>
 80058ae:	1bab      	subs	r3, r5, r6
 80058b0:	9305      	str	r3, [sp, #20]
 80058b2:	42b5      	cmp	r5, r6
 80058b4:	d00c      	beq.n	80058d0 <_svfiprintf_r+0x74>
 80058b6:	0032      	movs	r2, r6
 80058b8:	0039      	movs	r1, r7
 80058ba:	9803      	ldr	r0, [sp, #12]
 80058bc:	f7ff ff6c 	bl	8005798 <__ssputs_r>
 80058c0:	1c43      	adds	r3, r0, #1
 80058c2:	d100      	bne.n	80058c6 <_svfiprintf_r+0x6a>
 80058c4:	e0ae      	b.n	8005a24 <_svfiprintf_r+0x1c8>
 80058c6:	6962      	ldr	r2, [r4, #20]
 80058c8:	9b05      	ldr	r3, [sp, #20]
 80058ca:	4694      	mov	ip, r2
 80058cc:	4463      	add	r3, ip
 80058ce:	6163      	str	r3, [r4, #20]
 80058d0:	782b      	ldrb	r3, [r5, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d100      	bne.n	80058d8 <_svfiprintf_r+0x7c>
 80058d6:	e0a5      	b.n	8005a24 <_svfiprintf_r+0x1c8>
 80058d8:	2201      	movs	r2, #1
 80058da:	2300      	movs	r3, #0
 80058dc:	4252      	negs	r2, r2
 80058de:	6062      	str	r2, [r4, #4]
 80058e0:	a904      	add	r1, sp, #16
 80058e2:	3254      	adds	r2, #84	; 0x54
 80058e4:	1852      	adds	r2, r2, r1
 80058e6:	1c6e      	adds	r6, r5, #1
 80058e8:	6023      	str	r3, [r4, #0]
 80058ea:	60e3      	str	r3, [r4, #12]
 80058ec:	60a3      	str	r3, [r4, #8]
 80058ee:	7013      	strb	r3, [r2, #0]
 80058f0:	65a3      	str	r3, [r4, #88]	; 0x58
 80058f2:	2205      	movs	r2, #5
 80058f4:	7831      	ldrb	r1, [r6, #0]
 80058f6:	4854      	ldr	r0, [pc, #336]	; (8005a48 <_svfiprintf_r+0x1ec>)
 80058f8:	f000 fa32 	bl	8005d60 <memchr>
 80058fc:	1c75      	adds	r5, r6, #1
 80058fe:	2800      	cmp	r0, #0
 8005900:	d11f      	bne.n	8005942 <_svfiprintf_r+0xe6>
 8005902:	6822      	ldr	r2, [r4, #0]
 8005904:	06d3      	lsls	r3, r2, #27
 8005906:	d504      	bpl.n	8005912 <_svfiprintf_r+0xb6>
 8005908:	2353      	movs	r3, #83	; 0x53
 800590a:	a904      	add	r1, sp, #16
 800590c:	185b      	adds	r3, r3, r1
 800590e:	2120      	movs	r1, #32
 8005910:	7019      	strb	r1, [r3, #0]
 8005912:	0713      	lsls	r3, r2, #28
 8005914:	d504      	bpl.n	8005920 <_svfiprintf_r+0xc4>
 8005916:	2353      	movs	r3, #83	; 0x53
 8005918:	a904      	add	r1, sp, #16
 800591a:	185b      	adds	r3, r3, r1
 800591c:	212b      	movs	r1, #43	; 0x2b
 800591e:	7019      	strb	r1, [r3, #0]
 8005920:	7833      	ldrb	r3, [r6, #0]
 8005922:	2b2a      	cmp	r3, #42	; 0x2a
 8005924:	d016      	beq.n	8005954 <_svfiprintf_r+0xf8>
 8005926:	0035      	movs	r5, r6
 8005928:	2100      	movs	r1, #0
 800592a:	200a      	movs	r0, #10
 800592c:	68e3      	ldr	r3, [r4, #12]
 800592e:	782a      	ldrb	r2, [r5, #0]
 8005930:	1c6e      	adds	r6, r5, #1
 8005932:	3a30      	subs	r2, #48	; 0x30
 8005934:	2a09      	cmp	r2, #9
 8005936:	d94e      	bls.n	80059d6 <_svfiprintf_r+0x17a>
 8005938:	2900      	cmp	r1, #0
 800593a:	d111      	bne.n	8005960 <_svfiprintf_r+0x104>
 800593c:	e017      	b.n	800596e <_svfiprintf_r+0x112>
 800593e:	3501      	adds	r5, #1
 8005940:	e7b0      	b.n	80058a4 <_svfiprintf_r+0x48>
 8005942:	4b41      	ldr	r3, [pc, #260]	; (8005a48 <_svfiprintf_r+0x1ec>)
 8005944:	6822      	ldr	r2, [r4, #0]
 8005946:	1ac0      	subs	r0, r0, r3
 8005948:	2301      	movs	r3, #1
 800594a:	4083      	lsls	r3, r0
 800594c:	4313      	orrs	r3, r2
 800594e:	002e      	movs	r6, r5
 8005950:	6023      	str	r3, [r4, #0]
 8005952:	e7ce      	b.n	80058f2 <_svfiprintf_r+0x96>
 8005954:	9b07      	ldr	r3, [sp, #28]
 8005956:	1d19      	adds	r1, r3, #4
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	9107      	str	r1, [sp, #28]
 800595c:	2b00      	cmp	r3, #0
 800595e:	db01      	blt.n	8005964 <_svfiprintf_r+0x108>
 8005960:	930b      	str	r3, [sp, #44]	; 0x2c
 8005962:	e004      	b.n	800596e <_svfiprintf_r+0x112>
 8005964:	425b      	negs	r3, r3
 8005966:	60e3      	str	r3, [r4, #12]
 8005968:	2302      	movs	r3, #2
 800596a:	4313      	orrs	r3, r2
 800596c:	6023      	str	r3, [r4, #0]
 800596e:	782b      	ldrb	r3, [r5, #0]
 8005970:	2b2e      	cmp	r3, #46	; 0x2e
 8005972:	d10a      	bne.n	800598a <_svfiprintf_r+0x12e>
 8005974:	786b      	ldrb	r3, [r5, #1]
 8005976:	2b2a      	cmp	r3, #42	; 0x2a
 8005978:	d135      	bne.n	80059e6 <_svfiprintf_r+0x18a>
 800597a:	9b07      	ldr	r3, [sp, #28]
 800597c:	3502      	adds	r5, #2
 800597e:	1d1a      	adds	r2, r3, #4
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	9207      	str	r2, [sp, #28]
 8005984:	2b00      	cmp	r3, #0
 8005986:	db2b      	blt.n	80059e0 <_svfiprintf_r+0x184>
 8005988:	9309      	str	r3, [sp, #36]	; 0x24
 800598a:	4e30      	ldr	r6, [pc, #192]	; (8005a4c <_svfiprintf_r+0x1f0>)
 800598c:	2203      	movs	r2, #3
 800598e:	0030      	movs	r0, r6
 8005990:	7829      	ldrb	r1, [r5, #0]
 8005992:	f000 f9e5 	bl	8005d60 <memchr>
 8005996:	2800      	cmp	r0, #0
 8005998:	d006      	beq.n	80059a8 <_svfiprintf_r+0x14c>
 800599a:	2340      	movs	r3, #64	; 0x40
 800599c:	1b80      	subs	r0, r0, r6
 800599e:	4083      	lsls	r3, r0
 80059a0:	6822      	ldr	r2, [r4, #0]
 80059a2:	3501      	adds	r5, #1
 80059a4:	4313      	orrs	r3, r2
 80059a6:	6023      	str	r3, [r4, #0]
 80059a8:	7829      	ldrb	r1, [r5, #0]
 80059aa:	2206      	movs	r2, #6
 80059ac:	4828      	ldr	r0, [pc, #160]	; (8005a50 <_svfiprintf_r+0x1f4>)
 80059ae:	1c6e      	adds	r6, r5, #1
 80059b0:	7621      	strb	r1, [r4, #24]
 80059b2:	f000 f9d5 	bl	8005d60 <memchr>
 80059b6:	2800      	cmp	r0, #0
 80059b8:	d03c      	beq.n	8005a34 <_svfiprintf_r+0x1d8>
 80059ba:	4b26      	ldr	r3, [pc, #152]	; (8005a54 <_svfiprintf_r+0x1f8>)
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d125      	bne.n	8005a0c <_svfiprintf_r+0x1b0>
 80059c0:	2207      	movs	r2, #7
 80059c2:	9b07      	ldr	r3, [sp, #28]
 80059c4:	3307      	adds	r3, #7
 80059c6:	4393      	bics	r3, r2
 80059c8:	3308      	adds	r3, #8
 80059ca:	9307      	str	r3, [sp, #28]
 80059cc:	6963      	ldr	r3, [r4, #20]
 80059ce:	9a04      	ldr	r2, [sp, #16]
 80059d0:	189b      	adds	r3, r3, r2
 80059d2:	6163      	str	r3, [r4, #20]
 80059d4:	e765      	b.n	80058a2 <_svfiprintf_r+0x46>
 80059d6:	4343      	muls	r3, r0
 80059d8:	0035      	movs	r5, r6
 80059da:	2101      	movs	r1, #1
 80059dc:	189b      	adds	r3, r3, r2
 80059de:	e7a6      	b.n	800592e <_svfiprintf_r+0xd2>
 80059e0:	2301      	movs	r3, #1
 80059e2:	425b      	negs	r3, r3
 80059e4:	e7d0      	b.n	8005988 <_svfiprintf_r+0x12c>
 80059e6:	2300      	movs	r3, #0
 80059e8:	200a      	movs	r0, #10
 80059ea:	001a      	movs	r2, r3
 80059ec:	3501      	adds	r5, #1
 80059ee:	6063      	str	r3, [r4, #4]
 80059f0:	7829      	ldrb	r1, [r5, #0]
 80059f2:	1c6e      	adds	r6, r5, #1
 80059f4:	3930      	subs	r1, #48	; 0x30
 80059f6:	2909      	cmp	r1, #9
 80059f8:	d903      	bls.n	8005a02 <_svfiprintf_r+0x1a6>
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d0c5      	beq.n	800598a <_svfiprintf_r+0x12e>
 80059fe:	9209      	str	r2, [sp, #36]	; 0x24
 8005a00:	e7c3      	b.n	800598a <_svfiprintf_r+0x12e>
 8005a02:	4342      	muls	r2, r0
 8005a04:	0035      	movs	r5, r6
 8005a06:	2301      	movs	r3, #1
 8005a08:	1852      	adds	r2, r2, r1
 8005a0a:	e7f1      	b.n	80059f0 <_svfiprintf_r+0x194>
 8005a0c:	ab07      	add	r3, sp, #28
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	003a      	movs	r2, r7
 8005a12:	0021      	movs	r1, r4
 8005a14:	4b10      	ldr	r3, [pc, #64]	; (8005a58 <_svfiprintf_r+0x1fc>)
 8005a16:	9803      	ldr	r0, [sp, #12]
 8005a18:	e000      	b.n	8005a1c <_svfiprintf_r+0x1c0>
 8005a1a:	bf00      	nop
 8005a1c:	9004      	str	r0, [sp, #16]
 8005a1e:	9b04      	ldr	r3, [sp, #16]
 8005a20:	3301      	adds	r3, #1
 8005a22:	d1d3      	bne.n	80059cc <_svfiprintf_r+0x170>
 8005a24:	89bb      	ldrh	r3, [r7, #12]
 8005a26:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005a28:	065b      	lsls	r3, r3, #25
 8005a2a:	d400      	bmi.n	8005a2e <_svfiprintf_r+0x1d2>
 8005a2c:	e72d      	b.n	800588a <_svfiprintf_r+0x2e>
 8005a2e:	2001      	movs	r0, #1
 8005a30:	4240      	negs	r0, r0
 8005a32:	e72a      	b.n	800588a <_svfiprintf_r+0x2e>
 8005a34:	ab07      	add	r3, sp, #28
 8005a36:	9300      	str	r3, [sp, #0]
 8005a38:	003a      	movs	r2, r7
 8005a3a:	0021      	movs	r1, r4
 8005a3c:	4b06      	ldr	r3, [pc, #24]	; (8005a58 <_svfiprintf_r+0x1fc>)
 8005a3e:	9803      	ldr	r0, [sp, #12]
 8005a40:	f000 f87c 	bl	8005b3c <_printf_i>
 8005a44:	e7ea      	b.n	8005a1c <_svfiprintf_r+0x1c0>
 8005a46:	46c0      	nop			; (mov r8, r8)
 8005a48:	0800620c 	.word	0x0800620c
 8005a4c:	08006212 	.word	0x08006212
 8005a50:	08006216 	.word	0x08006216
 8005a54:	00000000 	.word	0x00000000
 8005a58:	08005799 	.word	0x08005799

08005a5c <_printf_common>:
 8005a5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a5e:	0015      	movs	r5, r2
 8005a60:	9301      	str	r3, [sp, #4]
 8005a62:	688a      	ldr	r2, [r1, #8]
 8005a64:	690b      	ldr	r3, [r1, #16]
 8005a66:	000c      	movs	r4, r1
 8005a68:	9000      	str	r0, [sp, #0]
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	da00      	bge.n	8005a70 <_printf_common+0x14>
 8005a6e:	0013      	movs	r3, r2
 8005a70:	0022      	movs	r2, r4
 8005a72:	602b      	str	r3, [r5, #0]
 8005a74:	3243      	adds	r2, #67	; 0x43
 8005a76:	7812      	ldrb	r2, [r2, #0]
 8005a78:	2a00      	cmp	r2, #0
 8005a7a:	d001      	beq.n	8005a80 <_printf_common+0x24>
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	602b      	str	r3, [r5, #0]
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	069b      	lsls	r3, r3, #26
 8005a84:	d502      	bpl.n	8005a8c <_printf_common+0x30>
 8005a86:	682b      	ldr	r3, [r5, #0]
 8005a88:	3302      	adds	r3, #2
 8005a8a:	602b      	str	r3, [r5, #0]
 8005a8c:	6822      	ldr	r2, [r4, #0]
 8005a8e:	2306      	movs	r3, #6
 8005a90:	0017      	movs	r7, r2
 8005a92:	401f      	ands	r7, r3
 8005a94:	421a      	tst	r2, r3
 8005a96:	d027      	beq.n	8005ae8 <_printf_common+0x8c>
 8005a98:	0023      	movs	r3, r4
 8005a9a:	3343      	adds	r3, #67	; 0x43
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	1e5a      	subs	r2, r3, #1
 8005aa0:	4193      	sbcs	r3, r2
 8005aa2:	6822      	ldr	r2, [r4, #0]
 8005aa4:	0692      	lsls	r2, r2, #26
 8005aa6:	d430      	bmi.n	8005b0a <_printf_common+0xae>
 8005aa8:	0022      	movs	r2, r4
 8005aaa:	9901      	ldr	r1, [sp, #4]
 8005aac:	9800      	ldr	r0, [sp, #0]
 8005aae:	9e08      	ldr	r6, [sp, #32]
 8005ab0:	3243      	adds	r2, #67	; 0x43
 8005ab2:	47b0      	blx	r6
 8005ab4:	1c43      	adds	r3, r0, #1
 8005ab6:	d025      	beq.n	8005b04 <_printf_common+0xa8>
 8005ab8:	2306      	movs	r3, #6
 8005aba:	6820      	ldr	r0, [r4, #0]
 8005abc:	682a      	ldr	r2, [r5, #0]
 8005abe:	68e1      	ldr	r1, [r4, #12]
 8005ac0:	2500      	movs	r5, #0
 8005ac2:	4003      	ands	r3, r0
 8005ac4:	2b04      	cmp	r3, #4
 8005ac6:	d103      	bne.n	8005ad0 <_printf_common+0x74>
 8005ac8:	1a8d      	subs	r5, r1, r2
 8005aca:	43eb      	mvns	r3, r5
 8005acc:	17db      	asrs	r3, r3, #31
 8005ace:	401d      	ands	r5, r3
 8005ad0:	68a3      	ldr	r3, [r4, #8]
 8005ad2:	6922      	ldr	r2, [r4, #16]
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	dd01      	ble.n	8005adc <_printf_common+0x80>
 8005ad8:	1a9b      	subs	r3, r3, r2
 8005ada:	18ed      	adds	r5, r5, r3
 8005adc:	2700      	movs	r7, #0
 8005ade:	42bd      	cmp	r5, r7
 8005ae0:	d120      	bne.n	8005b24 <_printf_common+0xc8>
 8005ae2:	2000      	movs	r0, #0
 8005ae4:	e010      	b.n	8005b08 <_printf_common+0xac>
 8005ae6:	3701      	adds	r7, #1
 8005ae8:	68e3      	ldr	r3, [r4, #12]
 8005aea:	682a      	ldr	r2, [r5, #0]
 8005aec:	1a9b      	subs	r3, r3, r2
 8005aee:	42bb      	cmp	r3, r7
 8005af0:	ddd2      	ble.n	8005a98 <_printf_common+0x3c>
 8005af2:	0022      	movs	r2, r4
 8005af4:	2301      	movs	r3, #1
 8005af6:	9901      	ldr	r1, [sp, #4]
 8005af8:	9800      	ldr	r0, [sp, #0]
 8005afa:	9e08      	ldr	r6, [sp, #32]
 8005afc:	3219      	adds	r2, #25
 8005afe:	47b0      	blx	r6
 8005b00:	1c43      	adds	r3, r0, #1
 8005b02:	d1f0      	bne.n	8005ae6 <_printf_common+0x8a>
 8005b04:	2001      	movs	r0, #1
 8005b06:	4240      	negs	r0, r0
 8005b08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b0a:	2030      	movs	r0, #48	; 0x30
 8005b0c:	18e1      	adds	r1, r4, r3
 8005b0e:	3143      	adds	r1, #67	; 0x43
 8005b10:	7008      	strb	r0, [r1, #0]
 8005b12:	0021      	movs	r1, r4
 8005b14:	1c5a      	adds	r2, r3, #1
 8005b16:	3145      	adds	r1, #69	; 0x45
 8005b18:	7809      	ldrb	r1, [r1, #0]
 8005b1a:	18a2      	adds	r2, r4, r2
 8005b1c:	3243      	adds	r2, #67	; 0x43
 8005b1e:	3302      	adds	r3, #2
 8005b20:	7011      	strb	r1, [r2, #0]
 8005b22:	e7c1      	b.n	8005aa8 <_printf_common+0x4c>
 8005b24:	0022      	movs	r2, r4
 8005b26:	2301      	movs	r3, #1
 8005b28:	9901      	ldr	r1, [sp, #4]
 8005b2a:	9800      	ldr	r0, [sp, #0]
 8005b2c:	9e08      	ldr	r6, [sp, #32]
 8005b2e:	321a      	adds	r2, #26
 8005b30:	47b0      	blx	r6
 8005b32:	1c43      	adds	r3, r0, #1
 8005b34:	d0e6      	beq.n	8005b04 <_printf_common+0xa8>
 8005b36:	3701      	adds	r7, #1
 8005b38:	e7d1      	b.n	8005ade <_printf_common+0x82>
	...

08005b3c <_printf_i>:
 8005b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b3e:	b08b      	sub	sp, #44	; 0x2c
 8005b40:	9206      	str	r2, [sp, #24]
 8005b42:	000a      	movs	r2, r1
 8005b44:	3243      	adds	r2, #67	; 0x43
 8005b46:	9307      	str	r3, [sp, #28]
 8005b48:	9005      	str	r0, [sp, #20]
 8005b4a:	9204      	str	r2, [sp, #16]
 8005b4c:	7e0a      	ldrb	r2, [r1, #24]
 8005b4e:	000c      	movs	r4, r1
 8005b50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b52:	2a78      	cmp	r2, #120	; 0x78
 8005b54:	d807      	bhi.n	8005b66 <_printf_i+0x2a>
 8005b56:	2a62      	cmp	r2, #98	; 0x62
 8005b58:	d809      	bhi.n	8005b6e <_printf_i+0x32>
 8005b5a:	2a00      	cmp	r2, #0
 8005b5c:	d100      	bne.n	8005b60 <_printf_i+0x24>
 8005b5e:	e0c1      	b.n	8005ce4 <_printf_i+0x1a8>
 8005b60:	2a58      	cmp	r2, #88	; 0x58
 8005b62:	d100      	bne.n	8005b66 <_printf_i+0x2a>
 8005b64:	e08c      	b.n	8005c80 <_printf_i+0x144>
 8005b66:	0026      	movs	r6, r4
 8005b68:	3642      	adds	r6, #66	; 0x42
 8005b6a:	7032      	strb	r2, [r6, #0]
 8005b6c:	e022      	b.n	8005bb4 <_printf_i+0x78>
 8005b6e:	0010      	movs	r0, r2
 8005b70:	3863      	subs	r0, #99	; 0x63
 8005b72:	2815      	cmp	r0, #21
 8005b74:	d8f7      	bhi.n	8005b66 <_printf_i+0x2a>
 8005b76:	f7fa fae3 	bl	8000140 <__gnu_thumb1_case_shi>
 8005b7a:	0016      	.short	0x0016
 8005b7c:	fff6001f 	.word	0xfff6001f
 8005b80:	fff6fff6 	.word	0xfff6fff6
 8005b84:	001ffff6 	.word	0x001ffff6
 8005b88:	fff6fff6 	.word	0xfff6fff6
 8005b8c:	fff6fff6 	.word	0xfff6fff6
 8005b90:	003600a8 	.word	0x003600a8
 8005b94:	fff6009a 	.word	0xfff6009a
 8005b98:	00b9fff6 	.word	0x00b9fff6
 8005b9c:	0036fff6 	.word	0x0036fff6
 8005ba0:	fff6fff6 	.word	0xfff6fff6
 8005ba4:	009e      	.short	0x009e
 8005ba6:	0026      	movs	r6, r4
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	3642      	adds	r6, #66	; 0x42
 8005bac:	1d11      	adds	r1, r2, #4
 8005bae:	6019      	str	r1, [r3, #0]
 8005bb0:	6813      	ldr	r3, [r2, #0]
 8005bb2:	7033      	strb	r3, [r6, #0]
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e0a7      	b.n	8005d08 <_printf_i+0x1cc>
 8005bb8:	6808      	ldr	r0, [r1, #0]
 8005bba:	6819      	ldr	r1, [r3, #0]
 8005bbc:	1d0a      	adds	r2, r1, #4
 8005bbe:	0605      	lsls	r5, r0, #24
 8005bc0:	d50b      	bpl.n	8005bda <_printf_i+0x9e>
 8005bc2:	680d      	ldr	r5, [r1, #0]
 8005bc4:	601a      	str	r2, [r3, #0]
 8005bc6:	2d00      	cmp	r5, #0
 8005bc8:	da03      	bge.n	8005bd2 <_printf_i+0x96>
 8005bca:	232d      	movs	r3, #45	; 0x2d
 8005bcc:	9a04      	ldr	r2, [sp, #16]
 8005bce:	426d      	negs	r5, r5
 8005bd0:	7013      	strb	r3, [r2, #0]
 8005bd2:	4b61      	ldr	r3, [pc, #388]	; (8005d58 <_printf_i+0x21c>)
 8005bd4:	270a      	movs	r7, #10
 8005bd6:	9303      	str	r3, [sp, #12]
 8005bd8:	e01b      	b.n	8005c12 <_printf_i+0xd6>
 8005bda:	680d      	ldr	r5, [r1, #0]
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	0641      	lsls	r1, r0, #25
 8005be0:	d5f1      	bpl.n	8005bc6 <_printf_i+0x8a>
 8005be2:	b22d      	sxth	r5, r5
 8005be4:	e7ef      	b.n	8005bc6 <_printf_i+0x8a>
 8005be6:	680d      	ldr	r5, [r1, #0]
 8005be8:	6819      	ldr	r1, [r3, #0]
 8005bea:	1d08      	adds	r0, r1, #4
 8005bec:	6018      	str	r0, [r3, #0]
 8005bee:	062e      	lsls	r6, r5, #24
 8005bf0:	d501      	bpl.n	8005bf6 <_printf_i+0xba>
 8005bf2:	680d      	ldr	r5, [r1, #0]
 8005bf4:	e003      	b.n	8005bfe <_printf_i+0xc2>
 8005bf6:	066d      	lsls	r5, r5, #25
 8005bf8:	d5fb      	bpl.n	8005bf2 <_printf_i+0xb6>
 8005bfa:	680d      	ldr	r5, [r1, #0]
 8005bfc:	b2ad      	uxth	r5, r5
 8005bfe:	4b56      	ldr	r3, [pc, #344]	; (8005d58 <_printf_i+0x21c>)
 8005c00:	2708      	movs	r7, #8
 8005c02:	9303      	str	r3, [sp, #12]
 8005c04:	2a6f      	cmp	r2, #111	; 0x6f
 8005c06:	d000      	beq.n	8005c0a <_printf_i+0xce>
 8005c08:	3702      	adds	r7, #2
 8005c0a:	0023      	movs	r3, r4
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	3343      	adds	r3, #67	; 0x43
 8005c10:	701a      	strb	r2, [r3, #0]
 8005c12:	6863      	ldr	r3, [r4, #4]
 8005c14:	60a3      	str	r3, [r4, #8]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	db03      	blt.n	8005c22 <_printf_i+0xe6>
 8005c1a:	2204      	movs	r2, #4
 8005c1c:	6821      	ldr	r1, [r4, #0]
 8005c1e:	4391      	bics	r1, r2
 8005c20:	6021      	str	r1, [r4, #0]
 8005c22:	2d00      	cmp	r5, #0
 8005c24:	d102      	bne.n	8005c2c <_printf_i+0xf0>
 8005c26:	9e04      	ldr	r6, [sp, #16]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00c      	beq.n	8005c46 <_printf_i+0x10a>
 8005c2c:	9e04      	ldr	r6, [sp, #16]
 8005c2e:	0028      	movs	r0, r5
 8005c30:	0039      	movs	r1, r7
 8005c32:	f7fa fb15 	bl	8000260 <__aeabi_uidivmod>
 8005c36:	9b03      	ldr	r3, [sp, #12]
 8005c38:	3e01      	subs	r6, #1
 8005c3a:	5c5b      	ldrb	r3, [r3, r1]
 8005c3c:	7033      	strb	r3, [r6, #0]
 8005c3e:	002b      	movs	r3, r5
 8005c40:	0005      	movs	r5, r0
 8005c42:	429f      	cmp	r7, r3
 8005c44:	d9f3      	bls.n	8005c2e <_printf_i+0xf2>
 8005c46:	2f08      	cmp	r7, #8
 8005c48:	d109      	bne.n	8005c5e <_printf_i+0x122>
 8005c4a:	6823      	ldr	r3, [r4, #0]
 8005c4c:	07db      	lsls	r3, r3, #31
 8005c4e:	d506      	bpl.n	8005c5e <_printf_i+0x122>
 8005c50:	6863      	ldr	r3, [r4, #4]
 8005c52:	6922      	ldr	r2, [r4, #16]
 8005c54:	4293      	cmp	r3, r2
 8005c56:	dc02      	bgt.n	8005c5e <_printf_i+0x122>
 8005c58:	2330      	movs	r3, #48	; 0x30
 8005c5a:	3e01      	subs	r6, #1
 8005c5c:	7033      	strb	r3, [r6, #0]
 8005c5e:	9b04      	ldr	r3, [sp, #16]
 8005c60:	1b9b      	subs	r3, r3, r6
 8005c62:	6123      	str	r3, [r4, #16]
 8005c64:	9b07      	ldr	r3, [sp, #28]
 8005c66:	0021      	movs	r1, r4
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	9805      	ldr	r0, [sp, #20]
 8005c6c:	9b06      	ldr	r3, [sp, #24]
 8005c6e:	aa09      	add	r2, sp, #36	; 0x24
 8005c70:	f7ff fef4 	bl	8005a5c <_printf_common>
 8005c74:	1c43      	adds	r3, r0, #1
 8005c76:	d14c      	bne.n	8005d12 <_printf_i+0x1d6>
 8005c78:	2001      	movs	r0, #1
 8005c7a:	4240      	negs	r0, r0
 8005c7c:	b00b      	add	sp, #44	; 0x2c
 8005c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c80:	3145      	adds	r1, #69	; 0x45
 8005c82:	700a      	strb	r2, [r1, #0]
 8005c84:	4a34      	ldr	r2, [pc, #208]	; (8005d58 <_printf_i+0x21c>)
 8005c86:	9203      	str	r2, [sp, #12]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	6821      	ldr	r1, [r4, #0]
 8005c8c:	ca20      	ldmia	r2!, {r5}
 8005c8e:	601a      	str	r2, [r3, #0]
 8005c90:	0608      	lsls	r0, r1, #24
 8005c92:	d516      	bpl.n	8005cc2 <_printf_i+0x186>
 8005c94:	07cb      	lsls	r3, r1, #31
 8005c96:	d502      	bpl.n	8005c9e <_printf_i+0x162>
 8005c98:	2320      	movs	r3, #32
 8005c9a:	4319      	orrs	r1, r3
 8005c9c:	6021      	str	r1, [r4, #0]
 8005c9e:	2710      	movs	r7, #16
 8005ca0:	2d00      	cmp	r5, #0
 8005ca2:	d1b2      	bne.n	8005c0a <_printf_i+0xce>
 8005ca4:	2320      	movs	r3, #32
 8005ca6:	6822      	ldr	r2, [r4, #0]
 8005ca8:	439a      	bics	r2, r3
 8005caa:	6022      	str	r2, [r4, #0]
 8005cac:	e7ad      	b.n	8005c0a <_printf_i+0xce>
 8005cae:	2220      	movs	r2, #32
 8005cb0:	6809      	ldr	r1, [r1, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	6022      	str	r2, [r4, #0]
 8005cb6:	0022      	movs	r2, r4
 8005cb8:	2178      	movs	r1, #120	; 0x78
 8005cba:	3245      	adds	r2, #69	; 0x45
 8005cbc:	7011      	strb	r1, [r2, #0]
 8005cbe:	4a27      	ldr	r2, [pc, #156]	; (8005d5c <_printf_i+0x220>)
 8005cc0:	e7e1      	b.n	8005c86 <_printf_i+0x14a>
 8005cc2:	0648      	lsls	r0, r1, #25
 8005cc4:	d5e6      	bpl.n	8005c94 <_printf_i+0x158>
 8005cc6:	b2ad      	uxth	r5, r5
 8005cc8:	e7e4      	b.n	8005c94 <_printf_i+0x158>
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	680d      	ldr	r5, [r1, #0]
 8005cce:	1d10      	adds	r0, r2, #4
 8005cd0:	6949      	ldr	r1, [r1, #20]
 8005cd2:	6018      	str	r0, [r3, #0]
 8005cd4:	6813      	ldr	r3, [r2, #0]
 8005cd6:	062e      	lsls	r6, r5, #24
 8005cd8:	d501      	bpl.n	8005cde <_printf_i+0x1a2>
 8005cda:	6019      	str	r1, [r3, #0]
 8005cdc:	e002      	b.n	8005ce4 <_printf_i+0x1a8>
 8005cde:	066d      	lsls	r5, r5, #25
 8005ce0:	d5fb      	bpl.n	8005cda <_printf_i+0x19e>
 8005ce2:	8019      	strh	r1, [r3, #0]
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	9e04      	ldr	r6, [sp, #16]
 8005ce8:	6123      	str	r3, [r4, #16]
 8005cea:	e7bb      	b.n	8005c64 <_printf_i+0x128>
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	1d11      	adds	r1, r2, #4
 8005cf0:	6019      	str	r1, [r3, #0]
 8005cf2:	6816      	ldr	r6, [r2, #0]
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	0030      	movs	r0, r6
 8005cf8:	6862      	ldr	r2, [r4, #4]
 8005cfa:	f000 f831 	bl	8005d60 <memchr>
 8005cfe:	2800      	cmp	r0, #0
 8005d00:	d001      	beq.n	8005d06 <_printf_i+0x1ca>
 8005d02:	1b80      	subs	r0, r0, r6
 8005d04:	6060      	str	r0, [r4, #4]
 8005d06:	6863      	ldr	r3, [r4, #4]
 8005d08:	6123      	str	r3, [r4, #16]
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	9a04      	ldr	r2, [sp, #16]
 8005d0e:	7013      	strb	r3, [r2, #0]
 8005d10:	e7a8      	b.n	8005c64 <_printf_i+0x128>
 8005d12:	6923      	ldr	r3, [r4, #16]
 8005d14:	0032      	movs	r2, r6
 8005d16:	9906      	ldr	r1, [sp, #24]
 8005d18:	9805      	ldr	r0, [sp, #20]
 8005d1a:	9d07      	ldr	r5, [sp, #28]
 8005d1c:	47a8      	blx	r5
 8005d1e:	1c43      	adds	r3, r0, #1
 8005d20:	d0aa      	beq.n	8005c78 <_printf_i+0x13c>
 8005d22:	6823      	ldr	r3, [r4, #0]
 8005d24:	079b      	lsls	r3, r3, #30
 8005d26:	d415      	bmi.n	8005d54 <_printf_i+0x218>
 8005d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d2a:	68e0      	ldr	r0, [r4, #12]
 8005d2c:	4298      	cmp	r0, r3
 8005d2e:	daa5      	bge.n	8005c7c <_printf_i+0x140>
 8005d30:	0018      	movs	r0, r3
 8005d32:	e7a3      	b.n	8005c7c <_printf_i+0x140>
 8005d34:	0022      	movs	r2, r4
 8005d36:	2301      	movs	r3, #1
 8005d38:	9906      	ldr	r1, [sp, #24]
 8005d3a:	9805      	ldr	r0, [sp, #20]
 8005d3c:	9e07      	ldr	r6, [sp, #28]
 8005d3e:	3219      	adds	r2, #25
 8005d40:	47b0      	blx	r6
 8005d42:	1c43      	adds	r3, r0, #1
 8005d44:	d098      	beq.n	8005c78 <_printf_i+0x13c>
 8005d46:	3501      	adds	r5, #1
 8005d48:	68e3      	ldr	r3, [r4, #12]
 8005d4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d4c:	1a9b      	subs	r3, r3, r2
 8005d4e:	42ab      	cmp	r3, r5
 8005d50:	dcf0      	bgt.n	8005d34 <_printf_i+0x1f8>
 8005d52:	e7e9      	b.n	8005d28 <_printf_i+0x1ec>
 8005d54:	2500      	movs	r5, #0
 8005d56:	e7f7      	b.n	8005d48 <_printf_i+0x20c>
 8005d58:	0800621d 	.word	0x0800621d
 8005d5c:	0800622e 	.word	0x0800622e

08005d60 <memchr>:
 8005d60:	b2c9      	uxtb	r1, r1
 8005d62:	1882      	adds	r2, r0, r2
 8005d64:	4290      	cmp	r0, r2
 8005d66:	d101      	bne.n	8005d6c <memchr+0xc>
 8005d68:	2000      	movs	r0, #0
 8005d6a:	4770      	bx	lr
 8005d6c:	7803      	ldrb	r3, [r0, #0]
 8005d6e:	428b      	cmp	r3, r1
 8005d70:	d0fb      	beq.n	8005d6a <memchr+0xa>
 8005d72:	3001      	adds	r0, #1
 8005d74:	e7f6      	b.n	8005d64 <memchr+0x4>

08005d76 <memmove>:
 8005d76:	b510      	push	{r4, lr}
 8005d78:	4288      	cmp	r0, r1
 8005d7a:	d902      	bls.n	8005d82 <memmove+0xc>
 8005d7c:	188b      	adds	r3, r1, r2
 8005d7e:	4298      	cmp	r0, r3
 8005d80:	d303      	bcc.n	8005d8a <memmove+0x14>
 8005d82:	2300      	movs	r3, #0
 8005d84:	e007      	b.n	8005d96 <memmove+0x20>
 8005d86:	5c8b      	ldrb	r3, [r1, r2]
 8005d88:	5483      	strb	r3, [r0, r2]
 8005d8a:	3a01      	subs	r2, #1
 8005d8c:	d2fb      	bcs.n	8005d86 <memmove+0x10>
 8005d8e:	bd10      	pop	{r4, pc}
 8005d90:	5ccc      	ldrb	r4, [r1, r3]
 8005d92:	54c4      	strb	r4, [r0, r3]
 8005d94:	3301      	adds	r3, #1
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d1fa      	bne.n	8005d90 <memmove+0x1a>
 8005d9a:	e7f8      	b.n	8005d8e <memmove+0x18>

08005d9c <_realloc_r>:
 8005d9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d9e:	0007      	movs	r7, r0
 8005da0:	000e      	movs	r6, r1
 8005da2:	0014      	movs	r4, r2
 8005da4:	2900      	cmp	r1, #0
 8005da6:	d105      	bne.n	8005db4 <_realloc_r+0x18>
 8005da8:	0011      	movs	r1, r2
 8005daa:	f7ff fb7f 	bl	80054ac <_malloc_r>
 8005dae:	0005      	movs	r5, r0
 8005db0:	0028      	movs	r0, r5
 8005db2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005db4:	2a00      	cmp	r2, #0
 8005db6:	d103      	bne.n	8005dc0 <_realloc_r+0x24>
 8005db8:	f7ff fca4 	bl	8005704 <_free_r>
 8005dbc:	0025      	movs	r5, r4
 8005dbe:	e7f7      	b.n	8005db0 <_realloc_r+0x14>
 8005dc0:	f000 f81b 	bl	8005dfa <_malloc_usable_size_r>
 8005dc4:	9001      	str	r0, [sp, #4]
 8005dc6:	4284      	cmp	r4, r0
 8005dc8:	d803      	bhi.n	8005dd2 <_realloc_r+0x36>
 8005dca:	0035      	movs	r5, r6
 8005dcc:	0843      	lsrs	r3, r0, #1
 8005dce:	42a3      	cmp	r3, r4
 8005dd0:	d3ee      	bcc.n	8005db0 <_realloc_r+0x14>
 8005dd2:	0021      	movs	r1, r4
 8005dd4:	0038      	movs	r0, r7
 8005dd6:	f7ff fb69 	bl	80054ac <_malloc_r>
 8005dda:	1e05      	subs	r5, r0, #0
 8005ddc:	d0e8      	beq.n	8005db0 <_realloc_r+0x14>
 8005dde:	9b01      	ldr	r3, [sp, #4]
 8005de0:	0022      	movs	r2, r4
 8005de2:	429c      	cmp	r4, r3
 8005de4:	d900      	bls.n	8005de8 <_realloc_r+0x4c>
 8005de6:	001a      	movs	r2, r3
 8005de8:	0031      	movs	r1, r6
 8005dea:	0028      	movs	r0, r5
 8005dec:	f7ff fb2a 	bl	8005444 <memcpy>
 8005df0:	0031      	movs	r1, r6
 8005df2:	0038      	movs	r0, r7
 8005df4:	f7ff fc86 	bl	8005704 <_free_r>
 8005df8:	e7da      	b.n	8005db0 <_realloc_r+0x14>

08005dfa <_malloc_usable_size_r>:
 8005dfa:	1f0b      	subs	r3, r1, #4
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	1f18      	subs	r0, r3, #4
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	da01      	bge.n	8005e08 <_malloc_usable_size_r+0xe>
 8005e04:	580b      	ldr	r3, [r1, r0]
 8005e06:	18c0      	adds	r0, r0, r3
 8005e08:	4770      	bx	lr
	...

08005e0c <_init>:
 8005e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e0e:	46c0      	nop			; (mov r8, r8)
 8005e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e12:	bc08      	pop	{r3}
 8005e14:	469e      	mov	lr, r3
 8005e16:	4770      	bx	lr

08005e18 <_fini>:
 8005e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1a:	46c0      	nop			; (mov r8, r8)
 8005e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e1e:	bc08      	pop	{r3}
 8005e20:	469e      	mov	lr, r3
 8005e22:	4770      	bx	lr
