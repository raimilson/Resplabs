
Battery 640Wh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c84  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  08005d44  08005d44  00015d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800614c  0800614c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800614c  0800614c  0001614c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006154  08006154  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006154  08006154  00016154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006158  08006158  00016158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800615c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001180  20000078  080061d4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011f8  080061d4  000211f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018e68  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034cb  00000000  00000000  00038f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb8  00000000  00000000  0003c3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018e8  00000000  00000000  0003d290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013c56  00000000  00000000  0003eb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a106  00000000  00000000  000527ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000770c1  00000000  00000000  0006c8d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3995  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000358c  00000000  00000000  000e39e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000f2fa  00000000  00000000  000e6f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005d2c 	.word	0x08005d2c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08005d2c 	.word	0x08005d2c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f84c 	bl	8000300 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4647      	mov	r7, r8
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	4699      	mov	r9, r3
 8000280:	0c3b      	lsrs	r3, r7, #16
 8000282:	469c      	mov	ip, r3
 8000284:	0413      	lsls	r3, r2, #16
 8000286:	0c1b      	lsrs	r3, r3, #16
 8000288:	001d      	movs	r5, r3
 800028a:	000e      	movs	r6, r1
 800028c:	4661      	mov	r1, ip
 800028e:	0400      	lsls	r0, r0, #16
 8000290:	0c14      	lsrs	r4, r2, #16
 8000292:	0c00      	lsrs	r0, r0, #16
 8000294:	4345      	muls	r5, r0
 8000296:	434b      	muls	r3, r1
 8000298:	4360      	muls	r0, r4
 800029a:	4361      	muls	r1, r4
 800029c:	18c0      	adds	r0, r0, r3
 800029e:	0c2c      	lsrs	r4, r5, #16
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4372      	muls	r2, r6
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	4463      	add	r3, ip
 80002ba:	042d      	lsls	r5, r5, #16
 80002bc:	0c2d      	lsrs	r5, r5, #16
 80002be:	18c9      	adds	r1, r1, r3
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	1889      	adds	r1, r1, r2
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__aeabi_f2uiz>:
 80002d0:	219e      	movs	r1, #158	; 0x9e
 80002d2:	b510      	push	{r4, lr}
 80002d4:	05c9      	lsls	r1, r1, #23
 80002d6:	1c04      	adds	r4, r0, #0
 80002d8:	f001 ff96 	bl	8002208 <__aeabi_fcmpge>
 80002dc:	2800      	cmp	r0, #0
 80002de:	d103      	bne.n	80002e8 <__aeabi_f2uiz+0x18>
 80002e0:	1c20      	adds	r0, r4, #0
 80002e2:	f000 fcc5 	bl	8000c70 <__aeabi_f2iz>
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	219e      	movs	r1, #158	; 0x9e
 80002ea:	1c20      	adds	r0, r4, #0
 80002ec:	05c9      	lsls	r1, r1, #23
 80002ee:	f000 fb11 	bl	8000914 <__aeabi_fsub>
 80002f2:	f000 fcbd 	bl	8000c70 <__aeabi_f2iz>
 80002f6:	2380      	movs	r3, #128	; 0x80
 80002f8:	061b      	lsls	r3, r3, #24
 80002fa:	469c      	mov	ip, r3
 80002fc:	4460      	add	r0, ip
 80002fe:	e7f2      	b.n	80002e6 <__aeabi_f2uiz+0x16>

08000300 <__udivmoddi4>:
 8000300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000302:	4657      	mov	r7, sl
 8000304:	464e      	mov	r6, r9
 8000306:	4645      	mov	r5, r8
 8000308:	46de      	mov	lr, fp
 800030a:	b5e0      	push	{r5, r6, r7, lr}
 800030c:	0004      	movs	r4, r0
 800030e:	000d      	movs	r5, r1
 8000310:	4692      	mov	sl, r2
 8000312:	4699      	mov	r9, r3
 8000314:	b083      	sub	sp, #12
 8000316:	428b      	cmp	r3, r1
 8000318:	d830      	bhi.n	800037c <__udivmoddi4+0x7c>
 800031a:	d02d      	beq.n	8000378 <__udivmoddi4+0x78>
 800031c:	4649      	mov	r1, r9
 800031e:	4650      	mov	r0, sl
 8000320:	f001 ff9a 	bl	8002258 <__clzdi2>
 8000324:	0029      	movs	r1, r5
 8000326:	0006      	movs	r6, r0
 8000328:	0020      	movs	r0, r4
 800032a:	f001 ff95 	bl	8002258 <__clzdi2>
 800032e:	1a33      	subs	r3, r6, r0
 8000330:	4698      	mov	r8, r3
 8000332:	3b20      	subs	r3, #32
 8000334:	469b      	mov	fp, r3
 8000336:	d433      	bmi.n	80003a0 <__udivmoddi4+0xa0>
 8000338:	465a      	mov	r2, fp
 800033a:	4653      	mov	r3, sl
 800033c:	4093      	lsls	r3, r2
 800033e:	4642      	mov	r2, r8
 8000340:	001f      	movs	r7, r3
 8000342:	4653      	mov	r3, sl
 8000344:	4093      	lsls	r3, r2
 8000346:	001e      	movs	r6, r3
 8000348:	42af      	cmp	r7, r5
 800034a:	d83a      	bhi.n	80003c2 <__udivmoddi4+0xc2>
 800034c:	42af      	cmp	r7, r5
 800034e:	d100      	bne.n	8000352 <__udivmoddi4+0x52>
 8000350:	e078      	b.n	8000444 <__udivmoddi4+0x144>
 8000352:	465b      	mov	r3, fp
 8000354:	1ba4      	subs	r4, r4, r6
 8000356:	41bd      	sbcs	r5, r7
 8000358:	2b00      	cmp	r3, #0
 800035a:	da00      	bge.n	800035e <__udivmoddi4+0x5e>
 800035c:	e075      	b.n	800044a <__udivmoddi4+0x14a>
 800035e:	2200      	movs	r2, #0
 8000360:	2300      	movs	r3, #0
 8000362:	9200      	str	r2, [sp, #0]
 8000364:	9301      	str	r3, [sp, #4]
 8000366:	2301      	movs	r3, #1
 8000368:	465a      	mov	r2, fp
 800036a:	4093      	lsls	r3, r2
 800036c:	9301      	str	r3, [sp, #4]
 800036e:	2301      	movs	r3, #1
 8000370:	4642      	mov	r2, r8
 8000372:	4093      	lsls	r3, r2
 8000374:	9300      	str	r3, [sp, #0]
 8000376:	e028      	b.n	80003ca <__udivmoddi4+0xca>
 8000378:	4282      	cmp	r2, r0
 800037a:	d9cf      	bls.n	800031c <__udivmoddi4+0x1c>
 800037c:	2200      	movs	r2, #0
 800037e:	2300      	movs	r3, #0
 8000380:	9200      	str	r2, [sp, #0]
 8000382:	9301      	str	r3, [sp, #4]
 8000384:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <__udivmoddi4+0x8e>
 800038a:	601c      	str	r4, [r3, #0]
 800038c:	605d      	str	r5, [r3, #4]
 800038e:	9800      	ldr	r0, [sp, #0]
 8000390:	9901      	ldr	r1, [sp, #4]
 8000392:	b003      	add	sp, #12
 8000394:	bcf0      	pop	{r4, r5, r6, r7}
 8000396:	46bb      	mov	fp, r7
 8000398:	46b2      	mov	sl, r6
 800039a:	46a9      	mov	r9, r5
 800039c:	46a0      	mov	r8, r4
 800039e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003a0:	4642      	mov	r2, r8
 80003a2:	2320      	movs	r3, #32
 80003a4:	1a9b      	subs	r3, r3, r2
 80003a6:	4652      	mov	r2, sl
 80003a8:	40da      	lsrs	r2, r3
 80003aa:	4641      	mov	r1, r8
 80003ac:	0013      	movs	r3, r2
 80003ae:	464a      	mov	r2, r9
 80003b0:	408a      	lsls	r2, r1
 80003b2:	0017      	movs	r7, r2
 80003b4:	4642      	mov	r2, r8
 80003b6:	431f      	orrs	r7, r3
 80003b8:	4653      	mov	r3, sl
 80003ba:	4093      	lsls	r3, r2
 80003bc:	001e      	movs	r6, r3
 80003be:	42af      	cmp	r7, r5
 80003c0:	d9c4      	bls.n	800034c <__udivmoddi4+0x4c>
 80003c2:	2200      	movs	r2, #0
 80003c4:	2300      	movs	r3, #0
 80003c6:	9200      	str	r2, [sp, #0]
 80003c8:	9301      	str	r3, [sp, #4]
 80003ca:	4643      	mov	r3, r8
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d0d9      	beq.n	8000384 <__udivmoddi4+0x84>
 80003d0:	07fb      	lsls	r3, r7, #31
 80003d2:	0872      	lsrs	r2, r6, #1
 80003d4:	431a      	orrs	r2, r3
 80003d6:	4646      	mov	r6, r8
 80003d8:	087b      	lsrs	r3, r7, #1
 80003da:	e00e      	b.n	80003fa <__udivmoddi4+0xfa>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	d101      	bne.n	80003e4 <__udivmoddi4+0xe4>
 80003e0:	42a2      	cmp	r2, r4
 80003e2:	d80c      	bhi.n	80003fe <__udivmoddi4+0xfe>
 80003e4:	1aa4      	subs	r4, r4, r2
 80003e6:	419d      	sbcs	r5, r3
 80003e8:	2001      	movs	r0, #1
 80003ea:	1924      	adds	r4, r4, r4
 80003ec:	416d      	adcs	r5, r5
 80003ee:	2100      	movs	r1, #0
 80003f0:	3e01      	subs	r6, #1
 80003f2:	1824      	adds	r4, r4, r0
 80003f4:	414d      	adcs	r5, r1
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	d006      	beq.n	8000408 <__udivmoddi4+0x108>
 80003fa:	42ab      	cmp	r3, r5
 80003fc:	d9ee      	bls.n	80003dc <__udivmoddi4+0xdc>
 80003fe:	3e01      	subs	r6, #1
 8000400:	1924      	adds	r4, r4, r4
 8000402:	416d      	adcs	r5, r5
 8000404:	2e00      	cmp	r6, #0
 8000406:	d1f8      	bne.n	80003fa <__udivmoddi4+0xfa>
 8000408:	9800      	ldr	r0, [sp, #0]
 800040a:	9901      	ldr	r1, [sp, #4]
 800040c:	465b      	mov	r3, fp
 800040e:	1900      	adds	r0, r0, r4
 8000410:	4169      	adcs	r1, r5
 8000412:	2b00      	cmp	r3, #0
 8000414:	db24      	blt.n	8000460 <__udivmoddi4+0x160>
 8000416:	002b      	movs	r3, r5
 8000418:	465a      	mov	r2, fp
 800041a:	4644      	mov	r4, r8
 800041c:	40d3      	lsrs	r3, r2
 800041e:	002a      	movs	r2, r5
 8000420:	40e2      	lsrs	r2, r4
 8000422:	001c      	movs	r4, r3
 8000424:	465b      	mov	r3, fp
 8000426:	0015      	movs	r5, r2
 8000428:	2b00      	cmp	r3, #0
 800042a:	db2a      	blt.n	8000482 <__udivmoddi4+0x182>
 800042c:	0026      	movs	r6, r4
 800042e:	409e      	lsls	r6, r3
 8000430:	0033      	movs	r3, r6
 8000432:	0026      	movs	r6, r4
 8000434:	4647      	mov	r7, r8
 8000436:	40be      	lsls	r6, r7
 8000438:	0032      	movs	r2, r6
 800043a:	1a80      	subs	r0, r0, r2
 800043c:	4199      	sbcs	r1, r3
 800043e:	9000      	str	r0, [sp, #0]
 8000440:	9101      	str	r1, [sp, #4]
 8000442:	e79f      	b.n	8000384 <__udivmoddi4+0x84>
 8000444:	42a3      	cmp	r3, r4
 8000446:	d8bc      	bhi.n	80003c2 <__udivmoddi4+0xc2>
 8000448:	e783      	b.n	8000352 <__udivmoddi4+0x52>
 800044a:	4642      	mov	r2, r8
 800044c:	2320      	movs	r3, #32
 800044e:	2100      	movs	r1, #0
 8000450:	1a9b      	subs	r3, r3, r2
 8000452:	2200      	movs	r2, #0
 8000454:	9100      	str	r1, [sp, #0]
 8000456:	9201      	str	r2, [sp, #4]
 8000458:	2201      	movs	r2, #1
 800045a:	40da      	lsrs	r2, r3
 800045c:	9201      	str	r2, [sp, #4]
 800045e:	e786      	b.n	800036e <__udivmoddi4+0x6e>
 8000460:	4642      	mov	r2, r8
 8000462:	2320      	movs	r3, #32
 8000464:	1a9b      	subs	r3, r3, r2
 8000466:	002a      	movs	r2, r5
 8000468:	4646      	mov	r6, r8
 800046a:	409a      	lsls	r2, r3
 800046c:	0023      	movs	r3, r4
 800046e:	40f3      	lsrs	r3, r6
 8000470:	4644      	mov	r4, r8
 8000472:	4313      	orrs	r3, r2
 8000474:	002a      	movs	r2, r5
 8000476:	40e2      	lsrs	r2, r4
 8000478:	001c      	movs	r4, r3
 800047a:	465b      	mov	r3, fp
 800047c:	0015      	movs	r5, r2
 800047e:	2b00      	cmp	r3, #0
 8000480:	dad4      	bge.n	800042c <__udivmoddi4+0x12c>
 8000482:	4642      	mov	r2, r8
 8000484:	002f      	movs	r7, r5
 8000486:	2320      	movs	r3, #32
 8000488:	0026      	movs	r6, r4
 800048a:	4097      	lsls	r7, r2
 800048c:	1a9b      	subs	r3, r3, r2
 800048e:	40de      	lsrs	r6, r3
 8000490:	003b      	movs	r3, r7
 8000492:	4333      	orrs	r3, r6
 8000494:	e7cd      	b.n	8000432 <__udivmoddi4+0x132>
 8000496:	46c0      	nop			; (mov r8, r8)

08000498 <__aeabi_fdiv>:
 8000498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049a:	464f      	mov	r7, r9
 800049c:	4646      	mov	r6, r8
 800049e:	46d6      	mov	lr, sl
 80004a0:	0245      	lsls	r5, r0, #9
 80004a2:	b5c0      	push	{r6, r7, lr}
 80004a4:	0047      	lsls	r7, r0, #1
 80004a6:	1c0c      	adds	r4, r1, #0
 80004a8:	0a6d      	lsrs	r5, r5, #9
 80004aa:	0e3f      	lsrs	r7, r7, #24
 80004ac:	0fc6      	lsrs	r6, r0, #31
 80004ae:	2f00      	cmp	r7, #0
 80004b0:	d100      	bne.n	80004b4 <__aeabi_fdiv+0x1c>
 80004b2:	e070      	b.n	8000596 <__aeabi_fdiv+0xfe>
 80004b4:	2fff      	cmp	r7, #255	; 0xff
 80004b6:	d100      	bne.n	80004ba <__aeabi_fdiv+0x22>
 80004b8:	e075      	b.n	80005a6 <__aeabi_fdiv+0x10e>
 80004ba:	00eb      	lsls	r3, r5, #3
 80004bc:	2580      	movs	r5, #128	; 0x80
 80004be:	04ed      	lsls	r5, r5, #19
 80004c0:	431d      	orrs	r5, r3
 80004c2:	2300      	movs	r3, #0
 80004c4:	4699      	mov	r9, r3
 80004c6:	469a      	mov	sl, r3
 80004c8:	3f7f      	subs	r7, #127	; 0x7f
 80004ca:	0260      	lsls	r0, r4, #9
 80004cc:	0a43      	lsrs	r3, r0, #9
 80004ce:	4698      	mov	r8, r3
 80004d0:	0063      	lsls	r3, r4, #1
 80004d2:	0e1b      	lsrs	r3, r3, #24
 80004d4:	0fe4      	lsrs	r4, r4, #31
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d04e      	beq.n	8000578 <__aeabi_fdiv+0xe0>
 80004da:	2bff      	cmp	r3, #255	; 0xff
 80004dc:	d046      	beq.n	800056c <__aeabi_fdiv+0xd4>
 80004de:	4642      	mov	r2, r8
 80004e0:	00d0      	lsls	r0, r2, #3
 80004e2:	2280      	movs	r2, #128	; 0x80
 80004e4:	04d2      	lsls	r2, r2, #19
 80004e6:	4302      	orrs	r2, r0
 80004e8:	4690      	mov	r8, r2
 80004ea:	2200      	movs	r2, #0
 80004ec:	3b7f      	subs	r3, #127	; 0x7f
 80004ee:	0031      	movs	r1, r6
 80004f0:	1aff      	subs	r7, r7, r3
 80004f2:	464b      	mov	r3, r9
 80004f4:	4061      	eors	r1, r4
 80004f6:	b2c9      	uxtb	r1, r1
 80004f8:	4313      	orrs	r3, r2
 80004fa:	2b0f      	cmp	r3, #15
 80004fc:	d900      	bls.n	8000500 <__aeabi_fdiv+0x68>
 80004fe:	e0b5      	b.n	800066c <__aeabi_fdiv+0x1d4>
 8000500:	486e      	ldr	r0, [pc, #440]	; (80006bc <__aeabi_fdiv+0x224>)
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	58c3      	ldr	r3, [r0, r3]
 8000506:	469f      	mov	pc, r3
 8000508:	2300      	movs	r3, #0
 800050a:	4698      	mov	r8, r3
 800050c:	0026      	movs	r6, r4
 800050e:	4645      	mov	r5, r8
 8000510:	4692      	mov	sl, r2
 8000512:	4653      	mov	r3, sl
 8000514:	2b02      	cmp	r3, #2
 8000516:	d100      	bne.n	800051a <__aeabi_fdiv+0x82>
 8000518:	e089      	b.n	800062e <__aeabi_fdiv+0x196>
 800051a:	2b03      	cmp	r3, #3
 800051c:	d100      	bne.n	8000520 <__aeabi_fdiv+0x88>
 800051e:	e09e      	b.n	800065e <__aeabi_fdiv+0x1c6>
 8000520:	2b01      	cmp	r3, #1
 8000522:	d018      	beq.n	8000556 <__aeabi_fdiv+0xbe>
 8000524:	003b      	movs	r3, r7
 8000526:	337f      	adds	r3, #127	; 0x7f
 8000528:	2b00      	cmp	r3, #0
 800052a:	dd69      	ble.n	8000600 <__aeabi_fdiv+0x168>
 800052c:	076a      	lsls	r2, r5, #29
 800052e:	d004      	beq.n	800053a <__aeabi_fdiv+0xa2>
 8000530:	220f      	movs	r2, #15
 8000532:	402a      	ands	r2, r5
 8000534:	2a04      	cmp	r2, #4
 8000536:	d000      	beq.n	800053a <__aeabi_fdiv+0xa2>
 8000538:	3504      	adds	r5, #4
 800053a:	012a      	lsls	r2, r5, #4
 800053c:	d503      	bpl.n	8000546 <__aeabi_fdiv+0xae>
 800053e:	4b60      	ldr	r3, [pc, #384]	; (80006c0 <__aeabi_fdiv+0x228>)
 8000540:	401d      	ands	r5, r3
 8000542:	003b      	movs	r3, r7
 8000544:	3380      	adds	r3, #128	; 0x80
 8000546:	2bfe      	cmp	r3, #254	; 0xfe
 8000548:	dd00      	ble.n	800054c <__aeabi_fdiv+0xb4>
 800054a:	e070      	b.n	800062e <__aeabi_fdiv+0x196>
 800054c:	01ad      	lsls	r5, r5, #6
 800054e:	0a6d      	lsrs	r5, r5, #9
 8000550:	b2d8      	uxtb	r0, r3
 8000552:	e002      	b.n	800055a <__aeabi_fdiv+0xc2>
 8000554:	000e      	movs	r6, r1
 8000556:	2000      	movs	r0, #0
 8000558:	2500      	movs	r5, #0
 800055a:	05c0      	lsls	r0, r0, #23
 800055c:	4328      	orrs	r0, r5
 800055e:	07f6      	lsls	r6, r6, #31
 8000560:	4330      	orrs	r0, r6
 8000562:	bce0      	pop	{r5, r6, r7}
 8000564:	46ba      	mov	sl, r7
 8000566:	46b1      	mov	r9, r6
 8000568:	46a8      	mov	r8, r5
 800056a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056c:	4643      	mov	r3, r8
 800056e:	2b00      	cmp	r3, #0
 8000570:	d13f      	bne.n	80005f2 <__aeabi_fdiv+0x15a>
 8000572:	2202      	movs	r2, #2
 8000574:	3fff      	subs	r7, #255	; 0xff
 8000576:	e003      	b.n	8000580 <__aeabi_fdiv+0xe8>
 8000578:	4643      	mov	r3, r8
 800057a:	2b00      	cmp	r3, #0
 800057c:	d12d      	bne.n	80005da <__aeabi_fdiv+0x142>
 800057e:	2201      	movs	r2, #1
 8000580:	0031      	movs	r1, r6
 8000582:	464b      	mov	r3, r9
 8000584:	4061      	eors	r1, r4
 8000586:	b2c9      	uxtb	r1, r1
 8000588:	4313      	orrs	r3, r2
 800058a:	2b0f      	cmp	r3, #15
 800058c:	d834      	bhi.n	80005f8 <__aeabi_fdiv+0x160>
 800058e:	484d      	ldr	r0, [pc, #308]	; (80006c4 <__aeabi_fdiv+0x22c>)
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	58c3      	ldr	r3, [r0, r3]
 8000594:	469f      	mov	pc, r3
 8000596:	2d00      	cmp	r5, #0
 8000598:	d113      	bne.n	80005c2 <__aeabi_fdiv+0x12a>
 800059a:	2304      	movs	r3, #4
 800059c:	4699      	mov	r9, r3
 800059e:	3b03      	subs	r3, #3
 80005a0:	2700      	movs	r7, #0
 80005a2:	469a      	mov	sl, r3
 80005a4:	e791      	b.n	80004ca <__aeabi_fdiv+0x32>
 80005a6:	2d00      	cmp	r5, #0
 80005a8:	d105      	bne.n	80005b6 <__aeabi_fdiv+0x11e>
 80005aa:	2308      	movs	r3, #8
 80005ac:	4699      	mov	r9, r3
 80005ae:	3b06      	subs	r3, #6
 80005b0:	27ff      	movs	r7, #255	; 0xff
 80005b2:	469a      	mov	sl, r3
 80005b4:	e789      	b.n	80004ca <__aeabi_fdiv+0x32>
 80005b6:	230c      	movs	r3, #12
 80005b8:	4699      	mov	r9, r3
 80005ba:	3b09      	subs	r3, #9
 80005bc:	27ff      	movs	r7, #255	; 0xff
 80005be:	469a      	mov	sl, r3
 80005c0:	e783      	b.n	80004ca <__aeabi_fdiv+0x32>
 80005c2:	0028      	movs	r0, r5
 80005c4:	f001 fe2a 	bl	800221c <__clzsi2>
 80005c8:	2776      	movs	r7, #118	; 0x76
 80005ca:	1f43      	subs	r3, r0, #5
 80005cc:	409d      	lsls	r5, r3
 80005ce:	2300      	movs	r3, #0
 80005d0:	427f      	negs	r7, r7
 80005d2:	4699      	mov	r9, r3
 80005d4:	469a      	mov	sl, r3
 80005d6:	1a3f      	subs	r7, r7, r0
 80005d8:	e777      	b.n	80004ca <__aeabi_fdiv+0x32>
 80005da:	4640      	mov	r0, r8
 80005dc:	f001 fe1e 	bl	800221c <__clzsi2>
 80005e0:	4642      	mov	r2, r8
 80005e2:	1f43      	subs	r3, r0, #5
 80005e4:	409a      	lsls	r2, r3
 80005e6:	2376      	movs	r3, #118	; 0x76
 80005e8:	425b      	negs	r3, r3
 80005ea:	4690      	mov	r8, r2
 80005ec:	1a1b      	subs	r3, r3, r0
 80005ee:	2200      	movs	r2, #0
 80005f0:	e77d      	b.n	80004ee <__aeabi_fdiv+0x56>
 80005f2:	23ff      	movs	r3, #255	; 0xff
 80005f4:	2203      	movs	r2, #3
 80005f6:	e77a      	b.n	80004ee <__aeabi_fdiv+0x56>
 80005f8:	000e      	movs	r6, r1
 80005fa:	20ff      	movs	r0, #255	; 0xff
 80005fc:	2500      	movs	r5, #0
 80005fe:	e7ac      	b.n	800055a <__aeabi_fdiv+0xc2>
 8000600:	2001      	movs	r0, #1
 8000602:	1ac0      	subs	r0, r0, r3
 8000604:	281b      	cmp	r0, #27
 8000606:	dca6      	bgt.n	8000556 <__aeabi_fdiv+0xbe>
 8000608:	379e      	adds	r7, #158	; 0x9e
 800060a:	002a      	movs	r2, r5
 800060c:	40bd      	lsls	r5, r7
 800060e:	40c2      	lsrs	r2, r0
 8000610:	1e6b      	subs	r3, r5, #1
 8000612:	419d      	sbcs	r5, r3
 8000614:	4315      	orrs	r5, r2
 8000616:	076b      	lsls	r3, r5, #29
 8000618:	d004      	beq.n	8000624 <__aeabi_fdiv+0x18c>
 800061a:	230f      	movs	r3, #15
 800061c:	402b      	ands	r3, r5
 800061e:	2b04      	cmp	r3, #4
 8000620:	d000      	beq.n	8000624 <__aeabi_fdiv+0x18c>
 8000622:	3504      	adds	r5, #4
 8000624:	016b      	lsls	r3, r5, #5
 8000626:	d544      	bpl.n	80006b2 <__aeabi_fdiv+0x21a>
 8000628:	2001      	movs	r0, #1
 800062a:	2500      	movs	r5, #0
 800062c:	e795      	b.n	800055a <__aeabi_fdiv+0xc2>
 800062e:	20ff      	movs	r0, #255	; 0xff
 8000630:	2500      	movs	r5, #0
 8000632:	e792      	b.n	800055a <__aeabi_fdiv+0xc2>
 8000634:	2580      	movs	r5, #128	; 0x80
 8000636:	2600      	movs	r6, #0
 8000638:	20ff      	movs	r0, #255	; 0xff
 800063a:	03ed      	lsls	r5, r5, #15
 800063c:	e78d      	b.n	800055a <__aeabi_fdiv+0xc2>
 800063e:	2300      	movs	r3, #0
 8000640:	4698      	mov	r8, r3
 8000642:	2080      	movs	r0, #128	; 0x80
 8000644:	03c0      	lsls	r0, r0, #15
 8000646:	4205      	tst	r5, r0
 8000648:	d009      	beq.n	800065e <__aeabi_fdiv+0x1c6>
 800064a:	4643      	mov	r3, r8
 800064c:	4203      	tst	r3, r0
 800064e:	d106      	bne.n	800065e <__aeabi_fdiv+0x1c6>
 8000650:	4645      	mov	r5, r8
 8000652:	4305      	orrs	r5, r0
 8000654:	026d      	lsls	r5, r5, #9
 8000656:	0026      	movs	r6, r4
 8000658:	20ff      	movs	r0, #255	; 0xff
 800065a:	0a6d      	lsrs	r5, r5, #9
 800065c:	e77d      	b.n	800055a <__aeabi_fdiv+0xc2>
 800065e:	2080      	movs	r0, #128	; 0x80
 8000660:	03c0      	lsls	r0, r0, #15
 8000662:	4305      	orrs	r5, r0
 8000664:	026d      	lsls	r5, r5, #9
 8000666:	20ff      	movs	r0, #255	; 0xff
 8000668:	0a6d      	lsrs	r5, r5, #9
 800066a:	e776      	b.n	800055a <__aeabi_fdiv+0xc2>
 800066c:	4642      	mov	r2, r8
 800066e:	016b      	lsls	r3, r5, #5
 8000670:	0150      	lsls	r0, r2, #5
 8000672:	4283      	cmp	r3, r0
 8000674:	d219      	bcs.n	80006aa <__aeabi_fdiv+0x212>
 8000676:	221b      	movs	r2, #27
 8000678:	2500      	movs	r5, #0
 800067a:	3f01      	subs	r7, #1
 800067c:	2601      	movs	r6, #1
 800067e:	001c      	movs	r4, r3
 8000680:	006d      	lsls	r5, r5, #1
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	2c00      	cmp	r4, #0
 8000686:	db01      	blt.n	800068c <__aeabi_fdiv+0x1f4>
 8000688:	4298      	cmp	r0, r3
 800068a:	d801      	bhi.n	8000690 <__aeabi_fdiv+0x1f8>
 800068c:	1a1b      	subs	r3, r3, r0
 800068e:	4335      	orrs	r5, r6
 8000690:	3a01      	subs	r2, #1
 8000692:	2a00      	cmp	r2, #0
 8000694:	d1f3      	bne.n	800067e <__aeabi_fdiv+0x1e6>
 8000696:	1e5a      	subs	r2, r3, #1
 8000698:	4193      	sbcs	r3, r2
 800069a:	431d      	orrs	r5, r3
 800069c:	003b      	movs	r3, r7
 800069e:	337f      	adds	r3, #127	; 0x7f
 80006a0:	000e      	movs	r6, r1
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	dd00      	ble.n	80006a8 <__aeabi_fdiv+0x210>
 80006a6:	e741      	b.n	800052c <__aeabi_fdiv+0x94>
 80006a8:	e7aa      	b.n	8000600 <__aeabi_fdiv+0x168>
 80006aa:	221a      	movs	r2, #26
 80006ac:	2501      	movs	r5, #1
 80006ae:	1a1b      	subs	r3, r3, r0
 80006b0:	e7e4      	b.n	800067c <__aeabi_fdiv+0x1e4>
 80006b2:	01ad      	lsls	r5, r5, #6
 80006b4:	2000      	movs	r0, #0
 80006b6:	0a6d      	lsrs	r5, r5, #9
 80006b8:	e74f      	b.n	800055a <__aeabi_fdiv+0xc2>
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	08005db4 	.word	0x08005db4
 80006c0:	f7ffffff 	.word	0xf7ffffff
 80006c4:	08005df4 	.word	0x08005df4

080006c8 <__aeabi_fmul>:
 80006c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ca:	464f      	mov	r7, r9
 80006cc:	4646      	mov	r6, r8
 80006ce:	46d6      	mov	lr, sl
 80006d0:	0244      	lsls	r4, r0, #9
 80006d2:	0045      	lsls	r5, r0, #1
 80006d4:	b5c0      	push	{r6, r7, lr}
 80006d6:	0a64      	lsrs	r4, r4, #9
 80006d8:	1c0f      	adds	r7, r1, #0
 80006da:	0e2d      	lsrs	r5, r5, #24
 80006dc:	0fc6      	lsrs	r6, r0, #31
 80006de:	2d00      	cmp	r5, #0
 80006e0:	d100      	bne.n	80006e4 <__aeabi_fmul+0x1c>
 80006e2:	e08d      	b.n	8000800 <__aeabi_fmul+0x138>
 80006e4:	2dff      	cmp	r5, #255	; 0xff
 80006e6:	d100      	bne.n	80006ea <__aeabi_fmul+0x22>
 80006e8:	e092      	b.n	8000810 <__aeabi_fmul+0x148>
 80006ea:	2300      	movs	r3, #0
 80006ec:	2080      	movs	r0, #128	; 0x80
 80006ee:	4699      	mov	r9, r3
 80006f0:	469a      	mov	sl, r3
 80006f2:	00e4      	lsls	r4, r4, #3
 80006f4:	04c0      	lsls	r0, r0, #19
 80006f6:	4304      	orrs	r4, r0
 80006f8:	3d7f      	subs	r5, #127	; 0x7f
 80006fa:	0278      	lsls	r0, r7, #9
 80006fc:	0a43      	lsrs	r3, r0, #9
 80006fe:	4698      	mov	r8, r3
 8000700:	007b      	lsls	r3, r7, #1
 8000702:	0e1b      	lsrs	r3, r3, #24
 8000704:	0fff      	lsrs	r7, r7, #31
 8000706:	2b00      	cmp	r3, #0
 8000708:	d100      	bne.n	800070c <__aeabi_fmul+0x44>
 800070a:	e070      	b.n	80007ee <__aeabi_fmul+0x126>
 800070c:	2bff      	cmp	r3, #255	; 0xff
 800070e:	d100      	bne.n	8000712 <__aeabi_fmul+0x4a>
 8000710:	e086      	b.n	8000820 <__aeabi_fmul+0x158>
 8000712:	4642      	mov	r2, r8
 8000714:	00d0      	lsls	r0, r2, #3
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	3b7f      	subs	r3, #127	; 0x7f
 800071a:	18ed      	adds	r5, r5, r3
 800071c:	2300      	movs	r3, #0
 800071e:	04d2      	lsls	r2, r2, #19
 8000720:	4302      	orrs	r2, r0
 8000722:	4690      	mov	r8, r2
 8000724:	469c      	mov	ip, r3
 8000726:	0031      	movs	r1, r6
 8000728:	464b      	mov	r3, r9
 800072a:	4079      	eors	r1, r7
 800072c:	1c68      	adds	r0, r5, #1
 800072e:	2b0f      	cmp	r3, #15
 8000730:	d81c      	bhi.n	800076c <__aeabi_fmul+0xa4>
 8000732:	4a76      	ldr	r2, [pc, #472]	; (800090c <__aeabi_fmul+0x244>)
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	58d3      	ldr	r3, [r2, r3]
 8000738:	469f      	mov	pc, r3
 800073a:	0039      	movs	r1, r7
 800073c:	4644      	mov	r4, r8
 800073e:	46e2      	mov	sl, ip
 8000740:	4653      	mov	r3, sl
 8000742:	2b02      	cmp	r3, #2
 8000744:	d00f      	beq.n	8000766 <__aeabi_fmul+0x9e>
 8000746:	2b03      	cmp	r3, #3
 8000748:	d100      	bne.n	800074c <__aeabi_fmul+0x84>
 800074a:	e0d7      	b.n	80008fc <__aeabi_fmul+0x234>
 800074c:	2b01      	cmp	r3, #1
 800074e:	d137      	bne.n	80007c0 <__aeabi_fmul+0xf8>
 8000750:	2000      	movs	r0, #0
 8000752:	2400      	movs	r4, #0
 8000754:	05c0      	lsls	r0, r0, #23
 8000756:	4320      	orrs	r0, r4
 8000758:	07c9      	lsls	r1, r1, #31
 800075a:	4308      	orrs	r0, r1
 800075c:	bce0      	pop	{r5, r6, r7}
 800075e:	46ba      	mov	sl, r7
 8000760:	46b1      	mov	r9, r6
 8000762:	46a8      	mov	r8, r5
 8000764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000766:	20ff      	movs	r0, #255	; 0xff
 8000768:	2400      	movs	r4, #0
 800076a:	e7f3      	b.n	8000754 <__aeabi_fmul+0x8c>
 800076c:	0c26      	lsrs	r6, r4, #16
 800076e:	0424      	lsls	r4, r4, #16
 8000770:	0c22      	lsrs	r2, r4, #16
 8000772:	4644      	mov	r4, r8
 8000774:	0424      	lsls	r4, r4, #16
 8000776:	0c24      	lsrs	r4, r4, #16
 8000778:	4643      	mov	r3, r8
 800077a:	0027      	movs	r7, r4
 800077c:	0c1b      	lsrs	r3, r3, #16
 800077e:	4357      	muls	r7, r2
 8000780:	4374      	muls	r4, r6
 8000782:	435a      	muls	r2, r3
 8000784:	435e      	muls	r6, r3
 8000786:	1912      	adds	r2, r2, r4
 8000788:	0c3b      	lsrs	r3, r7, #16
 800078a:	189b      	adds	r3, r3, r2
 800078c:	429c      	cmp	r4, r3
 800078e:	d903      	bls.n	8000798 <__aeabi_fmul+0xd0>
 8000790:	2280      	movs	r2, #128	; 0x80
 8000792:	0252      	lsls	r2, r2, #9
 8000794:	4694      	mov	ip, r2
 8000796:	4466      	add	r6, ip
 8000798:	043f      	lsls	r7, r7, #16
 800079a:	041a      	lsls	r2, r3, #16
 800079c:	0c3f      	lsrs	r7, r7, #16
 800079e:	19d2      	adds	r2, r2, r7
 80007a0:	0194      	lsls	r4, r2, #6
 80007a2:	1e67      	subs	r7, r4, #1
 80007a4:	41bc      	sbcs	r4, r7
 80007a6:	0c1b      	lsrs	r3, r3, #16
 80007a8:	0e92      	lsrs	r2, r2, #26
 80007aa:	199b      	adds	r3, r3, r6
 80007ac:	4314      	orrs	r4, r2
 80007ae:	019b      	lsls	r3, r3, #6
 80007b0:	431c      	orrs	r4, r3
 80007b2:	011b      	lsls	r3, r3, #4
 80007b4:	d400      	bmi.n	80007b8 <__aeabi_fmul+0xf0>
 80007b6:	e09b      	b.n	80008f0 <__aeabi_fmul+0x228>
 80007b8:	2301      	movs	r3, #1
 80007ba:	0862      	lsrs	r2, r4, #1
 80007bc:	401c      	ands	r4, r3
 80007be:	4314      	orrs	r4, r2
 80007c0:	0002      	movs	r2, r0
 80007c2:	327f      	adds	r2, #127	; 0x7f
 80007c4:	2a00      	cmp	r2, #0
 80007c6:	dd64      	ble.n	8000892 <__aeabi_fmul+0x1ca>
 80007c8:	0763      	lsls	r3, r4, #29
 80007ca:	d004      	beq.n	80007d6 <__aeabi_fmul+0x10e>
 80007cc:	230f      	movs	r3, #15
 80007ce:	4023      	ands	r3, r4
 80007d0:	2b04      	cmp	r3, #4
 80007d2:	d000      	beq.n	80007d6 <__aeabi_fmul+0x10e>
 80007d4:	3404      	adds	r4, #4
 80007d6:	0123      	lsls	r3, r4, #4
 80007d8:	d503      	bpl.n	80007e2 <__aeabi_fmul+0x11a>
 80007da:	0002      	movs	r2, r0
 80007dc:	4b4c      	ldr	r3, [pc, #304]	; (8000910 <__aeabi_fmul+0x248>)
 80007de:	3280      	adds	r2, #128	; 0x80
 80007e0:	401c      	ands	r4, r3
 80007e2:	2afe      	cmp	r2, #254	; 0xfe
 80007e4:	dcbf      	bgt.n	8000766 <__aeabi_fmul+0x9e>
 80007e6:	01a4      	lsls	r4, r4, #6
 80007e8:	0a64      	lsrs	r4, r4, #9
 80007ea:	b2d0      	uxtb	r0, r2
 80007ec:	e7b2      	b.n	8000754 <__aeabi_fmul+0x8c>
 80007ee:	4643      	mov	r3, r8
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d13d      	bne.n	8000870 <__aeabi_fmul+0x1a8>
 80007f4:	464a      	mov	r2, r9
 80007f6:	3301      	adds	r3, #1
 80007f8:	431a      	orrs	r2, r3
 80007fa:	4691      	mov	r9, r2
 80007fc:	469c      	mov	ip, r3
 80007fe:	e792      	b.n	8000726 <__aeabi_fmul+0x5e>
 8000800:	2c00      	cmp	r4, #0
 8000802:	d129      	bne.n	8000858 <__aeabi_fmul+0x190>
 8000804:	2304      	movs	r3, #4
 8000806:	4699      	mov	r9, r3
 8000808:	3b03      	subs	r3, #3
 800080a:	2500      	movs	r5, #0
 800080c:	469a      	mov	sl, r3
 800080e:	e774      	b.n	80006fa <__aeabi_fmul+0x32>
 8000810:	2c00      	cmp	r4, #0
 8000812:	d11b      	bne.n	800084c <__aeabi_fmul+0x184>
 8000814:	2308      	movs	r3, #8
 8000816:	4699      	mov	r9, r3
 8000818:	3b06      	subs	r3, #6
 800081a:	25ff      	movs	r5, #255	; 0xff
 800081c:	469a      	mov	sl, r3
 800081e:	e76c      	b.n	80006fa <__aeabi_fmul+0x32>
 8000820:	4643      	mov	r3, r8
 8000822:	35ff      	adds	r5, #255	; 0xff
 8000824:	2b00      	cmp	r3, #0
 8000826:	d10b      	bne.n	8000840 <__aeabi_fmul+0x178>
 8000828:	2302      	movs	r3, #2
 800082a:	464a      	mov	r2, r9
 800082c:	431a      	orrs	r2, r3
 800082e:	4691      	mov	r9, r2
 8000830:	469c      	mov	ip, r3
 8000832:	e778      	b.n	8000726 <__aeabi_fmul+0x5e>
 8000834:	4653      	mov	r3, sl
 8000836:	0031      	movs	r1, r6
 8000838:	2b02      	cmp	r3, #2
 800083a:	d000      	beq.n	800083e <__aeabi_fmul+0x176>
 800083c:	e783      	b.n	8000746 <__aeabi_fmul+0x7e>
 800083e:	e792      	b.n	8000766 <__aeabi_fmul+0x9e>
 8000840:	2303      	movs	r3, #3
 8000842:	464a      	mov	r2, r9
 8000844:	431a      	orrs	r2, r3
 8000846:	4691      	mov	r9, r2
 8000848:	469c      	mov	ip, r3
 800084a:	e76c      	b.n	8000726 <__aeabi_fmul+0x5e>
 800084c:	230c      	movs	r3, #12
 800084e:	4699      	mov	r9, r3
 8000850:	3b09      	subs	r3, #9
 8000852:	25ff      	movs	r5, #255	; 0xff
 8000854:	469a      	mov	sl, r3
 8000856:	e750      	b.n	80006fa <__aeabi_fmul+0x32>
 8000858:	0020      	movs	r0, r4
 800085a:	f001 fcdf 	bl	800221c <__clzsi2>
 800085e:	2576      	movs	r5, #118	; 0x76
 8000860:	1f43      	subs	r3, r0, #5
 8000862:	409c      	lsls	r4, r3
 8000864:	2300      	movs	r3, #0
 8000866:	426d      	negs	r5, r5
 8000868:	4699      	mov	r9, r3
 800086a:	469a      	mov	sl, r3
 800086c:	1a2d      	subs	r5, r5, r0
 800086e:	e744      	b.n	80006fa <__aeabi_fmul+0x32>
 8000870:	4640      	mov	r0, r8
 8000872:	f001 fcd3 	bl	800221c <__clzsi2>
 8000876:	4642      	mov	r2, r8
 8000878:	1f43      	subs	r3, r0, #5
 800087a:	409a      	lsls	r2, r3
 800087c:	2300      	movs	r3, #0
 800087e:	1a2d      	subs	r5, r5, r0
 8000880:	4690      	mov	r8, r2
 8000882:	469c      	mov	ip, r3
 8000884:	3d76      	subs	r5, #118	; 0x76
 8000886:	e74e      	b.n	8000726 <__aeabi_fmul+0x5e>
 8000888:	2480      	movs	r4, #128	; 0x80
 800088a:	2100      	movs	r1, #0
 800088c:	20ff      	movs	r0, #255	; 0xff
 800088e:	03e4      	lsls	r4, r4, #15
 8000890:	e760      	b.n	8000754 <__aeabi_fmul+0x8c>
 8000892:	2301      	movs	r3, #1
 8000894:	1a9b      	subs	r3, r3, r2
 8000896:	2b1b      	cmp	r3, #27
 8000898:	dd00      	ble.n	800089c <__aeabi_fmul+0x1d4>
 800089a:	e759      	b.n	8000750 <__aeabi_fmul+0x88>
 800089c:	0022      	movs	r2, r4
 800089e:	309e      	adds	r0, #158	; 0x9e
 80008a0:	40da      	lsrs	r2, r3
 80008a2:	4084      	lsls	r4, r0
 80008a4:	0013      	movs	r3, r2
 80008a6:	1e62      	subs	r2, r4, #1
 80008a8:	4194      	sbcs	r4, r2
 80008aa:	431c      	orrs	r4, r3
 80008ac:	0763      	lsls	r3, r4, #29
 80008ae:	d004      	beq.n	80008ba <__aeabi_fmul+0x1f2>
 80008b0:	230f      	movs	r3, #15
 80008b2:	4023      	ands	r3, r4
 80008b4:	2b04      	cmp	r3, #4
 80008b6:	d000      	beq.n	80008ba <__aeabi_fmul+0x1f2>
 80008b8:	3404      	adds	r4, #4
 80008ba:	0163      	lsls	r3, r4, #5
 80008bc:	d51a      	bpl.n	80008f4 <__aeabi_fmul+0x22c>
 80008be:	2001      	movs	r0, #1
 80008c0:	2400      	movs	r4, #0
 80008c2:	e747      	b.n	8000754 <__aeabi_fmul+0x8c>
 80008c4:	2080      	movs	r0, #128	; 0x80
 80008c6:	03c0      	lsls	r0, r0, #15
 80008c8:	4204      	tst	r4, r0
 80008ca:	d009      	beq.n	80008e0 <__aeabi_fmul+0x218>
 80008cc:	4643      	mov	r3, r8
 80008ce:	4203      	tst	r3, r0
 80008d0:	d106      	bne.n	80008e0 <__aeabi_fmul+0x218>
 80008d2:	4644      	mov	r4, r8
 80008d4:	4304      	orrs	r4, r0
 80008d6:	0264      	lsls	r4, r4, #9
 80008d8:	0039      	movs	r1, r7
 80008da:	20ff      	movs	r0, #255	; 0xff
 80008dc:	0a64      	lsrs	r4, r4, #9
 80008de:	e739      	b.n	8000754 <__aeabi_fmul+0x8c>
 80008e0:	2080      	movs	r0, #128	; 0x80
 80008e2:	03c0      	lsls	r0, r0, #15
 80008e4:	4304      	orrs	r4, r0
 80008e6:	0264      	lsls	r4, r4, #9
 80008e8:	0031      	movs	r1, r6
 80008ea:	20ff      	movs	r0, #255	; 0xff
 80008ec:	0a64      	lsrs	r4, r4, #9
 80008ee:	e731      	b.n	8000754 <__aeabi_fmul+0x8c>
 80008f0:	0028      	movs	r0, r5
 80008f2:	e765      	b.n	80007c0 <__aeabi_fmul+0xf8>
 80008f4:	01a4      	lsls	r4, r4, #6
 80008f6:	2000      	movs	r0, #0
 80008f8:	0a64      	lsrs	r4, r4, #9
 80008fa:	e72b      	b.n	8000754 <__aeabi_fmul+0x8c>
 80008fc:	2080      	movs	r0, #128	; 0x80
 80008fe:	03c0      	lsls	r0, r0, #15
 8000900:	4304      	orrs	r4, r0
 8000902:	0264      	lsls	r4, r4, #9
 8000904:	20ff      	movs	r0, #255	; 0xff
 8000906:	0a64      	lsrs	r4, r4, #9
 8000908:	e724      	b.n	8000754 <__aeabi_fmul+0x8c>
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	08005e34 	.word	0x08005e34
 8000910:	f7ffffff 	.word	0xf7ffffff

08000914 <__aeabi_fsub>:
 8000914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000916:	46ce      	mov	lr, r9
 8000918:	4647      	mov	r7, r8
 800091a:	0243      	lsls	r3, r0, #9
 800091c:	0a5b      	lsrs	r3, r3, #9
 800091e:	024e      	lsls	r6, r1, #9
 8000920:	00da      	lsls	r2, r3, #3
 8000922:	4694      	mov	ip, r2
 8000924:	0a72      	lsrs	r2, r6, #9
 8000926:	4691      	mov	r9, r2
 8000928:	0045      	lsls	r5, r0, #1
 800092a:	004a      	lsls	r2, r1, #1
 800092c:	b580      	push	{r7, lr}
 800092e:	0e2d      	lsrs	r5, r5, #24
 8000930:	001f      	movs	r7, r3
 8000932:	0fc4      	lsrs	r4, r0, #31
 8000934:	0e12      	lsrs	r2, r2, #24
 8000936:	0fc9      	lsrs	r1, r1, #31
 8000938:	09b6      	lsrs	r6, r6, #6
 800093a:	2aff      	cmp	r2, #255	; 0xff
 800093c:	d05b      	beq.n	80009f6 <__aeabi_fsub+0xe2>
 800093e:	2001      	movs	r0, #1
 8000940:	4041      	eors	r1, r0
 8000942:	428c      	cmp	r4, r1
 8000944:	d039      	beq.n	80009ba <__aeabi_fsub+0xa6>
 8000946:	1aa8      	subs	r0, r5, r2
 8000948:	2800      	cmp	r0, #0
 800094a:	dd5a      	ble.n	8000a02 <__aeabi_fsub+0xee>
 800094c:	2a00      	cmp	r2, #0
 800094e:	d06a      	beq.n	8000a26 <__aeabi_fsub+0x112>
 8000950:	2dff      	cmp	r5, #255	; 0xff
 8000952:	d100      	bne.n	8000956 <__aeabi_fsub+0x42>
 8000954:	e0d9      	b.n	8000b0a <__aeabi_fsub+0x1f6>
 8000956:	2280      	movs	r2, #128	; 0x80
 8000958:	04d2      	lsls	r2, r2, #19
 800095a:	4316      	orrs	r6, r2
 800095c:	281b      	cmp	r0, #27
 800095e:	dc00      	bgt.n	8000962 <__aeabi_fsub+0x4e>
 8000960:	e0e9      	b.n	8000b36 <__aeabi_fsub+0x222>
 8000962:	2001      	movs	r0, #1
 8000964:	4663      	mov	r3, ip
 8000966:	1a18      	subs	r0, r3, r0
 8000968:	0143      	lsls	r3, r0, #5
 800096a:	d400      	bmi.n	800096e <__aeabi_fsub+0x5a>
 800096c:	e0b4      	b.n	8000ad8 <__aeabi_fsub+0x1c4>
 800096e:	0180      	lsls	r0, r0, #6
 8000970:	0987      	lsrs	r7, r0, #6
 8000972:	0038      	movs	r0, r7
 8000974:	f001 fc52 	bl	800221c <__clzsi2>
 8000978:	3805      	subs	r0, #5
 800097a:	4087      	lsls	r7, r0
 800097c:	4285      	cmp	r5, r0
 800097e:	dc00      	bgt.n	8000982 <__aeabi_fsub+0x6e>
 8000980:	e0cc      	b.n	8000b1c <__aeabi_fsub+0x208>
 8000982:	1a2d      	subs	r5, r5, r0
 8000984:	48b5      	ldr	r0, [pc, #724]	; (8000c5c <__aeabi_fsub+0x348>)
 8000986:	4038      	ands	r0, r7
 8000988:	0743      	lsls	r3, r0, #29
 800098a:	d004      	beq.n	8000996 <__aeabi_fsub+0x82>
 800098c:	230f      	movs	r3, #15
 800098e:	4003      	ands	r3, r0
 8000990:	2b04      	cmp	r3, #4
 8000992:	d000      	beq.n	8000996 <__aeabi_fsub+0x82>
 8000994:	3004      	adds	r0, #4
 8000996:	0143      	lsls	r3, r0, #5
 8000998:	d400      	bmi.n	800099c <__aeabi_fsub+0x88>
 800099a:	e0a0      	b.n	8000ade <__aeabi_fsub+0x1ca>
 800099c:	1c6a      	adds	r2, r5, #1
 800099e:	2dfe      	cmp	r5, #254	; 0xfe
 80009a0:	d100      	bne.n	80009a4 <__aeabi_fsub+0x90>
 80009a2:	e08d      	b.n	8000ac0 <__aeabi_fsub+0x1ac>
 80009a4:	0180      	lsls	r0, r0, #6
 80009a6:	0a47      	lsrs	r7, r0, #9
 80009a8:	b2d2      	uxtb	r2, r2
 80009aa:	05d0      	lsls	r0, r2, #23
 80009ac:	4338      	orrs	r0, r7
 80009ae:	07e4      	lsls	r4, r4, #31
 80009b0:	4320      	orrs	r0, r4
 80009b2:	bcc0      	pop	{r6, r7}
 80009b4:	46b9      	mov	r9, r7
 80009b6:	46b0      	mov	r8, r6
 80009b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009ba:	1aa8      	subs	r0, r5, r2
 80009bc:	4680      	mov	r8, r0
 80009be:	2800      	cmp	r0, #0
 80009c0:	dd45      	ble.n	8000a4e <__aeabi_fsub+0x13a>
 80009c2:	2a00      	cmp	r2, #0
 80009c4:	d070      	beq.n	8000aa8 <__aeabi_fsub+0x194>
 80009c6:	2dff      	cmp	r5, #255	; 0xff
 80009c8:	d100      	bne.n	80009cc <__aeabi_fsub+0xb8>
 80009ca:	e09e      	b.n	8000b0a <__aeabi_fsub+0x1f6>
 80009cc:	2380      	movs	r3, #128	; 0x80
 80009ce:	04db      	lsls	r3, r3, #19
 80009d0:	431e      	orrs	r6, r3
 80009d2:	4643      	mov	r3, r8
 80009d4:	2b1b      	cmp	r3, #27
 80009d6:	dc00      	bgt.n	80009da <__aeabi_fsub+0xc6>
 80009d8:	e0d2      	b.n	8000b80 <__aeabi_fsub+0x26c>
 80009da:	2001      	movs	r0, #1
 80009dc:	4460      	add	r0, ip
 80009de:	0143      	lsls	r3, r0, #5
 80009e0:	d57a      	bpl.n	8000ad8 <__aeabi_fsub+0x1c4>
 80009e2:	3501      	adds	r5, #1
 80009e4:	2dff      	cmp	r5, #255	; 0xff
 80009e6:	d06b      	beq.n	8000ac0 <__aeabi_fsub+0x1ac>
 80009e8:	2301      	movs	r3, #1
 80009ea:	4a9d      	ldr	r2, [pc, #628]	; (8000c60 <__aeabi_fsub+0x34c>)
 80009ec:	4003      	ands	r3, r0
 80009ee:	0840      	lsrs	r0, r0, #1
 80009f0:	4010      	ands	r0, r2
 80009f2:	4318      	orrs	r0, r3
 80009f4:	e7c8      	b.n	8000988 <__aeabi_fsub+0x74>
 80009f6:	2e00      	cmp	r6, #0
 80009f8:	d020      	beq.n	8000a3c <__aeabi_fsub+0x128>
 80009fa:	428c      	cmp	r4, r1
 80009fc:	d023      	beq.n	8000a46 <__aeabi_fsub+0x132>
 80009fe:	0028      	movs	r0, r5
 8000a00:	38ff      	subs	r0, #255	; 0xff
 8000a02:	2800      	cmp	r0, #0
 8000a04:	d039      	beq.n	8000a7a <__aeabi_fsub+0x166>
 8000a06:	1b57      	subs	r7, r2, r5
 8000a08:	2d00      	cmp	r5, #0
 8000a0a:	d000      	beq.n	8000a0e <__aeabi_fsub+0xfa>
 8000a0c:	e09d      	b.n	8000b4a <__aeabi_fsub+0x236>
 8000a0e:	4663      	mov	r3, ip
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d100      	bne.n	8000a16 <__aeabi_fsub+0x102>
 8000a14:	e0db      	b.n	8000bce <__aeabi_fsub+0x2ba>
 8000a16:	1e7b      	subs	r3, r7, #1
 8000a18:	2f01      	cmp	r7, #1
 8000a1a:	d100      	bne.n	8000a1e <__aeabi_fsub+0x10a>
 8000a1c:	e10d      	b.n	8000c3a <__aeabi_fsub+0x326>
 8000a1e:	2fff      	cmp	r7, #255	; 0xff
 8000a20:	d071      	beq.n	8000b06 <__aeabi_fsub+0x1f2>
 8000a22:	001f      	movs	r7, r3
 8000a24:	e098      	b.n	8000b58 <__aeabi_fsub+0x244>
 8000a26:	2e00      	cmp	r6, #0
 8000a28:	d100      	bne.n	8000a2c <__aeabi_fsub+0x118>
 8000a2a:	e0a7      	b.n	8000b7c <__aeabi_fsub+0x268>
 8000a2c:	1e42      	subs	r2, r0, #1
 8000a2e:	2801      	cmp	r0, #1
 8000a30:	d100      	bne.n	8000a34 <__aeabi_fsub+0x120>
 8000a32:	e0e6      	b.n	8000c02 <__aeabi_fsub+0x2ee>
 8000a34:	28ff      	cmp	r0, #255	; 0xff
 8000a36:	d068      	beq.n	8000b0a <__aeabi_fsub+0x1f6>
 8000a38:	0010      	movs	r0, r2
 8000a3a:	e78f      	b.n	800095c <__aeabi_fsub+0x48>
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	4041      	eors	r1, r0
 8000a40:	42a1      	cmp	r1, r4
 8000a42:	d000      	beq.n	8000a46 <__aeabi_fsub+0x132>
 8000a44:	e77f      	b.n	8000946 <__aeabi_fsub+0x32>
 8000a46:	20ff      	movs	r0, #255	; 0xff
 8000a48:	4240      	negs	r0, r0
 8000a4a:	4680      	mov	r8, r0
 8000a4c:	44a8      	add	r8, r5
 8000a4e:	4640      	mov	r0, r8
 8000a50:	2800      	cmp	r0, #0
 8000a52:	d038      	beq.n	8000ac6 <__aeabi_fsub+0x1b2>
 8000a54:	1b51      	subs	r1, r2, r5
 8000a56:	2d00      	cmp	r5, #0
 8000a58:	d100      	bne.n	8000a5c <__aeabi_fsub+0x148>
 8000a5a:	e0ae      	b.n	8000bba <__aeabi_fsub+0x2a6>
 8000a5c:	2aff      	cmp	r2, #255	; 0xff
 8000a5e:	d100      	bne.n	8000a62 <__aeabi_fsub+0x14e>
 8000a60:	e0df      	b.n	8000c22 <__aeabi_fsub+0x30e>
 8000a62:	2380      	movs	r3, #128	; 0x80
 8000a64:	4660      	mov	r0, ip
 8000a66:	04db      	lsls	r3, r3, #19
 8000a68:	4318      	orrs	r0, r3
 8000a6a:	4684      	mov	ip, r0
 8000a6c:	291b      	cmp	r1, #27
 8000a6e:	dc00      	bgt.n	8000a72 <__aeabi_fsub+0x15e>
 8000a70:	e0d9      	b.n	8000c26 <__aeabi_fsub+0x312>
 8000a72:	2001      	movs	r0, #1
 8000a74:	0015      	movs	r5, r2
 8000a76:	1980      	adds	r0, r0, r6
 8000a78:	e7b1      	b.n	80009de <__aeabi_fsub+0xca>
 8000a7a:	20fe      	movs	r0, #254	; 0xfe
 8000a7c:	1c6a      	adds	r2, r5, #1
 8000a7e:	4210      	tst	r0, r2
 8000a80:	d171      	bne.n	8000b66 <__aeabi_fsub+0x252>
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	d000      	beq.n	8000a88 <__aeabi_fsub+0x174>
 8000a86:	e0a6      	b.n	8000bd6 <__aeabi_fsub+0x2c2>
 8000a88:	4663      	mov	r3, ip
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_fsub+0x17c>
 8000a8e:	e0d9      	b.n	8000c44 <__aeabi_fsub+0x330>
 8000a90:	2200      	movs	r2, #0
 8000a92:	2e00      	cmp	r6, #0
 8000a94:	d100      	bne.n	8000a98 <__aeabi_fsub+0x184>
 8000a96:	e788      	b.n	80009aa <__aeabi_fsub+0x96>
 8000a98:	1b98      	subs	r0, r3, r6
 8000a9a:	0143      	lsls	r3, r0, #5
 8000a9c:	d400      	bmi.n	8000aa0 <__aeabi_fsub+0x18c>
 8000a9e:	e0e1      	b.n	8000c64 <__aeabi_fsub+0x350>
 8000aa0:	4663      	mov	r3, ip
 8000aa2:	000c      	movs	r4, r1
 8000aa4:	1af0      	subs	r0, r6, r3
 8000aa6:	e76f      	b.n	8000988 <__aeabi_fsub+0x74>
 8000aa8:	2e00      	cmp	r6, #0
 8000aaa:	d100      	bne.n	8000aae <__aeabi_fsub+0x19a>
 8000aac:	e0b7      	b.n	8000c1e <__aeabi_fsub+0x30a>
 8000aae:	0002      	movs	r2, r0
 8000ab0:	3a01      	subs	r2, #1
 8000ab2:	2801      	cmp	r0, #1
 8000ab4:	d100      	bne.n	8000ab8 <__aeabi_fsub+0x1a4>
 8000ab6:	e09c      	b.n	8000bf2 <__aeabi_fsub+0x2de>
 8000ab8:	28ff      	cmp	r0, #255	; 0xff
 8000aba:	d026      	beq.n	8000b0a <__aeabi_fsub+0x1f6>
 8000abc:	4690      	mov	r8, r2
 8000abe:	e788      	b.n	80009d2 <__aeabi_fsub+0xbe>
 8000ac0:	22ff      	movs	r2, #255	; 0xff
 8000ac2:	2700      	movs	r7, #0
 8000ac4:	e771      	b.n	80009aa <__aeabi_fsub+0x96>
 8000ac6:	20fe      	movs	r0, #254	; 0xfe
 8000ac8:	1c6a      	adds	r2, r5, #1
 8000aca:	4210      	tst	r0, r2
 8000acc:	d064      	beq.n	8000b98 <__aeabi_fsub+0x284>
 8000ace:	2aff      	cmp	r2, #255	; 0xff
 8000ad0:	d0f6      	beq.n	8000ac0 <__aeabi_fsub+0x1ac>
 8000ad2:	0015      	movs	r5, r2
 8000ad4:	4466      	add	r6, ip
 8000ad6:	0870      	lsrs	r0, r6, #1
 8000ad8:	0743      	lsls	r3, r0, #29
 8000ada:	d000      	beq.n	8000ade <__aeabi_fsub+0x1ca>
 8000adc:	e756      	b.n	800098c <__aeabi_fsub+0x78>
 8000ade:	08c3      	lsrs	r3, r0, #3
 8000ae0:	2dff      	cmp	r5, #255	; 0xff
 8000ae2:	d012      	beq.n	8000b0a <__aeabi_fsub+0x1f6>
 8000ae4:	025b      	lsls	r3, r3, #9
 8000ae6:	0a5f      	lsrs	r7, r3, #9
 8000ae8:	b2ea      	uxtb	r2, r5
 8000aea:	e75e      	b.n	80009aa <__aeabi_fsub+0x96>
 8000aec:	4662      	mov	r2, ip
 8000aee:	2a00      	cmp	r2, #0
 8000af0:	d100      	bne.n	8000af4 <__aeabi_fsub+0x1e0>
 8000af2:	e096      	b.n	8000c22 <__aeabi_fsub+0x30e>
 8000af4:	2e00      	cmp	r6, #0
 8000af6:	d008      	beq.n	8000b0a <__aeabi_fsub+0x1f6>
 8000af8:	2280      	movs	r2, #128	; 0x80
 8000afa:	03d2      	lsls	r2, r2, #15
 8000afc:	4213      	tst	r3, r2
 8000afe:	d004      	beq.n	8000b0a <__aeabi_fsub+0x1f6>
 8000b00:	4648      	mov	r0, r9
 8000b02:	4210      	tst	r0, r2
 8000b04:	d101      	bne.n	8000b0a <__aeabi_fsub+0x1f6>
 8000b06:	000c      	movs	r4, r1
 8000b08:	464b      	mov	r3, r9
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d0d8      	beq.n	8000ac0 <__aeabi_fsub+0x1ac>
 8000b0e:	2780      	movs	r7, #128	; 0x80
 8000b10:	03ff      	lsls	r7, r7, #15
 8000b12:	431f      	orrs	r7, r3
 8000b14:	027f      	lsls	r7, r7, #9
 8000b16:	22ff      	movs	r2, #255	; 0xff
 8000b18:	0a7f      	lsrs	r7, r7, #9
 8000b1a:	e746      	b.n	80009aa <__aeabi_fsub+0x96>
 8000b1c:	2320      	movs	r3, #32
 8000b1e:	003a      	movs	r2, r7
 8000b20:	1b45      	subs	r5, r0, r5
 8000b22:	0038      	movs	r0, r7
 8000b24:	3501      	adds	r5, #1
 8000b26:	40ea      	lsrs	r2, r5
 8000b28:	1b5d      	subs	r5, r3, r5
 8000b2a:	40a8      	lsls	r0, r5
 8000b2c:	1e43      	subs	r3, r0, #1
 8000b2e:	4198      	sbcs	r0, r3
 8000b30:	2500      	movs	r5, #0
 8000b32:	4310      	orrs	r0, r2
 8000b34:	e728      	b.n	8000988 <__aeabi_fsub+0x74>
 8000b36:	2320      	movs	r3, #32
 8000b38:	1a1b      	subs	r3, r3, r0
 8000b3a:	0032      	movs	r2, r6
 8000b3c:	409e      	lsls	r6, r3
 8000b3e:	40c2      	lsrs	r2, r0
 8000b40:	0030      	movs	r0, r6
 8000b42:	1e43      	subs	r3, r0, #1
 8000b44:	4198      	sbcs	r0, r3
 8000b46:	4310      	orrs	r0, r2
 8000b48:	e70c      	b.n	8000964 <__aeabi_fsub+0x50>
 8000b4a:	2aff      	cmp	r2, #255	; 0xff
 8000b4c:	d0db      	beq.n	8000b06 <__aeabi_fsub+0x1f2>
 8000b4e:	2380      	movs	r3, #128	; 0x80
 8000b50:	4660      	mov	r0, ip
 8000b52:	04db      	lsls	r3, r3, #19
 8000b54:	4318      	orrs	r0, r3
 8000b56:	4684      	mov	ip, r0
 8000b58:	2f1b      	cmp	r7, #27
 8000b5a:	dd56      	ble.n	8000c0a <__aeabi_fsub+0x2f6>
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	000c      	movs	r4, r1
 8000b60:	0015      	movs	r5, r2
 8000b62:	1a30      	subs	r0, r6, r0
 8000b64:	e700      	b.n	8000968 <__aeabi_fsub+0x54>
 8000b66:	4663      	mov	r3, ip
 8000b68:	1b9f      	subs	r7, r3, r6
 8000b6a:	017b      	lsls	r3, r7, #5
 8000b6c:	d43d      	bmi.n	8000bea <__aeabi_fsub+0x2d6>
 8000b6e:	2f00      	cmp	r7, #0
 8000b70:	d000      	beq.n	8000b74 <__aeabi_fsub+0x260>
 8000b72:	e6fe      	b.n	8000972 <__aeabi_fsub+0x5e>
 8000b74:	2400      	movs	r4, #0
 8000b76:	2200      	movs	r2, #0
 8000b78:	2700      	movs	r7, #0
 8000b7a:	e716      	b.n	80009aa <__aeabi_fsub+0x96>
 8000b7c:	0005      	movs	r5, r0
 8000b7e:	e7af      	b.n	8000ae0 <__aeabi_fsub+0x1cc>
 8000b80:	0032      	movs	r2, r6
 8000b82:	4643      	mov	r3, r8
 8000b84:	4641      	mov	r1, r8
 8000b86:	40da      	lsrs	r2, r3
 8000b88:	2320      	movs	r3, #32
 8000b8a:	1a5b      	subs	r3, r3, r1
 8000b8c:	409e      	lsls	r6, r3
 8000b8e:	0030      	movs	r0, r6
 8000b90:	1e43      	subs	r3, r0, #1
 8000b92:	4198      	sbcs	r0, r3
 8000b94:	4310      	orrs	r0, r2
 8000b96:	e721      	b.n	80009dc <__aeabi_fsub+0xc8>
 8000b98:	2d00      	cmp	r5, #0
 8000b9a:	d1a7      	bne.n	8000aec <__aeabi_fsub+0x1d8>
 8000b9c:	4663      	mov	r3, ip
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d059      	beq.n	8000c56 <__aeabi_fsub+0x342>
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2e00      	cmp	r6, #0
 8000ba6:	d100      	bne.n	8000baa <__aeabi_fsub+0x296>
 8000ba8:	e6ff      	b.n	80009aa <__aeabi_fsub+0x96>
 8000baa:	0030      	movs	r0, r6
 8000bac:	4460      	add	r0, ip
 8000bae:	0143      	lsls	r3, r0, #5
 8000bb0:	d592      	bpl.n	8000ad8 <__aeabi_fsub+0x1c4>
 8000bb2:	4b2a      	ldr	r3, [pc, #168]	; (8000c5c <__aeabi_fsub+0x348>)
 8000bb4:	3501      	adds	r5, #1
 8000bb6:	4018      	ands	r0, r3
 8000bb8:	e78e      	b.n	8000ad8 <__aeabi_fsub+0x1c4>
 8000bba:	4663      	mov	r3, ip
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d047      	beq.n	8000c50 <__aeabi_fsub+0x33c>
 8000bc0:	1e4b      	subs	r3, r1, #1
 8000bc2:	2901      	cmp	r1, #1
 8000bc4:	d015      	beq.n	8000bf2 <__aeabi_fsub+0x2de>
 8000bc6:	29ff      	cmp	r1, #255	; 0xff
 8000bc8:	d02b      	beq.n	8000c22 <__aeabi_fsub+0x30e>
 8000bca:	0019      	movs	r1, r3
 8000bcc:	e74e      	b.n	8000a6c <__aeabi_fsub+0x158>
 8000bce:	000c      	movs	r4, r1
 8000bd0:	464b      	mov	r3, r9
 8000bd2:	003d      	movs	r5, r7
 8000bd4:	e784      	b.n	8000ae0 <__aeabi_fsub+0x1cc>
 8000bd6:	4662      	mov	r2, ip
 8000bd8:	2a00      	cmp	r2, #0
 8000bda:	d18b      	bne.n	8000af4 <__aeabi_fsub+0x1e0>
 8000bdc:	2e00      	cmp	r6, #0
 8000bde:	d192      	bne.n	8000b06 <__aeabi_fsub+0x1f2>
 8000be0:	2780      	movs	r7, #128	; 0x80
 8000be2:	2400      	movs	r4, #0
 8000be4:	22ff      	movs	r2, #255	; 0xff
 8000be6:	03ff      	lsls	r7, r7, #15
 8000be8:	e6df      	b.n	80009aa <__aeabi_fsub+0x96>
 8000bea:	4663      	mov	r3, ip
 8000bec:	000c      	movs	r4, r1
 8000bee:	1af7      	subs	r7, r6, r3
 8000bf0:	e6bf      	b.n	8000972 <__aeabi_fsub+0x5e>
 8000bf2:	0030      	movs	r0, r6
 8000bf4:	4460      	add	r0, ip
 8000bf6:	2501      	movs	r5, #1
 8000bf8:	0143      	lsls	r3, r0, #5
 8000bfa:	d400      	bmi.n	8000bfe <__aeabi_fsub+0x2ea>
 8000bfc:	e76c      	b.n	8000ad8 <__aeabi_fsub+0x1c4>
 8000bfe:	2502      	movs	r5, #2
 8000c00:	e6f2      	b.n	80009e8 <__aeabi_fsub+0xd4>
 8000c02:	4663      	mov	r3, ip
 8000c04:	2501      	movs	r5, #1
 8000c06:	1b98      	subs	r0, r3, r6
 8000c08:	e6ae      	b.n	8000968 <__aeabi_fsub+0x54>
 8000c0a:	2320      	movs	r3, #32
 8000c0c:	4664      	mov	r4, ip
 8000c0e:	4660      	mov	r0, ip
 8000c10:	40fc      	lsrs	r4, r7
 8000c12:	1bdf      	subs	r7, r3, r7
 8000c14:	40b8      	lsls	r0, r7
 8000c16:	1e43      	subs	r3, r0, #1
 8000c18:	4198      	sbcs	r0, r3
 8000c1a:	4320      	orrs	r0, r4
 8000c1c:	e79f      	b.n	8000b5e <__aeabi_fsub+0x24a>
 8000c1e:	0005      	movs	r5, r0
 8000c20:	e75e      	b.n	8000ae0 <__aeabi_fsub+0x1cc>
 8000c22:	464b      	mov	r3, r9
 8000c24:	e771      	b.n	8000b0a <__aeabi_fsub+0x1f6>
 8000c26:	2320      	movs	r3, #32
 8000c28:	4665      	mov	r5, ip
 8000c2a:	4660      	mov	r0, ip
 8000c2c:	40cd      	lsrs	r5, r1
 8000c2e:	1a59      	subs	r1, r3, r1
 8000c30:	4088      	lsls	r0, r1
 8000c32:	1e43      	subs	r3, r0, #1
 8000c34:	4198      	sbcs	r0, r3
 8000c36:	4328      	orrs	r0, r5
 8000c38:	e71c      	b.n	8000a74 <__aeabi_fsub+0x160>
 8000c3a:	4663      	mov	r3, ip
 8000c3c:	000c      	movs	r4, r1
 8000c3e:	2501      	movs	r5, #1
 8000c40:	1af0      	subs	r0, r6, r3
 8000c42:	e691      	b.n	8000968 <__aeabi_fsub+0x54>
 8000c44:	2e00      	cmp	r6, #0
 8000c46:	d095      	beq.n	8000b74 <__aeabi_fsub+0x260>
 8000c48:	000c      	movs	r4, r1
 8000c4a:	464f      	mov	r7, r9
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	e6ac      	b.n	80009aa <__aeabi_fsub+0x96>
 8000c50:	464b      	mov	r3, r9
 8000c52:	000d      	movs	r5, r1
 8000c54:	e744      	b.n	8000ae0 <__aeabi_fsub+0x1cc>
 8000c56:	464f      	mov	r7, r9
 8000c58:	2200      	movs	r2, #0
 8000c5a:	e6a6      	b.n	80009aa <__aeabi_fsub+0x96>
 8000c5c:	fbffffff 	.word	0xfbffffff
 8000c60:	7dffffff 	.word	0x7dffffff
 8000c64:	2800      	cmp	r0, #0
 8000c66:	d000      	beq.n	8000c6a <__aeabi_fsub+0x356>
 8000c68:	e736      	b.n	8000ad8 <__aeabi_fsub+0x1c4>
 8000c6a:	2400      	movs	r4, #0
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	e69c      	b.n	80009aa <__aeabi_fsub+0x96>

08000c70 <__aeabi_f2iz>:
 8000c70:	0241      	lsls	r1, r0, #9
 8000c72:	0042      	lsls	r2, r0, #1
 8000c74:	0fc3      	lsrs	r3, r0, #31
 8000c76:	0a49      	lsrs	r1, r1, #9
 8000c78:	2000      	movs	r0, #0
 8000c7a:	0e12      	lsrs	r2, r2, #24
 8000c7c:	2a7e      	cmp	r2, #126	; 0x7e
 8000c7e:	dd03      	ble.n	8000c88 <__aeabi_f2iz+0x18>
 8000c80:	2a9d      	cmp	r2, #157	; 0x9d
 8000c82:	dd02      	ble.n	8000c8a <__aeabi_f2iz+0x1a>
 8000c84:	4a09      	ldr	r2, [pc, #36]	; (8000cac <__aeabi_f2iz+0x3c>)
 8000c86:	1898      	adds	r0, r3, r2
 8000c88:	4770      	bx	lr
 8000c8a:	2080      	movs	r0, #128	; 0x80
 8000c8c:	0400      	lsls	r0, r0, #16
 8000c8e:	4301      	orrs	r1, r0
 8000c90:	2a95      	cmp	r2, #149	; 0x95
 8000c92:	dc07      	bgt.n	8000ca4 <__aeabi_f2iz+0x34>
 8000c94:	2096      	movs	r0, #150	; 0x96
 8000c96:	1a82      	subs	r2, r0, r2
 8000c98:	40d1      	lsrs	r1, r2
 8000c9a:	4248      	negs	r0, r1
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d1f3      	bne.n	8000c88 <__aeabi_f2iz+0x18>
 8000ca0:	0008      	movs	r0, r1
 8000ca2:	e7f1      	b.n	8000c88 <__aeabi_f2iz+0x18>
 8000ca4:	3a96      	subs	r2, #150	; 0x96
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	e7f7      	b.n	8000c9a <__aeabi_f2iz+0x2a>
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	7fffffff 	.word	0x7fffffff

08000cb0 <__aeabi_ui2f>:
 8000cb0:	b570      	push	{r4, r5, r6, lr}
 8000cb2:	1e05      	subs	r5, r0, #0
 8000cb4:	d00e      	beq.n	8000cd4 <__aeabi_ui2f+0x24>
 8000cb6:	f001 fab1 	bl	800221c <__clzsi2>
 8000cba:	239e      	movs	r3, #158	; 0x9e
 8000cbc:	0004      	movs	r4, r0
 8000cbe:	1a1b      	subs	r3, r3, r0
 8000cc0:	2b96      	cmp	r3, #150	; 0x96
 8000cc2:	dc0c      	bgt.n	8000cde <__aeabi_ui2f+0x2e>
 8000cc4:	2808      	cmp	r0, #8
 8000cc6:	dd01      	ble.n	8000ccc <__aeabi_ui2f+0x1c>
 8000cc8:	3c08      	subs	r4, #8
 8000cca:	40a5      	lsls	r5, r4
 8000ccc:	026d      	lsls	r5, r5, #9
 8000cce:	0a6d      	lsrs	r5, r5, #9
 8000cd0:	b2d8      	uxtb	r0, r3
 8000cd2:	e001      	b.n	8000cd8 <__aeabi_ui2f+0x28>
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	2500      	movs	r5, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	4328      	orrs	r0, r5
 8000cdc:	bd70      	pop	{r4, r5, r6, pc}
 8000cde:	2b99      	cmp	r3, #153	; 0x99
 8000ce0:	dd09      	ble.n	8000cf6 <__aeabi_ui2f+0x46>
 8000ce2:	0002      	movs	r2, r0
 8000ce4:	0029      	movs	r1, r5
 8000ce6:	321b      	adds	r2, #27
 8000ce8:	4091      	lsls	r1, r2
 8000cea:	1e4a      	subs	r2, r1, #1
 8000cec:	4191      	sbcs	r1, r2
 8000cee:	2205      	movs	r2, #5
 8000cf0:	1a12      	subs	r2, r2, r0
 8000cf2:	40d5      	lsrs	r5, r2
 8000cf4:	430d      	orrs	r5, r1
 8000cf6:	2c05      	cmp	r4, #5
 8000cf8:	dc12      	bgt.n	8000d20 <__aeabi_ui2f+0x70>
 8000cfa:	0029      	movs	r1, r5
 8000cfc:	4e0c      	ldr	r6, [pc, #48]	; (8000d30 <__aeabi_ui2f+0x80>)
 8000cfe:	4031      	ands	r1, r6
 8000d00:	076a      	lsls	r2, r5, #29
 8000d02:	d009      	beq.n	8000d18 <__aeabi_ui2f+0x68>
 8000d04:	200f      	movs	r0, #15
 8000d06:	4028      	ands	r0, r5
 8000d08:	2804      	cmp	r0, #4
 8000d0a:	d005      	beq.n	8000d18 <__aeabi_ui2f+0x68>
 8000d0c:	3104      	adds	r1, #4
 8000d0e:	014a      	lsls	r2, r1, #5
 8000d10:	d502      	bpl.n	8000d18 <__aeabi_ui2f+0x68>
 8000d12:	239f      	movs	r3, #159	; 0x9f
 8000d14:	4031      	ands	r1, r6
 8000d16:	1b1b      	subs	r3, r3, r4
 8000d18:	0189      	lsls	r1, r1, #6
 8000d1a:	0a4d      	lsrs	r5, r1, #9
 8000d1c:	b2d8      	uxtb	r0, r3
 8000d1e:	e7db      	b.n	8000cd8 <__aeabi_ui2f+0x28>
 8000d20:	1f62      	subs	r2, r4, #5
 8000d22:	4095      	lsls	r5, r2
 8000d24:	0029      	movs	r1, r5
 8000d26:	4e02      	ldr	r6, [pc, #8]	; (8000d30 <__aeabi_ui2f+0x80>)
 8000d28:	4031      	ands	r1, r6
 8000d2a:	076a      	lsls	r2, r5, #29
 8000d2c:	d0f4      	beq.n	8000d18 <__aeabi_ui2f+0x68>
 8000d2e:	e7e9      	b.n	8000d04 <__aeabi_ui2f+0x54>
 8000d30:	fbffffff 	.word	0xfbffffff

08000d34 <__aeabi_dadd>:
 8000d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d36:	464f      	mov	r7, r9
 8000d38:	4646      	mov	r6, r8
 8000d3a:	46d6      	mov	lr, sl
 8000d3c:	000d      	movs	r5, r1
 8000d3e:	0004      	movs	r4, r0
 8000d40:	b5c0      	push	{r6, r7, lr}
 8000d42:	001f      	movs	r7, r3
 8000d44:	0011      	movs	r1, r2
 8000d46:	0328      	lsls	r0, r5, #12
 8000d48:	0f62      	lsrs	r2, r4, #29
 8000d4a:	0a40      	lsrs	r0, r0, #9
 8000d4c:	4310      	orrs	r0, r2
 8000d4e:	007a      	lsls	r2, r7, #1
 8000d50:	0d52      	lsrs	r2, r2, #21
 8000d52:	00e3      	lsls	r3, r4, #3
 8000d54:	033c      	lsls	r4, r7, #12
 8000d56:	4691      	mov	r9, r2
 8000d58:	0a64      	lsrs	r4, r4, #9
 8000d5a:	0ffa      	lsrs	r2, r7, #31
 8000d5c:	0f4f      	lsrs	r7, r1, #29
 8000d5e:	006e      	lsls	r6, r5, #1
 8000d60:	4327      	orrs	r7, r4
 8000d62:	4692      	mov	sl, r2
 8000d64:	46b8      	mov	r8, r7
 8000d66:	0d76      	lsrs	r6, r6, #21
 8000d68:	0fed      	lsrs	r5, r5, #31
 8000d6a:	00c9      	lsls	r1, r1, #3
 8000d6c:	4295      	cmp	r5, r2
 8000d6e:	d100      	bne.n	8000d72 <__aeabi_dadd+0x3e>
 8000d70:	e099      	b.n	8000ea6 <__aeabi_dadd+0x172>
 8000d72:	464c      	mov	r4, r9
 8000d74:	1b34      	subs	r4, r6, r4
 8000d76:	46a4      	mov	ip, r4
 8000d78:	2c00      	cmp	r4, #0
 8000d7a:	dc00      	bgt.n	8000d7e <__aeabi_dadd+0x4a>
 8000d7c:	e07c      	b.n	8000e78 <__aeabi_dadd+0x144>
 8000d7e:	464a      	mov	r2, r9
 8000d80:	2a00      	cmp	r2, #0
 8000d82:	d100      	bne.n	8000d86 <__aeabi_dadd+0x52>
 8000d84:	e0b8      	b.n	8000ef8 <__aeabi_dadd+0x1c4>
 8000d86:	4ac5      	ldr	r2, [pc, #788]	; (800109c <__aeabi_dadd+0x368>)
 8000d88:	4296      	cmp	r6, r2
 8000d8a:	d100      	bne.n	8000d8e <__aeabi_dadd+0x5a>
 8000d8c:	e11c      	b.n	8000fc8 <__aeabi_dadd+0x294>
 8000d8e:	2280      	movs	r2, #128	; 0x80
 8000d90:	003c      	movs	r4, r7
 8000d92:	0412      	lsls	r2, r2, #16
 8000d94:	4314      	orrs	r4, r2
 8000d96:	46a0      	mov	r8, r4
 8000d98:	4662      	mov	r2, ip
 8000d9a:	2a38      	cmp	r2, #56	; 0x38
 8000d9c:	dd00      	ble.n	8000da0 <__aeabi_dadd+0x6c>
 8000d9e:	e161      	b.n	8001064 <__aeabi_dadd+0x330>
 8000da0:	2a1f      	cmp	r2, #31
 8000da2:	dd00      	ble.n	8000da6 <__aeabi_dadd+0x72>
 8000da4:	e1cc      	b.n	8001140 <__aeabi_dadd+0x40c>
 8000da6:	4664      	mov	r4, ip
 8000da8:	2220      	movs	r2, #32
 8000daa:	1b12      	subs	r2, r2, r4
 8000dac:	4644      	mov	r4, r8
 8000dae:	4094      	lsls	r4, r2
 8000db0:	000f      	movs	r7, r1
 8000db2:	46a1      	mov	r9, r4
 8000db4:	4664      	mov	r4, ip
 8000db6:	4091      	lsls	r1, r2
 8000db8:	40e7      	lsrs	r7, r4
 8000dba:	464c      	mov	r4, r9
 8000dbc:	1e4a      	subs	r2, r1, #1
 8000dbe:	4191      	sbcs	r1, r2
 8000dc0:	433c      	orrs	r4, r7
 8000dc2:	4642      	mov	r2, r8
 8000dc4:	4321      	orrs	r1, r4
 8000dc6:	4664      	mov	r4, ip
 8000dc8:	40e2      	lsrs	r2, r4
 8000dca:	1a80      	subs	r0, r0, r2
 8000dcc:	1a5c      	subs	r4, r3, r1
 8000dce:	42a3      	cmp	r3, r4
 8000dd0:	419b      	sbcs	r3, r3
 8000dd2:	425f      	negs	r7, r3
 8000dd4:	1bc7      	subs	r7, r0, r7
 8000dd6:	023b      	lsls	r3, r7, #8
 8000dd8:	d400      	bmi.n	8000ddc <__aeabi_dadd+0xa8>
 8000dda:	e0d0      	b.n	8000f7e <__aeabi_dadd+0x24a>
 8000ddc:	027f      	lsls	r7, r7, #9
 8000dde:	0a7f      	lsrs	r7, r7, #9
 8000de0:	2f00      	cmp	r7, #0
 8000de2:	d100      	bne.n	8000de6 <__aeabi_dadd+0xb2>
 8000de4:	e0ff      	b.n	8000fe6 <__aeabi_dadd+0x2b2>
 8000de6:	0038      	movs	r0, r7
 8000de8:	f001 fa18 	bl	800221c <__clzsi2>
 8000dec:	0001      	movs	r1, r0
 8000dee:	3908      	subs	r1, #8
 8000df0:	2320      	movs	r3, #32
 8000df2:	0022      	movs	r2, r4
 8000df4:	1a5b      	subs	r3, r3, r1
 8000df6:	408f      	lsls	r7, r1
 8000df8:	40da      	lsrs	r2, r3
 8000dfa:	408c      	lsls	r4, r1
 8000dfc:	4317      	orrs	r7, r2
 8000dfe:	42b1      	cmp	r1, r6
 8000e00:	da00      	bge.n	8000e04 <__aeabi_dadd+0xd0>
 8000e02:	e0ff      	b.n	8001004 <__aeabi_dadd+0x2d0>
 8000e04:	1b89      	subs	r1, r1, r6
 8000e06:	1c4b      	adds	r3, r1, #1
 8000e08:	2b1f      	cmp	r3, #31
 8000e0a:	dd00      	ble.n	8000e0e <__aeabi_dadd+0xda>
 8000e0c:	e0a8      	b.n	8000f60 <__aeabi_dadd+0x22c>
 8000e0e:	2220      	movs	r2, #32
 8000e10:	0039      	movs	r1, r7
 8000e12:	1ad2      	subs	r2, r2, r3
 8000e14:	0020      	movs	r0, r4
 8000e16:	4094      	lsls	r4, r2
 8000e18:	4091      	lsls	r1, r2
 8000e1a:	40d8      	lsrs	r0, r3
 8000e1c:	1e62      	subs	r2, r4, #1
 8000e1e:	4194      	sbcs	r4, r2
 8000e20:	40df      	lsrs	r7, r3
 8000e22:	2600      	movs	r6, #0
 8000e24:	4301      	orrs	r1, r0
 8000e26:	430c      	orrs	r4, r1
 8000e28:	0763      	lsls	r3, r4, #29
 8000e2a:	d009      	beq.n	8000e40 <__aeabi_dadd+0x10c>
 8000e2c:	230f      	movs	r3, #15
 8000e2e:	4023      	ands	r3, r4
 8000e30:	2b04      	cmp	r3, #4
 8000e32:	d005      	beq.n	8000e40 <__aeabi_dadd+0x10c>
 8000e34:	1d23      	adds	r3, r4, #4
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	41a4      	sbcs	r4, r4
 8000e3a:	4264      	negs	r4, r4
 8000e3c:	193f      	adds	r7, r7, r4
 8000e3e:	001c      	movs	r4, r3
 8000e40:	023b      	lsls	r3, r7, #8
 8000e42:	d400      	bmi.n	8000e46 <__aeabi_dadd+0x112>
 8000e44:	e09e      	b.n	8000f84 <__aeabi_dadd+0x250>
 8000e46:	4b95      	ldr	r3, [pc, #596]	; (800109c <__aeabi_dadd+0x368>)
 8000e48:	3601      	adds	r6, #1
 8000e4a:	429e      	cmp	r6, r3
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_dadd+0x11c>
 8000e4e:	e0b7      	b.n	8000fc0 <__aeabi_dadd+0x28c>
 8000e50:	4a93      	ldr	r2, [pc, #588]	; (80010a0 <__aeabi_dadd+0x36c>)
 8000e52:	08e4      	lsrs	r4, r4, #3
 8000e54:	4017      	ands	r7, r2
 8000e56:	077b      	lsls	r3, r7, #29
 8000e58:	0571      	lsls	r1, r6, #21
 8000e5a:	027f      	lsls	r7, r7, #9
 8000e5c:	4323      	orrs	r3, r4
 8000e5e:	0b3f      	lsrs	r7, r7, #12
 8000e60:	0d4a      	lsrs	r2, r1, #21
 8000e62:	0512      	lsls	r2, r2, #20
 8000e64:	433a      	orrs	r2, r7
 8000e66:	07ed      	lsls	r5, r5, #31
 8000e68:	432a      	orrs	r2, r5
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	0011      	movs	r1, r2
 8000e6e:	bce0      	pop	{r5, r6, r7}
 8000e70:	46ba      	mov	sl, r7
 8000e72:	46b1      	mov	r9, r6
 8000e74:	46a8      	mov	r8, r5
 8000e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e78:	2c00      	cmp	r4, #0
 8000e7a:	d04b      	beq.n	8000f14 <__aeabi_dadd+0x1e0>
 8000e7c:	464c      	mov	r4, r9
 8000e7e:	1ba4      	subs	r4, r4, r6
 8000e80:	46a4      	mov	ip, r4
 8000e82:	2e00      	cmp	r6, #0
 8000e84:	d000      	beq.n	8000e88 <__aeabi_dadd+0x154>
 8000e86:	e123      	b.n	80010d0 <__aeabi_dadd+0x39c>
 8000e88:	0004      	movs	r4, r0
 8000e8a:	431c      	orrs	r4, r3
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_dadd+0x15c>
 8000e8e:	e1af      	b.n	80011f0 <__aeabi_dadd+0x4bc>
 8000e90:	4662      	mov	r2, ip
 8000e92:	1e54      	subs	r4, r2, #1
 8000e94:	2a01      	cmp	r2, #1
 8000e96:	d100      	bne.n	8000e9a <__aeabi_dadd+0x166>
 8000e98:	e215      	b.n	80012c6 <__aeabi_dadd+0x592>
 8000e9a:	4d80      	ldr	r5, [pc, #512]	; (800109c <__aeabi_dadd+0x368>)
 8000e9c:	45ac      	cmp	ip, r5
 8000e9e:	d100      	bne.n	8000ea2 <__aeabi_dadd+0x16e>
 8000ea0:	e1c8      	b.n	8001234 <__aeabi_dadd+0x500>
 8000ea2:	46a4      	mov	ip, r4
 8000ea4:	e11b      	b.n	80010de <__aeabi_dadd+0x3aa>
 8000ea6:	464a      	mov	r2, r9
 8000ea8:	1ab2      	subs	r2, r6, r2
 8000eaa:	4694      	mov	ip, r2
 8000eac:	2a00      	cmp	r2, #0
 8000eae:	dc00      	bgt.n	8000eb2 <__aeabi_dadd+0x17e>
 8000eb0:	e0ac      	b.n	800100c <__aeabi_dadd+0x2d8>
 8000eb2:	464a      	mov	r2, r9
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	d043      	beq.n	8000f40 <__aeabi_dadd+0x20c>
 8000eb8:	4a78      	ldr	r2, [pc, #480]	; (800109c <__aeabi_dadd+0x368>)
 8000eba:	4296      	cmp	r6, r2
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_dadd+0x18c>
 8000ebe:	e1af      	b.n	8001220 <__aeabi_dadd+0x4ec>
 8000ec0:	2280      	movs	r2, #128	; 0x80
 8000ec2:	003c      	movs	r4, r7
 8000ec4:	0412      	lsls	r2, r2, #16
 8000ec6:	4314      	orrs	r4, r2
 8000ec8:	46a0      	mov	r8, r4
 8000eca:	4662      	mov	r2, ip
 8000ecc:	2a38      	cmp	r2, #56	; 0x38
 8000ece:	dc67      	bgt.n	8000fa0 <__aeabi_dadd+0x26c>
 8000ed0:	2a1f      	cmp	r2, #31
 8000ed2:	dc00      	bgt.n	8000ed6 <__aeabi_dadd+0x1a2>
 8000ed4:	e15f      	b.n	8001196 <__aeabi_dadd+0x462>
 8000ed6:	4647      	mov	r7, r8
 8000ed8:	3a20      	subs	r2, #32
 8000eda:	40d7      	lsrs	r7, r2
 8000edc:	4662      	mov	r2, ip
 8000ede:	2a20      	cmp	r2, #32
 8000ee0:	d005      	beq.n	8000eee <__aeabi_dadd+0x1ba>
 8000ee2:	4664      	mov	r4, ip
 8000ee4:	2240      	movs	r2, #64	; 0x40
 8000ee6:	1b12      	subs	r2, r2, r4
 8000ee8:	4644      	mov	r4, r8
 8000eea:	4094      	lsls	r4, r2
 8000eec:	4321      	orrs	r1, r4
 8000eee:	1e4a      	subs	r2, r1, #1
 8000ef0:	4191      	sbcs	r1, r2
 8000ef2:	000c      	movs	r4, r1
 8000ef4:	433c      	orrs	r4, r7
 8000ef6:	e057      	b.n	8000fa8 <__aeabi_dadd+0x274>
 8000ef8:	003a      	movs	r2, r7
 8000efa:	430a      	orrs	r2, r1
 8000efc:	d100      	bne.n	8000f00 <__aeabi_dadd+0x1cc>
 8000efe:	e105      	b.n	800110c <__aeabi_dadd+0x3d8>
 8000f00:	0022      	movs	r2, r4
 8000f02:	3a01      	subs	r2, #1
 8000f04:	2c01      	cmp	r4, #1
 8000f06:	d100      	bne.n	8000f0a <__aeabi_dadd+0x1d6>
 8000f08:	e182      	b.n	8001210 <__aeabi_dadd+0x4dc>
 8000f0a:	4c64      	ldr	r4, [pc, #400]	; (800109c <__aeabi_dadd+0x368>)
 8000f0c:	45a4      	cmp	ip, r4
 8000f0e:	d05b      	beq.n	8000fc8 <__aeabi_dadd+0x294>
 8000f10:	4694      	mov	ip, r2
 8000f12:	e741      	b.n	8000d98 <__aeabi_dadd+0x64>
 8000f14:	4c63      	ldr	r4, [pc, #396]	; (80010a4 <__aeabi_dadd+0x370>)
 8000f16:	1c77      	adds	r7, r6, #1
 8000f18:	4227      	tst	r7, r4
 8000f1a:	d000      	beq.n	8000f1e <__aeabi_dadd+0x1ea>
 8000f1c:	e0c4      	b.n	80010a8 <__aeabi_dadd+0x374>
 8000f1e:	0004      	movs	r4, r0
 8000f20:	431c      	orrs	r4, r3
 8000f22:	2e00      	cmp	r6, #0
 8000f24:	d000      	beq.n	8000f28 <__aeabi_dadd+0x1f4>
 8000f26:	e169      	b.n	80011fc <__aeabi_dadd+0x4c8>
 8000f28:	2c00      	cmp	r4, #0
 8000f2a:	d100      	bne.n	8000f2e <__aeabi_dadd+0x1fa>
 8000f2c:	e1bf      	b.n	80012ae <__aeabi_dadd+0x57a>
 8000f2e:	4644      	mov	r4, r8
 8000f30:	430c      	orrs	r4, r1
 8000f32:	d000      	beq.n	8000f36 <__aeabi_dadd+0x202>
 8000f34:	e1d0      	b.n	80012d8 <__aeabi_dadd+0x5a4>
 8000f36:	0742      	lsls	r2, r0, #29
 8000f38:	08db      	lsrs	r3, r3, #3
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	08c0      	lsrs	r0, r0, #3
 8000f3e:	e029      	b.n	8000f94 <__aeabi_dadd+0x260>
 8000f40:	003a      	movs	r2, r7
 8000f42:	430a      	orrs	r2, r1
 8000f44:	d100      	bne.n	8000f48 <__aeabi_dadd+0x214>
 8000f46:	e170      	b.n	800122a <__aeabi_dadd+0x4f6>
 8000f48:	4662      	mov	r2, ip
 8000f4a:	4664      	mov	r4, ip
 8000f4c:	3a01      	subs	r2, #1
 8000f4e:	2c01      	cmp	r4, #1
 8000f50:	d100      	bne.n	8000f54 <__aeabi_dadd+0x220>
 8000f52:	e0e0      	b.n	8001116 <__aeabi_dadd+0x3e2>
 8000f54:	4c51      	ldr	r4, [pc, #324]	; (800109c <__aeabi_dadd+0x368>)
 8000f56:	45a4      	cmp	ip, r4
 8000f58:	d100      	bne.n	8000f5c <__aeabi_dadd+0x228>
 8000f5a:	e161      	b.n	8001220 <__aeabi_dadd+0x4ec>
 8000f5c:	4694      	mov	ip, r2
 8000f5e:	e7b4      	b.n	8000eca <__aeabi_dadd+0x196>
 8000f60:	003a      	movs	r2, r7
 8000f62:	391f      	subs	r1, #31
 8000f64:	40ca      	lsrs	r2, r1
 8000f66:	0011      	movs	r1, r2
 8000f68:	2b20      	cmp	r3, #32
 8000f6a:	d003      	beq.n	8000f74 <__aeabi_dadd+0x240>
 8000f6c:	2240      	movs	r2, #64	; 0x40
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	409f      	lsls	r7, r3
 8000f72:	433c      	orrs	r4, r7
 8000f74:	1e63      	subs	r3, r4, #1
 8000f76:	419c      	sbcs	r4, r3
 8000f78:	2700      	movs	r7, #0
 8000f7a:	2600      	movs	r6, #0
 8000f7c:	430c      	orrs	r4, r1
 8000f7e:	0763      	lsls	r3, r4, #29
 8000f80:	d000      	beq.n	8000f84 <__aeabi_dadd+0x250>
 8000f82:	e753      	b.n	8000e2c <__aeabi_dadd+0xf8>
 8000f84:	46b4      	mov	ip, r6
 8000f86:	08e4      	lsrs	r4, r4, #3
 8000f88:	077b      	lsls	r3, r7, #29
 8000f8a:	4323      	orrs	r3, r4
 8000f8c:	08f8      	lsrs	r0, r7, #3
 8000f8e:	4a43      	ldr	r2, [pc, #268]	; (800109c <__aeabi_dadd+0x368>)
 8000f90:	4594      	cmp	ip, r2
 8000f92:	d01d      	beq.n	8000fd0 <__aeabi_dadd+0x29c>
 8000f94:	4662      	mov	r2, ip
 8000f96:	0307      	lsls	r7, r0, #12
 8000f98:	0552      	lsls	r2, r2, #21
 8000f9a:	0b3f      	lsrs	r7, r7, #12
 8000f9c:	0d52      	lsrs	r2, r2, #21
 8000f9e:	e760      	b.n	8000e62 <__aeabi_dadd+0x12e>
 8000fa0:	4644      	mov	r4, r8
 8000fa2:	430c      	orrs	r4, r1
 8000fa4:	1e62      	subs	r2, r4, #1
 8000fa6:	4194      	sbcs	r4, r2
 8000fa8:	18e4      	adds	r4, r4, r3
 8000faa:	429c      	cmp	r4, r3
 8000fac:	419b      	sbcs	r3, r3
 8000fae:	425f      	negs	r7, r3
 8000fb0:	183f      	adds	r7, r7, r0
 8000fb2:	023b      	lsls	r3, r7, #8
 8000fb4:	d5e3      	bpl.n	8000f7e <__aeabi_dadd+0x24a>
 8000fb6:	4b39      	ldr	r3, [pc, #228]	; (800109c <__aeabi_dadd+0x368>)
 8000fb8:	3601      	adds	r6, #1
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	d000      	beq.n	8000fc0 <__aeabi_dadd+0x28c>
 8000fbe:	e0b5      	b.n	800112c <__aeabi_dadd+0x3f8>
 8000fc0:	0032      	movs	r2, r6
 8000fc2:	2700      	movs	r7, #0
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	e74c      	b.n	8000e62 <__aeabi_dadd+0x12e>
 8000fc8:	0742      	lsls	r2, r0, #29
 8000fca:	08db      	lsrs	r3, r3, #3
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	08c0      	lsrs	r0, r0, #3
 8000fd0:	001a      	movs	r2, r3
 8000fd2:	4302      	orrs	r2, r0
 8000fd4:	d100      	bne.n	8000fd8 <__aeabi_dadd+0x2a4>
 8000fd6:	e1e1      	b.n	800139c <__aeabi_dadd+0x668>
 8000fd8:	2780      	movs	r7, #128	; 0x80
 8000fda:	033f      	lsls	r7, r7, #12
 8000fdc:	4307      	orrs	r7, r0
 8000fde:	033f      	lsls	r7, r7, #12
 8000fe0:	4a2e      	ldr	r2, [pc, #184]	; (800109c <__aeabi_dadd+0x368>)
 8000fe2:	0b3f      	lsrs	r7, r7, #12
 8000fe4:	e73d      	b.n	8000e62 <__aeabi_dadd+0x12e>
 8000fe6:	0020      	movs	r0, r4
 8000fe8:	f001 f918 	bl	800221c <__clzsi2>
 8000fec:	0001      	movs	r1, r0
 8000fee:	3118      	adds	r1, #24
 8000ff0:	291f      	cmp	r1, #31
 8000ff2:	dc00      	bgt.n	8000ff6 <__aeabi_dadd+0x2c2>
 8000ff4:	e6fc      	b.n	8000df0 <__aeabi_dadd+0xbc>
 8000ff6:	3808      	subs	r0, #8
 8000ff8:	4084      	lsls	r4, r0
 8000ffa:	0027      	movs	r7, r4
 8000ffc:	2400      	movs	r4, #0
 8000ffe:	42b1      	cmp	r1, r6
 8001000:	db00      	blt.n	8001004 <__aeabi_dadd+0x2d0>
 8001002:	e6ff      	b.n	8000e04 <__aeabi_dadd+0xd0>
 8001004:	4a26      	ldr	r2, [pc, #152]	; (80010a0 <__aeabi_dadd+0x36c>)
 8001006:	1a76      	subs	r6, r6, r1
 8001008:	4017      	ands	r7, r2
 800100a:	e70d      	b.n	8000e28 <__aeabi_dadd+0xf4>
 800100c:	2a00      	cmp	r2, #0
 800100e:	d02f      	beq.n	8001070 <__aeabi_dadd+0x33c>
 8001010:	464a      	mov	r2, r9
 8001012:	1b92      	subs	r2, r2, r6
 8001014:	4694      	mov	ip, r2
 8001016:	2e00      	cmp	r6, #0
 8001018:	d100      	bne.n	800101c <__aeabi_dadd+0x2e8>
 800101a:	e0ad      	b.n	8001178 <__aeabi_dadd+0x444>
 800101c:	4a1f      	ldr	r2, [pc, #124]	; (800109c <__aeabi_dadd+0x368>)
 800101e:	4591      	cmp	r9, r2
 8001020:	d100      	bne.n	8001024 <__aeabi_dadd+0x2f0>
 8001022:	e10f      	b.n	8001244 <__aeabi_dadd+0x510>
 8001024:	2280      	movs	r2, #128	; 0x80
 8001026:	0412      	lsls	r2, r2, #16
 8001028:	4310      	orrs	r0, r2
 800102a:	4662      	mov	r2, ip
 800102c:	2a38      	cmp	r2, #56	; 0x38
 800102e:	dd00      	ble.n	8001032 <__aeabi_dadd+0x2fe>
 8001030:	e10f      	b.n	8001252 <__aeabi_dadd+0x51e>
 8001032:	2a1f      	cmp	r2, #31
 8001034:	dd00      	ble.n	8001038 <__aeabi_dadd+0x304>
 8001036:	e180      	b.n	800133a <__aeabi_dadd+0x606>
 8001038:	4664      	mov	r4, ip
 800103a:	2220      	movs	r2, #32
 800103c:	001e      	movs	r6, r3
 800103e:	1b12      	subs	r2, r2, r4
 8001040:	4667      	mov	r7, ip
 8001042:	0004      	movs	r4, r0
 8001044:	4093      	lsls	r3, r2
 8001046:	4094      	lsls	r4, r2
 8001048:	40fe      	lsrs	r6, r7
 800104a:	1e5a      	subs	r2, r3, #1
 800104c:	4193      	sbcs	r3, r2
 800104e:	40f8      	lsrs	r0, r7
 8001050:	4334      	orrs	r4, r6
 8001052:	431c      	orrs	r4, r3
 8001054:	4480      	add	r8, r0
 8001056:	1864      	adds	r4, r4, r1
 8001058:	428c      	cmp	r4, r1
 800105a:	41bf      	sbcs	r7, r7
 800105c:	427f      	negs	r7, r7
 800105e:	464e      	mov	r6, r9
 8001060:	4447      	add	r7, r8
 8001062:	e7a6      	b.n	8000fb2 <__aeabi_dadd+0x27e>
 8001064:	4642      	mov	r2, r8
 8001066:	430a      	orrs	r2, r1
 8001068:	0011      	movs	r1, r2
 800106a:	1e4a      	subs	r2, r1, #1
 800106c:	4191      	sbcs	r1, r2
 800106e:	e6ad      	b.n	8000dcc <__aeabi_dadd+0x98>
 8001070:	4c0c      	ldr	r4, [pc, #48]	; (80010a4 <__aeabi_dadd+0x370>)
 8001072:	1c72      	adds	r2, r6, #1
 8001074:	4222      	tst	r2, r4
 8001076:	d000      	beq.n	800107a <__aeabi_dadd+0x346>
 8001078:	e0a1      	b.n	80011be <__aeabi_dadd+0x48a>
 800107a:	0002      	movs	r2, r0
 800107c:	431a      	orrs	r2, r3
 800107e:	2e00      	cmp	r6, #0
 8001080:	d000      	beq.n	8001084 <__aeabi_dadd+0x350>
 8001082:	e0fa      	b.n	800127a <__aeabi_dadd+0x546>
 8001084:	2a00      	cmp	r2, #0
 8001086:	d100      	bne.n	800108a <__aeabi_dadd+0x356>
 8001088:	e145      	b.n	8001316 <__aeabi_dadd+0x5e2>
 800108a:	003a      	movs	r2, r7
 800108c:	430a      	orrs	r2, r1
 800108e:	d000      	beq.n	8001092 <__aeabi_dadd+0x35e>
 8001090:	e146      	b.n	8001320 <__aeabi_dadd+0x5ec>
 8001092:	0742      	lsls	r2, r0, #29
 8001094:	08db      	lsrs	r3, r3, #3
 8001096:	4313      	orrs	r3, r2
 8001098:	08c0      	lsrs	r0, r0, #3
 800109a:	e77b      	b.n	8000f94 <__aeabi_dadd+0x260>
 800109c:	000007ff 	.word	0x000007ff
 80010a0:	ff7fffff 	.word	0xff7fffff
 80010a4:	000007fe 	.word	0x000007fe
 80010a8:	4647      	mov	r7, r8
 80010aa:	1a5c      	subs	r4, r3, r1
 80010ac:	1bc2      	subs	r2, r0, r7
 80010ae:	42a3      	cmp	r3, r4
 80010b0:	41bf      	sbcs	r7, r7
 80010b2:	427f      	negs	r7, r7
 80010b4:	46b9      	mov	r9, r7
 80010b6:	0017      	movs	r7, r2
 80010b8:	464a      	mov	r2, r9
 80010ba:	1abf      	subs	r7, r7, r2
 80010bc:	023a      	lsls	r2, r7, #8
 80010be:	d500      	bpl.n	80010c2 <__aeabi_dadd+0x38e>
 80010c0:	e08d      	b.n	80011de <__aeabi_dadd+0x4aa>
 80010c2:	0023      	movs	r3, r4
 80010c4:	433b      	orrs	r3, r7
 80010c6:	d000      	beq.n	80010ca <__aeabi_dadd+0x396>
 80010c8:	e68a      	b.n	8000de0 <__aeabi_dadd+0xac>
 80010ca:	2000      	movs	r0, #0
 80010cc:	2500      	movs	r5, #0
 80010ce:	e761      	b.n	8000f94 <__aeabi_dadd+0x260>
 80010d0:	4cb4      	ldr	r4, [pc, #720]	; (80013a4 <__aeabi_dadd+0x670>)
 80010d2:	45a1      	cmp	r9, r4
 80010d4:	d100      	bne.n	80010d8 <__aeabi_dadd+0x3a4>
 80010d6:	e0ad      	b.n	8001234 <__aeabi_dadd+0x500>
 80010d8:	2480      	movs	r4, #128	; 0x80
 80010da:	0424      	lsls	r4, r4, #16
 80010dc:	4320      	orrs	r0, r4
 80010de:	4664      	mov	r4, ip
 80010e0:	2c38      	cmp	r4, #56	; 0x38
 80010e2:	dc3d      	bgt.n	8001160 <__aeabi_dadd+0x42c>
 80010e4:	4662      	mov	r2, ip
 80010e6:	2c1f      	cmp	r4, #31
 80010e8:	dd00      	ble.n	80010ec <__aeabi_dadd+0x3b8>
 80010ea:	e0b7      	b.n	800125c <__aeabi_dadd+0x528>
 80010ec:	2520      	movs	r5, #32
 80010ee:	001e      	movs	r6, r3
 80010f0:	1b2d      	subs	r5, r5, r4
 80010f2:	0004      	movs	r4, r0
 80010f4:	40ab      	lsls	r3, r5
 80010f6:	40ac      	lsls	r4, r5
 80010f8:	40d6      	lsrs	r6, r2
 80010fa:	40d0      	lsrs	r0, r2
 80010fc:	4642      	mov	r2, r8
 80010fe:	1e5d      	subs	r5, r3, #1
 8001100:	41ab      	sbcs	r3, r5
 8001102:	4334      	orrs	r4, r6
 8001104:	1a12      	subs	r2, r2, r0
 8001106:	4690      	mov	r8, r2
 8001108:	4323      	orrs	r3, r4
 800110a:	e02c      	b.n	8001166 <__aeabi_dadd+0x432>
 800110c:	0742      	lsls	r2, r0, #29
 800110e:	08db      	lsrs	r3, r3, #3
 8001110:	4313      	orrs	r3, r2
 8001112:	08c0      	lsrs	r0, r0, #3
 8001114:	e73b      	b.n	8000f8e <__aeabi_dadd+0x25a>
 8001116:	185c      	adds	r4, r3, r1
 8001118:	429c      	cmp	r4, r3
 800111a:	419b      	sbcs	r3, r3
 800111c:	4440      	add	r0, r8
 800111e:	425b      	negs	r3, r3
 8001120:	18c7      	adds	r7, r0, r3
 8001122:	2601      	movs	r6, #1
 8001124:	023b      	lsls	r3, r7, #8
 8001126:	d400      	bmi.n	800112a <__aeabi_dadd+0x3f6>
 8001128:	e729      	b.n	8000f7e <__aeabi_dadd+0x24a>
 800112a:	2602      	movs	r6, #2
 800112c:	4a9e      	ldr	r2, [pc, #632]	; (80013a8 <__aeabi_dadd+0x674>)
 800112e:	0863      	lsrs	r3, r4, #1
 8001130:	4017      	ands	r7, r2
 8001132:	2201      	movs	r2, #1
 8001134:	4014      	ands	r4, r2
 8001136:	431c      	orrs	r4, r3
 8001138:	07fb      	lsls	r3, r7, #31
 800113a:	431c      	orrs	r4, r3
 800113c:	087f      	lsrs	r7, r7, #1
 800113e:	e673      	b.n	8000e28 <__aeabi_dadd+0xf4>
 8001140:	4644      	mov	r4, r8
 8001142:	3a20      	subs	r2, #32
 8001144:	40d4      	lsrs	r4, r2
 8001146:	4662      	mov	r2, ip
 8001148:	2a20      	cmp	r2, #32
 800114a:	d005      	beq.n	8001158 <__aeabi_dadd+0x424>
 800114c:	4667      	mov	r7, ip
 800114e:	2240      	movs	r2, #64	; 0x40
 8001150:	1bd2      	subs	r2, r2, r7
 8001152:	4647      	mov	r7, r8
 8001154:	4097      	lsls	r7, r2
 8001156:	4339      	orrs	r1, r7
 8001158:	1e4a      	subs	r2, r1, #1
 800115a:	4191      	sbcs	r1, r2
 800115c:	4321      	orrs	r1, r4
 800115e:	e635      	b.n	8000dcc <__aeabi_dadd+0x98>
 8001160:	4303      	orrs	r3, r0
 8001162:	1e58      	subs	r0, r3, #1
 8001164:	4183      	sbcs	r3, r0
 8001166:	1acc      	subs	r4, r1, r3
 8001168:	42a1      	cmp	r1, r4
 800116a:	41bf      	sbcs	r7, r7
 800116c:	4643      	mov	r3, r8
 800116e:	427f      	negs	r7, r7
 8001170:	4655      	mov	r5, sl
 8001172:	464e      	mov	r6, r9
 8001174:	1bdf      	subs	r7, r3, r7
 8001176:	e62e      	b.n	8000dd6 <__aeabi_dadd+0xa2>
 8001178:	0002      	movs	r2, r0
 800117a:	431a      	orrs	r2, r3
 800117c:	d100      	bne.n	8001180 <__aeabi_dadd+0x44c>
 800117e:	e0bd      	b.n	80012fc <__aeabi_dadd+0x5c8>
 8001180:	4662      	mov	r2, ip
 8001182:	4664      	mov	r4, ip
 8001184:	3a01      	subs	r2, #1
 8001186:	2c01      	cmp	r4, #1
 8001188:	d100      	bne.n	800118c <__aeabi_dadd+0x458>
 800118a:	e0e5      	b.n	8001358 <__aeabi_dadd+0x624>
 800118c:	4c85      	ldr	r4, [pc, #532]	; (80013a4 <__aeabi_dadd+0x670>)
 800118e:	45a4      	cmp	ip, r4
 8001190:	d058      	beq.n	8001244 <__aeabi_dadd+0x510>
 8001192:	4694      	mov	ip, r2
 8001194:	e749      	b.n	800102a <__aeabi_dadd+0x2f6>
 8001196:	4664      	mov	r4, ip
 8001198:	2220      	movs	r2, #32
 800119a:	1b12      	subs	r2, r2, r4
 800119c:	4644      	mov	r4, r8
 800119e:	4094      	lsls	r4, r2
 80011a0:	000f      	movs	r7, r1
 80011a2:	46a1      	mov	r9, r4
 80011a4:	4664      	mov	r4, ip
 80011a6:	4091      	lsls	r1, r2
 80011a8:	40e7      	lsrs	r7, r4
 80011aa:	464c      	mov	r4, r9
 80011ac:	1e4a      	subs	r2, r1, #1
 80011ae:	4191      	sbcs	r1, r2
 80011b0:	433c      	orrs	r4, r7
 80011b2:	4642      	mov	r2, r8
 80011b4:	430c      	orrs	r4, r1
 80011b6:	4661      	mov	r1, ip
 80011b8:	40ca      	lsrs	r2, r1
 80011ba:	1880      	adds	r0, r0, r2
 80011bc:	e6f4      	b.n	8000fa8 <__aeabi_dadd+0x274>
 80011be:	4c79      	ldr	r4, [pc, #484]	; (80013a4 <__aeabi_dadd+0x670>)
 80011c0:	42a2      	cmp	r2, r4
 80011c2:	d100      	bne.n	80011c6 <__aeabi_dadd+0x492>
 80011c4:	e6fd      	b.n	8000fc2 <__aeabi_dadd+0x28e>
 80011c6:	1859      	adds	r1, r3, r1
 80011c8:	4299      	cmp	r1, r3
 80011ca:	419b      	sbcs	r3, r3
 80011cc:	4440      	add	r0, r8
 80011ce:	425f      	negs	r7, r3
 80011d0:	19c7      	adds	r7, r0, r7
 80011d2:	07fc      	lsls	r4, r7, #31
 80011d4:	0849      	lsrs	r1, r1, #1
 80011d6:	0016      	movs	r6, r2
 80011d8:	430c      	orrs	r4, r1
 80011da:	087f      	lsrs	r7, r7, #1
 80011dc:	e6cf      	b.n	8000f7e <__aeabi_dadd+0x24a>
 80011de:	1acc      	subs	r4, r1, r3
 80011e0:	42a1      	cmp	r1, r4
 80011e2:	41bf      	sbcs	r7, r7
 80011e4:	4643      	mov	r3, r8
 80011e6:	427f      	negs	r7, r7
 80011e8:	1a18      	subs	r0, r3, r0
 80011ea:	4655      	mov	r5, sl
 80011ec:	1bc7      	subs	r7, r0, r7
 80011ee:	e5f7      	b.n	8000de0 <__aeabi_dadd+0xac>
 80011f0:	08c9      	lsrs	r1, r1, #3
 80011f2:	077b      	lsls	r3, r7, #29
 80011f4:	4655      	mov	r5, sl
 80011f6:	430b      	orrs	r3, r1
 80011f8:	08f8      	lsrs	r0, r7, #3
 80011fa:	e6c8      	b.n	8000f8e <__aeabi_dadd+0x25a>
 80011fc:	2c00      	cmp	r4, #0
 80011fe:	d000      	beq.n	8001202 <__aeabi_dadd+0x4ce>
 8001200:	e081      	b.n	8001306 <__aeabi_dadd+0x5d2>
 8001202:	4643      	mov	r3, r8
 8001204:	430b      	orrs	r3, r1
 8001206:	d115      	bne.n	8001234 <__aeabi_dadd+0x500>
 8001208:	2080      	movs	r0, #128	; 0x80
 800120a:	2500      	movs	r5, #0
 800120c:	0300      	lsls	r0, r0, #12
 800120e:	e6e3      	b.n	8000fd8 <__aeabi_dadd+0x2a4>
 8001210:	1a5c      	subs	r4, r3, r1
 8001212:	42a3      	cmp	r3, r4
 8001214:	419b      	sbcs	r3, r3
 8001216:	1bc7      	subs	r7, r0, r7
 8001218:	425b      	negs	r3, r3
 800121a:	2601      	movs	r6, #1
 800121c:	1aff      	subs	r7, r7, r3
 800121e:	e5da      	b.n	8000dd6 <__aeabi_dadd+0xa2>
 8001220:	0742      	lsls	r2, r0, #29
 8001222:	08db      	lsrs	r3, r3, #3
 8001224:	4313      	orrs	r3, r2
 8001226:	08c0      	lsrs	r0, r0, #3
 8001228:	e6d2      	b.n	8000fd0 <__aeabi_dadd+0x29c>
 800122a:	0742      	lsls	r2, r0, #29
 800122c:	08db      	lsrs	r3, r3, #3
 800122e:	4313      	orrs	r3, r2
 8001230:	08c0      	lsrs	r0, r0, #3
 8001232:	e6ac      	b.n	8000f8e <__aeabi_dadd+0x25a>
 8001234:	4643      	mov	r3, r8
 8001236:	4642      	mov	r2, r8
 8001238:	08c9      	lsrs	r1, r1, #3
 800123a:	075b      	lsls	r3, r3, #29
 800123c:	4655      	mov	r5, sl
 800123e:	430b      	orrs	r3, r1
 8001240:	08d0      	lsrs	r0, r2, #3
 8001242:	e6c5      	b.n	8000fd0 <__aeabi_dadd+0x29c>
 8001244:	4643      	mov	r3, r8
 8001246:	4642      	mov	r2, r8
 8001248:	075b      	lsls	r3, r3, #29
 800124a:	08c9      	lsrs	r1, r1, #3
 800124c:	430b      	orrs	r3, r1
 800124e:	08d0      	lsrs	r0, r2, #3
 8001250:	e6be      	b.n	8000fd0 <__aeabi_dadd+0x29c>
 8001252:	4303      	orrs	r3, r0
 8001254:	001c      	movs	r4, r3
 8001256:	1e63      	subs	r3, r4, #1
 8001258:	419c      	sbcs	r4, r3
 800125a:	e6fc      	b.n	8001056 <__aeabi_dadd+0x322>
 800125c:	0002      	movs	r2, r0
 800125e:	3c20      	subs	r4, #32
 8001260:	40e2      	lsrs	r2, r4
 8001262:	0014      	movs	r4, r2
 8001264:	4662      	mov	r2, ip
 8001266:	2a20      	cmp	r2, #32
 8001268:	d003      	beq.n	8001272 <__aeabi_dadd+0x53e>
 800126a:	2540      	movs	r5, #64	; 0x40
 800126c:	1aad      	subs	r5, r5, r2
 800126e:	40a8      	lsls	r0, r5
 8001270:	4303      	orrs	r3, r0
 8001272:	1e58      	subs	r0, r3, #1
 8001274:	4183      	sbcs	r3, r0
 8001276:	4323      	orrs	r3, r4
 8001278:	e775      	b.n	8001166 <__aeabi_dadd+0x432>
 800127a:	2a00      	cmp	r2, #0
 800127c:	d0e2      	beq.n	8001244 <__aeabi_dadd+0x510>
 800127e:	003a      	movs	r2, r7
 8001280:	430a      	orrs	r2, r1
 8001282:	d0cd      	beq.n	8001220 <__aeabi_dadd+0x4ec>
 8001284:	0742      	lsls	r2, r0, #29
 8001286:	08db      	lsrs	r3, r3, #3
 8001288:	4313      	orrs	r3, r2
 800128a:	2280      	movs	r2, #128	; 0x80
 800128c:	08c0      	lsrs	r0, r0, #3
 800128e:	0312      	lsls	r2, r2, #12
 8001290:	4210      	tst	r0, r2
 8001292:	d006      	beq.n	80012a2 <__aeabi_dadd+0x56e>
 8001294:	08fc      	lsrs	r4, r7, #3
 8001296:	4214      	tst	r4, r2
 8001298:	d103      	bne.n	80012a2 <__aeabi_dadd+0x56e>
 800129a:	0020      	movs	r0, r4
 800129c:	08cb      	lsrs	r3, r1, #3
 800129e:	077a      	lsls	r2, r7, #29
 80012a0:	4313      	orrs	r3, r2
 80012a2:	0f5a      	lsrs	r2, r3, #29
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	0752      	lsls	r2, r2, #29
 80012a8:	08db      	lsrs	r3, r3, #3
 80012aa:	4313      	orrs	r3, r2
 80012ac:	e690      	b.n	8000fd0 <__aeabi_dadd+0x29c>
 80012ae:	4643      	mov	r3, r8
 80012b0:	430b      	orrs	r3, r1
 80012b2:	d100      	bne.n	80012b6 <__aeabi_dadd+0x582>
 80012b4:	e709      	b.n	80010ca <__aeabi_dadd+0x396>
 80012b6:	4643      	mov	r3, r8
 80012b8:	4642      	mov	r2, r8
 80012ba:	08c9      	lsrs	r1, r1, #3
 80012bc:	075b      	lsls	r3, r3, #29
 80012be:	4655      	mov	r5, sl
 80012c0:	430b      	orrs	r3, r1
 80012c2:	08d0      	lsrs	r0, r2, #3
 80012c4:	e666      	b.n	8000f94 <__aeabi_dadd+0x260>
 80012c6:	1acc      	subs	r4, r1, r3
 80012c8:	42a1      	cmp	r1, r4
 80012ca:	4189      	sbcs	r1, r1
 80012cc:	1a3f      	subs	r7, r7, r0
 80012ce:	4249      	negs	r1, r1
 80012d0:	4655      	mov	r5, sl
 80012d2:	2601      	movs	r6, #1
 80012d4:	1a7f      	subs	r7, r7, r1
 80012d6:	e57e      	b.n	8000dd6 <__aeabi_dadd+0xa2>
 80012d8:	4642      	mov	r2, r8
 80012da:	1a5c      	subs	r4, r3, r1
 80012dc:	1a87      	subs	r7, r0, r2
 80012de:	42a3      	cmp	r3, r4
 80012e0:	4192      	sbcs	r2, r2
 80012e2:	4252      	negs	r2, r2
 80012e4:	1abf      	subs	r7, r7, r2
 80012e6:	023a      	lsls	r2, r7, #8
 80012e8:	d53d      	bpl.n	8001366 <__aeabi_dadd+0x632>
 80012ea:	1acc      	subs	r4, r1, r3
 80012ec:	42a1      	cmp	r1, r4
 80012ee:	4189      	sbcs	r1, r1
 80012f0:	4643      	mov	r3, r8
 80012f2:	4249      	negs	r1, r1
 80012f4:	1a1f      	subs	r7, r3, r0
 80012f6:	4655      	mov	r5, sl
 80012f8:	1a7f      	subs	r7, r7, r1
 80012fa:	e595      	b.n	8000e28 <__aeabi_dadd+0xf4>
 80012fc:	077b      	lsls	r3, r7, #29
 80012fe:	08c9      	lsrs	r1, r1, #3
 8001300:	430b      	orrs	r3, r1
 8001302:	08f8      	lsrs	r0, r7, #3
 8001304:	e643      	b.n	8000f8e <__aeabi_dadd+0x25a>
 8001306:	4644      	mov	r4, r8
 8001308:	08db      	lsrs	r3, r3, #3
 800130a:	430c      	orrs	r4, r1
 800130c:	d130      	bne.n	8001370 <__aeabi_dadd+0x63c>
 800130e:	0742      	lsls	r2, r0, #29
 8001310:	4313      	orrs	r3, r2
 8001312:	08c0      	lsrs	r0, r0, #3
 8001314:	e65c      	b.n	8000fd0 <__aeabi_dadd+0x29c>
 8001316:	077b      	lsls	r3, r7, #29
 8001318:	08c9      	lsrs	r1, r1, #3
 800131a:	430b      	orrs	r3, r1
 800131c:	08f8      	lsrs	r0, r7, #3
 800131e:	e639      	b.n	8000f94 <__aeabi_dadd+0x260>
 8001320:	185c      	adds	r4, r3, r1
 8001322:	429c      	cmp	r4, r3
 8001324:	419b      	sbcs	r3, r3
 8001326:	4440      	add	r0, r8
 8001328:	425b      	negs	r3, r3
 800132a:	18c7      	adds	r7, r0, r3
 800132c:	023b      	lsls	r3, r7, #8
 800132e:	d400      	bmi.n	8001332 <__aeabi_dadd+0x5fe>
 8001330:	e625      	b.n	8000f7e <__aeabi_dadd+0x24a>
 8001332:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <__aeabi_dadd+0x674>)
 8001334:	2601      	movs	r6, #1
 8001336:	401f      	ands	r7, r3
 8001338:	e621      	b.n	8000f7e <__aeabi_dadd+0x24a>
 800133a:	0004      	movs	r4, r0
 800133c:	3a20      	subs	r2, #32
 800133e:	40d4      	lsrs	r4, r2
 8001340:	4662      	mov	r2, ip
 8001342:	2a20      	cmp	r2, #32
 8001344:	d004      	beq.n	8001350 <__aeabi_dadd+0x61c>
 8001346:	2240      	movs	r2, #64	; 0x40
 8001348:	4666      	mov	r6, ip
 800134a:	1b92      	subs	r2, r2, r6
 800134c:	4090      	lsls	r0, r2
 800134e:	4303      	orrs	r3, r0
 8001350:	1e5a      	subs	r2, r3, #1
 8001352:	4193      	sbcs	r3, r2
 8001354:	431c      	orrs	r4, r3
 8001356:	e67e      	b.n	8001056 <__aeabi_dadd+0x322>
 8001358:	185c      	adds	r4, r3, r1
 800135a:	428c      	cmp	r4, r1
 800135c:	4189      	sbcs	r1, r1
 800135e:	4440      	add	r0, r8
 8001360:	4249      	negs	r1, r1
 8001362:	1847      	adds	r7, r0, r1
 8001364:	e6dd      	b.n	8001122 <__aeabi_dadd+0x3ee>
 8001366:	0023      	movs	r3, r4
 8001368:	433b      	orrs	r3, r7
 800136a:	d100      	bne.n	800136e <__aeabi_dadd+0x63a>
 800136c:	e6ad      	b.n	80010ca <__aeabi_dadd+0x396>
 800136e:	e606      	b.n	8000f7e <__aeabi_dadd+0x24a>
 8001370:	0744      	lsls	r4, r0, #29
 8001372:	4323      	orrs	r3, r4
 8001374:	2480      	movs	r4, #128	; 0x80
 8001376:	08c0      	lsrs	r0, r0, #3
 8001378:	0324      	lsls	r4, r4, #12
 800137a:	4220      	tst	r0, r4
 800137c:	d008      	beq.n	8001390 <__aeabi_dadd+0x65c>
 800137e:	4642      	mov	r2, r8
 8001380:	08d6      	lsrs	r6, r2, #3
 8001382:	4226      	tst	r6, r4
 8001384:	d104      	bne.n	8001390 <__aeabi_dadd+0x65c>
 8001386:	4655      	mov	r5, sl
 8001388:	0030      	movs	r0, r6
 800138a:	08cb      	lsrs	r3, r1, #3
 800138c:	0751      	lsls	r1, r2, #29
 800138e:	430b      	orrs	r3, r1
 8001390:	0f5a      	lsrs	r2, r3, #29
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	08db      	lsrs	r3, r3, #3
 8001396:	0752      	lsls	r2, r2, #29
 8001398:	4313      	orrs	r3, r2
 800139a:	e619      	b.n	8000fd0 <__aeabi_dadd+0x29c>
 800139c:	2300      	movs	r3, #0
 800139e:	4a01      	ldr	r2, [pc, #4]	; (80013a4 <__aeabi_dadd+0x670>)
 80013a0:	001f      	movs	r7, r3
 80013a2:	e55e      	b.n	8000e62 <__aeabi_dadd+0x12e>
 80013a4:	000007ff 	.word	0x000007ff
 80013a8:	ff7fffff 	.word	0xff7fffff

080013ac <__aeabi_dmul>:
 80013ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ae:	4657      	mov	r7, sl
 80013b0:	464e      	mov	r6, r9
 80013b2:	4645      	mov	r5, r8
 80013b4:	46de      	mov	lr, fp
 80013b6:	b5e0      	push	{r5, r6, r7, lr}
 80013b8:	4698      	mov	r8, r3
 80013ba:	030c      	lsls	r4, r1, #12
 80013bc:	004b      	lsls	r3, r1, #1
 80013be:	0006      	movs	r6, r0
 80013c0:	4692      	mov	sl, r2
 80013c2:	b087      	sub	sp, #28
 80013c4:	0b24      	lsrs	r4, r4, #12
 80013c6:	0d5b      	lsrs	r3, r3, #21
 80013c8:	0fcf      	lsrs	r7, r1, #31
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d100      	bne.n	80013d0 <__aeabi_dmul+0x24>
 80013ce:	e15c      	b.n	800168a <__aeabi_dmul+0x2de>
 80013d0:	4ad9      	ldr	r2, [pc, #868]	; (8001738 <__aeabi_dmul+0x38c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d100      	bne.n	80013d8 <__aeabi_dmul+0x2c>
 80013d6:	e175      	b.n	80016c4 <__aeabi_dmul+0x318>
 80013d8:	0f42      	lsrs	r2, r0, #29
 80013da:	00e4      	lsls	r4, r4, #3
 80013dc:	4314      	orrs	r4, r2
 80013de:	2280      	movs	r2, #128	; 0x80
 80013e0:	0412      	lsls	r2, r2, #16
 80013e2:	4314      	orrs	r4, r2
 80013e4:	4ad5      	ldr	r2, [pc, #852]	; (800173c <__aeabi_dmul+0x390>)
 80013e6:	00c5      	lsls	r5, r0, #3
 80013e8:	4694      	mov	ip, r2
 80013ea:	4463      	add	r3, ip
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	2300      	movs	r3, #0
 80013f0:	4699      	mov	r9, r3
 80013f2:	469b      	mov	fp, r3
 80013f4:	4643      	mov	r3, r8
 80013f6:	4642      	mov	r2, r8
 80013f8:	031e      	lsls	r6, r3, #12
 80013fa:	0fd2      	lsrs	r2, r2, #31
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	4650      	mov	r0, sl
 8001400:	4690      	mov	r8, r2
 8001402:	0b36      	lsrs	r6, r6, #12
 8001404:	0d5b      	lsrs	r3, r3, #21
 8001406:	d100      	bne.n	800140a <__aeabi_dmul+0x5e>
 8001408:	e120      	b.n	800164c <__aeabi_dmul+0x2a0>
 800140a:	4acb      	ldr	r2, [pc, #812]	; (8001738 <__aeabi_dmul+0x38c>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d100      	bne.n	8001412 <__aeabi_dmul+0x66>
 8001410:	e162      	b.n	80016d8 <__aeabi_dmul+0x32c>
 8001412:	49ca      	ldr	r1, [pc, #808]	; (800173c <__aeabi_dmul+0x390>)
 8001414:	0f42      	lsrs	r2, r0, #29
 8001416:	468c      	mov	ip, r1
 8001418:	9900      	ldr	r1, [sp, #0]
 800141a:	4463      	add	r3, ip
 800141c:	00f6      	lsls	r6, r6, #3
 800141e:	468c      	mov	ip, r1
 8001420:	4316      	orrs	r6, r2
 8001422:	2280      	movs	r2, #128	; 0x80
 8001424:	449c      	add	ip, r3
 8001426:	0412      	lsls	r2, r2, #16
 8001428:	4663      	mov	r3, ip
 800142a:	4316      	orrs	r6, r2
 800142c:	00c2      	lsls	r2, r0, #3
 800142e:	2000      	movs	r0, #0
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	9900      	ldr	r1, [sp, #0]
 8001434:	4643      	mov	r3, r8
 8001436:	3101      	adds	r1, #1
 8001438:	468c      	mov	ip, r1
 800143a:	4649      	mov	r1, r9
 800143c:	407b      	eors	r3, r7
 800143e:	9301      	str	r3, [sp, #4]
 8001440:	290f      	cmp	r1, #15
 8001442:	d826      	bhi.n	8001492 <__aeabi_dmul+0xe6>
 8001444:	4bbe      	ldr	r3, [pc, #760]	; (8001740 <__aeabi_dmul+0x394>)
 8001446:	0089      	lsls	r1, r1, #2
 8001448:	5859      	ldr	r1, [r3, r1]
 800144a:	468f      	mov	pc, r1
 800144c:	4643      	mov	r3, r8
 800144e:	9301      	str	r3, [sp, #4]
 8001450:	0034      	movs	r4, r6
 8001452:	0015      	movs	r5, r2
 8001454:	4683      	mov	fp, r0
 8001456:	465b      	mov	r3, fp
 8001458:	2b02      	cmp	r3, #2
 800145a:	d016      	beq.n	800148a <__aeabi_dmul+0xde>
 800145c:	2b03      	cmp	r3, #3
 800145e:	d100      	bne.n	8001462 <__aeabi_dmul+0xb6>
 8001460:	e203      	b.n	800186a <__aeabi_dmul+0x4be>
 8001462:	2b01      	cmp	r3, #1
 8001464:	d000      	beq.n	8001468 <__aeabi_dmul+0xbc>
 8001466:	e0cd      	b.n	8001604 <__aeabi_dmul+0x258>
 8001468:	2200      	movs	r2, #0
 800146a:	2400      	movs	r4, #0
 800146c:	2500      	movs	r5, #0
 800146e:	9b01      	ldr	r3, [sp, #4]
 8001470:	0512      	lsls	r2, r2, #20
 8001472:	4322      	orrs	r2, r4
 8001474:	07db      	lsls	r3, r3, #31
 8001476:	431a      	orrs	r2, r3
 8001478:	0028      	movs	r0, r5
 800147a:	0011      	movs	r1, r2
 800147c:	b007      	add	sp, #28
 800147e:	bcf0      	pop	{r4, r5, r6, r7}
 8001480:	46bb      	mov	fp, r7
 8001482:	46b2      	mov	sl, r6
 8001484:	46a9      	mov	r9, r5
 8001486:	46a0      	mov	r8, r4
 8001488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800148a:	2400      	movs	r4, #0
 800148c:	2500      	movs	r5, #0
 800148e:	4aaa      	ldr	r2, [pc, #680]	; (8001738 <__aeabi_dmul+0x38c>)
 8001490:	e7ed      	b.n	800146e <__aeabi_dmul+0xc2>
 8001492:	0c28      	lsrs	r0, r5, #16
 8001494:	042d      	lsls	r5, r5, #16
 8001496:	0c2d      	lsrs	r5, r5, #16
 8001498:	002b      	movs	r3, r5
 800149a:	0c11      	lsrs	r1, r2, #16
 800149c:	0412      	lsls	r2, r2, #16
 800149e:	0c12      	lsrs	r2, r2, #16
 80014a0:	4353      	muls	r3, r2
 80014a2:	4698      	mov	r8, r3
 80014a4:	0013      	movs	r3, r2
 80014a6:	002f      	movs	r7, r5
 80014a8:	4343      	muls	r3, r0
 80014aa:	4699      	mov	r9, r3
 80014ac:	434f      	muls	r7, r1
 80014ae:	444f      	add	r7, r9
 80014b0:	46bb      	mov	fp, r7
 80014b2:	4647      	mov	r7, r8
 80014b4:	000b      	movs	r3, r1
 80014b6:	0c3f      	lsrs	r7, r7, #16
 80014b8:	46ba      	mov	sl, r7
 80014ba:	4343      	muls	r3, r0
 80014bc:	44da      	add	sl, fp
 80014be:	9302      	str	r3, [sp, #8]
 80014c0:	45d1      	cmp	r9, sl
 80014c2:	d904      	bls.n	80014ce <__aeabi_dmul+0x122>
 80014c4:	2780      	movs	r7, #128	; 0x80
 80014c6:	027f      	lsls	r7, r7, #9
 80014c8:	46b9      	mov	r9, r7
 80014ca:	444b      	add	r3, r9
 80014cc:	9302      	str	r3, [sp, #8]
 80014ce:	4653      	mov	r3, sl
 80014d0:	0c1b      	lsrs	r3, r3, #16
 80014d2:	469b      	mov	fp, r3
 80014d4:	4653      	mov	r3, sl
 80014d6:	041f      	lsls	r7, r3, #16
 80014d8:	4643      	mov	r3, r8
 80014da:	041b      	lsls	r3, r3, #16
 80014dc:	0c1b      	lsrs	r3, r3, #16
 80014de:	4698      	mov	r8, r3
 80014e0:	003b      	movs	r3, r7
 80014e2:	4443      	add	r3, r8
 80014e4:	9304      	str	r3, [sp, #16]
 80014e6:	0c33      	lsrs	r3, r6, #16
 80014e8:	0436      	lsls	r6, r6, #16
 80014ea:	0c36      	lsrs	r6, r6, #16
 80014ec:	4698      	mov	r8, r3
 80014ee:	0033      	movs	r3, r6
 80014f0:	4343      	muls	r3, r0
 80014f2:	4699      	mov	r9, r3
 80014f4:	4643      	mov	r3, r8
 80014f6:	4343      	muls	r3, r0
 80014f8:	002f      	movs	r7, r5
 80014fa:	469a      	mov	sl, r3
 80014fc:	4643      	mov	r3, r8
 80014fe:	4377      	muls	r7, r6
 8001500:	435d      	muls	r5, r3
 8001502:	0c38      	lsrs	r0, r7, #16
 8001504:	444d      	add	r5, r9
 8001506:	1945      	adds	r5, r0, r5
 8001508:	45a9      	cmp	r9, r5
 800150a:	d903      	bls.n	8001514 <__aeabi_dmul+0x168>
 800150c:	2380      	movs	r3, #128	; 0x80
 800150e:	025b      	lsls	r3, r3, #9
 8001510:	4699      	mov	r9, r3
 8001512:	44ca      	add	sl, r9
 8001514:	043f      	lsls	r7, r7, #16
 8001516:	0c28      	lsrs	r0, r5, #16
 8001518:	0c3f      	lsrs	r7, r7, #16
 800151a:	042d      	lsls	r5, r5, #16
 800151c:	19ed      	adds	r5, r5, r7
 800151e:	0c27      	lsrs	r7, r4, #16
 8001520:	0424      	lsls	r4, r4, #16
 8001522:	0c24      	lsrs	r4, r4, #16
 8001524:	0003      	movs	r3, r0
 8001526:	0020      	movs	r0, r4
 8001528:	4350      	muls	r0, r2
 800152a:	437a      	muls	r2, r7
 800152c:	4691      	mov	r9, r2
 800152e:	003a      	movs	r2, r7
 8001530:	4453      	add	r3, sl
 8001532:	9305      	str	r3, [sp, #20]
 8001534:	0c03      	lsrs	r3, r0, #16
 8001536:	469a      	mov	sl, r3
 8001538:	434a      	muls	r2, r1
 800153a:	4361      	muls	r1, r4
 800153c:	4449      	add	r1, r9
 800153e:	4451      	add	r1, sl
 8001540:	44ab      	add	fp, r5
 8001542:	4589      	cmp	r9, r1
 8001544:	d903      	bls.n	800154e <__aeabi_dmul+0x1a2>
 8001546:	2380      	movs	r3, #128	; 0x80
 8001548:	025b      	lsls	r3, r3, #9
 800154a:	4699      	mov	r9, r3
 800154c:	444a      	add	r2, r9
 800154e:	0400      	lsls	r0, r0, #16
 8001550:	0c0b      	lsrs	r3, r1, #16
 8001552:	0c00      	lsrs	r0, r0, #16
 8001554:	0409      	lsls	r1, r1, #16
 8001556:	1809      	adds	r1, r1, r0
 8001558:	0020      	movs	r0, r4
 800155a:	4699      	mov	r9, r3
 800155c:	4643      	mov	r3, r8
 800155e:	4370      	muls	r0, r6
 8001560:	435c      	muls	r4, r3
 8001562:	437e      	muls	r6, r7
 8001564:	435f      	muls	r7, r3
 8001566:	0c03      	lsrs	r3, r0, #16
 8001568:	4698      	mov	r8, r3
 800156a:	19a4      	adds	r4, r4, r6
 800156c:	4444      	add	r4, r8
 800156e:	444a      	add	r2, r9
 8001570:	9703      	str	r7, [sp, #12]
 8001572:	42a6      	cmp	r6, r4
 8001574:	d904      	bls.n	8001580 <__aeabi_dmul+0x1d4>
 8001576:	2380      	movs	r3, #128	; 0x80
 8001578:	025b      	lsls	r3, r3, #9
 800157a:	4698      	mov	r8, r3
 800157c:	4447      	add	r7, r8
 800157e:	9703      	str	r7, [sp, #12]
 8001580:	0423      	lsls	r3, r4, #16
 8001582:	9e02      	ldr	r6, [sp, #8]
 8001584:	469a      	mov	sl, r3
 8001586:	9b05      	ldr	r3, [sp, #20]
 8001588:	445e      	add	r6, fp
 800158a:	4698      	mov	r8, r3
 800158c:	42ae      	cmp	r6, r5
 800158e:	41ad      	sbcs	r5, r5
 8001590:	1876      	adds	r6, r6, r1
 8001592:	428e      	cmp	r6, r1
 8001594:	4189      	sbcs	r1, r1
 8001596:	0400      	lsls	r0, r0, #16
 8001598:	0c00      	lsrs	r0, r0, #16
 800159a:	4450      	add	r0, sl
 800159c:	4440      	add	r0, r8
 800159e:	426d      	negs	r5, r5
 80015a0:	1947      	adds	r7, r0, r5
 80015a2:	46b8      	mov	r8, r7
 80015a4:	4693      	mov	fp, r2
 80015a6:	4249      	negs	r1, r1
 80015a8:	4689      	mov	r9, r1
 80015aa:	44c3      	add	fp, r8
 80015ac:	44d9      	add	r9, fp
 80015ae:	4298      	cmp	r0, r3
 80015b0:	4180      	sbcs	r0, r0
 80015b2:	45a8      	cmp	r8, r5
 80015b4:	41ad      	sbcs	r5, r5
 80015b6:	4593      	cmp	fp, r2
 80015b8:	4192      	sbcs	r2, r2
 80015ba:	4589      	cmp	r9, r1
 80015bc:	4189      	sbcs	r1, r1
 80015be:	426d      	negs	r5, r5
 80015c0:	4240      	negs	r0, r0
 80015c2:	4328      	orrs	r0, r5
 80015c4:	0c24      	lsrs	r4, r4, #16
 80015c6:	4252      	negs	r2, r2
 80015c8:	4249      	negs	r1, r1
 80015ca:	430a      	orrs	r2, r1
 80015cc:	9b03      	ldr	r3, [sp, #12]
 80015ce:	1900      	adds	r0, r0, r4
 80015d0:	1880      	adds	r0, r0, r2
 80015d2:	18c7      	adds	r7, r0, r3
 80015d4:	464b      	mov	r3, r9
 80015d6:	0ddc      	lsrs	r4, r3, #23
 80015d8:	9b04      	ldr	r3, [sp, #16]
 80015da:	0275      	lsls	r5, r6, #9
 80015dc:	431d      	orrs	r5, r3
 80015de:	1e6a      	subs	r2, r5, #1
 80015e0:	4195      	sbcs	r5, r2
 80015e2:	464b      	mov	r3, r9
 80015e4:	0df6      	lsrs	r6, r6, #23
 80015e6:	027f      	lsls	r7, r7, #9
 80015e8:	4335      	orrs	r5, r6
 80015ea:	025a      	lsls	r2, r3, #9
 80015ec:	433c      	orrs	r4, r7
 80015ee:	4315      	orrs	r5, r2
 80015f0:	01fb      	lsls	r3, r7, #7
 80015f2:	d400      	bmi.n	80015f6 <__aeabi_dmul+0x24a>
 80015f4:	e11c      	b.n	8001830 <__aeabi_dmul+0x484>
 80015f6:	2101      	movs	r1, #1
 80015f8:	086a      	lsrs	r2, r5, #1
 80015fa:	400d      	ands	r5, r1
 80015fc:	4315      	orrs	r5, r2
 80015fe:	07e2      	lsls	r2, r4, #31
 8001600:	4315      	orrs	r5, r2
 8001602:	0864      	lsrs	r4, r4, #1
 8001604:	494f      	ldr	r1, [pc, #316]	; (8001744 <__aeabi_dmul+0x398>)
 8001606:	4461      	add	r1, ip
 8001608:	2900      	cmp	r1, #0
 800160a:	dc00      	bgt.n	800160e <__aeabi_dmul+0x262>
 800160c:	e0b0      	b.n	8001770 <__aeabi_dmul+0x3c4>
 800160e:	076b      	lsls	r3, r5, #29
 8001610:	d009      	beq.n	8001626 <__aeabi_dmul+0x27a>
 8001612:	220f      	movs	r2, #15
 8001614:	402a      	ands	r2, r5
 8001616:	2a04      	cmp	r2, #4
 8001618:	d005      	beq.n	8001626 <__aeabi_dmul+0x27a>
 800161a:	1d2a      	adds	r2, r5, #4
 800161c:	42aa      	cmp	r2, r5
 800161e:	41ad      	sbcs	r5, r5
 8001620:	426d      	negs	r5, r5
 8001622:	1964      	adds	r4, r4, r5
 8001624:	0015      	movs	r5, r2
 8001626:	01e3      	lsls	r3, r4, #7
 8001628:	d504      	bpl.n	8001634 <__aeabi_dmul+0x288>
 800162a:	2180      	movs	r1, #128	; 0x80
 800162c:	4a46      	ldr	r2, [pc, #280]	; (8001748 <__aeabi_dmul+0x39c>)
 800162e:	00c9      	lsls	r1, r1, #3
 8001630:	4014      	ands	r4, r2
 8001632:	4461      	add	r1, ip
 8001634:	4a45      	ldr	r2, [pc, #276]	; (800174c <__aeabi_dmul+0x3a0>)
 8001636:	4291      	cmp	r1, r2
 8001638:	dd00      	ble.n	800163c <__aeabi_dmul+0x290>
 800163a:	e726      	b.n	800148a <__aeabi_dmul+0xde>
 800163c:	0762      	lsls	r2, r4, #29
 800163e:	08ed      	lsrs	r5, r5, #3
 8001640:	0264      	lsls	r4, r4, #9
 8001642:	0549      	lsls	r1, r1, #21
 8001644:	4315      	orrs	r5, r2
 8001646:	0b24      	lsrs	r4, r4, #12
 8001648:	0d4a      	lsrs	r2, r1, #21
 800164a:	e710      	b.n	800146e <__aeabi_dmul+0xc2>
 800164c:	4652      	mov	r2, sl
 800164e:	4332      	orrs	r2, r6
 8001650:	d100      	bne.n	8001654 <__aeabi_dmul+0x2a8>
 8001652:	e07f      	b.n	8001754 <__aeabi_dmul+0x3a8>
 8001654:	2e00      	cmp	r6, #0
 8001656:	d100      	bne.n	800165a <__aeabi_dmul+0x2ae>
 8001658:	e0dc      	b.n	8001814 <__aeabi_dmul+0x468>
 800165a:	0030      	movs	r0, r6
 800165c:	f000 fdde 	bl	800221c <__clzsi2>
 8001660:	0002      	movs	r2, r0
 8001662:	3a0b      	subs	r2, #11
 8001664:	231d      	movs	r3, #29
 8001666:	0001      	movs	r1, r0
 8001668:	1a9b      	subs	r3, r3, r2
 800166a:	4652      	mov	r2, sl
 800166c:	3908      	subs	r1, #8
 800166e:	40da      	lsrs	r2, r3
 8001670:	408e      	lsls	r6, r1
 8001672:	4316      	orrs	r6, r2
 8001674:	4652      	mov	r2, sl
 8001676:	408a      	lsls	r2, r1
 8001678:	9b00      	ldr	r3, [sp, #0]
 800167a:	4935      	ldr	r1, [pc, #212]	; (8001750 <__aeabi_dmul+0x3a4>)
 800167c:	1a18      	subs	r0, r3, r0
 800167e:	0003      	movs	r3, r0
 8001680:	468c      	mov	ip, r1
 8001682:	4463      	add	r3, ip
 8001684:	2000      	movs	r0, #0
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	e6d3      	b.n	8001432 <__aeabi_dmul+0x86>
 800168a:	0025      	movs	r5, r4
 800168c:	4305      	orrs	r5, r0
 800168e:	d04a      	beq.n	8001726 <__aeabi_dmul+0x37a>
 8001690:	2c00      	cmp	r4, #0
 8001692:	d100      	bne.n	8001696 <__aeabi_dmul+0x2ea>
 8001694:	e0b0      	b.n	80017f8 <__aeabi_dmul+0x44c>
 8001696:	0020      	movs	r0, r4
 8001698:	f000 fdc0 	bl	800221c <__clzsi2>
 800169c:	0001      	movs	r1, r0
 800169e:	0002      	movs	r2, r0
 80016a0:	390b      	subs	r1, #11
 80016a2:	231d      	movs	r3, #29
 80016a4:	0010      	movs	r0, r2
 80016a6:	1a5b      	subs	r3, r3, r1
 80016a8:	0031      	movs	r1, r6
 80016aa:	0035      	movs	r5, r6
 80016ac:	3808      	subs	r0, #8
 80016ae:	4084      	lsls	r4, r0
 80016b0:	40d9      	lsrs	r1, r3
 80016b2:	4085      	lsls	r5, r0
 80016b4:	430c      	orrs	r4, r1
 80016b6:	4826      	ldr	r0, [pc, #152]	; (8001750 <__aeabi_dmul+0x3a4>)
 80016b8:	1a83      	subs	r3, r0, r2
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	2300      	movs	r3, #0
 80016be:	4699      	mov	r9, r3
 80016c0:	469b      	mov	fp, r3
 80016c2:	e697      	b.n	80013f4 <__aeabi_dmul+0x48>
 80016c4:	0005      	movs	r5, r0
 80016c6:	4325      	orrs	r5, r4
 80016c8:	d126      	bne.n	8001718 <__aeabi_dmul+0x36c>
 80016ca:	2208      	movs	r2, #8
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	2302      	movs	r3, #2
 80016d0:	2400      	movs	r4, #0
 80016d2:	4691      	mov	r9, r2
 80016d4:	469b      	mov	fp, r3
 80016d6:	e68d      	b.n	80013f4 <__aeabi_dmul+0x48>
 80016d8:	4652      	mov	r2, sl
 80016da:	9b00      	ldr	r3, [sp, #0]
 80016dc:	4332      	orrs	r2, r6
 80016de:	d110      	bne.n	8001702 <__aeabi_dmul+0x356>
 80016e0:	4915      	ldr	r1, [pc, #84]	; (8001738 <__aeabi_dmul+0x38c>)
 80016e2:	2600      	movs	r6, #0
 80016e4:	468c      	mov	ip, r1
 80016e6:	4463      	add	r3, ip
 80016e8:	4649      	mov	r1, r9
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	2302      	movs	r3, #2
 80016ee:	4319      	orrs	r1, r3
 80016f0:	4689      	mov	r9, r1
 80016f2:	2002      	movs	r0, #2
 80016f4:	e69d      	b.n	8001432 <__aeabi_dmul+0x86>
 80016f6:	465b      	mov	r3, fp
 80016f8:	9701      	str	r7, [sp, #4]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d000      	beq.n	8001700 <__aeabi_dmul+0x354>
 80016fe:	e6ad      	b.n	800145c <__aeabi_dmul+0xb0>
 8001700:	e6c3      	b.n	800148a <__aeabi_dmul+0xde>
 8001702:	4a0d      	ldr	r2, [pc, #52]	; (8001738 <__aeabi_dmul+0x38c>)
 8001704:	2003      	movs	r0, #3
 8001706:	4694      	mov	ip, r2
 8001708:	4463      	add	r3, ip
 800170a:	464a      	mov	r2, r9
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	2303      	movs	r3, #3
 8001710:	431a      	orrs	r2, r3
 8001712:	4691      	mov	r9, r2
 8001714:	4652      	mov	r2, sl
 8001716:	e68c      	b.n	8001432 <__aeabi_dmul+0x86>
 8001718:	220c      	movs	r2, #12
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	2303      	movs	r3, #3
 800171e:	0005      	movs	r5, r0
 8001720:	4691      	mov	r9, r2
 8001722:	469b      	mov	fp, r3
 8001724:	e666      	b.n	80013f4 <__aeabi_dmul+0x48>
 8001726:	2304      	movs	r3, #4
 8001728:	4699      	mov	r9, r3
 800172a:	2300      	movs	r3, #0
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	3301      	adds	r3, #1
 8001730:	2400      	movs	r4, #0
 8001732:	469b      	mov	fp, r3
 8001734:	e65e      	b.n	80013f4 <__aeabi_dmul+0x48>
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	000007ff 	.word	0x000007ff
 800173c:	fffffc01 	.word	0xfffffc01
 8001740:	08005e74 	.word	0x08005e74
 8001744:	000003ff 	.word	0x000003ff
 8001748:	feffffff 	.word	0xfeffffff
 800174c:	000007fe 	.word	0x000007fe
 8001750:	fffffc0d 	.word	0xfffffc0d
 8001754:	4649      	mov	r1, r9
 8001756:	2301      	movs	r3, #1
 8001758:	4319      	orrs	r1, r3
 800175a:	4689      	mov	r9, r1
 800175c:	2600      	movs	r6, #0
 800175e:	2001      	movs	r0, #1
 8001760:	e667      	b.n	8001432 <__aeabi_dmul+0x86>
 8001762:	2300      	movs	r3, #0
 8001764:	2480      	movs	r4, #128	; 0x80
 8001766:	2500      	movs	r5, #0
 8001768:	4a43      	ldr	r2, [pc, #268]	; (8001878 <__aeabi_dmul+0x4cc>)
 800176a:	9301      	str	r3, [sp, #4]
 800176c:	0324      	lsls	r4, r4, #12
 800176e:	e67e      	b.n	800146e <__aeabi_dmul+0xc2>
 8001770:	2001      	movs	r0, #1
 8001772:	1a40      	subs	r0, r0, r1
 8001774:	2838      	cmp	r0, #56	; 0x38
 8001776:	dd00      	ble.n	800177a <__aeabi_dmul+0x3ce>
 8001778:	e676      	b.n	8001468 <__aeabi_dmul+0xbc>
 800177a:	281f      	cmp	r0, #31
 800177c:	dd5b      	ble.n	8001836 <__aeabi_dmul+0x48a>
 800177e:	221f      	movs	r2, #31
 8001780:	0023      	movs	r3, r4
 8001782:	4252      	negs	r2, r2
 8001784:	1a51      	subs	r1, r2, r1
 8001786:	40cb      	lsrs	r3, r1
 8001788:	0019      	movs	r1, r3
 800178a:	2820      	cmp	r0, #32
 800178c:	d003      	beq.n	8001796 <__aeabi_dmul+0x3ea>
 800178e:	4a3b      	ldr	r2, [pc, #236]	; (800187c <__aeabi_dmul+0x4d0>)
 8001790:	4462      	add	r2, ip
 8001792:	4094      	lsls	r4, r2
 8001794:	4325      	orrs	r5, r4
 8001796:	1e6a      	subs	r2, r5, #1
 8001798:	4195      	sbcs	r5, r2
 800179a:	002a      	movs	r2, r5
 800179c:	430a      	orrs	r2, r1
 800179e:	2107      	movs	r1, #7
 80017a0:	000d      	movs	r5, r1
 80017a2:	2400      	movs	r4, #0
 80017a4:	4015      	ands	r5, r2
 80017a6:	4211      	tst	r1, r2
 80017a8:	d05b      	beq.n	8001862 <__aeabi_dmul+0x4b6>
 80017aa:	210f      	movs	r1, #15
 80017ac:	2400      	movs	r4, #0
 80017ae:	4011      	ands	r1, r2
 80017b0:	2904      	cmp	r1, #4
 80017b2:	d053      	beq.n	800185c <__aeabi_dmul+0x4b0>
 80017b4:	1d11      	adds	r1, r2, #4
 80017b6:	4291      	cmp	r1, r2
 80017b8:	4192      	sbcs	r2, r2
 80017ba:	4252      	negs	r2, r2
 80017bc:	18a4      	adds	r4, r4, r2
 80017be:	000a      	movs	r2, r1
 80017c0:	0223      	lsls	r3, r4, #8
 80017c2:	d54b      	bpl.n	800185c <__aeabi_dmul+0x4b0>
 80017c4:	2201      	movs	r2, #1
 80017c6:	2400      	movs	r4, #0
 80017c8:	2500      	movs	r5, #0
 80017ca:	e650      	b.n	800146e <__aeabi_dmul+0xc2>
 80017cc:	2380      	movs	r3, #128	; 0x80
 80017ce:	031b      	lsls	r3, r3, #12
 80017d0:	421c      	tst	r4, r3
 80017d2:	d009      	beq.n	80017e8 <__aeabi_dmul+0x43c>
 80017d4:	421e      	tst	r6, r3
 80017d6:	d107      	bne.n	80017e8 <__aeabi_dmul+0x43c>
 80017d8:	4333      	orrs	r3, r6
 80017da:	031c      	lsls	r4, r3, #12
 80017dc:	4643      	mov	r3, r8
 80017de:	0015      	movs	r5, r2
 80017e0:	0b24      	lsrs	r4, r4, #12
 80017e2:	4a25      	ldr	r2, [pc, #148]	; (8001878 <__aeabi_dmul+0x4cc>)
 80017e4:	9301      	str	r3, [sp, #4]
 80017e6:	e642      	b.n	800146e <__aeabi_dmul+0xc2>
 80017e8:	2280      	movs	r2, #128	; 0x80
 80017ea:	0312      	lsls	r2, r2, #12
 80017ec:	4314      	orrs	r4, r2
 80017ee:	0324      	lsls	r4, r4, #12
 80017f0:	4a21      	ldr	r2, [pc, #132]	; (8001878 <__aeabi_dmul+0x4cc>)
 80017f2:	0b24      	lsrs	r4, r4, #12
 80017f4:	9701      	str	r7, [sp, #4]
 80017f6:	e63a      	b.n	800146e <__aeabi_dmul+0xc2>
 80017f8:	f000 fd10 	bl	800221c <__clzsi2>
 80017fc:	0001      	movs	r1, r0
 80017fe:	0002      	movs	r2, r0
 8001800:	3115      	adds	r1, #21
 8001802:	3220      	adds	r2, #32
 8001804:	291c      	cmp	r1, #28
 8001806:	dc00      	bgt.n	800180a <__aeabi_dmul+0x45e>
 8001808:	e74b      	b.n	80016a2 <__aeabi_dmul+0x2f6>
 800180a:	0034      	movs	r4, r6
 800180c:	3808      	subs	r0, #8
 800180e:	2500      	movs	r5, #0
 8001810:	4084      	lsls	r4, r0
 8001812:	e750      	b.n	80016b6 <__aeabi_dmul+0x30a>
 8001814:	f000 fd02 	bl	800221c <__clzsi2>
 8001818:	0003      	movs	r3, r0
 800181a:	001a      	movs	r2, r3
 800181c:	3215      	adds	r2, #21
 800181e:	3020      	adds	r0, #32
 8001820:	2a1c      	cmp	r2, #28
 8001822:	dc00      	bgt.n	8001826 <__aeabi_dmul+0x47a>
 8001824:	e71e      	b.n	8001664 <__aeabi_dmul+0x2b8>
 8001826:	4656      	mov	r6, sl
 8001828:	3b08      	subs	r3, #8
 800182a:	2200      	movs	r2, #0
 800182c:	409e      	lsls	r6, r3
 800182e:	e723      	b.n	8001678 <__aeabi_dmul+0x2cc>
 8001830:	9b00      	ldr	r3, [sp, #0]
 8001832:	469c      	mov	ip, r3
 8001834:	e6e6      	b.n	8001604 <__aeabi_dmul+0x258>
 8001836:	4912      	ldr	r1, [pc, #72]	; (8001880 <__aeabi_dmul+0x4d4>)
 8001838:	0022      	movs	r2, r4
 800183a:	4461      	add	r1, ip
 800183c:	002e      	movs	r6, r5
 800183e:	408d      	lsls	r5, r1
 8001840:	408a      	lsls	r2, r1
 8001842:	40c6      	lsrs	r6, r0
 8001844:	1e69      	subs	r1, r5, #1
 8001846:	418d      	sbcs	r5, r1
 8001848:	4332      	orrs	r2, r6
 800184a:	432a      	orrs	r2, r5
 800184c:	40c4      	lsrs	r4, r0
 800184e:	0753      	lsls	r3, r2, #29
 8001850:	d0b6      	beq.n	80017c0 <__aeabi_dmul+0x414>
 8001852:	210f      	movs	r1, #15
 8001854:	4011      	ands	r1, r2
 8001856:	2904      	cmp	r1, #4
 8001858:	d1ac      	bne.n	80017b4 <__aeabi_dmul+0x408>
 800185a:	e7b1      	b.n	80017c0 <__aeabi_dmul+0x414>
 800185c:	0765      	lsls	r5, r4, #29
 800185e:	0264      	lsls	r4, r4, #9
 8001860:	0b24      	lsrs	r4, r4, #12
 8001862:	08d2      	lsrs	r2, r2, #3
 8001864:	4315      	orrs	r5, r2
 8001866:	2200      	movs	r2, #0
 8001868:	e601      	b.n	800146e <__aeabi_dmul+0xc2>
 800186a:	2280      	movs	r2, #128	; 0x80
 800186c:	0312      	lsls	r2, r2, #12
 800186e:	4314      	orrs	r4, r2
 8001870:	0324      	lsls	r4, r4, #12
 8001872:	4a01      	ldr	r2, [pc, #4]	; (8001878 <__aeabi_dmul+0x4cc>)
 8001874:	0b24      	lsrs	r4, r4, #12
 8001876:	e5fa      	b.n	800146e <__aeabi_dmul+0xc2>
 8001878:	000007ff 	.word	0x000007ff
 800187c:	0000043e 	.word	0x0000043e
 8001880:	0000041e 	.word	0x0000041e

08001884 <__aeabi_dsub>:
 8001884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001886:	4657      	mov	r7, sl
 8001888:	464e      	mov	r6, r9
 800188a:	4645      	mov	r5, r8
 800188c:	46de      	mov	lr, fp
 800188e:	b5e0      	push	{r5, r6, r7, lr}
 8001890:	001e      	movs	r6, r3
 8001892:	0017      	movs	r7, r2
 8001894:	004a      	lsls	r2, r1, #1
 8001896:	030b      	lsls	r3, r1, #12
 8001898:	0d52      	lsrs	r2, r2, #21
 800189a:	0a5b      	lsrs	r3, r3, #9
 800189c:	4690      	mov	r8, r2
 800189e:	0f42      	lsrs	r2, r0, #29
 80018a0:	431a      	orrs	r2, r3
 80018a2:	0fcd      	lsrs	r5, r1, #31
 80018a4:	4ccd      	ldr	r4, [pc, #820]	; (8001bdc <__aeabi_dsub+0x358>)
 80018a6:	0331      	lsls	r1, r6, #12
 80018a8:	00c3      	lsls	r3, r0, #3
 80018aa:	4694      	mov	ip, r2
 80018ac:	0070      	lsls	r0, r6, #1
 80018ae:	0f7a      	lsrs	r2, r7, #29
 80018b0:	0a49      	lsrs	r1, r1, #9
 80018b2:	00ff      	lsls	r7, r7, #3
 80018b4:	469a      	mov	sl, r3
 80018b6:	46b9      	mov	r9, r7
 80018b8:	0d40      	lsrs	r0, r0, #21
 80018ba:	0ff6      	lsrs	r6, r6, #31
 80018bc:	4311      	orrs	r1, r2
 80018be:	42a0      	cmp	r0, r4
 80018c0:	d100      	bne.n	80018c4 <__aeabi_dsub+0x40>
 80018c2:	e0b1      	b.n	8001a28 <__aeabi_dsub+0x1a4>
 80018c4:	2201      	movs	r2, #1
 80018c6:	4056      	eors	r6, r2
 80018c8:	46b3      	mov	fp, r6
 80018ca:	42b5      	cmp	r5, r6
 80018cc:	d100      	bne.n	80018d0 <__aeabi_dsub+0x4c>
 80018ce:	e088      	b.n	80019e2 <__aeabi_dsub+0x15e>
 80018d0:	4642      	mov	r2, r8
 80018d2:	1a12      	subs	r2, r2, r0
 80018d4:	2a00      	cmp	r2, #0
 80018d6:	dc00      	bgt.n	80018da <__aeabi_dsub+0x56>
 80018d8:	e0ae      	b.n	8001a38 <__aeabi_dsub+0x1b4>
 80018da:	2800      	cmp	r0, #0
 80018dc:	d100      	bne.n	80018e0 <__aeabi_dsub+0x5c>
 80018de:	e0c1      	b.n	8001a64 <__aeabi_dsub+0x1e0>
 80018e0:	48be      	ldr	r0, [pc, #760]	; (8001bdc <__aeabi_dsub+0x358>)
 80018e2:	4580      	cmp	r8, r0
 80018e4:	d100      	bne.n	80018e8 <__aeabi_dsub+0x64>
 80018e6:	e151      	b.n	8001b8c <__aeabi_dsub+0x308>
 80018e8:	2080      	movs	r0, #128	; 0x80
 80018ea:	0400      	lsls	r0, r0, #16
 80018ec:	4301      	orrs	r1, r0
 80018ee:	2a38      	cmp	r2, #56	; 0x38
 80018f0:	dd00      	ble.n	80018f4 <__aeabi_dsub+0x70>
 80018f2:	e17b      	b.n	8001bec <__aeabi_dsub+0x368>
 80018f4:	2a1f      	cmp	r2, #31
 80018f6:	dd00      	ble.n	80018fa <__aeabi_dsub+0x76>
 80018f8:	e1ee      	b.n	8001cd8 <__aeabi_dsub+0x454>
 80018fa:	2020      	movs	r0, #32
 80018fc:	003e      	movs	r6, r7
 80018fe:	1a80      	subs	r0, r0, r2
 8001900:	000c      	movs	r4, r1
 8001902:	40d6      	lsrs	r6, r2
 8001904:	40d1      	lsrs	r1, r2
 8001906:	4087      	lsls	r7, r0
 8001908:	4662      	mov	r2, ip
 800190a:	4084      	lsls	r4, r0
 800190c:	1a52      	subs	r2, r2, r1
 800190e:	1e78      	subs	r0, r7, #1
 8001910:	4187      	sbcs	r7, r0
 8001912:	4694      	mov	ip, r2
 8001914:	4334      	orrs	r4, r6
 8001916:	4327      	orrs	r7, r4
 8001918:	1bdc      	subs	r4, r3, r7
 800191a:	42a3      	cmp	r3, r4
 800191c:	419b      	sbcs	r3, r3
 800191e:	4662      	mov	r2, ip
 8001920:	425b      	negs	r3, r3
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	4699      	mov	r9, r3
 8001926:	464b      	mov	r3, r9
 8001928:	021b      	lsls	r3, r3, #8
 800192a:	d400      	bmi.n	800192e <__aeabi_dsub+0xaa>
 800192c:	e118      	b.n	8001b60 <__aeabi_dsub+0x2dc>
 800192e:	464b      	mov	r3, r9
 8001930:	0258      	lsls	r0, r3, #9
 8001932:	0a43      	lsrs	r3, r0, #9
 8001934:	4699      	mov	r9, r3
 8001936:	464b      	mov	r3, r9
 8001938:	2b00      	cmp	r3, #0
 800193a:	d100      	bne.n	800193e <__aeabi_dsub+0xba>
 800193c:	e137      	b.n	8001bae <__aeabi_dsub+0x32a>
 800193e:	4648      	mov	r0, r9
 8001940:	f000 fc6c 	bl	800221c <__clzsi2>
 8001944:	0001      	movs	r1, r0
 8001946:	3908      	subs	r1, #8
 8001948:	2320      	movs	r3, #32
 800194a:	0022      	movs	r2, r4
 800194c:	4648      	mov	r0, r9
 800194e:	1a5b      	subs	r3, r3, r1
 8001950:	40da      	lsrs	r2, r3
 8001952:	4088      	lsls	r0, r1
 8001954:	408c      	lsls	r4, r1
 8001956:	4643      	mov	r3, r8
 8001958:	4310      	orrs	r0, r2
 800195a:	4588      	cmp	r8, r1
 800195c:	dd00      	ble.n	8001960 <__aeabi_dsub+0xdc>
 800195e:	e136      	b.n	8001bce <__aeabi_dsub+0x34a>
 8001960:	1ac9      	subs	r1, r1, r3
 8001962:	1c4b      	adds	r3, r1, #1
 8001964:	2b1f      	cmp	r3, #31
 8001966:	dd00      	ble.n	800196a <__aeabi_dsub+0xe6>
 8001968:	e0ea      	b.n	8001b40 <__aeabi_dsub+0x2bc>
 800196a:	2220      	movs	r2, #32
 800196c:	0026      	movs	r6, r4
 800196e:	1ad2      	subs	r2, r2, r3
 8001970:	0001      	movs	r1, r0
 8001972:	4094      	lsls	r4, r2
 8001974:	40de      	lsrs	r6, r3
 8001976:	40d8      	lsrs	r0, r3
 8001978:	2300      	movs	r3, #0
 800197a:	4091      	lsls	r1, r2
 800197c:	1e62      	subs	r2, r4, #1
 800197e:	4194      	sbcs	r4, r2
 8001980:	4681      	mov	r9, r0
 8001982:	4698      	mov	r8, r3
 8001984:	4331      	orrs	r1, r6
 8001986:	430c      	orrs	r4, r1
 8001988:	0763      	lsls	r3, r4, #29
 800198a:	d009      	beq.n	80019a0 <__aeabi_dsub+0x11c>
 800198c:	230f      	movs	r3, #15
 800198e:	4023      	ands	r3, r4
 8001990:	2b04      	cmp	r3, #4
 8001992:	d005      	beq.n	80019a0 <__aeabi_dsub+0x11c>
 8001994:	1d23      	adds	r3, r4, #4
 8001996:	42a3      	cmp	r3, r4
 8001998:	41a4      	sbcs	r4, r4
 800199a:	4264      	negs	r4, r4
 800199c:	44a1      	add	r9, r4
 800199e:	001c      	movs	r4, r3
 80019a0:	464b      	mov	r3, r9
 80019a2:	021b      	lsls	r3, r3, #8
 80019a4:	d400      	bmi.n	80019a8 <__aeabi_dsub+0x124>
 80019a6:	e0de      	b.n	8001b66 <__aeabi_dsub+0x2e2>
 80019a8:	4641      	mov	r1, r8
 80019aa:	4b8c      	ldr	r3, [pc, #560]	; (8001bdc <__aeabi_dsub+0x358>)
 80019ac:	3101      	adds	r1, #1
 80019ae:	4299      	cmp	r1, r3
 80019b0:	d100      	bne.n	80019b4 <__aeabi_dsub+0x130>
 80019b2:	e0e7      	b.n	8001b84 <__aeabi_dsub+0x300>
 80019b4:	464b      	mov	r3, r9
 80019b6:	488a      	ldr	r0, [pc, #552]	; (8001be0 <__aeabi_dsub+0x35c>)
 80019b8:	08e4      	lsrs	r4, r4, #3
 80019ba:	4003      	ands	r3, r0
 80019bc:	0018      	movs	r0, r3
 80019be:	0549      	lsls	r1, r1, #21
 80019c0:	075b      	lsls	r3, r3, #29
 80019c2:	0240      	lsls	r0, r0, #9
 80019c4:	4323      	orrs	r3, r4
 80019c6:	0d4a      	lsrs	r2, r1, #21
 80019c8:	0b04      	lsrs	r4, r0, #12
 80019ca:	0512      	lsls	r2, r2, #20
 80019cc:	07ed      	lsls	r5, r5, #31
 80019ce:	4322      	orrs	r2, r4
 80019d0:	432a      	orrs	r2, r5
 80019d2:	0018      	movs	r0, r3
 80019d4:	0011      	movs	r1, r2
 80019d6:	bcf0      	pop	{r4, r5, r6, r7}
 80019d8:	46bb      	mov	fp, r7
 80019da:	46b2      	mov	sl, r6
 80019dc:	46a9      	mov	r9, r5
 80019de:	46a0      	mov	r8, r4
 80019e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019e2:	4642      	mov	r2, r8
 80019e4:	1a12      	subs	r2, r2, r0
 80019e6:	2a00      	cmp	r2, #0
 80019e8:	dd52      	ble.n	8001a90 <__aeabi_dsub+0x20c>
 80019ea:	2800      	cmp	r0, #0
 80019ec:	d100      	bne.n	80019f0 <__aeabi_dsub+0x16c>
 80019ee:	e09c      	b.n	8001b2a <__aeabi_dsub+0x2a6>
 80019f0:	45a0      	cmp	r8, r4
 80019f2:	d100      	bne.n	80019f6 <__aeabi_dsub+0x172>
 80019f4:	e0ca      	b.n	8001b8c <__aeabi_dsub+0x308>
 80019f6:	2080      	movs	r0, #128	; 0x80
 80019f8:	0400      	lsls	r0, r0, #16
 80019fa:	4301      	orrs	r1, r0
 80019fc:	2a38      	cmp	r2, #56	; 0x38
 80019fe:	dd00      	ble.n	8001a02 <__aeabi_dsub+0x17e>
 8001a00:	e149      	b.n	8001c96 <__aeabi_dsub+0x412>
 8001a02:	2a1f      	cmp	r2, #31
 8001a04:	dc00      	bgt.n	8001a08 <__aeabi_dsub+0x184>
 8001a06:	e197      	b.n	8001d38 <__aeabi_dsub+0x4b4>
 8001a08:	0010      	movs	r0, r2
 8001a0a:	000e      	movs	r6, r1
 8001a0c:	3820      	subs	r0, #32
 8001a0e:	40c6      	lsrs	r6, r0
 8001a10:	2a20      	cmp	r2, #32
 8001a12:	d004      	beq.n	8001a1e <__aeabi_dsub+0x19a>
 8001a14:	2040      	movs	r0, #64	; 0x40
 8001a16:	1a82      	subs	r2, r0, r2
 8001a18:	4091      	lsls	r1, r2
 8001a1a:	430f      	orrs	r7, r1
 8001a1c:	46b9      	mov	r9, r7
 8001a1e:	464c      	mov	r4, r9
 8001a20:	1e62      	subs	r2, r4, #1
 8001a22:	4194      	sbcs	r4, r2
 8001a24:	4334      	orrs	r4, r6
 8001a26:	e13a      	b.n	8001c9e <__aeabi_dsub+0x41a>
 8001a28:	000a      	movs	r2, r1
 8001a2a:	433a      	orrs	r2, r7
 8001a2c:	d028      	beq.n	8001a80 <__aeabi_dsub+0x1fc>
 8001a2e:	46b3      	mov	fp, r6
 8001a30:	42b5      	cmp	r5, r6
 8001a32:	d02b      	beq.n	8001a8c <__aeabi_dsub+0x208>
 8001a34:	4a6b      	ldr	r2, [pc, #428]	; (8001be4 <__aeabi_dsub+0x360>)
 8001a36:	4442      	add	r2, r8
 8001a38:	2a00      	cmp	r2, #0
 8001a3a:	d05d      	beq.n	8001af8 <__aeabi_dsub+0x274>
 8001a3c:	4642      	mov	r2, r8
 8001a3e:	4644      	mov	r4, r8
 8001a40:	1a82      	subs	r2, r0, r2
 8001a42:	2c00      	cmp	r4, #0
 8001a44:	d000      	beq.n	8001a48 <__aeabi_dsub+0x1c4>
 8001a46:	e0f5      	b.n	8001c34 <__aeabi_dsub+0x3b0>
 8001a48:	4665      	mov	r5, ip
 8001a4a:	431d      	orrs	r5, r3
 8001a4c:	d100      	bne.n	8001a50 <__aeabi_dsub+0x1cc>
 8001a4e:	e19c      	b.n	8001d8a <__aeabi_dsub+0x506>
 8001a50:	1e55      	subs	r5, r2, #1
 8001a52:	2a01      	cmp	r2, #1
 8001a54:	d100      	bne.n	8001a58 <__aeabi_dsub+0x1d4>
 8001a56:	e1fb      	b.n	8001e50 <__aeabi_dsub+0x5cc>
 8001a58:	4c60      	ldr	r4, [pc, #384]	; (8001bdc <__aeabi_dsub+0x358>)
 8001a5a:	42a2      	cmp	r2, r4
 8001a5c:	d100      	bne.n	8001a60 <__aeabi_dsub+0x1dc>
 8001a5e:	e1bd      	b.n	8001ddc <__aeabi_dsub+0x558>
 8001a60:	002a      	movs	r2, r5
 8001a62:	e0f0      	b.n	8001c46 <__aeabi_dsub+0x3c2>
 8001a64:	0008      	movs	r0, r1
 8001a66:	4338      	orrs	r0, r7
 8001a68:	d100      	bne.n	8001a6c <__aeabi_dsub+0x1e8>
 8001a6a:	e0c3      	b.n	8001bf4 <__aeabi_dsub+0x370>
 8001a6c:	1e50      	subs	r0, r2, #1
 8001a6e:	2a01      	cmp	r2, #1
 8001a70:	d100      	bne.n	8001a74 <__aeabi_dsub+0x1f0>
 8001a72:	e1a8      	b.n	8001dc6 <__aeabi_dsub+0x542>
 8001a74:	4c59      	ldr	r4, [pc, #356]	; (8001bdc <__aeabi_dsub+0x358>)
 8001a76:	42a2      	cmp	r2, r4
 8001a78:	d100      	bne.n	8001a7c <__aeabi_dsub+0x1f8>
 8001a7a:	e087      	b.n	8001b8c <__aeabi_dsub+0x308>
 8001a7c:	0002      	movs	r2, r0
 8001a7e:	e736      	b.n	80018ee <__aeabi_dsub+0x6a>
 8001a80:	2201      	movs	r2, #1
 8001a82:	4056      	eors	r6, r2
 8001a84:	46b3      	mov	fp, r6
 8001a86:	42b5      	cmp	r5, r6
 8001a88:	d000      	beq.n	8001a8c <__aeabi_dsub+0x208>
 8001a8a:	e721      	b.n	80018d0 <__aeabi_dsub+0x4c>
 8001a8c:	4a55      	ldr	r2, [pc, #340]	; (8001be4 <__aeabi_dsub+0x360>)
 8001a8e:	4442      	add	r2, r8
 8001a90:	2a00      	cmp	r2, #0
 8001a92:	d100      	bne.n	8001a96 <__aeabi_dsub+0x212>
 8001a94:	e0b5      	b.n	8001c02 <__aeabi_dsub+0x37e>
 8001a96:	4642      	mov	r2, r8
 8001a98:	4644      	mov	r4, r8
 8001a9a:	1a82      	subs	r2, r0, r2
 8001a9c:	2c00      	cmp	r4, #0
 8001a9e:	d100      	bne.n	8001aa2 <__aeabi_dsub+0x21e>
 8001aa0:	e138      	b.n	8001d14 <__aeabi_dsub+0x490>
 8001aa2:	4e4e      	ldr	r6, [pc, #312]	; (8001bdc <__aeabi_dsub+0x358>)
 8001aa4:	42b0      	cmp	r0, r6
 8001aa6:	d100      	bne.n	8001aaa <__aeabi_dsub+0x226>
 8001aa8:	e1de      	b.n	8001e68 <__aeabi_dsub+0x5e4>
 8001aaa:	2680      	movs	r6, #128	; 0x80
 8001aac:	4664      	mov	r4, ip
 8001aae:	0436      	lsls	r6, r6, #16
 8001ab0:	4334      	orrs	r4, r6
 8001ab2:	46a4      	mov	ip, r4
 8001ab4:	2a38      	cmp	r2, #56	; 0x38
 8001ab6:	dd00      	ble.n	8001aba <__aeabi_dsub+0x236>
 8001ab8:	e196      	b.n	8001de8 <__aeabi_dsub+0x564>
 8001aba:	2a1f      	cmp	r2, #31
 8001abc:	dd00      	ble.n	8001ac0 <__aeabi_dsub+0x23c>
 8001abe:	e224      	b.n	8001f0a <__aeabi_dsub+0x686>
 8001ac0:	2620      	movs	r6, #32
 8001ac2:	1ab4      	subs	r4, r6, r2
 8001ac4:	46a2      	mov	sl, r4
 8001ac6:	4664      	mov	r4, ip
 8001ac8:	4656      	mov	r6, sl
 8001aca:	40b4      	lsls	r4, r6
 8001acc:	46a1      	mov	r9, r4
 8001ace:	001c      	movs	r4, r3
 8001ad0:	464e      	mov	r6, r9
 8001ad2:	40d4      	lsrs	r4, r2
 8001ad4:	4326      	orrs	r6, r4
 8001ad6:	0034      	movs	r4, r6
 8001ad8:	4656      	mov	r6, sl
 8001ada:	40b3      	lsls	r3, r6
 8001adc:	1e5e      	subs	r6, r3, #1
 8001ade:	41b3      	sbcs	r3, r6
 8001ae0:	431c      	orrs	r4, r3
 8001ae2:	4663      	mov	r3, ip
 8001ae4:	40d3      	lsrs	r3, r2
 8001ae6:	18c9      	adds	r1, r1, r3
 8001ae8:	19e4      	adds	r4, r4, r7
 8001aea:	42bc      	cmp	r4, r7
 8001aec:	41bf      	sbcs	r7, r7
 8001aee:	427f      	negs	r7, r7
 8001af0:	46b9      	mov	r9, r7
 8001af2:	4680      	mov	r8, r0
 8001af4:	4489      	add	r9, r1
 8001af6:	e0d8      	b.n	8001caa <__aeabi_dsub+0x426>
 8001af8:	4640      	mov	r0, r8
 8001afa:	4c3b      	ldr	r4, [pc, #236]	; (8001be8 <__aeabi_dsub+0x364>)
 8001afc:	3001      	adds	r0, #1
 8001afe:	4220      	tst	r0, r4
 8001b00:	d000      	beq.n	8001b04 <__aeabi_dsub+0x280>
 8001b02:	e0b4      	b.n	8001c6e <__aeabi_dsub+0x3ea>
 8001b04:	4640      	mov	r0, r8
 8001b06:	2800      	cmp	r0, #0
 8001b08:	d000      	beq.n	8001b0c <__aeabi_dsub+0x288>
 8001b0a:	e144      	b.n	8001d96 <__aeabi_dsub+0x512>
 8001b0c:	4660      	mov	r0, ip
 8001b0e:	4318      	orrs	r0, r3
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dsub+0x290>
 8001b12:	e190      	b.n	8001e36 <__aeabi_dsub+0x5b2>
 8001b14:	0008      	movs	r0, r1
 8001b16:	4338      	orrs	r0, r7
 8001b18:	d000      	beq.n	8001b1c <__aeabi_dsub+0x298>
 8001b1a:	e1aa      	b.n	8001e72 <__aeabi_dsub+0x5ee>
 8001b1c:	4661      	mov	r1, ip
 8001b1e:	08db      	lsrs	r3, r3, #3
 8001b20:	0749      	lsls	r1, r1, #29
 8001b22:	430b      	orrs	r3, r1
 8001b24:	4661      	mov	r1, ip
 8001b26:	08cc      	lsrs	r4, r1, #3
 8001b28:	e027      	b.n	8001b7a <__aeabi_dsub+0x2f6>
 8001b2a:	0008      	movs	r0, r1
 8001b2c:	4338      	orrs	r0, r7
 8001b2e:	d061      	beq.n	8001bf4 <__aeabi_dsub+0x370>
 8001b30:	1e50      	subs	r0, r2, #1
 8001b32:	2a01      	cmp	r2, #1
 8001b34:	d100      	bne.n	8001b38 <__aeabi_dsub+0x2b4>
 8001b36:	e139      	b.n	8001dac <__aeabi_dsub+0x528>
 8001b38:	42a2      	cmp	r2, r4
 8001b3a:	d027      	beq.n	8001b8c <__aeabi_dsub+0x308>
 8001b3c:	0002      	movs	r2, r0
 8001b3e:	e75d      	b.n	80019fc <__aeabi_dsub+0x178>
 8001b40:	0002      	movs	r2, r0
 8001b42:	391f      	subs	r1, #31
 8001b44:	40ca      	lsrs	r2, r1
 8001b46:	0011      	movs	r1, r2
 8001b48:	2b20      	cmp	r3, #32
 8001b4a:	d003      	beq.n	8001b54 <__aeabi_dsub+0x2d0>
 8001b4c:	2240      	movs	r2, #64	; 0x40
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	4098      	lsls	r0, r3
 8001b52:	4304      	orrs	r4, r0
 8001b54:	1e63      	subs	r3, r4, #1
 8001b56:	419c      	sbcs	r4, r3
 8001b58:	2300      	movs	r3, #0
 8001b5a:	4699      	mov	r9, r3
 8001b5c:	4698      	mov	r8, r3
 8001b5e:	430c      	orrs	r4, r1
 8001b60:	0763      	lsls	r3, r4, #29
 8001b62:	d000      	beq.n	8001b66 <__aeabi_dsub+0x2e2>
 8001b64:	e712      	b.n	800198c <__aeabi_dsub+0x108>
 8001b66:	464b      	mov	r3, r9
 8001b68:	464a      	mov	r2, r9
 8001b6a:	08e4      	lsrs	r4, r4, #3
 8001b6c:	075b      	lsls	r3, r3, #29
 8001b6e:	4323      	orrs	r3, r4
 8001b70:	08d4      	lsrs	r4, r2, #3
 8001b72:	4642      	mov	r2, r8
 8001b74:	4919      	ldr	r1, [pc, #100]	; (8001bdc <__aeabi_dsub+0x358>)
 8001b76:	428a      	cmp	r2, r1
 8001b78:	d00e      	beq.n	8001b98 <__aeabi_dsub+0x314>
 8001b7a:	0324      	lsls	r4, r4, #12
 8001b7c:	0552      	lsls	r2, r2, #21
 8001b7e:	0b24      	lsrs	r4, r4, #12
 8001b80:	0d52      	lsrs	r2, r2, #21
 8001b82:	e722      	b.n	80019ca <__aeabi_dsub+0x146>
 8001b84:	000a      	movs	r2, r1
 8001b86:	2400      	movs	r4, #0
 8001b88:	2300      	movs	r3, #0
 8001b8a:	e71e      	b.n	80019ca <__aeabi_dsub+0x146>
 8001b8c:	08db      	lsrs	r3, r3, #3
 8001b8e:	4662      	mov	r2, ip
 8001b90:	0752      	lsls	r2, r2, #29
 8001b92:	4313      	orrs	r3, r2
 8001b94:	4662      	mov	r2, ip
 8001b96:	08d4      	lsrs	r4, r2, #3
 8001b98:	001a      	movs	r2, r3
 8001b9a:	4322      	orrs	r2, r4
 8001b9c:	d100      	bne.n	8001ba0 <__aeabi_dsub+0x31c>
 8001b9e:	e1fc      	b.n	8001f9a <__aeabi_dsub+0x716>
 8001ba0:	2280      	movs	r2, #128	; 0x80
 8001ba2:	0312      	lsls	r2, r2, #12
 8001ba4:	4314      	orrs	r4, r2
 8001ba6:	0324      	lsls	r4, r4, #12
 8001ba8:	4a0c      	ldr	r2, [pc, #48]	; (8001bdc <__aeabi_dsub+0x358>)
 8001baa:	0b24      	lsrs	r4, r4, #12
 8001bac:	e70d      	b.n	80019ca <__aeabi_dsub+0x146>
 8001bae:	0020      	movs	r0, r4
 8001bb0:	f000 fb34 	bl	800221c <__clzsi2>
 8001bb4:	0001      	movs	r1, r0
 8001bb6:	3118      	adds	r1, #24
 8001bb8:	291f      	cmp	r1, #31
 8001bba:	dc00      	bgt.n	8001bbe <__aeabi_dsub+0x33a>
 8001bbc:	e6c4      	b.n	8001948 <__aeabi_dsub+0xc4>
 8001bbe:	3808      	subs	r0, #8
 8001bc0:	4084      	lsls	r4, r0
 8001bc2:	4643      	mov	r3, r8
 8001bc4:	0020      	movs	r0, r4
 8001bc6:	2400      	movs	r4, #0
 8001bc8:	4588      	cmp	r8, r1
 8001bca:	dc00      	bgt.n	8001bce <__aeabi_dsub+0x34a>
 8001bcc:	e6c8      	b.n	8001960 <__aeabi_dsub+0xdc>
 8001bce:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <__aeabi_dsub+0x35c>)
 8001bd0:	1a5b      	subs	r3, r3, r1
 8001bd2:	4010      	ands	r0, r2
 8001bd4:	4698      	mov	r8, r3
 8001bd6:	4681      	mov	r9, r0
 8001bd8:	e6d6      	b.n	8001988 <__aeabi_dsub+0x104>
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	000007ff 	.word	0x000007ff
 8001be0:	ff7fffff 	.word	0xff7fffff
 8001be4:	fffff801 	.word	0xfffff801
 8001be8:	000007fe 	.word	0x000007fe
 8001bec:	430f      	orrs	r7, r1
 8001bee:	1e7a      	subs	r2, r7, #1
 8001bf0:	4197      	sbcs	r7, r2
 8001bf2:	e691      	b.n	8001918 <__aeabi_dsub+0x94>
 8001bf4:	4661      	mov	r1, ip
 8001bf6:	08db      	lsrs	r3, r3, #3
 8001bf8:	0749      	lsls	r1, r1, #29
 8001bfa:	430b      	orrs	r3, r1
 8001bfc:	4661      	mov	r1, ip
 8001bfe:	08cc      	lsrs	r4, r1, #3
 8001c00:	e7b8      	b.n	8001b74 <__aeabi_dsub+0x2f0>
 8001c02:	4640      	mov	r0, r8
 8001c04:	4cd3      	ldr	r4, [pc, #844]	; (8001f54 <__aeabi_dsub+0x6d0>)
 8001c06:	3001      	adds	r0, #1
 8001c08:	4220      	tst	r0, r4
 8001c0a:	d000      	beq.n	8001c0e <__aeabi_dsub+0x38a>
 8001c0c:	e0a2      	b.n	8001d54 <__aeabi_dsub+0x4d0>
 8001c0e:	4640      	mov	r0, r8
 8001c10:	2800      	cmp	r0, #0
 8001c12:	d000      	beq.n	8001c16 <__aeabi_dsub+0x392>
 8001c14:	e101      	b.n	8001e1a <__aeabi_dsub+0x596>
 8001c16:	4660      	mov	r0, ip
 8001c18:	4318      	orrs	r0, r3
 8001c1a:	d100      	bne.n	8001c1e <__aeabi_dsub+0x39a>
 8001c1c:	e15e      	b.n	8001edc <__aeabi_dsub+0x658>
 8001c1e:	0008      	movs	r0, r1
 8001c20:	4338      	orrs	r0, r7
 8001c22:	d000      	beq.n	8001c26 <__aeabi_dsub+0x3a2>
 8001c24:	e15f      	b.n	8001ee6 <__aeabi_dsub+0x662>
 8001c26:	4661      	mov	r1, ip
 8001c28:	08db      	lsrs	r3, r3, #3
 8001c2a:	0749      	lsls	r1, r1, #29
 8001c2c:	430b      	orrs	r3, r1
 8001c2e:	4661      	mov	r1, ip
 8001c30:	08cc      	lsrs	r4, r1, #3
 8001c32:	e7a2      	b.n	8001b7a <__aeabi_dsub+0x2f6>
 8001c34:	4dc8      	ldr	r5, [pc, #800]	; (8001f58 <__aeabi_dsub+0x6d4>)
 8001c36:	42a8      	cmp	r0, r5
 8001c38:	d100      	bne.n	8001c3c <__aeabi_dsub+0x3b8>
 8001c3a:	e0cf      	b.n	8001ddc <__aeabi_dsub+0x558>
 8001c3c:	2580      	movs	r5, #128	; 0x80
 8001c3e:	4664      	mov	r4, ip
 8001c40:	042d      	lsls	r5, r5, #16
 8001c42:	432c      	orrs	r4, r5
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2a38      	cmp	r2, #56	; 0x38
 8001c48:	dc56      	bgt.n	8001cf8 <__aeabi_dsub+0x474>
 8001c4a:	2a1f      	cmp	r2, #31
 8001c4c:	dd00      	ble.n	8001c50 <__aeabi_dsub+0x3cc>
 8001c4e:	e0d1      	b.n	8001df4 <__aeabi_dsub+0x570>
 8001c50:	2520      	movs	r5, #32
 8001c52:	001e      	movs	r6, r3
 8001c54:	1aad      	subs	r5, r5, r2
 8001c56:	4664      	mov	r4, ip
 8001c58:	40ab      	lsls	r3, r5
 8001c5a:	40ac      	lsls	r4, r5
 8001c5c:	40d6      	lsrs	r6, r2
 8001c5e:	1e5d      	subs	r5, r3, #1
 8001c60:	41ab      	sbcs	r3, r5
 8001c62:	4334      	orrs	r4, r6
 8001c64:	4323      	orrs	r3, r4
 8001c66:	4664      	mov	r4, ip
 8001c68:	40d4      	lsrs	r4, r2
 8001c6a:	1b09      	subs	r1, r1, r4
 8001c6c:	e049      	b.n	8001d02 <__aeabi_dsub+0x47e>
 8001c6e:	4660      	mov	r0, ip
 8001c70:	1bdc      	subs	r4, r3, r7
 8001c72:	1a46      	subs	r6, r0, r1
 8001c74:	42a3      	cmp	r3, r4
 8001c76:	4180      	sbcs	r0, r0
 8001c78:	4240      	negs	r0, r0
 8001c7a:	4681      	mov	r9, r0
 8001c7c:	0030      	movs	r0, r6
 8001c7e:	464e      	mov	r6, r9
 8001c80:	1b80      	subs	r0, r0, r6
 8001c82:	4681      	mov	r9, r0
 8001c84:	0200      	lsls	r0, r0, #8
 8001c86:	d476      	bmi.n	8001d76 <__aeabi_dsub+0x4f2>
 8001c88:	464b      	mov	r3, r9
 8001c8a:	4323      	orrs	r3, r4
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_dsub+0x40c>
 8001c8e:	e652      	b.n	8001936 <__aeabi_dsub+0xb2>
 8001c90:	2400      	movs	r4, #0
 8001c92:	2500      	movs	r5, #0
 8001c94:	e771      	b.n	8001b7a <__aeabi_dsub+0x2f6>
 8001c96:	4339      	orrs	r1, r7
 8001c98:	000c      	movs	r4, r1
 8001c9a:	1e62      	subs	r2, r4, #1
 8001c9c:	4194      	sbcs	r4, r2
 8001c9e:	18e4      	adds	r4, r4, r3
 8001ca0:	429c      	cmp	r4, r3
 8001ca2:	419b      	sbcs	r3, r3
 8001ca4:	425b      	negs	r3, r3
 8001ca6:	4463      	add	r3, ip
 8001ca8:	4699      	mov	r9, r3
 8001caa:	464b      	mov	r3, r9
 8001cac:	021b      	lsls	r3, r3, #8
 8001cae:	d400      	bmi.n	8001cb2 <__aeabi_dsub+0x42e>
 8001cb0:	e756      	b.n	8001b60 <__aeabi_dsub+0x2dc>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	469c      	mov	ip, r3
 8001cb6:	4ba8      	ldr	r3, [pc, #672]	; (8001f58 <__aeabi_dsub+0x6d4>)
 8001cb8:	44e0      	add	r8, ip
 8001cba:	4598      	cmp	r8, r3
 8001cbc:	d038      	beq.n	8001d30 <__aeabi_dsub+0x4ac>
 8001cbe:	464b      	mov	r3, r9
 8001cc0:	48a6      	ldr	r0, [pc, #664]	; (8001f5c <__aeabi_dsub+0x6d8>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	4003      	ands	r3, r0
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	0863      	lsrs	r3, r4, #1
 8001cca:	4014      	ands	r4, r2
 8001ccc:	431c      	orrs	r4, r3
 8001cce:	07c3      	lsls	r3, r0, #31
 8001cd0:	431c      	orrs	r4, r3
 8001cd2:	0843      	lsrs	r3, r0, #1
 8001cd4:	4699      	mov	r9, r3
 8001cd6:	e657      	b.n	8001988 <__aeabi_dsub+0x104>
 8001cd8:	0010      	movs	r0, r2
 8001cda:	000e      	movs	r6, r1
 8001cdc:	3820      	subs	r0, #32
 8001cde:	40c6      	lsrs	r6, r0
 8001ce0:	2a20      	cmp	r2, #32
 8001ce2:	d004      	beq.n	8001cee <__aeabi_dsub+0x46a>
 8001ce4:	2040      	movs	r0, #64	; 0x40
 8001ce6:	1a82      	subs	r2, r0, r2
 8001ce8:	4091      	lsls	r1, r2
 8001cea:	430f      	orrs	r7, r1
 8001cec:	46b9      	mov	r9, r7
 8001cee:	464f      	mov	r7, r9
 8001cf0:	1e7a      	subs	r2, r7, #1
 8001cf2:	4197      	sbcs	r7, r2
 8001cf4:	4337      	orrs	r7, r6
 8001cf6:	e60f      	b.n	8001918 <__aeabi_dsub+0x94>
 8001cf8:	4662      	mov	r2, ip
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	0013      	movs	r3, r2
 8001cfe:	1e5a      	subs	r2, r3, #1
 8001d00:	4193      	sbcs	r3, r2
 8001d02:	1afc      	subs	r4, r7, r3
 8001d04:	42a7      	cmp	r7, r4
 8001d06:	41bf      	sbcs	r7, r7
 8001d08:	427f      	negs	r7, r7
 8001d0a:	1bcb      	subs	r3, r1, r7
 8001d0c:	4699      	mov	r9, r3
 8001d0e:	465d      	mov	r5, fp
 8001d10:	4680      	mov	r8, r0
 8001d12:	e608      	b.n	8001926 <__aeabi_dsub+0xa2>
 8001d14:	4666      	mov	r6, ip
 8001d16:	431e      	orrs	r6, r3
 8001d18:	d100      	bne.n	8001d1c <__aeabi_dsub+0x498>
 8001d1a:	e0be      	b.n	8001e9a <__aeabi_dsub+0x616>
 8001d1c:	1e56      	subs	r6, r2, #1
 8001d1e:	2a01      	cmp	r2, #1
 8001d20:	d100      	bne.n	8001d24 <__aeabi_dsub+0x4a0>
 8001d22:	e109      	b.n	8001f38 <__aeabi_dsub+0x6b4>
 8001d24:	4c8c      	ldr	r4, [pc, #560]	; (8001f58 <__aeabi_dsub+0x6d4>)
 8001d26:	42a2      	cmp	r2, r4
 8001d28:	d100      	bne.n	8001d2c <__aeabi_dsub+0x4a8>
 8001d2a:	e119      	b.n	8001f60 <__aeabi_dsub+0x6dc>
 8001d2c:	0032      	movs	r2, r6
 8001d2e:	e6c1      	b.n	8001ab4 <__aeabi_dsub+0x230>
 8001d30:	4642      	mov	r2, r8
 8001d32:	2400      	movs	r4, #0
 8001d34:	2300      	movs	r3, #0
 8001d36:	e648      	b.n	80019ca <__aeabi_dsub+0x146>
 8001d38:	2020      	movs	r0, #32
 8001d3a:	000c      	movs	r4, r1
 8001d3c:	1a80      	subs	r0, r0, r2
 8001d3e:	003e      	movs	r6, r7
 8001d40:	4087      	lsls	r7, r0
 8001d42:	4084      	lsls	r4, r0
 8001d44:	40d6      	lsrs	r6, r2
 8001d46:	1e78      	subs	r0, r7, #1
 8001d48:	4187      	sbcs	r7, r0
 8001d4a:	40d1      	lsrs	r1, r2
 8001d4c:	4334      	orrs	r4, r6
 8001d4e:	433c      	orrs	r4, r7
 8001d50:	448c      	add	ip, r1
 8001d52:	e7a4      	b.n	8001c9e <__aeabi_dsub+0x41a>
 8001d54:	4a80      	ldr	r2, [pc, #512]	; (8001f58 <__aeabi_dsub+0x6d4>)
 8001d56:	4290      	cmp	r0, r2
 8001d58:	d100      	bne.n	8001d5c <__aeabi_dsub+0x4d8>
 8001d5a:	e0e9      	b.n	8001f30 <__aeabi_dsub+0x6ac>
 8001d5c:	19df      	adds	r7, r3, r7
 8001d5e:	429f      	cmp	r7, r3
 8001d60:	419b      	sbcs	r3, r3
 8001d62:	4461      	add	r1, ip
 8001d64:	425b      	negs	r3, r3
 8001d66:	18c9      	adds	r1, r1, r3
 8001d68:	07cc      	lsls	r4, r1, #31
 8001d6a:	087f      	lsrs	r7, r7, #1
 8001d6c:	084b      	lsrs	r3, r1, #1
 8001d6e:	4699      	mov	r9, r3
 8001d70:	4680      	mov	r8, r0
 8001d72:	433c      	orrs	r4, r7
 8001d74:	e6f4      	b.n	8001b60 <__aeabi_dsub+0x2dc>
 8001d76:	1afc      	subs	r4, r7, r3
 8001d78:	42a7      	cmp	r7, r4
 8001d7a:	41bf      	sbcs	r7, r7
 8001d7c:	4663      	mov	r3, ip
 8001d7e:	427f      	negs	r7, r7
 8001d80:	1ac9      	subs	r1, r1, r3
 8001d82:	1bcb      	subs	r3, r1, r7
 8001d84:	4699      	mov	r9, r3
 8001d86:	465d      	mov	r5, fp
 8001d88:	e5d5      	b.n	8001936 <__aeabi_dsub+0xb2>
 8001d8a:	08ff      	lsrs	r7, r7, #3
 8001d8c:	074b      	lsls	r3, r1, #29
 8001d8e:	465d      	mov	r5, fp
 8001d90:	433b      	orrs	r3, r7
 8001d92:	08cc      	lsrs	r4, r1, #3
 8001d94:	e6ee      	b.n	8001b74 <__aeabi_dsub+0x2f0>
 8001d96:	4662      	mov	r2, ip
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	d000      	beq.n	8001d9e <__aeabi_dsub+0x51a>
 8001d9c:	e082      	b.n	8001ea4 <__aeabi_dsub+0x620>
 8001d9e:	000b      	movs	r3, r1
 8001da0:	433b      	orrs	r3, r7
 8001da2:	d11b      	bne.n	8001ddc <__aeabi_dsub+0x558>
 8001da4:	2480      	movs	r4, #128	; 0x80
 8001da6:	2500      	movs	r5, #0
 8001da8:	0324      	lsls	r4, r4, #12
 8001daa:	e6f9      	b.n	8001ba0 <__aeabi_dsub+0x31c>
 8001dac:	19dc      	adds	r4, r3, r7
 8001dae:	429c      	cmp	r4, r3
 8001db0:	419b      	sbcs	r3, r3
 8001db2:	4461      	add	r1, ip
 8001db4:	4689      	mov	r9, r1
 8001db6:	425b      	negs	r3, r3
 8001db8:	4499      	add	r9, r3
 8001dba:	464b      	mov	r3, r9
 8001dbc:	021b      	lsls	r3, r3, #8
 8001dbe:	d444      	bmi.n	8001e4a <__aeabi_dsub+0x5c6>
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	4698      	mov	r8, r3
 8001dc4:	e6cc      	b.n	8001b60 <__aeabi_dsub+0x2dc>
 8001dc6:	1bdc      	subs	r4, r3, r7
 8001dc8:	4662      	mov	r2, ip
 8001dca:	42a3      	cmp	r3, r4
 8001dcc:	419b      	sbcs	r3, r3
 8001dce:	1a51      	subs	r1, r2, r1
 8001dd0:	425b      	negs	r3, r3
 8001dd2:	1acb      	subs	r3, r1, r3
 8001dd4:	4699      	mov	r9, r3
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	4698      	mov	r8, r3
 8001dda:	e5a4      	b.n	8001926 <__aeabi_dsub+0xa2>
 8001ddc:	08ff      	lsrs	r7, r7, #3
 8001dde:	074b      	lsls	r3, r1, #29
 8001de0:	465d      	mov	r5, fp
 8001de2:	433b      	orrs	r3, r7
 8001de4:	08cc      	lsrs	r4, r1, #3
 8001de6:	e6d7      	b.n	8001b98 <__aeabi_dsub+0x314>
 8001de8:	4662      	mov	r2, ip
 8001dea:	431a      	orrs	r2, r3
 8001dec:	0014      	movs	r4, r2
 8001dee:	1e63      	subs	r3, r4, #1
 8001df0:	419c      	sbcs	r4, r3
 8001df2:	e679      	b.n	8001ae8 <__aeabi_dsub+0x264>
 8001df4:	0015      	movs	r5, r2
 8001df6:	4664      	mov	r4, ip
 8001df8:	3d20      	subs	r5, #32
 8001dfa:	40ec      	lsrs	r4, r5
 8001dfc:	46a0      	mov	r8, r4
 8001dfe:	2a20      	cmp	r2, #32
 8001e00:	d005      	beq.n	8001e0e <__aeabi_dsub+0x58a>
 8001e02:	2540      	movs	r5, #64	; 0x40
 8001e04:	4664      	mov	r4, ip
 8001e06:	1aaa      	subs	r2, r5, r2
 8001e08:	4094      	lsls	r4, r2
 8001e0a:	4323      	orrs	r3, r4
 8001e0c:	469a      	mov	sl, r3
 8001e0e:	4654      	mov	r4, sl
 8001e10:	1e63      	subs	r3, r4, #1
 8001e12:	419c      	sbcs	r4, r3
 8001e14:	4643      	mov	r3, r8
 8001e16:	4323      	orrs	r3, r4
 8001e18:	e773      	b.n	8001d02 <__aeabi_dsub+0x47e>
 8001e1a:	4662      	mov	r2, ip
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	d023      	beq.n	8001e68 <__aeabi_dsub+0x5e4>
 8001e20:	000a      	movs	r2, r1
 8001e22:	433a      	orrs	r2, r7
 8001e24:	d000      	beq.n	8001e28 <__aeabi_dsub+0x5a4>
 8001e26:	e0a0      	b.n	8001f6a <__aeabi_dsub+0x6e6>
 8001e28:	4662      	mov	r2, ip
 8001e2a:	08db      	lsrs	r3, r3, #3
 8001e2c:	0752      	lsls	r2, r2, #29
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	4662      	mov	r2, ip
 8001e32:	08d4      	lsrs	r4, r2, #3
 8001e34:	e6b0      	b.n	8001b98 <__aeabi_dsub+0x314>
 8001e36:	000b      	movs	r3, r1
 8001e38:	433b      	orrs	r3, r7
 8001e3a:	d100      	bne.n	8001e3e <__aeabi_dsub+0x5ba>
 8001e3c:	e728      	b.n	8001c90 <__aeabi_dsub+0x40c>
 8001e3e:	08ff      	lsrs	r7, r7, #3
 8001e40:	074b      	lsls	r3, r1, #29
 8001e42:	465d      	mov	r5, fp
 8001e44:	433b      	orrs	r3, r7
 8001e46:	08cc      	lsrs	r4, r1, #3
 8001e48:	e697      	b.n	8001b7a <__aeabi_dsub+0x2f6>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	4698      	mov	r8, r3
 8001e4e:	e736      	b.n	8001cbe <__aeabi_dsub+0x43a>
 8001e50:	1afc      	subs	r4, r7, r3
 8001e52:	42a7      	cmp	r7, r4
 8001e54:	41bf      	sbcs	r7, r7
 8001e56:	4663      	mov	r3, ip
 8001e58:	427f      	negs	r7, r7
 8001e5a:	1ac9      	subs	r1, r1, r3
 8001e5c:	1bcb      	subs	r3, r1, r7
 8001e5e:	4699      	mov	r9, r3
 8001e60:	2301      	movs	r3, #1
 8001e62:	465d      	mov	r5, fp
 8001e64:	4698      	mov	r8, r3
 8001e66:	e55e      	b.n	8001926 <__aeabi_dsub+0xa2>
 8001e68:	074b      	lsls	r3, r1, #29
 8001e6a:	08ff      	lsrs	r7, r7, #3
 8001e6c:	433b      	orrs	r3, r7
 8001e6e:	08cc      	lsrs	r4, r1, #3
 8001e70:	e692      	b.n	8001b98 <__aeabi_dsub+0x314>
 8001e72:	1bdc      	subs	r4, r3, r7
 8001e74:	4660      	mov	r0, ip
 8001e76:	42a3      	cmp	r3, r4
 8001e78:	41b6      	sbcs	r6, r6
 8001e7a:	1a40      	subs	r0, r0, r1
 8001e7c:	4276      	negs	r6, r6
 8001e7e:	1b80      	subs	r0, r0, r6
 8001e80:	4681      	mov	r9, r0
 8001e82:	0200      	lsls	r0, r0, #8
 8001e84:	d560      	bpl.n	8001f48 <__aeabi_dsub+0x6c4>
 8001e86:	1afc      	subs	r4, r7, r3
 8001e88:	42a7      	cmp	r7, r4
 8001e8a:	41bf      	sbcs	r7, r7
 8001e8c:	4663      	mov	r3, ip
 8001e8e:	427f      	negs	r7, r7
 8001e90:	1ac9      	subs	r1, r1, r3
 8001e92:	1bcb      	subs	r3, r1, r7
 8001e94:	4699      	mov	r9, r3
 8001e96:	465d      	mov	r5, fp
 8001e98:	e576      	b.n	8001988 <__aeabi_dsub+0x104>
 8001e9a:	08ff      	lsrs	r7, r7, #3
 8001e9c:	074b      	lsls	r3, r1, #29
 8001e9e:	433b      	orrs	r3, r7
 8001ea0:	08cc      	lsrs	r4, r1, #3
 8001ea2:	e667      	b.n	8001b74 <__aeabi_dsub+0x2f0>
 8001ea4:	000a      	movs	r2, r1
 8001ea6:	08db      	lsrs	r3, r3, #3
 8001ea8:	433a      	orrs	r2, r7
 8001eaa:	d100      	bne.n	8001eae <__aeabi_dsub+0x62a>
 8001eac:	e66f      	b.n	8001b8e <__aeabi_dsub+0x30a>
 8001eae:	4662      	mov	r2, ip
 8001eb0:	0752      	lsls	r2, r2, #29
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	4662      	mov	r2, ip
 8001eb6:	08d4      	lsrs	r4, r2, #3
 8001eb8:	2280      	movs	r2, #128	; 0x80
 8001eba:	0312      	lsls	r2, r2, #12
 8001ebc:	4214      	tst	r4, r2
 8001ebe:	d007      	beq.n	8001ed0 <__aeabi_dsub+0x64c>
 8001ec0:	08c8      	lsrs	r0, r1, #3
 8001ec2:	4210      	tst	r0, r2
 8001ec4:	d104      	bne.n	8001ed0 <__aeabi_dsub+0x64c>
 8001ec6:	465d      	mov	r5, fp
 8001ec8:	0004      	movs	r4, r0
 8001eca:	08fb      	lsrs	r3, r7, #3
 8001ecc:	0749      	lsls	r1, r1, #29
 8001ece:	430b      	orrs	r3, r1
 8001ed0:	0f5a      	lsrs	r2, r3, #29
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	08db      	lsrs	r3, r3, #3
 8001ed6:	0752      	lsls	r2, r2, #29
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	e65d      	b.n	8001b98 <__aeabi_dsub+0x314>
 8001edc:	074b      	lsls	r3, r1, #29
 8001ede:	08ff      	lsrs	r7, r7, #3
 8001ee0:	433b      	orrs	r3, r7
 8001ee2:	08cc      	lsrs	r4, r1, #3
 8001ee4:	e649      	b.n	8001b7a <__aeabi_dsub+0x2f6>
 8001ee6:	19dc      	adds	r4, r3, r7
 8001ee8:	429c      	cmp	r4, r3
 8001eea:	419b      	sbcs	r3, r3
 8001eec:	4461      	add	r1, ip
 8001eee:	4689      	mov	r9, r1
 8001ef0:	425b      	negs	r3, r3
 8001ef2:	4499      	add	r9, r3
 8001ef4:	464b      	mov	r3, r9
 8001ef6:	021b      	lsls	r3, r3, #8
 8001ef8:	d400      	bmi.n	8001efc <__aeabi_dsub+0x678>
 8001efa:	e631      	b.n	8001b60 <__aeabi_dsub+0x2dc>
 8001efc:	464a      	mov	r2, r9
 8001efe:	4b17      	ldr	r3, [pc, #92]	; (8001f5c <__aeabi_dsub+0x6d8>)
 8001f00:	401a      	ands	r2, r3
 8001f02:	2301      	movs	r3, #1
 8001f04:	4691      	mov	r9, r2
 8001f06:	4698      	mov	r8, r3
 8001f08:	e62a      	b.n	8001b60 <__aeabi_dsub+0x2dc>
 8001f0a:	0016      	movs	r6, r2
 8001f0c:	4664      	mov	r4, ip
 8001f0e:	3e20      	subs	r6, #32
 8001f10:	40f4      	lsrs	r4, r6
 8001f12:	46a0      	mov	r8, r4
 8001f14:	2a20      	cmp	r2, #32
 8001f16:	d005      	beq.n	8001f24 <__aeabi_dsub+0x6a0>
 8001f18:	2640      	movs	r6, #64	; 0x40
 8001f1a:	4664      	mov	r4, ip
 8001f1c:	1ab2      	subs	r2, r6, r2
 8001f1e:	4094      	lsls	r4, r2
 8001f20:	4323      	orrs	r3, r4
 8001f22:	469a      	mov	sl, r3
 8001f24:	4654      	mov	r4, sl
 8001f26:	1e63      	subs	r3, r4, #1
 8001f28:	419c      	sbcs	r4, r3
 8001f2a:	4643      	mov	r3, r8
 8001f2c:	431c      	orrs	r4, r3
 8001f2e:	e5db      	b.n	8001ae8 <__aeabi_dsub+0x264>
 8001f30:	0002      	movs	r2, r0
 8001f32:	2400      	movs	r4, #0
 8001f34:	2300      	movs	r3, #0
 8001f36:	e548      	b.n	80019ca <__aeabi_dsub+0x146>
 8001f38:	19dc      	adds	r4, r3, r7
 8001f3a:	42bc      	cmp	r4, r7
 8001f3c:	41bf      	sbcs	r7, r7
 8001f3e:	4461      	add	r1, ip
 8001f40:	4689      	mov	r9, r1
 8001f42:	427f      	negs	r7, r7
 8001f44:	44b9      	add	r9, r7
 8001f46:	e738      	b.n	8001dba <__aeabi_dsub+0x536>
 8001f48:	464b      	mov	r3, r9
 8001f4a:	4323      	orrs	r3, r4
 8001f4c:	d100      	bne.n	8001f50 <__aeabi_dsub+0x6cc>
 8001f4e:	e69f      	b.n	8001c90 <__aeabi_dsub+0x40c>
 8001f50:	e606      	b.n	8001b60 <__aeabi_dsub+0x2dc>
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	000007fe 	.word	0x000007fe
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	08ff      	lsrs	r7, r7, #3
 8001f62:	074b      	lsls	r3, r1, #29
 8001f64:	433b      	orrs	r3, r7
 8001f66:	08cc      	lsrs	r4, r1, #3
 8001f68:	e616      	b.n	8001b98 <__aeabi_dsub+0x314>
 8001f6a:	4662      	mov	r2, ip
 8001f6c:	08db      	lsrs	r3, r3, #3
 8001f6e:	0752      	lsls	r2, r2, #29
 8001f70:	4313      	orrs	r3, r2
 8001f72:	4662      	mov	r2, ip
 8001f74:	08d4      	lsrs	r4, r2, #3
 8001f76:	2280      	movs	r2, #128	; 0x80
 8001f78:	0312      	lsls	r2, r2, #12
 8001f7a:	4214      	tst	r4, r2
 8001f7c:	d007      	beq.n	8001f8e <__aeabi_dsub+0x70a>
 8001f7e:	08c8      	lsrs	r0, r1, #3
 8001f80:	4210      	tst	r0, r2
 8001f82:	d104      	bne.n	8001f8e <__aeabi_dsub+0x70a>
 8001f84:	465d      	mov	r5, fp
 8001f86:	0004      	movs	r4, r0
 8001f88:	08fb      	lsrs	r3, r7, #3
 8001f8a:	0749      	lsls	r1, r1, #29
 8001f8c:	430b      	orrs	r3, r1
 8001f8e:	0f5a      	lsrs	r2, r3, #29
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	0752      	lsls	r2, r2, #29
 8001f94:	08db      	lsrs	r3, r3, #3
 8001f96:	4313      	orrs	r3, r2
 8001f98:	e5fe      	b.n	8001b98 <__aeabi_dsub+0x314>
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	4a01      	ldr	r2, [pc, #4]	; (8001fa4 <__aeabi_dsub+0x720>)
 8001f9e:	001c      	movs	r4, r3
 8001fa0:	e513      	b.n	80019ca <__aeabi_dsub+0x146>
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	000007ff 	.word	0x000007ff

08001fa8 <__aeabi_i2d>:
 8001fa8:	b570      	push	{r4, r5, r6, lr}
 8001faa:	2800      	cmp	r0, #0
 8001fac:	d016      	beq.n	8001fdc <__aeabi_i2d+0x34>
 8001fae:	17c3      	asrs	r3, r0, #31
 8001fb0:	18c5      	adds	r5, r0, r3
 8001fb2:	405d      	eors	r5, r3
 8001fb4:	0fc4      	lsrs	r4, r0, #31
 8001fb6:	0028      	movs	r0, r5
 8001fb8:	f000 f930 	bl	800221c <__clzsi2>
 8001fbc:	4a11      	ldr	r2, [pc, #68]	; (8002004 <__aeabi_i2d+0x5c>)
 8001fbe:	1a12      	subs	r2, r2, r0
 8001fc0:	280a      	cmp	r0, #10
 8001fc2:	dc16      	bgt.n	8001ff2 <__aeabi_i2d+0x4a>
 8001fc4:	0003      	movs	r3, r0
 8001fc6:	002e      	movs	r6, r5
 8001fc8:	3315      	adds	r3, #21
 8001fca:	409e      	lsls	r6, r3
 8001fcc:	230b      	movs	r3, #11
 8001fce:	1a18      	subs	r0, r3, r0
 8001fd0:	40c5      	lsrs	r5, r0
 8001fd2:	0552      	lsls	r2, r2, #21
 8001fd4:	032d      	lsls	r5, r5, #12
 8001fd6:	0b2d      	lsrs	r5, r5, #12
 8001fd8:	0d53      	lsrs	r3, r2, #21
 8001fda:	e003      	b.n	8001fe4 <__aeabi_i2d+0x3c>
 8001fdc:	2400      	movs	r4, #0
 8001fde:	2300      	movs	r3, #0
 8001fe0:	2500      	movs	r5, #0
 8001fe2:	2600      	movs	r6, #0
 8001fe4:	051b      	lsls	r3, r3, #20
 8001fe6:	432b      	orrs	r3, r5
 8001fe8:	07e4      	lsls	r4, r4, #31
 8001fea:	4323      	orrs	r3, r4
 8001fec:	0030      	movs	r0, r6
 8001fee:	0019      	movs	r1, r3
 8001ff0:	bd70      	pop	{r4, r5, r6, pc}
 8001ff2:	380b      	subs	r0, #11
 8001ff4:	4085      	lsls	r5, r0
 8001ff6:	0552      	lsls	r2, r2, #21
 8001ff8:	032d      	lsls	r5, r5, #12
 8001ffa:	2600      	movs	r6, #0
 8001ffc:	0b2d      	lsrs	r5, r5, #12
 8001ffe:	0d53      	lsrs	r3, r2, #21
 8002000:	e7f0      	b.n	8001fe4 <__aeabi_i2d+0x3c>
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	0000041e 	.word	0x0000041e

08002008 <__aeabi_f2d>:
 8002008:	b570      	push	{r4, r5, r6, lr}
 800200a:	0043      	lsls	r3, r0, #1
 800200c:	0246      	lsls	r6, r0, #9
 800200e:	0fc4      	lsrs	r4, r0, #31
 8002010:	20fe      	movs	r0, #254	; 0xfe
 8002012:	0e1b      	lsrs	r3, r3, #24
 8002014:	1c59      	adds	r1, r3, #1
 8002016:	0a75      	lsrs	r5, r6, #9
 8002018:	4208      	tst	r0, r1
 800201a:	d00c      	beq.n	8002036 <__aeabi_f2d+0x2e>
 800201c:	22e0      	movs	r2, #224	; 0xe0
 800201e:	0092      	lsls	r2, r2, #2
 8002020:	4694      	mov	ip, r2
 8002022:	076d      	lsls	r5, r5, #29
 8002024:	0b36      	lsrs	r6, r6, #12
 8002026:	4463      	add	r3, ip
 8002028:	051b      	lsls	r3, r3, #20
 800202a:	4333      	orrs	r3, r6
 800202c:	07e4      	lsls	r4, r4, #31
 800202e:	4323      	orrs	r3, r4
 8002030:	0028      	movs	r0, r5
 8002032:	0019      	movs	r1, r3
 8002034:	bd70      	pop	{r4, r5, r6, pc}
 8002036:	2b00      	cmp	r3, #0
 8002038:	d114      	bne.n	8002064 <__aeabi_f2d+0x5c>
 800203a:	2d00      	cmp	r5, #0
 800203c:	d01b      	beq.n	8002076 <__aeabi_f2d+0x6e>
 800203e:	0028      	movs	r0, r5
 8002040:	f000 f8ec 	bl	800221c <__clzsi2>
 8002044:	280a      	cmp	r0, #10
 8002046:	dc1c      	bgt.n	8002082 <__aeabi_f2d+0x7a>
 8002048:	230b      	movs	r3, #11
 800204a:	002e      	movs	r6, r5
 800204c:	1a1b      	subs	r3, r3, r0
 800204e:	40de      	lsrs	r6, r3
 8002050:	0003      	movs	r3, r0
 8002052:	3315      	adds	r3, #21
 8002054:	409d      	lsls	r5, r3
 8002056:	4a0e      	ldr	r2, [pc, #56]	; (8002090 <__aeabi_f2d+0x88>)
 8002058:	0336      	lsls	r6, r6, #12
 800205a:	1a12      	subs	r2, r2, r0
 800205c:	0552      	lsls	r2, r2, #21
 800205e:	0b36      	lsrs	r6, r6, #12
 8002060:	0d53      	lsrs	r3, r2, #21
 8002062:	e7e1      	b.n	8002028 <__aeabi_f2d+0x20>
 8002064:	2d00      	cmp	r5, #0
 8002066:	d009      	beq.n	800207c <__aeabi_f2d+0x74>
 8002068:	2280      	movs	r2, #128	; 0x80
 800206a:	0b36      	lsrs	r6, r6, #12
 800206c:	0312      	lsls	r2, r2, #12
 800206e:	4b09      	ldr	r3, [pc, #36]	; (8002094 <__aeabi_f2d+0x8c>)
 8002070:	076d      	lsls	r5, r5, #29
 8002072:	4316      	orrs	r6, r2
 8002074:	e7d8      	b.n	8002028 <__aeabi_f2d+0x20>
 8002076:	2300      	movs	r3, #0
 8002078:	2600      	movs	r6, #0
 800207a:	e7d5      	b.n	8002028 <__aeabi_f2d+0x20>
 800207c:	2600      	movs	r6, #0
 800207e:	4b05      	ldr	r3, [pc, #20]	; (8002094 <__aeabi_f2d+0x8c>)
 8002080:	e7d2      	b.n	8002028 <__aeabi_f2d+0x20>
 8002082:	0003      	movs	r3, r0
 8002084:	3b0b      	subs	r3, #11
 8002086:	409d      	lsls	r5, r3
 8002088:	002e      	movs	r6, r5
 800208a:	2500      	movs	r5, #0
 800208c:	e7e3      	b.n	8002056 <__aeabi_f2d+0x4e>
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	00000389 	.word	0x00000389
 8002094:	000007ff 	.word	0x000007ff

08002098 <__aeabi_d2f>:
 8002098:	0002      	movs	r2, r0
 800209a:	004b      	lsls	r3, r1, #1
 800209c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800209e:	0d5b      	lsrs	r3, r3, #21
 80020a0:	030c      	lsls	r4, r1, #12
 80020a2:	4e3d      	ldr	r6, [pc, #244]	; (8002198 <__aeabi_d2f+0x100>)
 80020a4:	0a64      	lsrs	r4, r4, #9
 80020a6:	0f40      	lsrs	r0, r0, #29
 80020a8:	1c5f      	adds	r7, r3, #1
 80020aa:	0fc9      	lsrs	r1, r1, #31
 80020ac:	4304      	orrs	r4, r0
 80020ae:	00d5      	lsls	r5, r2, #3
 80020b0:	4237      	tst	r7, r6
 80020b2:	d00a      	beq.n	80020ca <__aeabi_d2f+0x32>
 80020b4:	4839      	ldr	r0, [pc, #228]	; (800219c <__aeabi_d2f+0x104>)
 80020b6:	181e      	adds	r6, r3, r0
 80020b8:	2efe      	cmp	r6, #254	; 0xfe
 80020ba:	dd16      	ble.n	80020ea <__aeabi_d2f+0x52>
 80020bc:	20ff      	movs	r0, #255	; 0xff
 80020be:	2400      	movs	r4, #0
 80020c0:	05c0      	lsls	r0, r0, #23
 80020c2:	4320      	orrs	r0, r4
 80020c4:	07c9      	lsls	r1, r1, #31
 80020c6:	4308      	orrs	r0, r1
 80020c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d106      	bne.n	80020dc <__aeabi_d2f+0x44>
 80020ce:	432c      	orrs	r4, r5
 80020d0:	d026      	beq.n	8002120 <__aeabi_d2f+0x88>
 80020d2:	2205      	movs	r2, #5
 80020d4:	0192      	lsls	r2, r2, #6
 80020d6:	0a54      	lsrs	r4, r2, #9
 80020d8:	b2d8      	uxtb	r0, r3
 80020da:	e7f1      	b.n	80020c0 <__aeabi_d2f+0x28>
 80020dc:	4325      	orrs	r5, r4
 80020de:	d0ed      	beq.n	80020bc <__aeabi_d2f+0x24>
 80020e0:	2080      	movs	r0, #128	; 0x80
 80020e2:	03c0      	lsls	r0, r0, #15
 80020e4:	4304      	orrs	r4, r0
 80020e6:	20ff      	movs	r0, #255	; 0xff
 80020e8:	e7ea      	b.n	80020c0 <__aeabi_d2f+0x28>
 80020ea:	2e00      	cmp	r6, #0
 80020ec:	dd1b      	ble.n	8002126 <__aeabi_d2f+0x8e>
 80020ee:	0192      	lsls	r2, r2, #6
 80020f0:	1e53      	subs	r3, r2, #1
 80020f2:	419a      	sbcs	r2, r3
 80020f4:	00e4      	lsls	r4, r4, #3
 80020f6:	0f6d      	lsrs	r5, r5, #29
 80020f8:	4322      	orrs	r2, r4
 80020fa:	432a      	orrs	r2, r5
 80020fc:	0753      	lsls	r3, r2, #29
 80020fe:	d048      	beq.n	8002192 <__aeabi_d2f+0xfa>
 8002100:	230f      	movs	r3, #15
 8002102:	4013      	ands	r3, r2
 8002104:	2b04      	cmp	r3, #4
 8002106:	d000      	beq.n	800210a <__aeabi_d2f+0x72>
 8002108:	3204      	adds	r2, #4
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	04db      	lsls	r3, r3, #19
 800210e:	4013      	ands	r3, r2
 8002110:	d03f      	beq.n	8002192 <__aeabi_d2f+0xfa>
 8002112:	1c70      	adds	r0, r6, #1
 8002114:	2efe      	cmp	r6, #254	; 0xfe
 8002116:	d0d1      	beq.n	80020bc <__aeabi_d2f+0x24>
 8002118:	0192      	lsls	r2, r2, #6
 800211a:	0a54      	lsrs	r4, r2, #9
 800211c:	b2c0      	uxtb	r0, r0
 800211e:	e7cf      	b.n	80020c0 <__aeabi_d2f+0x28>
 8002120:	2000      	movs	r0, #0
 8002122:	2400      	movs	r4, #0
 8002124:	e7cc      	b.n	80020c0 <__aeabi_d2f+0x28>
 8002126:	0032      	movs	r2, r6
 8002128:	3217      	adds	r2, #23
 800212a:	db22      	blt.n	8002172 <__aeabi_d2f+0xda>
 800212c:	2080      	movs	r0, #128	; 0x80
 800212e:	0400      	lsls	r0, r0, #16
 8002130:	4320      	orrs	r0, r4
 8002132:	241e      	movs	r4, #30
 8002134:	1ba4      	subs	r4, r4, r6
 8002136:	2c1f      	cmp	r4, #31
 8002138:	dd1d      	ble.n	8002176 <__aeabi_d2f+0xde>
 800213a:	2202      	movs	r2, #2
 800213c:	4252      	negs	r2, r2
 800213e:	1b96      	subs	r6, r2, r6
 8002140:	0002      	movs	r2, r0
 8002142:	40f2      	lsrs	r2, r6
 8002144:	0016      	movs	r6, r2
 8002146:	2c20      	cmp	r4, #32
 8002148:	d004      	beq.n	8002154 <__aeabi_d2f+0xbc>
 800214a:	4a15      	ldr	r2, [pc, #84]	; (80021a0 <__aeabi_d2f+0x108>)
 800214c:	4694      	mov	ip, r2
 800214e:	4463      	add	r3, ip
 8002150:	4098      	lsls	r0, r3
 8002152:	4305      	orrs	r5, r0
 8002154:	002a      	movs	r2, r5
 8002156:	1e53      	subs	r3, r2, #1
 8002158:	419a      	sbcs	r2, r3
 800215a:	4332      	orrs	r2, r6
 800215c:	2600      	movs	r6, #0
 800215e:	0753      	lsls	r3, r2, #29
 8002160:	d1ce      	bne.n	8002100 <__aeabi_d2f+0x68>
 8002162:	2480      	movs	r4, #128	; 0x80
 8002164:	0013      	movs	r3, r2
 8002166:	04e4      	lsls	r4, r4, #19
 8002168:	2001      	movs	r0, #1
 800216a:	4023      	ands	r3, r4
 800216c:	4222      	tst	r2, r4
 800216e:	d1d3      	bne.n	8002118 <__aeabi_d2f+0x80>
 8002170:	e7b0      	b.n	80020d4 <__aeabi_d2f+0x3c>
 8002172:	2300      	movs	r3, #0
 8002174:	e7ad      	b.n	80020d2 <__aeabi_d2f+0x3a>
 8002176:	4a0b      	ldr	r2, [pc, #44]	; (80021a4 <__aeabi_d2f+0x10c>)
 8002178:	4694      	mov	ip, r2
 800217a:	002a      	movs	r2, r5
 800217c:	40e2      	lsrs	r2, r4
 800217e:	0014      	movs	r4, r2
 8002180:	002a      	movs	r2, r5
 8002182:	4463      	add	r3, ip
 8002184:	409a      	lsls	r2, r3
 8002186:	4098      	lsls	r0, r3
 8002188:	1e55      	subs	r5, r2, #1
 800218a:	41aa      	sbcs	r2, r5
 800218c:	4302      	orrs	r2, r0
 800218e:	4322      	orrs	r2, r4
 8002190:	e7e4      	b.n	800215c <__aeabi_d2f+0xc4>
 8002192:	0033      	movs	r3, r6
 8002194:	e79e      	b.n	80020d4 <__aeabi_d2f+0x3c>
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	000007fe 	.word	0x000007fe
 800219c:	fffffc80 	.word	0xfffffc80
 80021a0:	fffffca2 	.word	0xfffffca2
 80021a4:	fffffc82 	.word	0xfffffc82

080021a8 <__aeabi_cfrcmple>:
 80021a8:	4684      	mov	ip, r0
 80021aa:	0008      	movs	r0, r1
 80021ac:	4661      	mov	r1, ip
 80021ae:	e7ff      	b.n	80021b0 <__aeabi_cfcmpeq>

080021b0 <__aeabi_cfcmpeq>:
 80021b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80021b2:	f000 f8c9 	bl	8002348 <__lesf2>
 80021b6:	2800      	cmp	r0, #0
 80021b8:	d401      	bmi.n	80021be <__aeabi_cfcmpeq+0xe>
 80021ba:	2100      	movs	r1, #0
 80021bc:	42c8      	cmn	r0, r1
 80021be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080021c0 <__aeabi_fcmpeq>:
 80021c0:	b510      	push	{r4, lr}
 80021c2:	f000 f855 	bl	8002270 <__eqsf2>
 80021c6:	4240      	negs	r0, r0
 80021c8:	3001      	adds	r0, #1
 80021ca:	bd10      	pop	{r4, pc}

080021cc <__aeabi_fcmplt>:
 80021cc:	b510      	push	{r4, lr}
 80021ce:	f000 f8bb 	bl	8002348 <__lesf2>
 80021d2:	2800      	cmp	r0, #0
 80021d4:	db01      	blt.n	80021da <__aeabi_fcmplt+0xe>
 80021d6:	2000      	movs	r0, #0
 80021d8:	bd10      	pop	{r4, pc}
 80021da:	2001      	movs	r0, #1
 80021dc:	bd10      	pop	{r4, pc}
 80021de:	46c0      	nop			; (mov r8, r8)

080021e0 <__aeabi_fcmple>:
 80021e0:	b510      	push	{r4, lr}
 80021e2:	f000 f8b1 	bl	8002348 <__lesf2>
 80021e6:	2800      	cmp	r0, #0
 80021e8:	dd01      	ble.n	80021ee <__aeabi_fcmple+0xe>
 80021ea:	2000      	movs	r0, #0
 80021ec:	bd10      	pop	{r4, pc}
 80021ee:	2001      	movs	r0, #1
 80021f0:	bd10      	pop	{r4, pc}
 80021f2:	46c0      	nop			; (mov r8, r8)

080021f4 <__aeabi_fcmpgt>:
 80021f4:	b510      	push	{r4, lr}
 80021f6:	f000 f861 	bl	80022bc <__gesf2>
 80021fa:	2800      	cmp	r0, #0
 80021fc:	dc01      	bgt.n	8002202 <__aeabi_fcmpgt+0xe>
 80021fe:	2000      	movs	r0, #0
 8002200:	bd10      	pop	{r4, pc}
 8002202:	2001      	movs	r0, #1
 8002204:	bd10      	pop	{r4, pc}
 8002206:	46c0      	nop			; (mov r8, r8)

08002208 <__aeabi_fcmpge>:
 8002208:	b510      	push	{r4, lr}
 800220a:	f000 f857 	bl	80022bc <__gesf2>
 800220e:	2800      	cmp	r0, #0
 8002210:	da01      	bge.n	8002216 <__aeabi_fcmpge+0xe>
 8002212:	2000      	movs	r0, #0
 8002214:	bd10      	pop	{r4, pc}
 8002216:	2001      	movs	r0, #1
 8002218:	bd10      	pop	{r4, pc}
 800221a:	46c0      	nop			; (mov r8, r8)

0800221c <__clzsi2>:
 800221c:	211c      	movs	r1, #28
 800221e:	2301      	movs	r3, #1
 8002220:	041b      	lsls	r3, r3, #16
 8002222:	4298      	cmp	r0, r3
 8002224:	d301      	bcc.n	800222a <__clzsi2+0xe>
 8002226:	0c00      	lsrs	r0, r0, #16
 8002228:	3910      	subs	r1, #16
 800222a:	0a1b      	lsrs	r3, r3, #8
 800222c:	4298      	cmp	r0, r3
 800222e:	d301      	bcc.n	8002234 <__clzsi2+0x18>
 8002230:	0a00      	lsrs	r0, r0, #8
 8002232:	3908      	subs	r1, #8
 8002234:	091b      	lsrs	r3, r3, #4
 8002236:	4298      	cmp	r0, r3
 8002238:	d301      	bcc.n	800223e <__clzsi2+0x22>
 800223a:	0900      	lsrs	r0, r0, #4
 800223c:	3904      	subs	r1, #4
 800223e:	a202      	add	r2, pc, #8	; (adr r2, 8002248 <__clzsi2+0x2c>)
 8002240:	5c10      	ldrb	r0, [r2, r0]
 8002242:	1840      	adds	r0, r0, r1
 8002244:	4770      	bx	lr
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	02020304 	.word	0x02020304
 800224c:	01010101 	.word	0x01010101
	...

08002258 <__clzdi2>:
 8002258:	b510      	push	{r4, lr}
 800225a:	2900      	cmp	r1, #0
 800225c:	d103      	bne.n	8002266 <__clzdi2+0xe>
 800225e:	f7ff ffdd 	bl	800221c <__clzsi2>
 8002262:	3020      	adds	r0, #32
 8002264:	e002      	b.n	800226c <__clzdi2+0x14>
 8002266:	0008      	movs	r0, r1
 8002268:	f7ff ffd8 	bl	800221c <__clzsi2>
 800226c:	bd10      	pop	{r4, pc}
 800226e:	46c0      	nop			; (mov r8, r8)

08002270 <__eqsf2>:
 8002270:	b570      	push	{r4, r5, r6, lr}
 8002272:	0042      	lsls	r2, r0, #1
 8002274:	0245      	lsls	r5, r0, #9
 8002276:	024e      	lsls	r6, r1, #9
 8002278:	004c      	lsls	r4, r1, #1
 800227a:	0fc3      	lsrs	r3, r0, #31
 800227c:	0a6d      	lsrs	r5, r5, #9
 800227e:	2001      	movs	r0, #1
 8002280:	0e12      	lsrs	r2, r2, #24
 8002282:	0a76      	lsrs	r6, r6, #9
 8002284:	0e24      	lsrs	r4, r4, #24
 8002286:	0fc9      	lsrs	r1, r1, #31
 8002288:	2aff      	cmp	r2, #255	; 0xff
 800228a:	d006      	beq.n	800229a <__eqsf2+0x2a>
 800228c:	2cff      	cmp	r4, #255	; 0xff
 800228e:	d003      	beq.n	8002298 <__eqsf2+0x28>
 8002290:	42a2      	cmp	r2, r4
 8002292:	d101      	bne.n	8002298 <__eqsf2+0x28>
 8002294:	42b5      	cmp	r5, r6
 8002296:	d006      	beq.n	80022a6 <__eqsf2+0x36>
 8002298:	bd70      	pop	{r4, r5, r6, pc}
 800229a:	2d00      	cmp	r5, #0
 800229c:	d1fc      	bne.n	8002298 <__eqsf2+0x28>
 800229e:	2cff      	cmp	r4, #255	; 0xff
 80022a0:	d1fa      	bne.n	8002298 <__eqsf2+0x28>
 80022a2:	2e00      	cmp	r6, #0
 80022a4:	d1f8      	bne.n	8002298 <__eqsf2+0x28>
 80022a6:	428b      	cmp	r3, r1
 80022a8:	d006      	beq.n	80022b8 <__eqsf2+0x48>
 80022aa:	2001      	movs	r0, #1
 80022ac:	2a00      	cmp	r2, #0
 80022ae:	d1f3      	bne.n	8002298 <__eqsf2+0x28>
 80022b0:	0028      	movs	r0, r5
 80022b2:	1e43      	subs	r3, r0, #1
 80022b4:	4198      	sbcs	r0, r3
 80022b6:	e7ef      	b.n	8002298 <__eqsf2+0x28>
 80022b8:	2000      	movs	r0, #0
 80022ba:	e7ed      	b.n	8002298 <__eqsf2+0x28>

080022bc <__gesf2>:
 80022bc:	b570      	push	{r4, r5, r6, lr}
 80022be:	0042      	lsls	r2, r0, #1
 80022c0:	0245      	lsls	r5, r0, #9
 80022c2:	024e      	lsls	r6, r1, #9
 80022c4:	004c      	lsls	r4, r1, #1
 80022c6:	0fc3      	lsrs	r3, r0, #31
 80022c8:	0a6d      	lsrs	r5, r5, #9
 80022ca:	0e12      	lsrs	r2, r2, #24
 80022cc:	0a76      	lsrs	r6, r6, #9
 80022ce:	0e24      	lsrs	r4, r4, #24
 80022d0:	0fc8      	lsrs	r0, r1, #31
 80022d2:	2aff      	cmp	r2, #255	; 0xff
 80022d4:	d01b      	beq.n	800230e <__gesf2+0x52>
 80022d6:	2cff      	cmp	r4, #255	; 0xff
 80022d8:	d00e      	beq.n	80022f8 <__gesf2+0x3c>
 80022da:	2a00      	cmp	r2, #0
 80022dc:	d11b      	bne.n	8002316 <__gesf2+0x5a>
 80022de:	2c00      	cmp	r4, #0
 80022e0:	d101      	bne.n	80022e6 <__gesf2+0x2a>
 80022e2:	2e00      	cmp	r6, #0
 80022e4:	d01c      	beq.n	8002320 <__gesf2+0x64>
 80022e6:	2d00      	cmp	r5, #0
 80022e8:	d00c      	beq.n	8002304 <__gesf2+0x48>
 80022ea:	4283      	cmp	r3, r0
 80022ec:	d01c      	beq.n	8002328 <__gesf2+0x6c>
 80022ee:	2102      	movs	r1, #2
 80022f0:	1e58      	subs	r0, r3, #1
 80022f2:	4008      	ands	r0, r1
 80022f4:	3801      	subs	r0, #1
 80022f6:	bd70      	pop	{r4, r5, r6, pc}
 80022f8:	2e00      	cmp	r6, #0
 80022fa:	d122      	bne.n	8002342 <__gesf2+0x86>
 80022fc:	2a00      	cmp	r2, #0
 80022fe:	d1f4      	bne.n	80022ea <__gesf2+0x2e>
 8002300:	2d00      	cmp	r5, #0
 8002302:	d1f2      	bne.n	80022ea <__gesf2+0x2e>
 8002304:	2800      	cmp	r0, #0
 8002306:	d1f6      	bne.n	80022f6 <__gesf2+0x3a>
 8002308:	2001      	movs	r0, #1
 800230a:	4240      	negs	r0, r0
 800230c:	e7f3      	b.n	80022f6 <__gesf2+0x3a>
 800230e:	2d00      	cmp	r5, #0
 8002310:	d117      	bne.n	8002342 <__gesf2+0x86>
 8002312:	2cff      	cmp	r4, #255	; 0xff
 8002314:	d0f0      	beq.n	80022f8 <__gesf2+0x3c>
 8002316:	2c00      	cmp	r4, #0
 8002318:	d1e7      	bne.n	80022ea <__gesf2+0x2e>
 800231a:	2e00      	cmp	r6, #0
 800231c:	d1e5      	bne.n	80022ea <__gesf2+0x2e>
 800231e:	e7e6      	b.n	80022ee <__gesf2+0x32>
 8002320:	2000      	movs	r0, #0
 8002322:	2d00      	cmp	r5, #0
 8002324:	d0e7      	beq.n	80022f6 <__gesf2+0x3a>
 8002326:	e7e2      	b.n	80022ee <__gesf2+0x32>
 8002328:	42a2      	cmp	r2, r4
 800232a:	dc05      	bgt.n	8002338 <__gesf2+0x7c>
 800232c:	dbea      	blt.n	8002304 <__gesf2+0x48>
 800232e:	42b5      	cmp	r5, r6
 8002330:	d802      	bhi.n	8002338 <__gesf2+0x7c>
 8002332:	d3e7      	bcc.n	8002304 <__gesf2+0x48>
 8002334:	2000      	movs	r0, #0
 8002336:	e7de      	b.n	80022f6 <__gesf2+0x3a>
 8002338:	4243      	negs	r3, r0
 800233a:	4158      	adcs	r0, r3
 800233c:	0040      	lsls	r0, r0, #1
 800233e:	3801      	subs	r0, #1
 8002340:	e7d9      	b.n	80022f6 <__gesf2+0x3a>
 8002342:	2002      	movs	r0, #2
 8002344:	4240      	negs	r0, r0
 8002346:	e7d6      	b.n	80022f6 <__gesf2+0x3a>

08002348 <__lesf2>:
 8002348:	b570      	push	{r4, r5, r6, lr}
 800234a:	0042      	lsls	r2, r0, #1
 800234c:	0245      	lsls	r5, r0, #9
 800234e:	024e      	lsls	r6, r1, #9
 8002350:	004c      	lsls	r4, r1, #1
 8002352:	0fc3      	lsrs	r3, r0, #31
 8002354:	0a6d      	lsrs	r5, r5, #9
 8002356:	0e12      	lsrs	r2, r2, #24
 8002358:	0a76      	lsrs	r6, r6, #9
 800235a:	0e24      	lsrs	r4, r4, #24
 800235c:	0fc8      	lsrs	r0, r1, #31
 800235e:	2aff      	cmp	r2, #255	; 0xff
 8002360:	d00b      	beq.n	800237a <__lesf2+0x32>
 8002362:	2cff      	cmp	r4, #255	; 0xff
 8002364:	d00d      	beq.n	8002382 <__lesf2+0x3a>
 8002366:	2a00      	cmp	r2, #0
 8002368:	d11f      	bne.n	80023aa <__lesf2+0x62>
 800236a:	2c00      	cmp	r4, #0
 800236c:	d116      	bne.n	800239c <__lesf2+0x54>
 800236e:	2e00      	cmp	r6, #0
 8002370:	d114      	bne.n	800239c <__lesf2+0x54>
 8002372:	2000      	movs	r0, #0
 8002374:	2d00      	cmp	r5, #0
 8002376:	d010      	beq.n	800239a <__lesf2+0x52>
 8002378:	e009      	b.n	800238e <__lesf2+0x46>
 800237a:	2d00      	cmp	r5, #0
 800237c:	d10c      	bne.n	8002398 <__lesf2+0x50>
 800237e:	2cff      	cmp	r4, #255	; 0xff
 8002380:	d113      	bne.n	80023aa <__lesf2+0x62>
 8002382:	2e00      	cmp	r6, #0
 8002384:	d108      	bne.n	8002398 <__lesf2+0x50>
 8002386:	2a00      	cmp	r2, #0
 8002388:	d008      	beq.n	800239c <__lesf2+0x54>
 800238a:	4283      	cmp	r3, r0
 800238c:	d012      	beq.n	80023b4 <__lesf2+0x6c>
 800238e:	2102      	movs	r1, #2
 8002390:	1e58      	subs	r0, r3, #1
 8002392:	4008      	ands	r0, r1
 8002394:	3801      	subs	r0, #1
 8002396:	e000      	b.n	800239a <__lesf2+0x52>
 8002398:	2002      	movs	r0, #2
 800239a:	bd70      	pop	{r4, r5, r6, pc}
 800239c:	2d00      	cmp	r5, #0
 800239e:	d1f4      	bne.n	800238a <__lesf2+0x42>
 80023a0:	2800      	cmp	r0, #0
 80023a2:	d1fa      	bne.n	800239a <__lesf2+0x52>
 80023a4:	2001      	movs	r0, #1
 80023a6:	4240      	negs	r0, r0
 80023a8:	e7f7      	b.n	800239a <__lesf2+0x52>
 80023aa:	2c00      	cmp	r4, #0
 80023ac:	d1ed      	bne.n	800238a <__lesf2+0x42>
 80023ae:	2e00      	cmp	r6, #0
 80023b0:	d1eb      	bne.n	800238a <__lesf2+0x42>
 80023b2:	e7ec      	b.n	800238e <__lesf2+0x46>
 80023b4:	42a2      	cmp	r2, r4
 80023b6:	dc05      	bgt.n	80023c4 <__lesf2+0x7c>
 80023b8:	dbf2      	blt.n	80023a0 <__lesf2+0x58>
 80023ba:	42b5      	cmp	r5, r6
 80023bc:	d802      	bhi.n	80023c4 <__lesf2+0x7c>
 80023be:	d3ef      	bcc.n	80023a0 <__lesf2+0x58>
 80023c0:	2000      	movs	r0, #0
 80023c2:	e7ea      	b.n	800239a <__lesf2+0x52>
 80023c4:	4243      	negs	r3, r0
 80023c6:	4158      	adcs	r0, r3
 80023c8:	0040      	lsls	r0, r0, #1
 80023ca:	3801      	subs	r0, #1
 80023cc:	e7e5      	b.n	800239a <__lesf2+0x52>
 80023ce:	46c0      	nop			; (mov r8, r8)

080023d0 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80023d0:	4b03      	ldr	r3, [pc, #12]	; (80023e0 <vApplicationGetIdleTaskMemory+0x10>)
 80023d2:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80023d4:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <vApplicationGetIdleTaskMemory+0x14>)
 80023d6:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 80023dc:	4770      	bx	lr
 80023de:	46c0      	nop			; (mov r8, r8)
 80023e0:	20000294 	.word	0x20000294
 80023e4:	20000094 	.word	0x20000094

080023e8 <StartDefaultTask>:
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
  /* USER CODE BEGIN 5 */
HAL_GPIO_WritePin(battery_GPIO_Port, battery_Pin, GPIO_PIN_SET);
 80023e8:	2201      	movs	r2, #1
 80023ea:	2140      	movs	r1, #64	; 0x40
{
 80023ec:	b510      	push	{r4, lr}
HAL_GPIO_WritePin(battery_GPIO_Port, battery_Pin, GPIO_PIN_SET);
 80023ee:	4803      	ldr	r0, [pc, #12]	; (80023fc <StartDefaultTask+0x14>)
 80023f0:	f001 f960 	bl	80036b4 <HAL_GPIO_WritePin>
//HAL_GPIO_WritePin(LED_04_GPIO_Port, LED_04_Pin, GPIO_PIN_SET);

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80023f4:	2001      	movs	r0, #1
 80023f6:	f002 fa65 	bl	80048c4 <osDelay>
  for(;;)
 80023fa:	e7fb      	b.n	80023f4 <StartDefaultTask+0xc>
 80023fc:	50000400 	.word	0x50000400

08002400 <StartButton>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButton */
void StartButton(void const * argument)
{
 8002400:	b570      	push	{r4, r5, r6, lr}

	//ButtonState = HAL_GPIO_ReadPin(Btn_GPIO_Port, Btn_Pin);


    HAL_ADC_Start(&hadc);
    HAL_ADC_PollForConversion(&hadc, 1000);
 8002402:	25fa      	movs	r5, #250	; 0xfa
 8002404:	00ad      	lsls	r5, r5, #2
    HAL_ADC_Start(&hadc);
 8002406:	4c0d      	ldr	r4, [pc, #52]	; (800243c <StartButton+0x3c>)
 8002408:	0020      	movs	r0, r4
 800240a:	f000 ff3f 	bl	800328c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc, 1000);
 800240e:	0029      	movs	r1, r5
 8002410:	0020      	movs	r0, r4
 8002412:	f000 ff85 	bl	8003320 <HAL_ADC_PollForConversion>
    ButtonState = HAL_ADC_GetValue(&hadc);
 8002416:	0020      	movs	r0, r4
 8002418:	f000 ffe6 	bl	80033e8 <HAL_ADC_GetValue>
 800241c:	4b08      	ldr	r3, [pc, #32]	; (8002440 <StartButton+0x40>)
 800241e:	7018      	strb	r0, [r3, #0]

    HAL_ADC_Stop(&hadc);
 8002420:	0020      	movs	r0, r4
 8002422:	f000 ff5f 	bl	80032e4 <HAL_ADC_Stop>
	ChargerState = HAL_GPIO_ReadPin(Charger_GPIO_Port, Charger_Pin);
 8002426:	2180      	movs	r1, #128	; 0x80
 8002428:	4806      	ldr	r0, [pc, #24]	; (8002444 <StartButton+0x44>)
 800242a:	f001 f93d 	bl	80036a8 <HAL_GPIO_ReadPin>
 800242e:	4b06      	ldr	r3, [pc, #24]	; (8002448 <StartButton+0x48>)
 8002430:	7018      	strb	r0, [r3, #0]

    osDelay(1);
 8002432:	2001      	movs	r0, #1
 8002434:	f002 fa46 	bl	80048c4 <osDelay>
  for(;;)
 8002438:	e7e5      	b.n	8002406 <StartButton+0x6>
 800243a:	46c0      	nop			; (mov r8, r8)
 800243c:	20000368 	.word	0x20000368
 8002440:	2000034c 	.word	0x2000034c
 8002444:	50000400 	.word	0x50000400
 8002448:	2000034d 	.word	0x2000034d

0800244c <lookup>:
uint16_t lookup(uint16_t input_value) {
 800244c:	2133      	movs	r1, #51	; 0x33
    uint16_t output_value = 0;
 800244e:	2300      	movs	r3, #0
uint16_t lookup(uint16_t input_value) {
 8002450:	b570      	push	{r4, r5, r6, lr}
 8002452:	4c0a      	ldr	r4, [pc, #40]	; (800247c <lookup+0x30>)
    uint16_t min_diff = UINT16_MAX;
 8002454:	4d0a      	ldr	r5, [pc, #40]	; (8002480 <lookup+0x34>)
        uint16_t diff = abs(input_value - _Charger_lookup_table[i][0]);
 8002456:	6822      	ldr	r2, [r4, #0]
 8002458:	1a82      	subs	r2, r0, r2
 800245a:	17d6      	asrs	r6, r2, #31
 800245c:	1992      	adds	r2, r2, r6
 800245e:	4072      	eors	r2, r6
 8002460:	b292      	uxth	r2, r2
        if (diff < min_diff) {
 8002462:	42aa      	cmp	r2, r5
 8002464:	d202      	bcs.n	800246c <lookup+0x20>
            output_value = _Charger_lookup_table[i][1];
 8002466:	0015      	movs	r5, r2
 8002468:	6863      	ldr	r3, [r4, #4]
 800246a:	b29b      	uxth	r3, r3
    for (i = 0; i < Charging_TABLE_SIZE; i++) {
 800246c:	3901      	subs	r1, #1
 800246e:	b2c9      	uxtb	r1, r1
 8002470:	3408      	adds	r4, #8
 8002472:	2900      	cmp	r1, #0
 8002474:	d1ef      	bne.n	8002456 <lookup+0xa>
    return output_value * 4 ; // 4 times more capacity
 8002476:	0098      	lsls	r0, r3, #2
 8002478:	b280      	uxth	r0, r0
}
 800247a:	bd70      	pop	{r4, r5, r6, pc}
 800247c:	08005f00 	.word	0x08005f00
 8002480:	0000ffff 	.word	0x0000ffff

08002484 <clear_indicator_leds>:
{
 8002484:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, GPIO_PIN_RESET);
 8002486:	24a0      	movs	r4, #160	; 0xa0
 8002488:	05e4      	lsls	r4, r4, #23
 800248a:	0020      	movs	r0, r4
 800248c:	2200      	movs	r2, #0
 800248e:	2140      	movs	r1, #64	; 0x40
 8002490:	f001 f910 	bl	80036b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_02_GPIO_Port, LED_02_Pin, GPIO_PIN_RESET);
 8002494:	0020      	movs	r0, r4
 8002496:	2200      	movs	r2, #0
 8002498:	2120      	movs	r1, #32
 800249a:	f001 f90b 	bl	80036b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_03_GPIO_Port, LED_03_Pin, GPIO_PIN_RESET);
 800249e:	0020      	movs	r0, r4
 80024a0:	2200      	movs	r2, #0
 80024a2:	2110      	movs	r1, #16
 80024a4:	f001 f906 	bl	80036b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_04_GPIO_Port, LED_04_Pin, GPIO_PIN_RESET);
 80024a8:	0020      	movs	r0, r4
 80024aa:	2200      	movs	r2, #0
 80024ac:	2108      	movs	r1, #8
 80024ae:	f001 f901 	bl	80036b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_05_GPIO_Port, LED_05_Pin, GPIO_PIN_RESET);
 80024b2:	0020      	movs	r0, r4
 80024b4:	2200      	movs	r2, #0
 80024b6:	2104      	movs	r1, #4
 80024b8:	f001 f8fc 	bl	80036b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_06_GPIO_Port, LED_06_Pin, GPIO_PIN_RESET);
 80024bc:	2200      	movs	r2, #0
 80024be:	2180      	movs	r1, #128	; 0x80
 80024c0:	0020      	movs	r0, r4
 80024c2:	f001 f8f7 	bl	80036b4 <HAL_GPIO_WritePin>
}
 80024c6:	bd10      	pop	{r4, pc}

080024c8 <DisplayLevel>:
{
 80024c8:	b570      	push	{r4, r5, r6, lr}
		if(soc <= 10)	// 1000mV
 80024ca:	4b51      	ldr	r3, [pc, #324]	; (8002610 <DisplayLevel+0x148>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b0a      	cmp	r3, #10
 80024d0:	d830      	bhi.n	8002534 <DisplayLevel+0x6c>
			HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, GPIO_PIN_RESET);
 80024d2:	20a0      	movs	r0, #160	; 0xa0
 80024d4:	2200      	movs	r2, #0
 80024d6:	2140      	movs	r1, #64	; 0x40
 80024d8:	05c0      	lsls	r0, r0, #23
 80024da:	f001 f8eb 	bl	80036b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_02_GPIO_Port, LED_02_Pin, GPIO_PIN_RESET);
 80024de:	20a0      	movs	r0, #160	; 0xa0
 80024e0:	2200      	movs	r2, #0
 80024e2:	2120      	movs	r1, #32
 80024e4:	05c0      	lsls	r0, r0, #23
 80024e6:	f001 f8e5 	bl	80036b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_03_GPIO_Port, LED_03_Pin, GPIO_PIN_RESET);
 80024ea:	20a0      	movs	r0, #160	; 0xa0
 80024ec:	2200      	movs	r2, #0
 80024ee:	2110      	movs	r1, #16
 80024f0:	05c0      	lsls	r0, r0, #23
 80024f2:	f001 f8df 	bl	80036b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_04_GPIO_Port, LED_04_Pin, GPIO_PIN_RESET);
 80024f6:	20a0      	movs	r0, #160	; 0xa0
 80024f8:	2200      	movs	r2, #0
 80024fa:	2108      	movs	r1, #8
 80024fc:	05c0      	lsls	r0, r0, #23
 80024fe:	f001 f8d9 	bl	80036b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_05_GPIO_Port, LED_05_Pin, GPIO_PIN_RESET);
 8002502:	20a0      	movs	r0, #160	; 0xa0
 8002504:	2200      	movs	r2, #0
 8002506:	2104      	movs	r1, #4
				HAL_GPIO_TogglePin(LED_01_GPIO_Port, LED_01_Pin);
 8002508:	25a0      	movs	r5, #160	; 0xa0
			HAL_GPIO_WritePin(LED_05_GPIO_Port, LED_05_Pin, GPIO_PIN_RESET);
 800250a:	05c0      	lsls	r0, r0, #23
 800250c:	f001 f8d2 	bl	80036b4 <HAL_GPIO_WritePin>
 8002510:	240a      	movs	r4, #10
				HAL_GPIO_TogglePin(LED_01_GPIO_Port, LED_01_Pin);
 8002512:	05ed      	lsls	r5, r5, #23
 8002514:	2140      	movs	r1, #64	; 0x40
 8002516:	0028      	movs	r0, r5
 8002518:	f001 f8d2 	bl	80036c0 <HAL_GPIO_TogglePin>
			for(int i = 0; i < 10; i++)
 800251c:	3c01      	subs	r4, #1
				HAL_Delay(200);
 800251e:	20c8      	movs	r0, #200	; 0xc8
 8002520:	f000 fd10 	bl	8002f44 <HAL_Delay>
			for(int i = 0; i < 10; i++)
 8002524:	2c00      	cmp	r4, #0
 8002526:	d1f5      	bne.n	8002514 <DisplayLevel+0x4c>
	osDelay(3000);
 8002528:	483a      	ldr	r0, [pc, #232]	; (8002614 <DisplayLevel+0x14c>)
 800252a:	f002 f9cb 	bl	80048c4 <osDelay>
	clear_indicator_leds();
 800252e:	f7ff ffa9 	bl	8002484 <clear_indicator_leds>
}
 8002532:	bd70      	pop	{r4, r5, r6, pc}
		else if(soc > 10 && soc <= 20 )
 8002534:	001a      	movs	r2, r3
 8002536:	3a0b      	subs	r2, #11
 8002538:	2a09      	cmp	r2, #9
 800253a:	d81e      	bhi.n	800257a <DisplayLevel+0xb2>
			HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, GPIO_PIN_SET);
 800253c:	20a0      	movs	r0, #160	; 0xa0
 800253e:	2201      	movs	r2, #1
 8002540:	2140      	movs	r1, #64	; 0x40
 8002542:	05c0      	lsls	r0, r0, #23
 8002544:	f001 f8b6 	bl	80036b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_02_GPIO_Port, LED_02_Pin, GPIO_PIN_RESET);
 8002548:	2200      	movs	r2, #0
			HAL_GPIO_WritePin(LED_02_GPIO_Port, LED_02_Pin, GPIO_PIN_SET);
 800254a:	20a0      	movs	r0, #160	; 0xa0
 800254c:	2120      	movs	r1, #32
 800254e:	05c0      	lsls	r0, r0, #23
 8002550:	f001 f8b0 	bl	80036b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_03_GPIO_Port, LED_03_Pin, GPIO_PIN_RESET);
 8002554:	2200      	movs	r2, #0
 8002556:	20a0      	movs	r0, #160	; 0xa0
 8002558:	2110      	movs	r1, #16
 800255a:	05c0      	lsls	r0, r0, #23
 800255c:	f001 f8aa 	bl	80036b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_04_GPIO_Port, LED_04_Pin, GPIO_PIN_RESET);
 8002560:	2200      	movs	r2, #0
			HAL_GPIO_WritePin(LED_04_GPIO_Port, LED_04_Pin, GPIO_PIN_SET);
 8002562:	20a0      	movs	r0, #160	; 0xa0
 8002564:	2108      	movs	r1, #8
 8002566:	05c0      	lsls	r0, r0, #23
 8002568:	f001 f8a4 	bl	80036b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_05_GPIO_Port, LED_05_Pin, GPIO_PIN_RESET);
 800256c:	2200      	movs	r2, #0
			HAL_GPIO_WritePin(LED_05_GPIO_Port, LED_05_Pin, GPIO_PIN_SET);
 800256e:	20a0      	movs	r0, #160	; 0xa0
 8002570:	2104      	movs	r1, #4
 8002572:	05c0      	lsls	r0, r0, #23
 8002574:	f001 f89e 	bl	80036b4 <HAL_GPIO_WritePin>
 8002578:	e7d6      	b.n	8002528 <DisplayLevel+0x60>
		else if(soc > 20 && soc <= 40 )
 800257a:	001a      	movs	r2, r3
 800257c:	3a15      	subs	r2, #21
 800257e:	2a13      	cmp	r2, #19
 8002580:	d807      	bhi.n	8002592 <DisplayLevel+0xca>
			HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, GPIO_PIN_SET);
 8002582:	20a0      	movs	r0, #160	; 0xa0
 8002584:	2201      	movs	r2, #1
 8002586:	2140      	movs	r1, #64	; 0x40
 8002588:	05c0      	lsls	r0, r0, #23
 800258a:	f001 f893 	bl	80036b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_02_GPIO_Port, LED_02_Pin, GPIO_PIN_SET);
 800258e:	2201      	movs	r2, #1
 8002590:	e7db      	b.n	800254a <DisplayLevel+0x82>
		else if(soc > 40 && soc <= 60 )
 8002592:	001a      	movs	r2, r3
 8002594:	3a29      	subs	r2, #41	; 0x29
 8002596:	2a13      	cmp	r2, #19
 8002598:	d80d      	bhi.n	80025b6 <DisplayLevel+0xee>
			HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, GPIO_PIN_SET);
 800259a:	20a0      	movs	r0, #160	; 0xa0
 800259c:	2201      	movs	r2, #1
 800259e:	2140      	movs	r1, #64	; 0x40
 80025a0:	05c0      	lsls	r0, r0, #23
 80025a2:	f001 f887 	bl	80036b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_02_GPIO_Port, LED_02_Pin, GPIO_PIN_SET);
 80025a6:	20a0      	movs	r0, #160	; 0xa0
 80025a8:	2201      	movs	r2, #1
 80025aa:	2120      	movs	r1, #32
 80025ac:	05c0      	lsls	r0, r0, #23
 80025ae:	f001 f881 	bl	80036b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_03_GPIO_Port, LED_03_Pin, GPIO_PIN_SET);
 80025b2:	2201      	movs	r2, #1
 80025b4:	e7cf      	b.n	8002556 <DisplayLevel+0x8e>
			HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, GPIO_PIN_SET);
 80025b6:	20a0      	movs	r0, #160	; 0xa0
		else if (soc > 60 && soc <= 80)
 80025b8:	3b3d      	subs	r3, #61	; 0x3d
			HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, GPIO_PIN_SET);
 80025ba:	2201      	movs	r2, #1
 80025bc:	2140      	movs	r1, #64	; 0x40
 80025be:	05c0      	lsls	r0, r0, #23
		else if (soc > 60 && soc <= 80)
 80025c0:	2b13      	cmp	r3, #19
 80025c2:	d80f      	bhi.n	80025e4 <DisplayLevel+0x11c>
			HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, GPIO_PIN_SET);
 80025c4:	f001 f876 	bl	80036b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_02_GPIO_Port, LED_02_Pin, GPIO_PIN_SET);
 80025c8:	20a0      	movs	r0, #160	; 0xa0
 80025ca:	2201      	movs	r2, #1
 80025cc:	2120      	movs	r1, #32
 80025ce:	05c0      	lsls	r0, r0, #23
 80025d0:	f001 f870 	bl	80036b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_03_GPIO_Port, LED_03_Pin, GPIO_PIN_SET);
 80025d4:	20a0      	movs	r0, #160	; 0xa0
 80025d6:	2201      	movs	r2, #1
 80025d8:	2110      	movs	r1, #16
 80025da:	05c0      	lsls	r0, r0, #23
 80025dc:	f001 f86a 	bl	80036b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_04_GPIO_Port, LED_04_Pin, GPIO_PIN_SET);
 80025e0:	2201      	movs	r2, #1
 80025e2:	e7be      	b.n	8002562 <DisplayLevel+0x9a>
			HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, GPIO_PIN_SET);
 80025e4:	f001 f866 	bl	80036b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_02_GPIO_Port, LED_02_Pin, GPIO_PIN_SET);
 80025e8:	20a0      	movs	r0, #160	; 0xa0
 80025ea:	2201      	movs	r2, #1
 80025ec:	2120      	movs	r1, #32
 80025ee:	05c0      	lsls	r0, r0, #23
 80025f0:	f001 f860 	bl	80036b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_03_GPIO_Port, LED_03_Pin, GPIO_PIN_SET);
 80025f4:	20a0      	movs	r0, #160	; 0xa0
 80025f6:	2201      	movs	r2, #1
 80025f8:	2110      	movs	r1, #16
 80025fa:	05c0      	lsls	r0, r0, #23
 80025fc:	f001 f85a 	bl	80036b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_04_GPIO_Port, LED_04_Pin, GPIO_PIN_SET);
 8002600:	20a0      	movs	r0, #160	; 0xa0
 8002602:	2201      	movs	r2, #1
 8002604:	2108      	movs	r1, #8
 8002606:	05c0      	lsls	r0, r0, #23
 8002608:	f001 f854 	bl	80036b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_05_GPIO_Port, LED_05_Pin, GPIO_PIN_SET);
 800260c:	2201      	movs	r2, #1
 800260e:	e7ae      	b.n	800256e <DisplayLevel+0xa6>
 8002610:	2000049c 	.word	0x2000049c
 8002614:	00000bb8 	.word	0x00000bb8

08002618 <set_indicator_leds_blink>:
{
 8002618:	b510      	push	{r4, lr}
	if(soc <= 20)	// 1000mV
 800261a:	4b2b      	ldr	r3, [pc, #172]	; (80026c8 <set_indicator_leds_blink+0xb0>)
		HAL_GPIO_TogglePin(LED_01_GPIO_Port, LED_01_Pin);
 800261c:	2140      	movs	r1, #64	; 0x40
	if(soc <= 20)	// 1000mV
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b14      	cmp	r3, #20
 8002622:	d90a      	bls.n	800263a <set_indicator_leds_blink+0x22>
	else if(soc > 20 && soc <= 40 )
 8002624:	001a      	movs	r2, r3
 8002626:	3a15      	subs	r2, #21
 8002628:	2a13      	cmp	r2, #19
 800262a:	d80e      	bhi.n	800264a <set_indicator_leds_blink+0x32>
		HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, GPIO_PIN_SET);
 800262c:	20a0      	movs	r0, #160	; 0xa0
 800262e:	2140      	movs	r1, #64	; 0x40
 8002630:	2201      	movs	r2, #1
 8002632:	05c0      	lsls	r0, r0, #23
 8002634:	f001 f83e 	bl	80036b4 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(LED_02_GPIO_Port, LED_02_Pin);
 8002638:	2120      	movs	r1, #32
		HAL_GPIO_TogglePin(LED_05_GPIO_Port, LED_05_Pin);
 800263a:	20a0      	movs	r0, #160	; 0xa0
 800263c:	05c0      	lsls	r0, r0, #23
 800263e:	f001 f83f 	bl	80036c0 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8002642:	20c8      	movs	r0, #200	; 0xc8
 8002644:	f000 fc7e 	bl	8002f44 <HAL_Delay>
}
 8002648:	bd10      	pop	{r4, pc}
	else if(soc > 40 && soc <= 60 )
 800264a:	001a      	movs	r2, r3
 800264c:	3a29      	subs	r2, #41	; 0x29
 800264e:	2a13      	cmp	r2, #19
 8002650:	d80d      	bhi.n	800266e <set_indicator_leds_blink+0x56>
		HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, GPIO_PIN_SET);
 8002652:	20a0      	movs	r0, #160	; 0xa0
 8002654:	2201      	movs	r2, #1
 8002656:	2140      	movs	r1, #64	; 0x40
 8002658:	05c0      	lsls	r0, r0, #23
 800265a:	f001 f82b 	bl	80036b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_02_GPIO_Port, LED_02_Pin, GPIO_PIN_SET);
 800265e:	20a0      	movs	r0, #160	; 0xa0
 8002660:	2120      	movs	r1, #32
 8002662:	2201      	movs	r2, #1
 8002664:	05c0      	lsls	r0, r0, #23
 8002666:	f001 f825 	bl	80036b4 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(LED_03_GPIO_Port, LED_03_Pin);
 800266a:	2110      	movs	r1, #16
 800266c:	e7e5      	b.n	800263a <set_indicator_leds_blink+0x22>
		HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, GPIO_PIN_SET);
 800266e:	20a0      	movs	r0, #160	; 0xa0
	else if (soc > 60 && soc <= 80)
 8002670:	3b3d      	subs	r3, #61	; 0x3d
		HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, GPIO_PIN_SET);
 8002672:	2201      	movs	r2, #1
 8002674:	2140      	movs	r1, #64	; 0x40
 8002676:	05c0      	lsls	r0, r0, #23
	else if (soc > 60 && soc <= 80)
 8002678:	2b13      	cmp	r3, #19
 800267a:	d80f      	bhi.n	800269c <set_indicator_leds_blink+0x84>
		HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, GPIO_PIN_SET);
 800267c:	f001 f81a 	bl	80036b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_02_GPIO_Port, LED_02_Pin, GPIO_PIN_SET);
 8002680:	20a0      	movs	r0, #160	; 0xa0
 8002682:	2201      	movs	r2, #1
 8002684:	2120      	movs	r1, #32
 8002686:	05c0      	lsls	r0, r0, #23
 8002688:	f001 f814 	bl	80036b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_03_GPIO_Port, LED_03_Pin, GPIO_PIN_SET);
 800268c:	20a0      	movs	r0, #160	; 0xa0
 800268e:	2110      	movs	r1, #16
 8002690:	2201      	movs	r2, #1
 8002692:	05c0      	lsls	r0, r0, #23
 8002694:	f001 f80e 	bl	80036b4 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(LED_04_GPIO_Port, LED_04_Pin);
 8002698:	2108      	movs	r1, #8
 800269a:	e7ce      	b.n	800263a <set_indicator_leds_blink+0x22>
		HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, GPIO_PIN_SET);
 800269c:	f001 f80a 	bl	80036b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_02_GPIO_Port, LED_02_Pin, GPIO_PIN_SET);
 80026a0:	20a0      	movs	r0, #160	; 0xa0
 80026a2:	2201      	movs	r2, #1
 80026a4:	2120      	movs	r1, #32
 80026a6:	05c0      	lsls	r0, r0, #23
 80026a8:	f001 f804 	bl	80036b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_03_GPIO_Port, LED_03_Pin, GPIO_PIN_SET);
 80026ac:	20a0      	movs	r0, #160	; 0xa0
 80026ae:	2201      	movs	r2, #1
 80026b0:	2110      	movs	r1, #16
 80026b2:	05c0      	lsls	r0, r0, #23
 80026b4:	f000 fffe 	bl	80036b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_04_GPIO_Port, LED_04_Pin, GPIO_PIN_SET);
 80026b8:	20a0      	movs	r0, #160	; 0xa0
 80026ba:	2108      	movs	r1, #8
 80026bc:	2201      	movs	r2, #1
 80026be:	05c0      	lsls	r0, r0, #23
 80026c0:	f000 fff8 	bl	80036b4 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(LED_05_GPIO_Port, LED_05_Pin);
 80026c4:	2104      	movs	r1, #4
 80026c6:	e7b8      	b.n	800263a <set_indicator_leds_blink+0x22>
 80026c8:	2000049c 	.word	0x2000049c

080026cc <StartLED>:
{
 80026cc:	b570      	push	{r4, r5, r6, lr}
	  else if (status_charger == 0 && CurrentDraw < 300) {
 80026ce:	2696      	movs	r6, #150	; 0x96
			setInitialCapacity = 1;
 80026d0:	2401      	movs	r4, #1
	  else if (status_charger == 0 && CurrentDraw < 300) {
 80026d2:	0076      	lsls	r6, r6, #1
	  if (updatedValues > 20 && setInitialCapacity == 0 && status_charger == 0 && CurrentDraw > 200){
 80026d4:	4b2a      	ldr	r3, [pc, #168]	; (8002780 <StartLED+0xb4>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b14      	cmp	r3, #20
 80026da:	d917      	bls.n	800270c <StartLED+0x40>
 80026dc:	4d29      	ldr	r5, [pc, #164]	; (8002784 <StartLED+0xb8>)
 80026de:	4a2a      	ldr	r2, [pc, #168]	; (8002788 <StartLED+0xbc>)
 80026e0:	782b      	ldrb	r3, [r5, #0]
 80026e2:	7812      	ldrb	r2, [r2, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d120      	bne.n	800272a <StartLED+0x5e>
 80026e8:	2a00      	cmp	r2, #0
 80026ea:	d10f      	bne.n	800270c <StartLED+0x40>
 80026ec:	4a27      	ldr	r2, [pc, #156]	; (800278c <StartLED+0xc0>)
 80026ee:	8812      	ldrh	r2, [r2, #0]
 80026f0:	2ac8      	cmp	r2, #200	; 0xc8
 80026f2:	d91c      	bls.n	800272e <StartLED+0x62>
		  	ampereHour = lookup(bus_voltage);
 80026f4:	4b26      	ldr	r3, [pc, #152]	; (8002790 <StartLED+0xc4>)
 80026f6:	8818      	ldrh	r0, [r3, #0]
 80026f8:	f7ff fea8 	bl	800244c <lookup>
 80026fc:	f7fe fad8 	bl	8000cb0 <__aeabi_ui2f>
 8002700:	4b24      	ldr	r3, [pc, #144]	; (8002794 <StartLED+0xc8>)
 8002702:	6018      	str	r0, [r3, #0]
		  	HAL_TIM_Base_Start_IT(&htim2);
 8002704:	4824      	ldr	r0, [pc, #144]	; (8002798 <StartLED+0xcc>)
 8002706:	f001 ff1b 	bl	8004540 <HAL_TIM_Base_Start_IT>
			setInitialCapacity = 1;
 800270a:	702c      	strb	r4, [r5, #0]
	  if (ButtonState > 120){
 800270c:	4b23      	ldr	r3, [pc, #140]	; (800279c <StartLED+0xd0>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b78      	cmp	r3, #120	; 0x78
 8002712:	d917      	bls.n	8002744 <StartLED+0x78>
		  HAL_GPIO_WritePin(LED_06_GPIO_Port, LED_06_Pin, GPIO_PIN_SET);
 8002714:	20a0      	movs	r0, #160	; 0xa0
 8002716:	0022      	movs	r2, r4
 8002718:	2180      	movs	r1, #128	; 0x80
 800271a:	05c0      	lsls	r0, r0, #23
 800271c:	f000 ffca 	bl	80036b4 <HAL_GPIO_WritePin>
		  DisplayLevel();
 8002720:	f7ff fed2 	bl	80024c8 <DisplayLevel>
	  		  clear_indicator_leds();
 8002724:	f7ff feae 	bl	8002484 <clear_indicator_leds>
 8002728:	e023      	b.n	8002772 <StartLED+0xa6>
	  }else if (updatedValues > 20 && status_charger == 0 && CurrentDraw < 200 && setInitialCapacity == 0){
 800272a:	2a00      	cmp	r2, #0
 800272c:	d1ee      	bne.n	800270c <StartLED+0x40>
 800272e:	4a17      	ldr	r2, [pc, #92]	; (800278c <StartLED+0xc0>)
 8002730:	8812      	ldrh	r2, [r2, #0]
 8002732:	2ac7      	cmp	r2, #199	; 0xc7
 8002734:	d8ea      	bhi.n	800270c <StartLED+0x40>
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1e8      	bne.n	800270c <StartLED+0x40>
		  	ampereHour = batteryCap;
 800273a:	4b19      	ldr	r3, [pc, #100]	; (80027a0 <StartLED+0xd4>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	4b15      	ldr	r3, [pc, #84]	; (8002794 <StartLED+0xc8>)
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	e7df      	b.n	8002704 <StartLED+0x38>
	  else if (status_charger == 0 && CurrentDraw < 300) {
 8002744:	4b10      	ldr	r3, [pc, #64]	; (8002788 <StartLED+0xbc>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d116      	bne.n	800277a <StartLED+0xae>
 800274c:	4b0f      	ldr	r3, [pc, #60]	; (800278c <StartLED+0xc0>)
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	42b3      	cmp	r3, r6
 8002752:	d204      	bcs.n	800275e <StartLED+0x92>
		  osDelay(1000);
 8002754:	20fa      	movs	r0, #250	; 0xfa
 8002756:	0080      	lsls	r0, r0, #2
 8002758:	f002 f8b4 	bl	80048c4 <osDelay>
		 clear_indicator_leds();
 800275c:	e7e2      	b.n	8002724 <StartLED+0x58>
	  }else if (status_charger == 0 && CurrentDraw > 300){
 800275e:	42b3      	cmp	r3, r6
 8002760:	d007      	beq.n	8002772 <StartLED+0xa6>
		  HAL_GPIO_WritePin(LED_06_GPIO_Port, LED_06_Pin, GPIO_PIN_SET);
 8002762:	20a0      	movs	r0, #160	; 0xa0
 8002764:	0022      	movs	r2, r4
 8002766:	2180      	movs	r1, #128	; 0x80
 8002768:	05c0      	lsls	r0, r0, #23
 800276a:	f000 ffa3 	bl	80036b4 <HAL_GPIO_WritePin>
		  set_indicator_leds_blink();
 800276e:	f7ff ff53 	bl	8002618 <set_indicator_leds_blink>
    osDelay(1);
 8002772:	0020      	movs	r0, r4
 8002774:	f002 f8a6 	bl	80048c4 <osDelay>
	  if (updatedValues > 20 && setInitialCapacity == 0 && status_charger == 0 && CurrentDraw > 200){
 8002778:	e7ac      	b.n	80026d4 <StartLED+0x8>
	  else if (status_charger == 1){
 800277a:	2b01      	cmp	r3, #1
 800277c:	d1f9      	bne.n	8002772 <StartLED+0xa6>
 800277e:	e7d1      	b.n	8002724 <StartLED+0x58>
 8002780:	2000049e 	.word	0x2000049e
 8002784:	20000498 	.word	0x20000498
 8002788:	2000049d 	.word	0x2000049d
 800278c:	2000034e 	.word	0x2000034e
 8002790:	20000360 	.word	0x20000360
 8002794:	2000035c 	.word	0x2000035c
 8002798:	20000418 	.word	0x20000418
 800279c:	2000034c 	.word	0x2000034c
 80027a0:	20000000 	.word	0x20000000

080027a4 <Read16>:
	HAL_I2C_Mem_Read(&hi2c1, INA220_ADDR, Register, 1, Value, 2, 1000);
 80027a4:	23fa      	movs	r3, #250	; 0xfa
{
 80027a6:	b510      	push	{r4, lr}
	HAL_I2C_Mem_Read(&hi2c1, INA220_ADDR, Register, 1, Value, 2, 1000);
 80027a8:	009b      	lsls	r3, r3, #2
{
 80027aa:	b086      	sub	sp, #24
	HAL_I2C_Mem_Read(&hi2c1, INA220_ADDR, Register, 1, Value, 2, 1000);
 80027ac:	9302      	str	r3, [sp, #8]
 80027ae:	2302      	movs	r3, #2
 80027b0:	ac05      	add	r4, sp, #20
 80027b2:	0002      	movs	r2, r0
 80027b4:	9301      	str	r3, [sp, #4]
 80027b6:	218a      	movs	r1, #138	; 0x8a
 80027b8:	9400      	str	r4, [sp, #0]
 80027ba:	3b01      	subs	r3, #1
 80027bc:	4803      	ldr	r0, [pc, #12]	; (80027cc <Read16+0x28>)
 80027be:	f001 f90d 	bl	80039dc <HAL_I2C_Mem_Read>
	return ((Value[0] << 8) | Value[1]);
 80027c2:	8820      	ldrh	r0, [r4, #0]
 80027c4:	ba40      	rev16	r0, r0
 80027c6:	b280      	uxth	r0, r0
}
 80027c8:	b006      	add	sp, #24
 80027ca:	bd10      	pop	{r4, pc}
 80027cc:	200003c4 	.word	0x200003c4

080027d0 <INA219_ReadBusVoltage>:
	uint16_t result = Read16(INA219_REG_BUSVOLTAGE);
 80027d0:	2002      	movs	r0, #2
{
 80027d2:	b510      	push	{r4, lr}
	uint16_t result = Read16(INA219_REG_BUSVOLTAGE);
 80027d4:	f7ff ffe6 	bl	80027a4 <Read16>
	if(Saved == 0 && ((result >> 3  ) * 4) < 8.3){
 80027d8:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <INA219_ReadBusVoltage+0x24>)
 80027da:	08c0      	lsrs	r0, r0, #3
 80027dc:	781a      	ldrb	r2, [r3, #0]
 80027de:	2a00      	cmp	r2, #0
 80027e0:	d104      	bne.n	80027ec <INA219_ReadBusVoltage+0x1c>
 80027e2:	b282      	uxth	r2, r0
 80027e4:	2a02      	cmp	r2, #2
 80027e6:	dc01      	bgt.n	80027ec <INA219_ReadBusVoltage+0x1c>
		Saved = 1;
 80027e8:	2201      	movs	r2, #1
 80027ea:	701a      	strb	r2, [r3, #0]
	return ((result >> 3  ) * 4);
 80027ec:	0080      	lsls	r0, r0, #2
 80027ee:	b280      	uxth	r0, r0
}
 80027f0:	bd10      	pop	{r4, pc}
 80027f2:	46c0      	nop			; (mov r8, r8)
 80027f4:	2000035a 	.word	0x2000035a

080027f8 <INA219_ReadShuntVolage>:
	uint16_t result = Read16(INA219_REG_SHUNTVOLTAGE);
 80027f8:	2001      	movs	r0, #1
{
 80027fa:	b510      	push	{r4, lr}
	uint16_t result = Read16(INA219_REG_SHUNTVOLTAGE);
 80027fc:	f7ff ffd2 	bl	80027a4 <Read16>
	uint8_t signal = result >> 15;
 8002800:	0bc3      	lsrs	r3, r0, #15
	if (signal > 0){
 8002802:	b29b      	uxth	r3, r3
 8002804:	4905      	ldr	r1, [pc, #20]	; (800281c <INA219_ReadShuntVolage+0x24>)
 8002806:	4a06      	ldr	r2, [pc, #24]	; (8002820 <INA219_ReadShuntVolage+0x28>)
 8002808:	2b00      	cmp	r3, #0
 800280a:	d004      	beq.n	8002816 <INA219_ReadShuntVolage+0x1e>
		status_charger = 1;
 800280c:	2301      	movs	r3, #1
 800280e:	700b      	strb	r3, [r1, #0]
		CurrentDraw = (~result) +1; // 2' complement
 8002810:	4243      	negs	r3, r0
 8002812:	8013      	strh	r3, [r2, #0]
}
 8002814:	bd10      	pop	{r4, pc}
		status_charger = 0;
 8002816:	700b      	strb	r3, [r1, #0]
		CurrentDraw  = result;
 8002818:	8010      	strh	r0, [r2, #0]
 800281a:	e7fb      	b.n	8002814 <INA219_ReadShuntVolage+0x1c>
 800281c:	2000049d 	.word	0x2000049d
 8002820:	2000034e 	.word	0x2000034e

08002824 <Check_INA>:
void Check_INA (){
 8002824:	b510      	push	{r4, lr}
		  bus_voltage =  INA219_ReadBusVoltage();
 8002826:	f7ff ffd3 	bl	80027d0 <INA219_ReadBusVoltage>
 800282a:	4b05      	ldr	r3, [pc, #20]	; (8002840 <Check_INA+0x1c>)
 800282c:	8018      	strh	r0, [r3, #0]
		  shunt_voltage =  INA219_ReadShuntVolage();
 800282e:	f7ff ffe3 	bl	80027f8 <INA219_ReadShuntVolage>
 8002832:	4b04      	ldr	r3, [pc, #16]	; (8002844 <Check_INA+0x20>)
		  updatedValues ++;
 8002834:	4a04      	ldr	r2, [pc, #16]	; (8002848 <Check_INA+0x24>)
		  shunt_voltage =  INA219_ReadShuntVolage();
 8002836:	8018      	strh	r0, [r3, #0]
		  updatedValues ++;
 8002838:	7813      	ldrb	r3, [r2, #0]
 800283a:	3301      	adds	r3, #1
 800283c:	7013      	strb	r3, [r2, #0]
}
 800283e:	bd10      	pop	{r4, pc}
 8002840:	20000360 	.word	0x20000360
 8002844:	2000049a 	.word	0x2000049a
 8002848:	2000049e 	.word	0x2000049e

0800284c <StartINA220>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartINA220 */
void StartINA220(void const * argument)
{
 800284c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN StartINA220 */

  /* Infinite loop */
  for(;;)
  {
	 Check_INA();
 800284e:	f7ff ffe9 	bl	8002824 <Check_INA>
	 Real_capacity = lookup(bus_voltage);
 8002852:	4b05      	ldr	r3, [pc, #20]	; (8002868 <StartINA220+0x1c>)
 8002854:	8818      	ldrh	r0, [r3, #0]
 8002856:	f7ff fdf9 	bl	800244c <lookup>
 800285a:	4b04      	ldr	r3, [pc, #16]	; (800286c <StartINA220+0x20>)
 800285c:	8018      	strh	r0, [r3, #0]
    osDelay(50);
 800285e:	2032      	movs	r0, #50	; 0x32
 8002860:	f002 f830 	bl	80048c4 <osDelay>
  for(;;)
 8002864:	e7f3      	b.n	800284e <StartINA220+0x2>
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	20000360 	.word	0x20000360
 800286c:	20000358 	.word	0x20000358

08002870 <SystemClock_Config>:
{
 8002870:	b500      	push	{lr}
 8002872:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002874:	2220      	movs	r2, #32
 8002876:	2100      	movs	r1, #0
 8002878:	a80c      	add	r0, sp, #48	; 0x30
 800287a:	f002 fd7c 	bl	8005376 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800287e:	2214      	movs	r2, #20
 8002880:	2100      	movs	r1, #0
 8002882:	4668      	mov	r0, sp
 8002884:	f002 fd77 	bl	8005376 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002888:	2218      	movs	r2, #24
 800288a:	2100      	movs	r1, #0
 800288c:	a805      	add	r0, sp, #20
 800288e:	f002 fd72 	bl	8005376 <memset>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002892:	491b      	ldr	r1, [pc, #108]	; (8002900 <SystemClock_Config+0x90>)
 8002894:	4a1b      	ldr	r2, [pc, #108]	; (8002904 <SystemClock_Config+0x94>)
 8002896:	680b      	ldr	r3, [r1, #0]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002898:	a80b      	add	r0, sp, #44	; 0x2c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800289a:	401a      	ands	r2, r3
 800289c:	2380      	movs	r3, #128	; 0x80
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	4313      	orrs	r3, r2
 80028a2:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028a4:	2302      	movs	r3, #2
 80028a6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028a8:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028aa:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028ac:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028ae:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 80028b0:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80028b2:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028b4:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80028b6:	041b      	lsls	r3, r3, #16
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028b8:	320f      	adds	r2, #15
 80028ba:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80028bc:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028be:	f001 fa0f 	bl	8003ce0 <HAL_RCC_OscConfig>
 80028c2:	1e01      	subs	r1, r0, #0
 80028c4:	d001      	beq.n	80028ca <SystemClock_Config+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028c6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028c8:	e7fe      	b.n	80028c8 <SystemClock_Config+0x58>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028ca:	230f      	movs	r3, #15
 80028cc:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028ce:	3b0c      	subs	r3, #12
 80028d0:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028d2:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80028d4:	337d      	adds	r3, #125	; 0x7d
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028d6:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80028d8:	4668      	mov	r0, sp
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80028da:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80028dc:	f001 fc4e 	bl	800417c <HAL_RCC_ClockConfig>
 80028e0:	2800      	cmp	r0, #0
 80028e2:	d001      	beq.n	80028e8 <SystemClock_Config+0x78>
 80028e4:	b672      	cpsid	i
  while (1)
 80028e6:	e7fe      	b.n	80028e6 <SystemClock_Config+0x76>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80028e8:	2308      	movs	r3, #8
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80028ea:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028ec:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80028ee:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028f0:	f001 fd12 	bl	8004318 <HAL_RCCEx_PeriphCLKConfig>
 80028f4:	2800      	cmp	r0, #0
 80028f6:	d001      	beq.n	80028fc <SystemClock_Config+0x8c>
 80028f8:	b672      	cpsid	i
  while (1)
 80028fa:	e7fe      	b.n	80028fa <SystemClock_Config+0x8a>
}
 80028fc:	b019      	add	sp, #100	; 0x64
 80028fe:	bd00      	pop	{pc}
 8002900:	40007000 	.word	0x40007000
 8002904:	ffffe7ff 	.word	0xffffe7ff

08002908 <main>:
{
 8002908:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800290a:	2401      	movs	r4, #1
{
 800290c:	b09f      	sub	sp, #124	; 0x7c
  HAL_Init();
 800290e:	f000 faf3 	bl	8002ef8 <HAL_Init>
  SystemClock_Config();
 8002912:	f7ff ffad 	bl	8002870 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002916:	2214      	movs	r2, #20
 8002918:	2100      	movs	r1, #0
 800291a:	a817      	add	r0, sp, #92	; 0x5c
 800291c:	f002 fd2b 	bl	8005376 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002920:	2102      	movs	r1, #2
  HAL_GPIO_WritePin(GPIOA, LED_05_Pin|LED_04_Pin|LED_03_Pin|LED_02_Pin
 8002922:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002924:	4b9f      	ldr	r3, [pc, #636]	; (8002ba4 <main+0x29c>)
  HAL_GPIO_WritePin(GPIOA, LED_05_Pin|LED_04_Pin|LED_03_Pin|LED_02_Pin
 8002926:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800292a:	0026      	movs	r6, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800292c:	4322      	orrs	r2, r4
 800292e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002932:	4022      	ands	r2, r4
 8002934:	9200      	str	r2, [sp, #0]
 8002936:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800293a:	430a      	orrs	r2, r1
 800293c:	62da      	str	r2, [r3, #44]	; 0x2c
 800293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, LED_05_Pin|LED_04_Pin|LED_03_Pin|LED_02_Pin
 8002940:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002942:	400b      	ands	r3, r1
 8002944:	9301      	str	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, LED_05_Pin|LED_04_Pin|LED_03_Pin|LED_02_Pin
 8002946:	31fa      	adds	r1, #250	; 0xfa
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002948:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, LED_05_Pin|LED_04_Pin|LED_03_Pin|LED_02_Pin
 800294a:	f000 feb3 	bl	80036b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED_07_Pin|battery_Pin, GPIO_PIN_RESET);
 800294e:	2200      	movs	r2, #0
 8002950:	2141      	movs	r1, #65	; 0x41
 8002952:	4895      	ldr	r0, [pc, #596]	; (8002ba8 <main+0x2a0>)
 8002954:	f000 feae 	bl	80036b4 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002958:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = LED_05_Pin|LED_04_Pin|LED_03_Pin|LED_02_Pin
 800295a:	23fc      	movs	r3, #252	; 0xfc
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800295c:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295e:	2400      	movs	r4, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002960:	a917      	add	r1, sp, #92	; 0x5c
 8002962:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = LED_05_Pin|LED_04_Pin|LED_03_Pin|LED_02_Pin
 8002964:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002966:	9419      	str	r4, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002968:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800296a:	f000 fde5 	bl	8003538 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_07_Pin|battery_Pin;
 800296e:	2341      	movs	r3, #65	; 0x41
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002970:	488d      	ldr	r0, [pc, #564]	; (8002ba8 <main+0x2a0>)
 8002972:	a917      	add	r1, sp, #92	; 0x5c
  GPIO_InitStruct.Pin = LED_07_Pin|battery_Pin;
 8002974:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002976:	9618      	str	r6, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002978:	9419      	str	r4, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800297a:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800297c:	f000 fddc 	bl	8003538 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = _5V_Out_Pin;
 8002980:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(_5V_Out_GPIO_Port, &GPIO_InitStruct);
 8002982:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = _5V_Out_Pin;
 8002984:	021b      	lsls	r3, r3, #8
  HAL_GPIO_Init(_5V_Out_GPIO_Port, &GPIO_InitStruct);
 8002986:	a917      	add	r1, sp, #92	; 0x5c
 8002988:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = _5V_Out_Pin;
 800298a:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800298c:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	9419      	str	r4, [sp, #100]	; 0x64
  HAL_GPIO_Init(_5V_Out_GPIO_Port, &GPIO_InitStruct);
 8002990:	f000 fdd2 	bl	8003538 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VCC_Bat_Pin|Charger_Pin;
 8002994:	2388      	movs	r3, #136	; 0x88
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002996:	a917      	add	r1, sp, #92	; 0x5c
 8002998:	4883      	ldr	r0, [pc, #524]	; (8002ba8 <main+0x2a0>)
  GPIO_InitStruct.Pin = VCC_Bat_Pin|Charger_Pin;
 800299a:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800299c:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299e:	9419      	str	r4, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a0:	f000 fdca 	bl	8003538 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 80029a4:	4d81      	ldr	r5, [pc, #516]	; (8002bac <main+0x2a4>)
 80029a6:	4b82      	ldr	r3, [pc, #520]	; (8002bb0 <main+0x2a8>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029a8:	0028      	movs	r0, r5
  hi2c1.Instance = I2C1;
 80029aa:	602b      	str	r3, [r5, #0]
  hi2c1.Init.Timing = 0x00000001;
 80029ac:	606e      	str	r6, [r5, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80029ae:	60ac      	str	r4, [r5, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029b0:	60ee      	str	r6, [r5, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029b2:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80029b4:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80029b6:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029b8:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029ba:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029bc:	f000 ffb8 	bl	8003930 <HAL_I2C_Init>
 80029c0:	0001      	movs	r1, r0
 80029c2:	42a0      	cmp	r0, r4
 80029c4:	d001      	beq.n	80029ca <main+0xc2>
 80029c6:	b672      	cpsid	i
  while (1)
 80029c8:	e7fe      	b.n	80029c8 <main+0xc0>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029ca:	0028      	movs	r0, r5
 80029cc:	f001 f8e8 	bl	8003ba0 <HAL_I2CEx_ConfigAnalogFilter>
 80029d0:	1e01      	subs	r1, r0, #0
 80029d2:	d001      	beq.n	80029d8 <main+0xd0>
 80029d4:	b672      	cpsid	i
  while (1)
 80029d6:	e7fe      	b.n	80029d6 <main+0xce>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80029d8:	0028      	movs	r0, r5
 80029da:	f001 f907 	bl	8003bec <HAL_I2CEx_ConfigDigitalFilter>
 80029de:	1e05      	subs	r5, r0, #0
 80029e0:	d001      	beq.n	80029e6 <main+0xde>
 80029e2:	b672      	cpsid	i
  while (1)
 80029e4:	e7fe      	b.n	80029e4 <main+0xdc>
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80029e6:	2080      	movs	r0, #128	; 0x80
 80029e8:	0140      	lsls	r0, r0, #5
 80029ea:	f001 f923 	bl	8003c34 <HAL_I2CEx_EnableFastModePlus>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029ee:	ae10      	add	r6, sp, #64	; 0x40
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029f0:	2210      	movs	r2, #16
 80029f2:	0029      	movs	r1, r5
 80029f4:	a817      	add	r0, sp, #92	; 0x5c
 80029f6:	f002 fcbe 	bl	8005376 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029fa:	2208      	movs	r2, #8
 80029fc:	0029      	movs	r1, r5
 80029fe:	0030      	movs	r0, r6
 8002a00:	f002 fcb9 	bl	8005376 <memset>
  htim2.Instance = TIM2;
 8002a04:	2380      	movs	r3, #128	; 0x80
 8002a06:	4c6b      	ldr	r4, [pc, #428]	; (8002bb4 <main+0x2ac>)
 8002a08:	05db      	lsls	r3, r3, #23
 8002a0a:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 8000-1;
 8002a0c:	4b6a      	ldr	r3, [pc, #424]	; (8002bb8 <main+0x2b0>)
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a0e:	0020      	movs	r0, r4
  htim2.Init.Prescaler = 8000-1;
 8002a10:	6063      	str	r3, [r4, #4]
  htim2.Init.Period = 10;
 8002a12:	230a      	movs	r3, #10
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a14:	60a5      	str	r5, [r4, #8]
  htim2.Init.Period = 10;
 8002a16:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a18:	6125      	str	r5, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a1a:	6165      	str	r5, [r4, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a1c:	f001 fd6c 	bl	80044f8 <HAL_TIM_Base_Init>
 8002a20:	2800      	cmp	r0, #0
 8002a22:	d001      	beq.n	8002a28 <main+0x120>
 8002a24:	b672      	cpsid	i
  while (1)
 8002a26:	e7fe      	b.n	8002a26 <main+0x11e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a28:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a2a:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a2c:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a2e:	a917      	add	r1, sp, #92	; 0x5c
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a30:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a32:	f001 fdb1 	bl	8004598 <HAL_TIM_ConfigClockSource>
 8002a36:	2800      	cmp	r0, #0
 8002a38:	d001      	beq.n	8002a3e <main+0x136>
 8002a3a:	b672      	cpsid	i
  while (1)
 8002a3c:	e7fe      	b.n	8002a3c <main+0x134>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a3e:	6030      	str	r0, [r6, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a40:	6070      	str	r0, [r6, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a42:	0031      	movs	r1, r6
 8002a44:	0020      	movs	r0, r4
 8002a46:	f001 fee1 	bl	800480c <HAL_TIMEx_MasterConfigSynchronization>
 8002a4a:	1e04      	subs	r4, r0, #0
 8002a4c:	d001      	beq.n	8002a52 <main+0x14a>
 8002a4e:	b672      	cpsid	i
  while (1)
 8002a50:	e7fe      	b.n	8002a50 <main+0x148>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a52:	0001      	movs	r1, r0
 8002a54:	2210      	movs	r2, #16
 8002a56:	a817      	add	r0, sp, #92	; 0x5c
 8002a58:	f002 fc8d 	bl	8005376 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a5c:	2208      	movs	r2, #8
 8002a5e:	0021      	movs	r1, r4
 8002a60:	0030      	movs	r0, r6
 8002a62:	f002 fc88 	bl	8005376 <memset>
  htim21.Instance = TIM21;
 8002a66:	4f55      	ldr	r7, [pc, #340]	; (8002bbc <main+0x2b4>)
 8002a68:	4b55      	ldr	r3, [pc, #340]	; (8002bc0 <main+0x2b8>)
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8002a6a:	0038      	movs	r0, r7
  htim21.Instance = TIM21;
 8002a6c:	603b      	str	r3, [r7, #0]
  htim21.Init.Prescaler = 8000-1;
 8002a6e:	4b52      	ldr	r3, [pc, #328]	; (8002bb8 <main+0x2b0>)
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a70:	60bc      	str	r4, [r7, #8]
  htim21.Init.Prescaler = 8000-1;
 8002a72:	607b      	str	r3, [r7, #4]
  htim21.Init.Period = 60000;
 8002a74:	4b53      	ldr	r3, [pc, #332]	; (8002bc4 <main+0x2bc>)
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a76:	613c      	str	r4, [r7, #16]
  htim21.Init.Period = 60000;
 8002a78:	60fb      	str	r3, [r7, #12]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a7a:	617c      	str	r4, [r7, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8002a7c:	f001 fd3c 	bl	80044f8 <HAL_TIM_Base_Init>
 8002a80:	2800      	cmp	r0, #0
 8002a82:	d001      	beq.n	8002a88 <main+0x180>
 8002a84:	b672      	cpsid	i
  while (1)
 8002a86:	e7fe      	b.n	8002a86 <main+0x17e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a88:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8002a8a:	0038      	movs	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a8c:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8002a8e:	a917      	add	r1, sp, #92	; 0x5c
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a90:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8002a92:	f001 fd81 	bl	8004598 <HAL_TIM_ConfigClockSource>
 8002a96:	2800      	cmp	r0, #0
 8002a98:	d001      	beq.n	8002a9e <main+0x196>
 8002a9a:	b672      	cpsid	i
  while (1)
 8002a9c:	e7fe      	b.n	8002a9c <main+0x194>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a9e:	6030      	str	r0, [r6, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aa0:	6070      	str	r0, [r6, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8002aa2:	0031      	movs	r1, r6
 8002aa4:	0038      	movs	r0, r7
 8002aa6:	f001 feb1 	bl	800480c <HAL_TIMEx_MasterConfigSynchronization>
 8002aaa:	1e05      	subs	r5, r0, #0
 8002aac:	d001      	beq.n	8002ab2 <main+0x1aa>
 8002aae:	b672      	cpsid	i
  while (1)
 8002ab0:	e7fe      	b.n	8002ab0 <main+0x1a8>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002ab2:	0001      	movs	r1, r0
 8002ab4:	2208      	movs	r2, #8
 8002ab6:	a817      	add	r0, sp, #92	; 0x5c
 8002ab8:	f002 fc5d 	bl	8005376 <memset>
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002abc:	23c2      	movs	r3, #194	; 0xc2
  hadc.Init.OversamplingMode = DISABLE;
 8002abe:	4c42      	ldr	r4, [pc, #264]	; (8002bc8 <main+0x2c0>)
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ac0:	33ff      	adds	r3, #255	; 0xff
 8002ac2:	6263      	str	r3, [r4, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002ac4:	0023      	movs	r3, r4
 8002ac6:	332c      	adds	r3, #44	; 0x2c
 8002ac8:	701d      	strb	r5, [r3, #0]
  hadc.Instance = ADC1;
 8002aca:	4b40      	ldr	r3, [pc, #256]	; (8002bcc <main+0x2c4>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002acc:	0020      	movs	r0, r4
  hadc.Instance = ADC1;
 8002ace:	6023      	str	r3, [r4, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	05db      	lsls	r3, r3, #23
 8002ad4:	6063      	str	r3, [r4, #4]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002ad6:	2301      	movs	r3, #1
  hadc.Init.ContinuousConvMode = DISABLE;
 8002ad8:	8425      	strh	r5, [r4, #32]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002ada:	6123      	str	r3, [r4, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002adc:	3303      	adds	r3, #3
  hadc.Init.OversamplingMode = DISABLE;
 8002ade:	63e5      	str	r5, [r4, #60]	; 0x3c
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002ae0:	63a5      	str	r5, [r4, #56]	; 0x38
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ae2:	62a5      	str	r5, [r4, #40]	; 0x28
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002ae4:	6325      	str	r5, [r4, #48]	; 0x30
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8002ae6:	6365      	str	r5, [r4, #52]	; 0x34
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002ae8:	60a5      	str	r5, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002aea:	60e5      	str	r5, [r4, #12]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002aec:	6163      	str	r3, [r4, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002aee:	61a5      	str	r5, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002af0:	61e5      	str	r5, [r4, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002af2:	f000 faf1 	bl	80030d8 <HAL_ADC_Init>
 8002af6:	2800      	cmp	r0, #0
 8002af8:	d001      	beq.n	8002afe <main+0x1f6>
 8002afa:	b672      	cpsid	i
  while (1)
 8002afc:	e7fe      	b.n	8002afc <main+0x1f4>
  sConfig.Channel = ADC_CHANNEL_9;
 8002afe:	4b34      	ldr	r3, [pc, #208]	; (8002bd0 <main+0x2c8>)
 8002b00:	ad17      	add	r5, sp, #92	; 0x5c
 8002b02:	9317      	str	r3, [sp, #92]	; 0x5c
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002b04:	2380      	movs	r3, #128	; 0x80
 8002b06:	015b      	lsls	r3, r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002b08:	0020      	movs	r0, r4
 8002b0a:	0029      	movs	r1, r5
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002b0c:	606b      	str	r3, [r5, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002b0e:	f000 fc6f 	bl	80033f0 <HAL_ADC_ConfigChannel>
 8002b12:	1e04      	subs	r4, r0, #0
 8002b14:	d001      	beq.n	8002b1a <main+0x212>
 8002b16:	b672      	cpsid	i
  while (1)
 8002b18:	e7fe      	b.n	8002b18 <main+0x210>
  HAL_TIM_Base_Start_IT(&htim21);
 8002b1a:	0038      	movs	r0, r7
 8002b1c:	f001 fd10 	bl	8004540 <HAL_TIM_Base_Start_IT>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002b20:	ab02      	add	r3, sp, #8
 8002b22:	469c      	mov	ip, r3
 8002b24:	4a2b      	ldr	r2, [pc, #172]	; (8002bd4 <main+0x2cc>)
 8002b26:	ca83      	ldmia	r2!, {r0, r1, r7}
 8002b28:	c383      	stmia	r3!, {r0, r1, r7}
 8002b2a:	ca83      	ldmia	r2!, {r0, r1, r7}
 8002b2c:	c383      	stmia	r3!, {r0, r1, r7}
 8002b2e:	6812      	ldr	r2, [r2, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002b30:	0021      	movs	r1, r4
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002b32:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002b34:	4660      	mov	r0, ip
 8002b36:	f001 fe9a 	bl	800486e <osThreadCreate>
 8002b3a:	4b27      	ldr	r3, [pc, #156]	; (8002bd8 <main+0x2d0>)
 8002b3c:	6018      	str	r0, [r3, #0]
  osThreadDef(LED, StartLED, osPriorityNormal, 0, 128);
 8002b3e:	ab09      	add	r3, sp, #36	; 0x24
 8002b40:	469c      	mov	ip, r3
 8002b42:	4662      	mov	r2, ip
 8002b44:	4b23      	ldr	r3, [pc, #140]	; (8002bd4 <main+0x2cc>)
 8002b46:	331c      	adds	r3, #28
 8002b48:	cb83      	ldmia	r3!, {r0, r1, r7}
 8002b4a:	c283      	stmia	r2!, {r0, r1, r7}
 8002b4c:	cb83      	ldmia	r3!, {r0, r1, r7}
 8002b4e:	c283      	stmia	r2!, {r0, r1, r7}
 8002b50:	681b      	ldr	r3, [r3, #0]
  LEDHandle = osThreadCreate(osThread(LED), NULL);
 8002b52:	0021      	movs	r1, r4
 8002b54:	4660      	mov	r0, ip
  osThreadDef(LED, StartLED, osPriorityNormal, 0, 128);
 8002b56:	6013      	str	r3, [r2, #0]
  LEDHandle = osThreadCreate(osThread(LED), NULL);
 8002b58:	f001 fe89 	bl	800486e <osThreadCreate>
  osThreadDef(Button, StartButton, osPriorityIdle, 0, 128);
 8002b5c:	0032      	movs	r2, r6
  LEDHandle = osThreadCreate(osThread(LED), NULL);
 8002b5e:	4b1f      	ldr	r3, [pc, #124]	; (8002bdc <main+0x2d4>)
 8002b60:	6018      	str	r0, [r3, #0]
  osThreadDef(Button, StartButton, osPriorityIdle, 0, 128);
 8002b62:	4b1c      	ldr	r3, [pc, #112]	; (8002bd4 <main+0x2cc>)
 8002b64:	3338      	adds	r3, #56	; 0x38
 8002b66:	cb83      	ldmia	r3!, {r0, r1, r7}
 8002b68:	c283      	stmia	r2!, {r0, r1, r7}
 8002b6a:	cb83      	ldmia	r3!, {r0, r1, r7}
 8002b6c:	c283      	stmia	r2!, {r0, r1, r7}
 8002b6e:	681b      	ldr	r3, [r3, #0]
  ButtonHandle = osThreadCreate(osThread(Button), NULL);
 8002b70:	0021      	movs	r1, r4
  osThreadDef(Button, StartButton, osPriorityIdle, 0, 128);
 8002b72:	6013      	str	r3, [r2, #0]
  ButtonHandle = osThreadCreate(osThread(Button), NULL);
 8002b74:	0030      	movs	r0, r6
 8002b76:	f001 fe7a 	bl	800486e <osThreadCreate>
  osThreadDef(INA220, StartINA220, osPriorityIdle, 0, 128);
 8002b7a:	002a      	movs	r2, r5
  ButtonHandle = osThreadCreate(osThread(Button), NULL);
 8002b7c:	4b18      	ldr	r3, [pc, #96]	; (8002be0 <main+0x2d8>)
  osThreadDef(INA220, StartINA220, osPriorityIdle, 0, 128);
 8002b7e:	4f15      	ldr	r7, [pc, #84]	; (8002bd4 <main+0x2cc>)
  ButtonHandle = osThreadCreate(osThread(Button), NULL);
 8002b80:	6018      	str	r0, [r3, #0]
  osThreadDef(INA220, StartINA220, osPriorityIdle, 0, 128);
 8002b82:	3754      	adds	r7, #84	; 0x54
 8002b84:	cf0b      	ldmia	r7!, {r0, r1, r3}
 8002b86:	c20b      	stmia	r2!, {r0, r1, r3}
 8002b88:	cf0b      	ldmia	r7!, {r0, r1, r3}
 8002b8a:	c20b      	stmia	r2!, {r0, r1, r3}
 8002b8c:	683b      	ldr	r3, [r7, #0]
  INA220Handle = osThreadCreate(osThread(INA220), NULL);
 8002b8e:	0021      	movs	r1, r4
  osThreadDef(INA220, StartINA220, osPriorityIdle, 0, 128);
 8002b90:	6013      	str	r3, [r2, #0]
  INA220Handle = osThreadCreate(osThread(INA220), NULL);
 8002b92:	0028      	movs	r0, r5
 8002b94:	f001 fe6b 	bl	800486e <osThreadCreate>
 8002b98:	4b12      	ldr	r3, [pc, #72]	; (8002be4 <main+0x2dc>)
 8002b9a:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8002b9c:	f001 fe62 	bl	8004864 <osKernelStart>
  while (1)
 8002ba0:	e7fe      	b.n	8002ba0 <main+0x298>
 8002ba2:	46c0      	nop			; (mov r8, r8)
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	50000400 	.word	0x50000400
 8002bac:	200003c4 	.word	0x200003c4
 8002bb0:	40005400 	.word	0x40005400
 8002bb4:	20000418 	.word	0x20000418
 8002bb8:	00001f3f 	.word	0x00001f3f
 8002bbc:	20000458 	.word	0x20000458
 8002bc0:	40010800 	.word	0x40010800
 8002bc4:	0000ea60 	.word	0x0000ea60
 8002bc8:	20000368 	.word	0x20000368
 8002bcc:	40012400 	.word	0x40012400
 8002bd0:	24000200 	.word	0x24000200
 8002bd4:	08005d44 	.word	0x08005d44
 8002bd8:	20000364 	.word	0x20000364
 8002bdc:	20000354 	.word	0x20000354
 8002be0:	20000348 	.word	0x20000348
 8002be4:	20000350 	.word	0x20000350

08002be8 <HAL_TIM_PeriodElapsedCallback>:
  if(htim->Instance == TIM2)
 8002be8:	2380      	movs	r3, #128	; 0x80
{
 8002bea:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(htim->Instance == TIM2)
 8002bec:	6802      	ldr	r2, [r0, #0]
{
 8002bee:	0004      	movs	r4, r0
 8002bf0:	b09b      	sub	sp, #108	; 0x6c
  if(htim->Instance == TIM2)
 8002bf2:	05db      	lsls	r3, r3, #23
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d125      	bne.n	8002c44 <HAL_TIM_PeriodElapsedCallback+0x5c>
		  ampereHour -= (CurrentDraw * (10 / 3600000.0)); // Calculate Ah value if the battery is discharging
 8002bf8:	4d22      	ldr	r5, [pc, #136]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002bfa:	6828      	ldr	r0, [r5, #0]
 8002bfc:	f7ff fa04 	bl	8002008 <__aeabi_f2d>
 8002c00:	4b21      	ldr	r3, [pc, #132]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002c02:	0006      	movs	r6, r0
 8002c04:	8818      	ldrh	r0, [r3, #0]
 8002c06:	000f      	movs	r7, r1
 8002c08:	f7ff f9ce 	bl	8001fa8 <__aeabi_i2d>
 8002c0c:	4a1f      	ldr	r2, [pc, #124]	; (8002c8c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002c0e:	4b20      	ldr	r3, [pc, #128]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002c10:	f7fe fbcc 	bl	80013ac <__aeabi_dmul>
 8002c14:	000b      	movs	r3, r1
	  if(status_charger == 1){
 8002c16:	491f      	ldr	r1, [pc, #124]	; (8002c94 <HAL_TIM_PeriodElapsedCallback+0xac>)
		  ampereHour -= (CurrentDraw * (10 / 3600000.0)); // Calculate Ah value if the battery is discharging
 8002c18:	0002      	movs	r2, r0
	  if(status_charger == 1){
 8002c1a:	7809      	ldrb	r1, [r1, #0]
		  ampereHour -= (CurrentDraw * (10 / 3600000.0)); // Calculate Ah value if the battery is discharging
 8002c1c:	0030      	movs	r0, r6
	  if(status_charger == 1){
 8002c1e:	2901      	cmp	r1, #1
 8002c20:	d12c      	bne.n	8002c7c <HAL_TIM_PeriodElapsedCallback+0x94>
		  ampereHour -= (CurrentDraw * (10 / 3600000.0)); // Calculate Ah value if the battery is discharging
 8002c22:	0039      	movs	r1, r7
 8002c24:	f7fe fe2e 	bl	8001884 <__aeabi_dsub>
		  ampereHour += (CurrentDraw * (10 / 3600000.0)); // Calculate Ah value if the battery is charging
 8002c28:	f7ff fa36 	bl	8002098 <__aeabi_d2f>
	  soc = (ampereHour / batteryCap) * 100; // Calculate SOC in %
 8002c2c:	4b1a      	ldr	r3, [pc, #104]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002c2e:	6028      	str	r0, [r5, #0]
 8002c30:	6819      	ldr	r1, [r3, #0]
 8002c32:	f7fd fc31 	bl	8000498 <__aeabi_fdiv>
 8002c36:	4919      	ldr	r1, [pc, #100]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002c38:	f7fd fd46 	bl	80006c8 <__aeabi_fmul>
 8002c3c:	f7fd fb48 	bl	80002d0 <__aeabi_f2uiz>
 8002c40:	4b17      	ldr	r3, [pc, #92]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002c42:	7018      	strb	r0, [r3, #0]
  }  if(htim->Instance == TIM21)
 8002c44:	4b17      	ldr	r3, [pc, #92]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002c46:	6822      	ldr	r2, [r4, #0]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d115      	bne.n	8002c78 <HAL_TIM_PeriodElapsedCallback+0x90>
		 int CurrentInt = ampereHour;
 8002c4c:	4b0d      	ldr	r3, [pc, #52]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002c4e:	6818      	ldr	r0, [r3, #0]
 8002c50:	f7fe f80e 	bl	8000c70 <__aeabi_f2iz>
 8002c54:	0004      	movs	r4, r0
		 sprintf (str, "Voltage = %d", bus_voltage);
 8002c56:	4b14      	ldr	r3, [pc, #80]	; (8002ca8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002c58:	4914      	ldr	r1, [pc, #80]	; (8002cac <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002c5a:	881a      	ldrh	r2, [r3, #0]
 8002c5c:	a801      	add	r0, sp, #4
 8002c5e:	f002 fcb1 	bl	80055c4 <siprintf>
		 sprintf (str, " Capacity  = %d", CurrentInt);
 8002c62:	0022      	movs	r2, r4
 8002c64:	4912      	ldr	r1, [pc, #72]	; (8002cb0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002c66:	a801      	add	r0, sp, #4
 8002c68:	f002 fcac 	bl	80055c4 <siprintf>
		 sprintf (str, " Current = %d\n", CurrentDraw);
 8002c6c:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002c6e:	4911      	ldr	r1, [pc, #68]	; (8002cb4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002c70:	881a      	ldrh	r2, [r3, #0]
 8002c72:	a801      	add	r0, sp, #4
 8002c74:	f002 fca6 	bl	80055c4 <siprintf>
}
 8002c78:	b01b      	add	sp, #108	; 0x6c
 8002c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		  ampereHour += (CurrentDraw * (10 / 3600000.0)); // Calculate Ah value if the battery is charging
 8002c7c:	0039      	movs	r1, r7
 8002c7e:	f7fe f859 	bl	8000d34 <__aeabi_dadd>
 8002c82:	e7d1      	b.n	8002c28 <HAL_TIM_PeriodElapsedCallback+0x40>
 8002c84:	2000035c 	.word	0x2000035c
 8002c88:	2000034e 	.word	0x2000034e
 8002c8c:	7ba75828 	.word	0x7ba75828
 8002c90:	3ec74d3b 	.word	0x3ec74d3b
 8002c94:	2000049d 	.word	0x2000049d
 8002c98:	20000000 	.word	0x20000000
 8002c9c:	42c80000 	.word	0x42c80000
 8002ca0:	2000049c 	.word	0x2000049c
 8002ca4:	40010800 	.word	0x40010800
 8002ca8:	20000360 	.word	0x20000360
 8002cac:	08005ed2 	.word	0x08005ed2
 8002cb0:	08005edf 	.word	0x08005edf
 8002cb4:	08005eef 	.word	0x08005eef

08002cb8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cb8:	2201      	movs	r2, #1
 8002cba:	4b08      	ldr	r3, [pc, #32]	; (8002cdc <HAL_MspInit+0x24>)
{
 8002cbc:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cbe:	6b59      	ldr	r1, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8002cc0:	2002      	movs	r0, #2
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cc6:	2280      	movs	r2, #128	; 0x80
 8002cc8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002cca:	0552      	lsls	r2, r2, #21
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8002cd0:	2103      	movs	r1, #3
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	4240      	negs	r0, r0
 8002cd6:	f000 fbdf 	bl	8003498 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cda:	bd10      	pop	{r4, pc}
 8002cdc:	40021000 	.word	0x40021000

08002ce0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ce0:	b510      	push	{r4, lr}
 8002ce2:	0004      	movs	r4, r0
 8002ce4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce6:	2214      	movs	r2, #20
 8002ce8:	2100      	movs	r1, #0
 8002cea:	a801      	add	r0, sp, #4
 8002cec:	f002 fb43 	bl	8005376 <memset>
  if(hadc->Instance==ADC1)
 8002cf0:	4b0d      	ldr	r3, [pc, #52]	; (8002d28 <HAL_ADC_MspInit+0x48>)
 8002cf2:	6822      	ldr	r2, [r4, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d114      	bne.n	8002d22 <HAL_ADC_MspInit+0x42>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002cf8:	2280      	movs	r2, #128	; 0x80
 8002cfa:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <HAL_ADC_MspInit+0x4c>)
 8002cfc:	0092      	lsls	r2, r2, #2
 8002cfe:	6b59      	ldr	r1, [r3, #52]	; 0x34
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d00:	480b      	ldr	r0, [pc, #44]	; (8002d30 <HAL_ADC_MspInit+0x50>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d02:	430a      	orrs	r2, r1
 8002d04:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d06:	2202      	movs	r2, #2
 8002d08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d0a:	4311      	orrs	r1, r2
 8002d0c:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d10:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d12:	4013      	ands	r3, r2
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d18:	2303      	movs	r3, #3
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002d1a:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d1c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d1e:	f000 fc0b 	bl	8003538 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d22:	b006      	add	sp, #24
 8002d24:	bd10      	pop	{r4, pc}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	40012400 	.word	0x40012400
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	50000400 	.word	0x50000400

08002d34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d34:	b510      	push	{r4, lr}
 8002d36:	0004      	movs	r4, r0
 8002d38:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d3a:	2214      	movs	r2, #20
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	a801      	add	r0, sp, #4
 8002d40:	f002 fb19 	bl	8005376 <memset>
  if(hi2c->Instance==I2C1)
 8002d44:	4b10      	ldr	r3, [pc, #64]	; (8002d88 <HAL_I2C_MspInit+0x54>)
 8002d46:	6822      	ldr	r2, [r4, #0]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d11a      	bne.n	8002d82 <HAL_I2C_MspInit+0x4e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	4c0f      	ldr	r4, [pc, #60]	; (8002d8c <HAL_I2C_MspInit+0x58>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d50:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d54:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d56:	431a      	orrs	r2, r3
 8002d58:	62e2      	str	r2, [r4, #44]	; 0x2c
 8002d5a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d5c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d5e:	401a      	ands	r2, r3
 8002d60:	9200      	str	r2, [sp, #0]
 8002d62:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d64:	22c0      	movs	r2, #192	; 0xc0
 8002d66:	00d2      	lsls	r2, r2, #3
 8002d68:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d6a:	2212      	movs	r2, #18
 8002d6c:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d6e:	3a0f      	subs	r2, #15
 8002d70:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002d72:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d74:	f000 fbe0 	bl	8003538 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d78:	2380      	movs	r3, #128	; 0x80
 8002d7a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002d7c:	039b      	lsls	r3, r3, #14
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d82:	b006      	add	sp, #24
 8002d84:	bd10      	pop	{r4, pc}
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	40005400 	.word	0x40005400
 8002d8c:	40021000 	.word	0x40021000

08002d90 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8002d90:	2280      	movs	r2, #128	; 0x80
 8002d92:	6803      	ldr	r3, [r0, #0]
{
 8002d94:	b510      	push	{r4, lr}
  if(htim_base->Instance==TIM2)
 8002d96:	05d2      	lsls	r2, r2, #23
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d10d      	bne.n	8002db8 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	4a0e      	ldr	r2, [pc, #56]	; (8002dd8 <HAL_TIM_Base_MspInit+0x48>)
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8002da0:	200f      	movs	r0, #15
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002da2:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8002da4:	430b      	orrs	r3, r1
 8002da6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8002da8:	2103      	movs	r1, #3
 8002daa:	2200      	movs	r2, #0
 8002dac:	f000 fb74 	bl	8003498 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002db0:	200f      	movs	r0, #15
  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
    /* TIM21 interrupt Init */
    HAL_NVIC_SetPriority(TIM21_IRQn, 3, 0);
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8002db2:	f000 fb9b 	bl	80034ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 8002db6:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM21)
 8002db8:	4a08      	ldr	r2, [pc, #32]	; (8002ddc <HAL_TIM_Base_MspInit+0x4c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d1fb      	bne.n	8002db6 <HAL_TIM_Base_MspInit+0x26>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	4a05      	ldr	r2, [pc, #20]	; (8002dd8 <HAL_TIM_Base_MspInit+0x48>)
    HAL_NVIC_SetPriority(TIM21_IRQn, 3, 0);
 8002dc2:	2014      	movs	r0, #20
    __HAL_RCC_TIM21_CLK_ENABLE();
 8002dc4:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8002dc6:	430b      	orrs	r3, r1
 8002dc8:	6353      	str	r3, [r2, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 3, 0);
 8002dca:	2103      	movs	r1, #3
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f000 fb63 	bl	8003498 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8002dd2:	2014      	movs	r0, #20
 8002dd4:	e7ed      	b.n	8002db2 <HAL_TIM_Base_MspInit+0x22>
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	40010800 	.word	0x40010800

08002de0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002de0:	e7fe      	b.n	8002de0 <NMI_Handler>

08002de2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002de2:	e7fe      	b.n	8002de2 <HardFault_Handler>

08002de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002de4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002de6:	f000 f89b 	bl	8002f20 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002dea:	f002 f8df 	bl	8004fac <xTaskGetSchedulerState>
 8002dee:	2801      	cmp	r0, #1
 8002df0:	d001      	beq.n	8002df6 <SysTick_Handler+0x12>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002df2:	f002 f9af 	bl	8005154 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002df6:	bd10      	pop	{r4, pc}

08002df8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002df8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002dfa:	4802      	ldr	r0, [pc, #8]	; (8002e04 <TIM2_IRQHandler+0xc>)
 8002dfc:	f001 fc7e 	bl	80046fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e00:	bd10      	pop	{r4, pc}
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	20000418 	.word	0x20000418

08002e08 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8002e08:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8002e0a:	4802      	ldr	r0, [pc, #8]	; (8002e14 <TIM21_IRQHandler+0xc>)
 8002e0c:	f001 fc76 	bl	80046fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8002e10:	bd10      	pop	{r4, pc}
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	20000458 	.word	0x20000458

08002e18 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e18:	4a0b      	ldr	r2, [pc, #44]	; (8002e48 <_sbrk+0x30>)
 8002e1a:	490c      	ldr	r1, [pc, #48]	; (8002e4c <_sbrk+0x34>)
{
 8002e1c:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e1e:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e20:	4a0b      	ldr	r2, [pc, #44]	; (8002e50 <_sbrk+0x38>)
{
 8002e22:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8002e24:	6810      	ldr	r0, [r2, #0]
 8002e26:	2800      	cmp	r0, #0
 8002e28:	d101      	bne.n	8002e2e <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8002e2a:	480a      	ldr	r0, [pc, #40]	; (8002e54 <_sbrk+0x3c>)
 8002e2c:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e2e:	6810      	ldr	r0, [r2, #0]
 8002e30:	18c3      	adds	r3, r0, r3
 8002e32:	428b      	cmp	r3, r1
 8002e34:	d906      	bls.n	8002e44 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8002e36:	f002 fa69 	bl	800530c <__errno>
 8002e3a:	230c      	movs	r3, #12
 8002e3c:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002e3e:	2001      	movs	r0, #1
 8002e40:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002e42:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8002e44:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8002e46:	e7fc      	b.n	8002e42 <_sbrk+0x2a>
 8002e48:	00000400 	.word	0x00000400
 8002e4c:	20002000 	.word	0x20002000
 8002e50:	200004a0 	.word	0x200004a0
 8002e54:	200011f8 	.word	0x200011f8

08002e58 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e58:	4770      	bx	lr
	...

08002e5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002e5c:	480d      	ldr	r0, [pc, #52]	; (8002e94 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002e5e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e60:	f7ff fffa 	bl	8002e58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e64:	480c      	ldr	r0, [pc, #48]	; (8002e98 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e66:	490d      	ldr	r1, [pc, #52]	; (8002e9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e68:	4a0d      	ldr	r2, [pc, #52]	; (8002ea0 <LoopForever+0xe>)
  movs r3, #0
 8002e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e6c:	e002      	b.n	8002e74 <LoopCopyDataInit>

08002e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e72:	3304      	adds	r3, #4

08002e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e78:	d3f9      	bcc.n	8002e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ea4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e7c:	4c0a      	ldr	r4, [pc, #40]	; (8002ea8 <LoopForever+0x16>)
  movs r3, #0
 8002e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e80:	e001      	b.n	8002e86 <LoopFillZerobss>

08002e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e84:	3204      	adds	r2, #4

08002e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e88:	d3fb      	bcc.n	8002e82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e8a:	f002 fa45 	bl	8005318 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e8e:	f7ff fd3b 	bl	8002908 <main>

08002e92 <LoopForever>:

LoopForever:
    b LoopForever
 8002e92:	e7fe      	b.n	8002e92 <LoopForever>
   ldr   r0, =_estack
 8002e94:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e9c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002ea0:	0800615c 	.word	0x0800615c
  ldr r2, =_sbss
 8002ea4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002ea8:	200011f8 	.word	0x200011f8

08002eac <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002eac:	e7fe      	b.n	8002eac <ADC1_COMP_IRQHandler>
	...

08002eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eb0:	b570      	push	{r4, r5, r6, lr}
 8002eb2:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002eb4:	20fa      	movs	r0, #250	; 0xfa
 8002eb6:	4b0d      	ldr	r3, [pc, #52]	; (8002eec <HAL_InitTick+0x3c>)
 8002eb8:	0080      	lsls	r0, r0, #2
 8002eba:	7819      	ldrb	r1, [r3, #0]
 8002ebc:	f7fd f92e 	bl	800011c <__udivsi3>
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <HAL_InitTick+0x40>)
 8002ec2:	0001      	movs	r1, r0
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	f7fd f929 	bl	800011c <__udivsi3>
 8002eca:	f000 fb1b 	bl	8003504 <HAL_SYSTICK_Config>
 8002ece:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8002ed0:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ed2:	2c00      	cmp	r4, #0
 8002ed4:	d109      	bne.n	8002eea <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ed6:	2d03      	cmp	r5, #3
 8002ed8:	d807      	bhi.n	8002eea <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002eda:	3802      	subs	r0, #2
 8002edc:	0022      	movs	r2, r4
 8002ede:	0029      	movs	r1, r5
 8002ee0:	f000 fada 	bl	8003498 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ee4:	0020      	movs	r0, r4
 8002ee6:	4b03      	ldr	r3, [pc, #12]	; (8002ef4 <HAL_InitTick+0x44>)
 8002ee8:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002eea:	bd70      	pop	{r4, r5, r6, pc}
 8002eec:	20000008 	.word	0x20000008
 8002ef0:	20000004 	.word	0x20000004
 8002ef4:	2000000c 	.word	0x2000000c

08002ef8 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002ef8:	2340      	movs	r3, #64	; 0x40
 8002efa:	4a08      	ldr	r2, [pc, #32]	; (8002f1c <HAL_Init+0x24>)
{
 8002efc:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002efe:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f00:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002f02:	430b      	orrs	r3, r1
 8002f04:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f06:	f7ff ffd3 	bl	8002eb0 <HAL_InitTick>
 8002f0a:	1e04      	subs	r4, r0, #0
 8002f0c:	d103      	bne.n	8002f16 <HAL_Init+0x1e>
    HAL_MspInit();
 8002f0e:	f7ff fed3 	bl	8002cb8 <HAL_MspInit>
}
 8002f12:	0020      	movs	r0, r4
 8002f14:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002f16:	2401      	movs	r4, #1
 8002f18:	e7fb      	b.n	8002f12 <HAL_Init+0x1a>
 8002f1a:	46c0      	nop			; (mov r8, r8)
 8002f1c:	40022000 	.word	0x40022000

08002f20 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002f20:	4a03      	ldr	r2, [pc, #12]	; (8002f30 <HAL_IncTick+0x10>)
 8002f22:	4b04      	ldr	r3, [pc, #16]	; (8002f34 <HAL_IncTick+0x14>)
 8002f24:	6811      	ldr	r1, [r2, #0]
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	185b      	adds	r3, r3, r1
 8002f2a:	6013      	str	r3, [r2, #0]
}
 8002f2c:	4770      	bx	lr
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	200004a4 	.word	0x200004a4
 8002f34:	20000008 	.word	0x20000008

08002f38 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002f38:	4b01      	ldr	r3, [pc, #4]	; (8002f40 <HAL_GetTick+0x8>)
 8002f3a:	6818      	ldr	r0, [r3, #0]
}
 8002f3c:	4770      	bx	lr
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	200004a4 	.word	0x200004a4

08002f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f44:	b570      	push	{r4, r5, r6, lr}
 8002f46:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002f48:	f7ff fff6 	bl	8002f38 <HAL_GetTick>
 8002f4c:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f4e:	1c63      	adds	r3, r4, #1
 8002f50:	d002      	beq.n	8002f58 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f52:	4b04      	ldr	r3, [pc, #16]	; (8002f64 <HAL_Delay+0x20>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f58:	f7ff ffee 	bl	8002f38 <HAL_GetTick>
 8002f5c:	1b40      	subs	r0, r0, r5
 8002f5e:	42a0      	cmp	r0, r4
 8002f60:	d3fa      	bcc.n	8002f58 <HAL_Delay+0x14>
  {
  }
}
 8002f62:	bd70      	pop	{r4, r5, r6, pc}
 8002f64:	20000008 	.word	0x20000008

08002f68 <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002f68:	4b08      	ldr	r3, [pc, #32]	; (8002f8c <ADC_DelayMicroSecond+0x24>)
{
 8002f6a:	b513      	push	{r0, r1, r4, lr}
 8002f6c:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002f6e:	4908      	ldr	r1, [pc, #32]	; (8002f90 <ADC_DelayMicroSecond+0x28>)
 8002f70:	6818      	ldr	r0, [r3, #0]
 8002f72:	f7fd f8d3 	bl	800011c <__udivsi3>
 8002f76:	4344      	muls	r4, r0
 8002f78:	9401      	str	r4, [sp, #4]

  while (waitLoopIndex != 0U)
 8002f7a:	9b01      	ldr	r3, [sp, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d100      	bne.n	8002f82 <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  }
}
 8002f80:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 8002f82:	9b01      	ldr	r3, [sp, #4]
 8002f84:	3b01      	subs	r3, #1
 8002f86:	9301      	str	r3, [sp, #4]
 8002f88:	e7f7      	b.n	8002f7a <ADC_DelayMicroSecond+0x12>
 8002f8a:	46c0      	nop			; (mov r8, r8)
 8002f8c:	20000004 	.word	0x20000004
 8002f90:	000f4240 	.word	0x000f4240

08002f94 <ADC_Disable>:
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002f94:	2103      	movs	r1, #3
 8002f96:	6803      	ldr	r3, [r0, #0]
{
 8002f98:	b570      	push	{r4, r5, r6, lr}
 8002f9a:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002f9c:	6898      	ldr	r0, [r3, #8]
 8002f9e:	4008      	ands	r0, r1
 8002fa0:	2801      	cmp	r0, #1
 8002fa2:	d001      	beq.n	8002fa8 <ADC_Disable+0x14>
  return HAL_OK;
 8002fa4:	2000      	movs	r0, #0
}
 8002fa6:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	4202      	tst	r2, r0
 8002fac:	d0fa      	beq.n	8002fa4 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002fae:	2205      	movs	r2, #5
 8002fb0:	689d      	ldr	r5, [r3, #8]
 8002fb2:	4015      	ands	r5, r2
 8002fb4:	2d01      	cmp	r5, #1
 8002fb6:	d11d      	bne.n	8002ff4 <ADC_Disable+0x60>
      __HAL_ADC_DISABLE(hadc);
 8002fb8:	6898      	ldr	r0, [r3, #8]
 8002fba:	3a03      	subs	r2, #3
 8002fbc:	4302      	orrs	r2, r0
 8002fbe:	609a      	str	r2, [r3, #8]
 8002fc0:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8002fc2:	f7ff ffb9 	bl	8002f38 <HAL_GetTick>
 8002fc6:	0006      	movs	r6, r0
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002fc8:	6823      	ldr	r3, [r4, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	422b      	tst	r3, r5
 8002fce:	d0e9      	beq.n	8002fa4 <ADC_Disable+0x10>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002fd0:	f7ff ffb2 	bl	8002f38 <HAL_GetTick>
 8002fd4:	1b80      	subs	r0, r0, r6
 8002fd6:	280a      	cmp	r0, #10
 8002fd8:	d9f6      	bls.n	8002fc8 <ADC_Disable+0x34>
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002fda:	6823      	ldr	r3, [r4, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	422b      	tst	r3, r5
 8002fe0:	d0f2      	beq.n	8002fc8 <ADC_Disable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fe2:	2310      	movs	r3, #16
 8002fe4:	6d62      	ldr	r2, [r4, #84]	; 0x54
          return HAL_ERROR;
 8002fe6:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002fee:	431d      	orrs	r5, r3
 8002ff0:	65a5      	str	r5, [r4, #88]	; 0x58
          return HAL_ERROR;
 8002ff2:	e7d8      	b.n	8002fa6 <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ff4:	2310      	movs	r3, #16
 8002ff6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ffc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ffe:	4303      	orrs	r3, r0
 8003000:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8003002:	e7d0      	b.n	8002fa6 <ADC_Disable+0x12>

08003004 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003004:	2103      	movs	r1, #3
 8003006:	6803      	ldr	r3, [r0, #0]
{
 8003008:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800300a:	689a      	ldr	r2, [r3, #8]
{
 800300c:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800300e:	400a      	ands	r2, r1
 8003010:	2a01      	cmp	r2, #1
 8003012:	d104      	bne.n	800301e <ADC_Enable+0x1a>
 8003014:	6819      	ldr	r1, [r3, #0]
 8003016:	4211      	tst	r1, r2
 8003018:	d001      	beq.n	800301e <ADC_Enable+0x1a>
  return HAL_OK;
 800301a:	2000      	movs	r0, #0
}
 800301c:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800301e:	6899      	ldr	r1, [r3, #8]
 8003020:	4a15      	ldr	r2, [pc, #84]	; (8003078 <ADC_Enable+0x74>)
 8003022:	4211      	tst	r1, r2
 8003024:	d008      	beq.n	8003038 <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003026:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003028:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800302a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800302c:	4313      	orrs	r3, r2
 800302e:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003030:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003032:	4303      	orrs	r3, r0
 8003034:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8003036:	e7f1      	b.n	800301c <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 8003038:	2501      	movs	r5, #1
 800303a:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800303c:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 800303e:	432a      	orrs	r2, r5
 8003040:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8003042:	f7ff ff91 	bl	8002f68 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 8003046:	f7ff ff77 	bl	8002f38 <HAL_GetTick>
 800304a:	0006      	movs	r6, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800304c:	6823      	ldr	r3, [r4, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	422b      	tst	r3, r5
 8003052:	d1e2      	bne.n	800301a <ADC_Enable+0x16>
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003054:	f7ff ff70 	bl	8002f38 <HAL_GetTick>
 8003058:	1b80      	subs	r0, r0, r6
 800305a:	280a      	cmp	r0, #10
 800305c:	d9f6      	bls.n	800304c <ADC_Enable+0x48>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800305e:	6823      	ldr	r3, [r4, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	422b      	tst	r3, r5
 8003064:	d1f2      	bne.n	800304c <ADC_Enable+0x48>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003066:	2310      	movs	r3, #16
 8003068:	6d62      	ldr	r2, [r4, #84]	; 0x54
          return HAL_ERROR;
 800306a:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800306c:	4313      	orrs	r3, r2
 800306e:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003070:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003072:	431d      	orrs	r5, r3
 8003074:	65a5      	str	r5, [r4, #88]	; 0x58
          return HAL_ERROR;
 8003076:	e7d1      	b.n	800301c <ADC_Enable+0x18>
 8003078:	80000017 	.word	0x80000017

0800307c <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800307c:	2204      	movs	r2, #4
 800307e:	6803      	ldr	r3, [r0, #0]
{
 8003080:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003082:	6899      	ldr	r1, [r3, #8]
{
 8003084:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003086:	4211      	tst	r1, r2
 8003088:	d101      	bne.n	800308e <ADC_ConversionStop+0x12>
  return HAL_OK;
 800308a:	2000      	movs	r0, #0
}
 800308c:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 800308e:	6899      	ldr	r1, [r3, #8]
 8003090:	4211      	tst	r1, r2
 8003092:	d006      	beq.n	80030a2 <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 8003094:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 8003096:	0792      	lsls	r2, r2, #30
 8003098:	d403      	bmi.n	80030a2 <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800309a:	2210      	movs	r2, #16
 800309c:	6899      	ldr	r1, [r3, #8]
 800309e:	430a      	orrs	r2, r1
 80030a0:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80030a2:	f7ff ff49 	bl	8002f38 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80030a6:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 80030a8:	0005      	movs	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80030aa:	6823      	ldr	r3, [r4, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	4233      	tst	r3, r6
 80030b0:	d0eb      	beq.n	800308a <ADC_ConversionStop+0xe>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80030b2:	f7ff ff41 	bl	8002f38 <HAL_GetTick>
 80030b6:	1b40      	subs	r0, r0, r5
 80030b8:	280a      	cmp	r0, #10
 80030ba:	d9f6      	bls.n	80030aa <ADC_ConversionStop+0x2e>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80030bc:	6823      	ldr	r3, [r4, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	4233      	tst	r3, r6
 80030c2:	d0f2      	beq.n	80030aa <ADC_ConversionStop+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c4:	2310      	movs	r3, #16
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030c6:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80030ca:	4313      	orrs	r3, r2
 80030cc:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80030d0:	4303      	orrs	r3, r0
 80030d2:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 80030d4:	e7da      	b.n	800308c <ADC_ConversionStop+0x10>
	...

080030d8 <HAL_ADC_Init>:
{
 80030d8:	b570      	push	{r4, r5, r6, lr}
 80030da:	0004      	movs	r4, r0
    return HAL_ERROR;
 80030dc:	2001      	movs	r0, #1
  if (hadc == NULL)
 80030de:	2c00      	cmp	r4, #0
 80030e0:	d01b      	beq.n	800311a <HAL_ADC_Init+0x42>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d106      	bne.n	80030f6 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 80030e8:	0022      	movs	r2, r4
 80030ea:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 80030ec:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 80030ee:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 80030f0:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 80030f2:	f7ff fdf5 	bl	8002ce0 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80030f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80030f8:	06db      	lsls	r3, r3, #27
 80030fa:	d406      	bmi.n	800310a <HAL_ADC_Init+0x32>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80030fc:	6823      	ldr	r3, [r4, #0]
 80030fe:	2204      	movs	r2, #4
 8003100:	6899      	ldr	r1, [r3, #8]
 8003102:	0008      	movs	r0, r1
 8003104:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003106:	4211      	tst	r1, r2
 8003108:	d008      	beq.n	800311c <HAL_ADC_Init+0x44>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800310a:	2310      	movs	r3, #16
 800310c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 800310e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003110:	4313      	orrs	r3, r2
 8003112:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8003114:	2300      	movs	r3, #0
 8003116:	3450      	adds	r4, #80	; 0x50
 8003118:	7023      	strb	r3, [r4, #0]
}
 800311a:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 800311c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800311e:	4955      	ldr	r1, [pc, #340]	; (8003274 <HAL_ADC_Init+0x19c>)
 8003120:	4011      	ands	r1, r2
 8003122:	2202      	movs	r2, #2
 8003124:	430a      	orrs	r2, r1
 8003126:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003128:	2203      	movs	r2, #3
 800312a:	6899      	ldr	r1, [r3, #8]
 800312c:	4011      	ands	r1, r2
 800312e:	4a52      	ldr	r2, [pc, #328]	; (8003278 <HAL_ADC_Init+0x1a0>)
 8003130:	2901      	cmp	r1, #1
 8003132:	d102      	bne.n	800313a <HAL_ADC_Init+0x62>
 8003134:	681d      	ldr	r5, [r3, #0]
 8003136:	420d      	tst	r5, r1
 8003138:	d119      	bne.n	800316e <HAL_ADC_Init+0x96>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800313a:	2680      	movs	r6, #128	; 0x80
 800313c:	6861      	ldr	r1, [r4, #4]
 800313e:	05f6      	lsls	r6, r6, #23
 8003140:	004d      	lsls	r5, r1, #1
 8003142:	086d      	lsrs	r5, r5, #1
 8003144:	42b5      	cmp	r5, r6
 8003146:	d003      	beq.n	8003150 <HAL_ADC_Init+0x78>
 8003148:	2580      	movs	r5, #128	; 0x80
 800314a:	062d      	lsls	r5, r5, #24
 800314c:	42a9      	cmp	r1, r5
 800314e:	d176      	bne.n	800323e <HAL_ADC_Init+0x166>
 8003150:	691d      	ldr	r5, [r3, #16]
 8003152:	00ad      	lsls	r5, r5, #2
 8003154:	08ad      	lsrs	r5, r5, #2
 8003156:	611d      	str	r5, [r3, #16]
 8003158:	691d      	ldr	r5, [r3, #16]
 800315a:	4329      	orrs	r1, r5
 800315c:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800315e:	2518      	movs	r5, #24
 8003160:	68d9      	ldr	r1, [r3, #12]
 8003162:	43a9      	bics	r1, r5
 8003164:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8003166:	68d9      	ldr	r1, [r3, #12]
 8003168:	68a5      	ldr	r5, [r4, #8]
 800316a:	4329      	orrs	r1, r5
 800316c:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800316e:	6811      	ldr	r1, [r2, #0]
 8003170:	4d42      	ldr	r5, [pc, #264]	; (800327c <HAL_ADC_Init+0x1a4>)
 8003172:	4029      	ands	r1, r5
 8003174:	6011      	str	r1, [r2, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8003176:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003178:	6815      	ldr	r5, [r2, #0]
 800317a:	0649      	lsls	r1, r1, #25
 800317c:	4329      	orrs	r1, r5
 800317e:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8003180:	2280      	movs	r2, #128	; 0x80
 8003182:	6899      	ldr	r1, [r3, #8]
 8003184:	0552      	lsls	r2, r2, #21
 8003186:	4211      	tst	r1, r2
 8003188:	d102      	bne.n	8003190 <HAL_ADC_Init+0xb8>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800318a:	6899      	ldr	r1, [r3, #8]
 800318c:	430a      	orrs	r2, r1
 800318e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	493b      	ldr	r1, [pc, #236]	; (8003280 <HAL_ADC_Init+0x1a8>)
 8003194:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003196:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003198:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800319a:	68dd      	ldr	r5, [r3, #12]
 800319c:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800319e:	2902      	cmp	r1, #2
 80031a0:	d100      	bne.n	80031a4 <HAL_ADC_Init+0xcc>
 80031a2:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80031a4:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80031a6:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80031a8:	4332      	orrs	r2, r6
 80031aa:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80031ac:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80031ae:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80031b0:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80031b2:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80031b4:	69e5      	ldr	r5, [r4, #28]
 80031b6:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80031b8:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80031ba:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80031bc:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80031be:	0025      	movs	r5, r4
 80031c0:	352c      	adds	r5, #44	; 0x2c
 80031c2:	782d      	ldrb	r5, [r5, #0]
 80031c4:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80031c6:	432a      	orrs	r2, r5
 80031c8:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031ca:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80031cc:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80031d0:	30ff      	adds	r0, #255	; 0xff
 80031d2:	4282      	cmp	r2, r0
 80031d4:	d004      	beq.n	80031e0 <HAL_ADC_Init+0x108>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80031d6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80031d8:	68d8      	ldr	r0, [r3, #12]
 80031da:	432a      	orrs	r2, r5
 80031dc:	4302      	orrs	r2, r0
 80031de:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031e0:	1ca2      	adds	r2, r4, #2
 80031e2:	7fd2      	ldrb	r2, [r2, #31]
 80031e4:	2a01      	cmp	r2, #1
 80031e6:	d106      	bne.n	80031f6 <HAL_ADC_Init+0x11e>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80031e8:	2900      	cmp	r1, #0
 80031ea:	d134      	bne.n	8003256 <HAL_ADC_Init+0x17e>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80031ec:	2280      	movs	r2, #128	; 0x80
 80031ee:	68d9      	ldr	r1, [r3, #12]
 80031f0:	0252      	lsls	r2, r2, #9
 80031f2:	430a      	orrs	r2, r1
 80031f4:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 80031f6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80031f8:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 80031fa:	2901      	cmp	r1, #1
 80031fc:	d133      	bne.n	8003266 <HAL_ADC_Init+0x18e>
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80031fe:	4821      	ldr	r0, [pc, #132]	; (8003284 <HAL_ADC_Init+0x1ac>)
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8003200:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8003202:	4002      	ands	r2, r0
 8003204:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8003206:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003208:	6918      	ldr	r0, [r3, #16]
 800320a:	432a      	orrs	r2, r5
                              hadc->Init.Oversample.RightBitShift             |
 800320c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800320e:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8003210:	4302      	orrs	r2, r0
 8003212:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003214:	691a      	ldr	r2, [r3, #16]
 8003216:	4311      	orrs	r1, r2
 8003218:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800321a:	2107      	movs	r1, #7
 800321c:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 800321e:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003220:	438a      	bics	r2, r1
 8003222:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8003224:	695a      	ldr	r2, [r3, #20]
 8003226:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003228:	430a      	orrs	r2, r1
 800322a:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 800322c:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 800322e:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8003230:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003232:	4393      	bics	r3, r2
 8003234:	001a      	movs	r2, r3
 8003236:	2301      	movs	r3, #1
 8003238:	4313      	orrs	r3, r2
 800323a:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 800323c:	e76d      	b.n	800311a <HAL_ADC_Init+0x42>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800323e:	691d      	ldr	r5, [r3, #16]
 8003240:	4e11      	ldr	r6, [pc, #68]	; (8003288 <HAL_ADC_Init+0x1b0>)
 8003242:	00ad      	lsls	r5, r5, #2
 8003244:	08ad      	lsrs	r5, r5, #2
 8003246:	611d      	str	r5, [r3, #16]
 8003248:	6815      	ldr	r5, [r2, #0]
 800324a:	4035      	ands	r5, r6
 800324c:	6015      	str	r5, [r2, #0]
 800324e:	6815      	ldr	r5, [r2, #0]
 8003250:	4329      	orrs	r1, r5
 8003252:	6011      	str	r1, [r2, #0]
 8003254:	e783      	b.n	800315e <HAL_ADC_Init+0x86>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003256:	2120      	movs	r1, #32
 8003258:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800325a:	4301      	orrs	r1, r0
 800325c:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800325e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003260:	430a      	orrs	r2, r1
 8003262:	65a2      	str	r2, [r4, #88]	; 0x58
 8003264:	e7c7      	b.n	80031f6 <HAL_ADC_Init+0x11e>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8003266:	2101      	movs	r1, #1
 8003268:	420a      	tst	r2, r1
 800326a:	d0d6      	beq.n	800321a <HAL_ADC_Init+0x142>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800326c:	691a      	ldr	r2, [r3, #16]
 800326e:	438a      	bics	r2, r1
 8003270:	611a      	str	r2, [r3, #16]
 8003272:	e7d2      	b.n	800321a <HAL_ADC_Init+0x142>
 8003274:	fffffefd 	.word	0xfffffefd
 8003278:	40012708 	.word	0x40012708
 800327c:	fdffffff 	.word	0xfdffffff
 8003280:	fffe0219 	.word	0xfffe0219
 8003284:	fffffc03 	.word	0xfffffc03
 8003288:	ffc3ffff 	.word	0xffc3ffff

0800328c <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800328c:	6803      	ldr	r3, [r0, #0]
{
 800328e:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003290:	689b      	ldr	r3, [r3, #8]
{
 8003292:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 8003294:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003296:	075b      	lsls	r3, r3, #29
 8003298:	d41a      	bmi.n	80032d0 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 800329a:	0025      	movs	r5, r4
 800329c:	3550      	adds	r5, #80	; 0x50
 800329e:	782b      	ldrb	r3, [r5, #0]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d015      	beq.n	80032d0 <HAL_ADC_Start+0x44>
 80032a4:	2301      	movs	r3, #1
 80032a6:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80032a8:	69e3      	ldr	r3, [r4, #28]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d111      	bne.n	80032d2 <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 80032ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80032b0:	4a0b      	ldr	r2, [pc, #44]	; (80032e0 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 80032b2:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80032b4:	401a      	ands	r2, r3
 80032b6:	2380      	movs	r3, #128	; 0x80
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80032bc:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 80032be:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 80032c0:	65a0      	str	r0, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 80032c2:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80032c4:	6823      	ldr	r3, [r4, #0]
 80032c6:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80032c8:	6899      	ldr	r1, [r3, #8]
 80032ca:	3a18      	subs	r2, #24
 80032cc:	430a      	orrs	r2, r1
 80032ce:	609a      	str	r2, [r3, #8]
}
 80032d0:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80032d2:	0020      	movs	r0, r4
 80032d4:	f7ff fe96 	bl	8003004 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80032d8:	2800      	cmp	r0, #0
 80032da:	d0e8      	beq.n	80032ae <HAL_ADC_Start+0x22>
 80032dc:	e7f8      	b.n	80032d0 <HAL_ADC_Start+0x44>
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	fffff0fe 	.word	0xfffff0fe

080032e4 <HAL_ADC_Stop>:
{
 80032e4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 80032e6:	0006      	movs	r6, r0
 80032e8:	3650      	adds	r6, #80	; 0x50
 80032ea:	7833      	ldrb	r3, [r6, #0]
{
 80032ec:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80032ee:	2002      	movs	r0, #2
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d012      	beq.n	800331a <HAL_ADC_Stop+0x36>
 80032f4:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 80032f6:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 80032f8:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 80032fa:	f7ff febf 	bl	800307c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80032fe:	2800      	cmp	r0, #0
 8003300:	d109      	bne.n	8003316 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8003302:	0020      	movs	r0, r4
 8003304:	f7ff fe46 	bl	8002f94 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003308:	2800      	cmp	r0, #0
 800330a:	d104      	bne.n	8003316 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 800330c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800330e:	4a03      	ldr	r2, [pc, #12]	; (800331c <HAL_ADC_Stop+0x38>)
 8003310:	4013      	ands	r3, r2
 8003312:	431d      	orrs	r5, r3
 8003314:	6565      	str	r5, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8003316:	2300      	movs	r3, #0
 8003318:	7033      	strb	r3, [r6, #0]
}
 800331a:	bd70      	pop	{r4, r5, r6, pc}
 800331c:	fffffefe 	.word	0xfffffefe

08003320 <HAL_ADC_PollForConversion>:
{
 8003320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003322:	6945      	ldr	r5, [r0, #20]
{
 8003324:	0004      	movs	r4, r0
 8003326:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003328:	2d08      	cmp	r5, #8
 800332a:	d00d      	beq.n	8003348 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800332c:	6803      	ldr	r3, [r0, #0]
 800332e:	2001      	movs	r0, #1
 8003330:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8003332:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003334:	4203      	tst	r3, r0
 8003336:	d007      	beq.n	8003348 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003338:	2320      	movs	r3, #32
 800333a:	6d62      	ldr	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 800333c:	3450      	adds	r4, #80	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800333e:	4313      	orrs	r3, r2
 8003340:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 8003342:	2300      	movs	r3, #0
 8003344:	7023      	strb	r3, [r4, #0]
}
 8003346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8003348:	f7ff fdf6 	bl	8002f38 <HAL_GetTick>
 800334c:	0007      	movs	r7, r0
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800334e:	6823      	ldr	r3, [r4, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	4215      	tst	r5, r2
 8003354:	d024      	beq.n	80033a0 <HAL_ADC_PollForConversion+0x80>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003356:	2280      	movs	r2, #128	; 0x80
 8003358:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800335a:	0092      	lsls	r2, r2, #2
 800335c:	430a      	orrs	r2, r1
 800335e:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003360:	22c0      	movs	r2, #192	; 0xc0
 8003362:	68d9      	ldr	r1, [r3, #12]
 8003364:	0112      	lsls	r2, r2, #4
 8003366:	4211      	tst	r1, r2
 8003368:	d113      	bne.n	8003392 <HAL_ADC_PollForConversion+0x72>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800336a:	1c62      	adds	r2, r4, #1
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800336c:	7fd2      	ldrb	r2, [r2, #31]
 800336e:	2a00      	cmp	r2, #0
 8003370:	d10f      	bne.n	8003392 <HAL_ADC_PollForConversion+0x72>
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	0712      	lsls	r2, r2, #28
 8003376:	d50c      	bpl.n	8003392 <HAL_ADC_PollForConversion+0x72>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	0752      	lsls	r2, r2, #29
 800337c:	d428      	bmi.n	80033d0 <HAL_ADC_PollForConversion+0xb0>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800337e:	210c      	movs	r1, #12
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	438a      	bics	r2, r1
 8003384:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8003386:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003388:	4916      	ldr	r1, [pc, #88]	; (80033e4 <HAL_ADC_PollForConversion+0xc4>)
 800338a:	4011      	ands	r1, r2
 800338c:	2201      	movs	r2, #1
 800338e:	430a      	orrs	r2, r1
 8003390:	6562      	str	r2, [r4, #84]	; 0x54
  return HAL_OK;
 8003392:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003394:	69a2      	ldr	r2, [r4, #24]
 8003396:	4282      	cmp	r2, r0
 8003398:	d1d5      	bne.n	8003346 <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800339a:	220c      	movs	r2, #12
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	e7d2      	b.n	8003346 <HAL_ADC_PollForConversion+0x26>
    if (Timeout != HAL_MAX_DELAY)
 80033a0:	1c72      	adds	r2, r6, #1
 80033a2:	d0d5      	beq.n	8003350 <HAL_ADC_PollForConversion+0x30>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80033a4:	2e00      	cmp	r6, #0
 80033a6:	d10d      	bne.n	80033c4 <HAL_ADC_PollForConversion+0xa4>
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80033a8:	002a      	movs	r2, r5
 80033aa:	6823      	ldr	r3, [r4, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	401a      	ands	r2, r3
 80033b0:	421d      	tst	r5, r3
 80033b2:	d1cc      	bne.n	800334e <HAL_ADC_PollForConversion+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80033b4:	2304      	movs	r3, #4
 80033b6:	6d61      	ldr	r1, [r4, #84]	; 0x54
          __HAL_UNLOCK(hadc);
 80033b8:	3450      	adds	r4, #80	; 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80033ba:	430b      	orrs	r3, r1
 80033bc:	6063      	str	r3, [r4, #4]
          return HAL_TIMEOUT;
 80033be:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
 80033c0:	7022      	strb	r2, [r4, #0]
          return HAL_TIMEOUT;
 80033c2:	e7c0      	b.n	8003346 <HAL_ADC_PollForConversion+0x26>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80033c4:	f7ff fdb8 	bl	8002f38 <HAL_GetTick>
 80033c8:	1bc0      	subs	r0, r0, r7
 80033ca:	42b0      	cmp	r0, r6
 80033cc:	d8ec      	bhi.n	80033a8 <HAL_ADC_PollForConversion+0x88>
 80033ce:	e7be      	b.n	800334e <HAL_ADC_PollForConversion+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033d0:	2220      	movs	r2, #32
 80033d2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80033d4:	430a      	orrs	r2, r1
 80033d6:	6562      	str	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d8:	2201      	movs	r2, #1
 80033da:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80033dc:	430a      	orrs	r2, r1
 80033de:	65a2      	str	r2, [r4, #88]	; 0x58
 80033e0:	e7d7      	b.n	8003392 <HAL_ADC_PollForConversion+0x72>
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	fffffefe 	.word	0xfffffefe

080033e8 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80033e8:	6803      	ldr	r3, [r0, #0]
 80033ea:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80033ec:	4770      	bx	lr
	...

080033f0 <HAL_ADC_ConfigChannel>:
{
 80033f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80033f2:	0004      	movs	r4, r0
 80033f4:	3450      	adds	r4, #80	; 0x50
 80033f6:	7822      	ldrb	r2, [r4, #0]
{
 80033f8:	0003      	movs	r3, r0
 80033fa:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 80033fc:	2002      	movs	r0, #2
 80033fe:	2a01      	cmp	r2, #1
 8003400:	d00b      	beq.n	800341a <HAL_ADC_ConfigChannel+0x2a>
 8003402:	3801      	subs	r0, #1
 8003404:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	6891      	ldr	r1, [r2, #8]
 800340a:	0749      	lsls	r1, r1, #29
 800340c:	d506      	bpl.n	800341c <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800340e:	2220      	movs	r2, #32
 8003410:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003412:	430a      	orrs	r2, r1
 8003414:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8003416:	2300      	movs	r3, #0
 8003418:	7023      	strb	r3, [r4, #0]
}
 800341a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800341c:	2380      	movs	r3, #128	; 0x80
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800341e:	6828      	ldr	r0, [r5, #0]
  if (sConfig->Rank != ADC_RANK_NONE)
 8003420:	4e19      	ldr	r6, [pc, #100]	; (8003488 <HAL_ADC_ConfigChannel+0x98>)
 8003422:	686f      	ldr	r7, [r5, #4]
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003424:	0341      	lsls	r1, r0, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003426:	02db      	lsls	r3, r3, #11
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003428:	0b49      	lsrs	r1, r1, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800342a:	4003      	ands	r3, r0
  if (sConfig->Rank != ADC_RANK_NONE)
 800342c:	42b7      	cmp	r7, r6
 800342e:	d019      	beq.n	8003464 <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003430:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003432:	4301      	orrs	r1, r0
 8003434:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003436:	2b00      	cmp	r3, #0
 8003438:	d008      	beq.n	800344c <HAL_ADC_ConfigChannel+0x5c>
      ADC->CCR |= ADC_CCR_TSEN;
 800343a:	2380      	movs	r3, #128	; 0x80
 800343c:	4a13      	ldr	r2, [pc, #76]	; (800348c <HAL_ADC_ConfigChannel+0x9c>)
 800343e:	041b      	lsls	r3, r3, #16
 8003440:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003442:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;
 8003444:	430b      	orrs	r3, r1
 8003446:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003448:	f7ff fd8e 	bl	8002f68 <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800344c:	682b      	ldr	r3, [r5, #0]
 800344e:	039b      	lsls	r3, r3, #14
 8003450:	d505      	bpl.n	800345e <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;
 8003452:	2380      	movs	r3, #128	; 0x80
 8003454:	4a0d      	ldr	r2, [pc, #52]	; (800348c <HAL_ADC_ConfigChannel+0x9c>)
 8003456:	03db      	lsls	r3, r3, #15
 8003458:	6811      	ldr	r1, [r2, #0]
 800345a:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800345c:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 800345e:	2000      	movs	r0, #0
 8003460:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8003462:	e7da      	b.n	800341a <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8003464:	6a95      	ldr	r5, [r2, #40]	; 0x28
 8003466:	438d      	bics	r5, r1
 8003468:	6295      	str	r5, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800346a:	2b00      	cmp	r3, #0
 800346c:	d004      	beq.n	8003478 <HAL_ADC_ConfigChannel+0x88>
      ADC->CCR &= ~ADC_CCR_TSEN;
 800346e:	4a07      	ldr	r2, [pc, #28]	; (800348c <HAL_ADC_ConfigChannel+0x9c>)
 8003470:	4907      	ldr	r1, [pc, #28]	; (8003490 <HAL_ADC_ConfigChannel+0xa0>)
 8003472:	6813      	ldr	r3, [r2, #0]
 8003474:	400b      	ands	r3, r1
 8003476:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003478:	0383      	lsls	r3, r0, #14
 800347a:	d5f0      	bpl.n	800345e <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800347c:	4a03      	ldr	r2, [pc, #12]	; (800348c <HAL_ADC_ConfigChannel+0x9c>)
 800347e:	4905      	ldr	r1, [pc, #20]	; (8003494 <HAL_ADC_ConfigChannel+0xa4>)
 8003480:	6813      	ldr	r3, [r2, #0]
 8003482:	400b      	ands	r3, r1
 8003484:	e7ea      	b.n	800345c <HAL_ADC_ConfigChannel+0x6c>
 8003486:	46c0      	nop			; (mov r8, r8)
 8003488:	00001001 	.word	0x00001001
 800348c:	40012708 	.word	0x40012708
 8003490:	ff7fffff 	.word	0xff7fffff
 8003494:	ffbfffff 	.word	0xffbfffff

08003498 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003498:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800349a:	25ff      	movs	r5, #255	; 0xff
 800349c:	2403      	movs	r4, #3
 800349e:	002a      	movs	r2, r5
 80034a0:	4004      	ands	r4, r0
 80034a2:	00e4      	lsls	r4, r4, #3
 80034a4:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80034a6:	0189      	lsls	r1, r1, #6
 80034a8:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034aa:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80034ac:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034ae:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 80034b0:	2800      	cmp	r0, #0
 80034b2:	db0a      	blt.n	80034ca <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034b4:	24c0      	movs	r4, #192	; 0xc0
 80034b6:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <HAL_NVIC_SetPriority+0x4c>)
 80034b8:	0880      	lsrs	r0, r0, #2
 80034ba:	0080      	lsls	r0, r0, #2
 80034bc:	18c0      	adds	r0, r0, r3
 80034be:	00a4      	lsls	r4, r4, #2
 80034c0:	5903      	ldr	r3, [r0, r4]
 80034c2:	401a      	ands	r2, r3
 80034c4:	4311      	orrs	r1, r2
 80034c6:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80034c8:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034ca:	200f      	movs	r0, #15
 80034cc:	4003      	ands	r3, r0
 80034ce:	3b08      	subs	r3, #8
 80034d0:	4805      	ldr	r0, [pc, #20]	; (80034e8 <HAL_NVIC_SetPriority+0x50>)
 80034d2:	089b      	lsrs	r3, r3, #2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	181b      	adds	r3, r3, r0
 80034d8:	69d8      	ldr	r0, [r3, #28]
 80034da:	4002      	ands	r2, r0
 80034dc:	4311      	orrs	r1, r2
 80034de:	61d9      	str	r1, [r3, #28]
 80034e0:	e7f2      	b.n	80034c8 <HAL_NVIC_SetPriority+0x30>
 80034e2:	46c0      	nop			; (mov r8, r8)
 80034e4:	e000e100 	.word	0xe000e100
 80034e8:	e000ed00 	.word	0xe000ed00

080034ec <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80034ec:	2800      	cmp	r0, #0
 80034ee:	db05      	blt.n	80034fc <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034f0:	231f      	movs	r3, #31
 80034f2:	4018      	ands	r0, r3
 80034f4:	3b1e      	subs	r3, #30
 80034f6:	4083      	lsls	r3, r0
 80034f8:	4a01      	ldr	r2, [pc, #4]	; (8003500 <HAL_NVIC_EnableIRQ+0x14>)
 80034fa:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80034fc:	4770      	bx	lr
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	e000e100 	.word	0xe000e100

08003504 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003504:	2280      	movs	r2, #128	; 0x80
 8003506:	1e43      	subs	r3, r0, #1
 8003508:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800350a:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800350c:	4293      	cmp	r3, r2
 800350e:	d20d      	bcs.n	800352c <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003510:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003512:	4a07      	ldr	r2, [pc, #28]	; (8003530 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003514:	4807      	ldr	r0, [pc, #28]	; (8003534 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003516:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003518:	6a03      	ldr	r3, [r0, #32]
 800351a:	0609      	lsls	r1, r1, #24
 800351c:	021b      	lsls	r3, r3, #8
 800351e:	0a1b      	lsrs	r3, r3, #8
 8003520:	430b      	orrs	r3, r1
 8003522:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003524:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003526:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003528:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800352a:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800352c:	4770      	bx	lr
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	e000e010 	.word	0xe000e010
 8003534:	e000ed00 	.word	0xe000ed00

08003538 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003538:	4a55      	ldr	r2, [pc, #340]	; (8003690 <HAL_GPIO_Init+0x158>)
{
 800353a:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800353c:	1882      	adds	r2, r0, r2
 800353e:	1e54      	subs	r4, r2, #1
 8003540:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 8003542:	2300      	movs	r3, #0
{
 8003544:	b085      	sub	sp, #20
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003546:	3205      	adds	r2, #5
 8003548:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 800354a:	680a      	ldr	r2, [r1, #0]
 800354c:	0014      	movs	r4, r2
 800354e:	40dc      	lsrs	r4, r3
 8003550:	d101      	bne.n	8003556 <HAL_GPIO_Init+0x1e>
        EXTI->IMR = temp;
      }
    }
    position++;
  }
}
 8003552:	b005      	add	sp, #20
 8003554:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003556:	2701      	movs	r7, #1
 8003558:	003c      	movs	r4, r7
 800355a:	0015      	movs	r5, r2
 800355c:	409c      	lsls	r4, r3
 800355e:	4025      	ands	r5, r4
 8003560:	9501      	str	r5, [sp, #4]
    if (iocurrent)
 8003562:	4222      	tst	r2, r4
 8003564:	d100      	bne.n	8003568 <HAL_GPIO_Init+0x30>
 8003566:	e090      	b.n	800368a <HAL_GPIO_Init+0x152>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003568:	684a      	ldr	r2, [r1, #4]
 800356a:	9200      	str	r2, [sp, #0]
 800356c:	2203      	movs	r2, #3
 800356e:	9d00      	ldr	r5, [sp, #0]
 8003570:	4015      	ands	r5, r2
 8003572:	46ac      	mov	ip, r5
 8003574:	005d      	lsls	r5, r3, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003576:	40aa      	lsls	r2, r5
 8003578:	43d2      	mvns	r2, r2
 800357a:	9202      	str	r2, [sp, #8]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800357c:	4662      	mov	r2, ip
 800357e:	3a01      	subs	r2, #1
 8003580:	42ba      	cmp	r2, r7
 8003582:	d828      	bhi.n	80035d6 <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR;
 8003584:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003586:	9a02      	ldr	r2, [sp, #8]
 8003588:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 800358a:	68ca      	ldr	r2, [r1, #12]
 800358c:	40aa      	lsls	r2, r5
 800358e:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 8003590:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8003592:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003594:	43a2      	bics	r2, r4
 8003596:	0014      	movs	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003598:	9a00      	ldr	r2, [sp, #0]
 800359a:	0912      	lsrs	r2, r2, #4
 800359c:	403a      	ands	r2, r7
 800359e:	409a      	lsls	r2, r3
 80035a0:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80035a2:	6042      	str	r2, [r0, #4]
        temp = GPIOx->PUPDR;
 80035a4:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035a6:	9a02      	ldr	r2, [sp, #8]
 80035a8:	4014      	ands	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035aa:	688a      	ldr	r2, [r1, #8]
 80035ac:	40aa      	lsls	r2, r5
 80035ae:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80035b0:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035b2:	4662      	mov	r2, ip
 80035b4:	2a02      	cmp	r2, #2
 80035b6:	d111      	bne.n	80035dc <HAL_GPIO_Init+0xa4>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80035b8:	2407      	movs	r4, #7
 80035ba:	270f      	movs	r7, #15
 80035bc:	401c      	ands	r4, r3
 80035be:	00a4      	lsls	r4, r4, #2
 80035c0:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 80035c2:	08da      	lsrs	r2, r3, #3
 80035c4:	0092      	lsls	r2, r2, #2
 80035c6:	1882      	adds	r2, r0, r2
 80035c8:	6a16      	ldr	r6, [r2, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80035ca:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80035cc:	690f      	ldr	r7, [r1, #16]
 80035ce:	40a7      	lsls	r7, r4
 80035d0:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 80035d2:	6216      	str	r6, [r2, #32]
 80035d4:	e002      	b.n	80035dc <HAL_GPIO_Init+0xa4>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035d6:	4662      	mov	r2, ip
 80035d8:	2a03      	cmp	r2, #3
 80035da:	d1e3      	bne.n	80035a4 <HAL_GPIO_Init+0x6c>
      temp = GPIOx->MODER;
 80035dc:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80035de:	9c02      	ldr	r4, [sp, #8]
 80035e0:	4014      	ands	r4, r2
 80035e2:	0022      	movs	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035e4:	4664      	mov	r4, ip
 80035e6:	40ac      	lsls	r4, r5
 80035e8:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80035ea:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035ec:	22c0      	movs	r2, #192	; 0xc0
 80035ee:	9c00      	ldr	r4, [sp, #0]
 80035f0:	0292      	lsls	r2, r2, #10
 80035f2:	4214      	tst	r4, r2
 80035f4:	d049      	beq.n	800368a <HAL_GPIO_Init+0x152>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035f6:	2701      	movs	r7, #1
 80035f8:	4c26      	ldr	r4, [pc, #152]	; (8003694 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80035fa:	2503      	movs	r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035fc:	6b62      	ldr	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80035fe:	401d      	ands	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003600:	433a      	orrs	r2, r7
 8003602:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8003604:	4a24      	ldr	r2, [pc, #144]	; (8003698 <HAL_GPIO_Init+0x160>)
 8003606:	089c      	lsrs	r4, r3, #2
 8003608:	00a4      	lsls	r4, r4, #2
 800360a:	18a4      	adds	r4, r4, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800360c:	220f      	movs	r2, #15
 800360e:	00ad      	lsls	r5, r5, #2
 8003610:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2U];
 8003612:	68a6      	ldr	r6, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003614:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003616:	22a0      	movs	r2, #160	; 0xa0
 8003618:	05d2      	lsls	r2, r2, #23
 800361a:	4694      	mov	ip, r2
 800361c:	2200      	movs	r2, #0
 800361e:	4560      	cmp	r0, ip
 8003620:	d009      	beq.n	8003636 <HAL_GPIO_Init+0xfe>
 8003622:	4a1e      	ldr	r2, [pc, #120]	; (800369c <HAL_GPIO_Init+0x164>)
 8003624:	4694      	mov	ip, r2
 8003626:	003a      	movs	r2, r7
 8003628:	4560      	cmp	r0, ip
 800362a:	d004      	beq.n	8003636 <HAL_GPIO_Init+0xfe>
 800362c:	4f1c      	ldr	r7, [pc, #112]	; (80036a0 <HAL_GPIO_Init+0x168>)
 800362e:	1892      	adds	r2, r2, r2
 8003630:	42b8      	cmp	r0, r7
 8003632:	d000      	beq.n	8003636 <HAL_GPIO_Init+0xfe>
 8003634:	9a03      	ldr	r2, [sp, #12]
 8003636:	40aa      	lsls	r2, r5
 8003638:	4316      	orrs	r6, r2
        temp = EXTI->RTSR;
 800363a:	4a1a      	ldr	r2, [pc, #104]	; (80036a4 <HAL_GPIO_Init+0x16c>)
        SYSCFG->EXTICR[position >> 2U] = temp;
 800363c:	60a6      	str	r6, [r4, #8]
        temp = EXTI->RTSR;
 800363e:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8003640:	9c01      	ldr	r4, [sp, #4]
          temp |= iocurrent;
 8003642:	9d01      	ldr	r5, [sp, #4]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003644:	9f00      	ldr	r7, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 8003646:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8003648:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800364a:	02ff      	lsls	r7, r7, #11
 800364c:	d401      	bmi.n	8003652 <HAL_GPIO_Init+0x11a>
        temp &= ~((uint32_t)iocurrent);
 800364e:	0035      	movs	r5, r6
 8003650:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8003652:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8003654:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8003656:	9d01      	ldr	r5, [sp, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003658:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 800365a:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800365c:	02bf      	lsls	r7, r7, #10
 800365e:	d401      	bmi.n	8003664 <HAL_GPIO_Init+0x12c>
        temp &= ~((uint32_t)iocurrent);
 8003660:	0035      	movs	r5, r6
 8003662:	4025      	ands	r5, r4
        EXTI->FTSR = temp;
 8003664:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 8003666:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8003668:	9d01      	ldr	r5, [sp, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800366a:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 800366c:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800366e:	03bf      	lsls	r7, r7, #14
 8003670:	d401      	bmi.n	8003676 <HAL_GPIO_Init+0x13e>
        temp &= ~((uint32_t)iocurrent);
 8003672:	0035      	movs	r5, r6
 8003674:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8003676:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 8003678:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 800367a:	9e01      	ldr	r6, [sp, #4]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800367c:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 800367e:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003680:	03ff      	lsls	r7, r7, #15
 8003682:	d401      	bmi.n	8003688 <HAL_GPIO_Init+0x150>
        temp &= ~((uint32_t)iocurrent);
 8003684:	4025      	ands	r5, r4
 8003686:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 8003688:	6016      	str	r6, [r2, #0]
    position++;
 800368a:	3301      	adds	r3, #1
 800368c:	e75d      	b.n	800354a <HAL_GPIO_Init+0x12>
 800368e:	46c0      	nop			; (mov r8, r8)
 8003690:	afffe400 	.word	0xafffe400
 8003694:	40021000 	.word	0x40021000
 8003698:	40010000 	.word	0x40010000
 800369c:	50000400 	.word	0x50000400
 80036a0:	50000800 	.word	0x50000800
 80036a4:	40010400 	.word	0x40010400

080036a8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036a8:	6900      	ldr	r0, [r0, #16]
 80036aa:	4008      	ands	r0, r1
 80036ac:	1e43      	subs	r3, r0, #1
 80036ae:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80036b0:	b2c0      	uxtb	r0, r0
}
 80036b2:	4770      	bx	lr

080036b4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036b4:	2a00      	cmp	r2, #0
 80036b6:	d001      	beq.n	80036bc <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036b8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80036ba:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80036bc:	6281      	str	r1, [r0, #40]	; 0x28
}
 80036be:	e7fc      	b.n	80036ba <HAL_GPIO_WritePin+0x6>

080036c0 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80036c0:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036c2:	0013      	movs	r3, r2
 80036c4:	400b      	ands	r3, r1
 80036c6:	041b      	lsls	r3, r3, #16
 80036c8:	4391      	bics	r1, r2
 80036ca:	4319      	orrs	r1, r3
 80036cc:	6181      	str	r1, [r0, #24]
}
 80036ce:	4770      	bx	lr

080036d0 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036d0:	6803      	ldr	r3, [r0, #0]
 80036d2:	699a      	ldr	r2, [r3, #24]
 80036d4:	0792      	lsls	r2, r2, #30
 80036d6:	d501      	bpl.n	80036dc <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80036d8:	2200      	movs	r2, #0
 80036da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036dc:	2201      	movs	r2, #1
 80036de:	6999      	ldr	r1, [r3, #24]
 80036e0:	4211      	tst	r1, r2
 80036e2:	d102      	bne.n	80036ea <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80036e4:	6999      	ldr	r1, [r3, #24]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	619a      	str	r2, [r3, #24]
  }
}
 80036ea:	4770      	bx	lr

080036ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80036ec:	b530      	push	{r4, r5, lr}
 80036ee:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80036f0:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036f2:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036f4:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036f6:	0589      	lsls	r1, r1, #22
 80036f8:	431a      	orrs	r2, r3
 80036fa:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 80036fc:	4b05      	ldr	r3, [pc, #20]	; (8003714 <I2C_TransferConfig+0x28>)
 80036fe:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003700:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8003702:	0d64      	lsrs	r4, r4, #21
 8003704:	431c      	orrs	r4, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003706:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8003708:	43a5      	bics	r5, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800370a:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 800370c:	432a      	orrs	r2, r5
 800370e:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003710:	bd30      	pop	{r4, r5, pc}
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	03ff63ff 	.word	0x03ff63ff

08003718 <I2C_IsErrorOccurred>:
{
 8003718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800371a:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 800371c:	6802      	ldr	r2, [r0, #0]
{
 800371e:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 8003720:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003722:	2310      	movs	r3, #16
 8003724:	000f      	movs	r7, r1
{
 8003726:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003728:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 800372a:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800372c:	4219      	tst	r1, r3
 800372e:	d00e      	beq.n	800374e <I2C_IsErrorOccurred+0x36>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003730:	2720      	movs	r7, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003732:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 8003734:	9000      	str	r0, [sp, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003736:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003738:	6823      	ldr	r3, [r4, #0]
 800373a:	699a      	ldr	r2, [r3, #24]
 800373c:	423a      	tst	r2, r7
 800373e:	d164      	bne.n	800380a <I2C_IsErrorOccurred+0xf2>
 8003740:	9a01      	ldr	r2, [sp, #4]
 8003742:	2a00      	cmp	r2, #0
 8003744:	d032      	beq.n	80037ac <I2C_IsErrorOccurred+0x94>
    error_code |= HAL_I2C_ERROR_AF;
 8003746:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8003748:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 800374a:	9b00      	ldr	r3, [sp, #0]
 800374c:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800374e:	2180      	movs	r1, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 8003750:	6823      	ldr	r3, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003752:	0049      	lsls	r1, r1, #1
  itflag = hi2c->Instance->ISR;
 8003754:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003756:	420a      	tst	r2, r1
 8003758:	d002      	beq.n	8003760 <I2C_IsErrorOccurred+0x48>
    error_code |= HAL_I2C_ERROR_BERR;
 800375a:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800375c:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 800375e:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003760:	2180      	movs	r1, #128	; 0x80
 8003762:	00c9      	lsls	r1, r1, #3
 8003764:	420a      	tst	r2, r1
 8003766:	d003      	beq.n	8003770 <I2C_IsErrorOccurred+0x58>
    error_code |= HAL_I2C_ERROR_OVR;
 8003768:	2008      	movs	r0, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800376a:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 800376c:	4307      	orrs	r7, r0
    status = HAL_ERROR;
 800376e:	3807      	subs	r0, #7
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003770:	2180      	movs	r1, #128	; 0x80
 8003772:	0089      	lsls	r1, r1, #2
 8003774:	420a      	tst	r2, r1
 8003776:	d04d      	beq.n	8003814 <I2C_IsErrorOccurred+0xfc>
    error_code |= HAL_I2C_ERROR_ARLO;
 8003778:	2202      	movs	r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800377a:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 800377c:	4317      	orrs	r7, r2
    I2C_Flush_TXDR(hi2c);
 800377e:	0020      	movs	r0, r4
 8003780:	f7ff ffa6 	bl	80036d0 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003784:	6822      	ldr	r2, [r4, #0]
 8003786:	4925      	ldr	r1, [pc, #148]	; (800381c <I2C_IsErrorOccurred+0x104>)
 8003788:	6853      	ldr	r3, [r2, #4]
 800378a:	400b      	ands	r3, r1
 800378c:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800378e:	0023      	movs	r3, r4
 8003790:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 8003792:	6c60      	ldr	r0, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003794:	3341      	adds	r3, #65	; 0x41
    hi2c->ErrorCode |= error_code;
 8003796:	4307      	orrs	r7, r0
 8003798:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800379a:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800379c:	0022      	movs	r2, r4
 800379e:	2300      	movs	r3, #0
 80037a0:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 80037a2:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a4:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80037a6:	2001      	movs	r0, #1
 80037a8:	7023      	strb	r3, [r4, #0]
 80037aa:	e035      	b.n	8003818 <I2C_IsErrorOccurred+0x100>
      if (Timeout != HAL_MAX_DELAY)
 80037ac:	1c72      	adds	r2, r6, #1
 80037ae:	d0c4      	beq.n	800373a <I2C_IsErrorOccurred+0x22>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037b0:	f7ff fbc2 	bl	8002f38 <HAL_GetTick>
 80037b4:	1b40      	subs	r0, r0, r5
 80037b6:	42b0      	cmp	r0, r6
 80037b8:	d801      	bhi.n	80037be <I2C_IsErrorOccurred+0xa6>
 80037ba:	2e00      	cmp	r6, #0
 80037bc:	d1bc      	bne.n	8003738 <I2C_IsErrorOccurred+0x20>
          tmp2 = hi2c->Mode;
 80037be:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80037c0:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 80037c2:	3242      	adds	r2, #66	; 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80037c4:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 80037c6:	7811      	ldrb	r1, [r2, #0]
 80037c8:	b2ca      	uxtb	r2, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80037ca:	2180      	movs	r1, #128	; 0x80
          tmp2 = hi2c->Mode;
 80037cc:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80037ce:	699a      	ldr	r2, [r3, #24]
 80037d0:	0209      	lsls	r1, r1, #8
 80037d2:	420a      	tst	r2, r1
 80037d4:	d00c      	beq.n	80037f0 <I2C_IsErrorOccurred+0xd8>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80037d6:	2280      	movs	r2, #128	; 0x80
 80037d8:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80037da:	4210      	tst	r0, r2
 80037dc:	d108      	bne.n	80037f0 <I2C_IsErrorOccurred+0xd8>
              (tmp1 != I2C_CR2_STOP) && \
 80037de:	4661      	mov	r1, ip
 80037e0:	2920      	cmp	r1, #32
 80037e2:	d005      	beq.n	80037f0 <I2C_IsErrorOccurred+0xd8>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80037e4:	6859      	ldr	r1, [r3, #4]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80037ea:	f7ff fba5 	bl	8002f38 <HAL_GetTick>
 80037ee:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037f0:	6823      	ldr	r3, [r4, #0]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	423b      	tst	r3, r7
 80037f6:	d19f      	bne.n	8003738 <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80037f8:	f7ff fb9e 	bl	8002f38 <HAL_GetTick>
 80037fc:	1b40      	subs	r0, r0, r5
 80037fe:	2819      	cmp	r0, #25
 8003800:	d9f6      	bls.n	80037f0 <I2C_IsErrorOccurred+0xd8>
              status = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003804:	9700      	str	r7, [sp, #0]
              status = HAL_ERROR;
 8003806:	9301      	str	r3, [sp, #4]
 8003808:	e796      	b.n	8003738 <I2C_IsErrorOccurred+0x20>
    if (status == HAL_OK)
 800380a:	9a01      	ldr	r2, [sp, #4]
 800380c:	2a00      	cmp	r2, #0
 800380e:	d19a      	bne.n	8003746 <I2C_IsErrorOccurred+0x2e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003810:	61df      	str	r7, [r3, #28]
 8003812:	e798      	b.n	8003746 <I2C_IsErrorOccurred+0x2e>
  if (status != HAL_OK)
 8003814:	2800      	cmp	r0, #0
 8003816:	d1b2      	bne.n	800377e <I2C_IsErrorOccurred+0x66>
}
 8003818:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800381a:	46c0      	nop			; (mov r8, r8)
 800381c:	fe00e800 	.word	0xfe00e800

08003820 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003822:	0004      	movs	r4, r0
 8003824:	000d      	movs	r5, r1
 8003826:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003828:	2702      	movs	r7, #2
 800382a:	6823      	ldr	r3, [r4, #0]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	423b      	tst	r3, r7
 8003830:	d001      	beq.n	8003836 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8003832:	2000      	movs	r0, #0
}
 8003834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003836:	0032      	movs	r2, r6
 8003838:	0029      	movs	r1, r5
 800383a:	0020      	movs	r0, r4
 800383c:	f7ff ff6c 	bl	8003718 <I2C_IsErrorOccurred>
 8003840:	2800      	cmp	r0, #0
 8003842:	d118      	bne.n	8003876 <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8003844:	1c6b      	adds	r3, r5, #1
 8003846:	d0f0      	beq.n	800382a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003848:	f7ff fb76 	bl	8002f38 <HAL_GetTick>
 800384c:	1b80      	subs	r0, r0, r6
 800384e:	42a8      	cmp	r0, r5
 8003850:	d801      	bhi.n	8003856 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 8003852:	2d00      	cmp	r5, #0
 8003854:	d1e9      	bne.n	800382a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003856:	6823      	ldr	r3, [r4, #0]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	001a      	movs	r2, r3
 800385c:	403a      	ands	r2, r7
 800385e:	423b      	tst	r3, r7
 8003860:	d1e3      	bne.n	800382a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003862:	2120      	movs	r1, #32
 8003864:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003866:	430b      	orrs	r3, r1
 8003868:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800386a:	0023      	movs	r3, r4
          __HAL_UNLOCK(hi2c);
 800386c:	3440      	adds	r4, #64	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 800386e:	3341      	adds	r3, #65	; 0x41
 8003870:	7019      	strb	r1, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003872:	705a      	strb	r2, [r3, #1]
          __HAL_UNLOCK(hi2c);
 8003874:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8003876:	2001      	movs	r0, #1
 8003878:	e7dc      	b.n	8003834 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

0800387a <I2C_WaitOnFlagUntilTimeout>:
{
 800387a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387c:	0004      	movs	r4, r0
 800387e:	000d      	movs	r5, r1
 8003880:	0017      	movs	r7, r2
 8003882:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003884:	6822      	ldr	r2, [r4, #0]
 8003886:	6993      	ldr	r3, [r2, #24]
 8003888:	402b      	ands	r3, r5
 800388a:	1b5b      	subs	r3, r3, r5
 800388c:	4259      	negs	r1, r3
 800388e:	414b      	adcs	r3, r1
 8003890:	42bb      	cmp	r3, r7
 8003892:	d001      	beq.n	8003898 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8003894:	2000      	movs	r0, #0
 8003896:	e01f      	b.n	80038d8 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8003898:	1c73      	adds	r3, r6, #1
 800389a:	d0f4      	beq.n	8003886 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800389c:	f7ff fb4c 	bl	8002f38 <HAL_GetTick>
 80038a0:	9b06      	ldr	r3, [sp, #24]
 80038a2:	1ac0      	subs	r0, r0, r3
 80038a4:	42b0      	cmp	r0, r6
 80038a6:	d801      	bhi.n	80038ac <I2C_WaitOnFlagUntilTimeout+0x32>
 80038a8:	2e00      	cmp	r6, #0
 80038aa:	d1eb      	bne.n	8003884 <I2C_WaitOnFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80038ac:	6823      	ldr	r3, [r4, #0]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	402b      	ands	r3, r5
 80038b2:	1b5b      	subs	r3, r3, r5
 80038b4:	425a      	negs	r2, r3
 80038b6:	4153      	adcs	r3, r2
 80038b8:	42bb      	cmp	r3, r7
 80038ba:	d1e3      	bne.n	8003884 <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038bc:	2220      	movs	r2, #32
 80038be:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 80038c0:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038c2:	4313      	orrs	r3, r2
 80038c4:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038c6:	0023      	movs	r3, r4
 80038c8:	3341      	adds	r3, #65	; 0x41
 80038ca:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038cc:	0022      	movs	r2, r4
 80038ce:	2300      	movs	r3, #0
 80038d0:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 80038d2:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d4:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 80038d6:	7023      	strb	r3, [r4, #0]
}
 80038d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080038da <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80038da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038dc:	0004      	movs	r4, r0
 80038de:	000e      	movs	r6, r1
 80038e0:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038e2:	2520      	movs	r5, #32
 80038e4:	6823      	ldr	r3, [r4, #0]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	422b      	tst	r3, r5
 80038ea:	d001      	beq.n	80038f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 80038ec:	2000      	movs	r0, #0
}
 80038ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038f0:	003a      	movs	r2, r7
 80038f2:	0031      	movs	r1, r6
 80038f4:	0020      	movs	r0, r4
 80038f6:	f7ff ff0f 	bl	8003718 <I2C_IsErrorOccurred>
 80038fa:	2800      	cmp	r0, #0
 80038fc:	d115      	bne.n	800392a <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fe:	f7ff fb1b 	bl	8002f38 <HAL_GetTick>
 8003902:	1bc0      	subs	r0, r0, r7
 8003904:	42b0      	cmp	r0, r6
 8003906:	d801      	bhi.n	800390c <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8003908:	2e00      	cmp	r6, #0
 800390a:	d1eb      	bne.n	80038e4 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800390c:	6823      	ldr	r3, [r4, #0]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	001a      	movs	r2, r3
 8003912:	402a      	ands	r2, r5
 8003914:	422b      	tst	r3, r5
 8003916:	d1e5      	bne.n	80038e4 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003918:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800391a:	432b      	orrs	r3, r5
 800391c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800391e:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 8003920:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8003922:	3341      	adds	r3, #65	; 0x41
 8003924:	701d      	strb	r5, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003926:	705a      	strb	r2, [r3, #1]
        __HAL_UNLOCK(hi2c);
 8003928:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 800392a:	2001      	movs	r0, #1
 800392c:	e7df      	b.n	80038ee <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
	...

08003930 <HAL_I2C_Init>:
{
 8003930:	b570      	push	{r4, r5, r6, lr}
 8003932:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003934:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8003936:	2c00      	cmp	r4, #0
 8003938:	d03f      	beq.n	80039ba <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800393a:	0025      	movs	r5, r4
 800393c:	3541      	adds	r5, #65	; 0x41
 800393e:	782b      	ldrb	r3, [r5, #0]
 8003940:	b2da      	uxtb	r2, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d105      	bne.n	8003952 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8003946:	0023      	movs	r3, r4
 8003948:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 800394a:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 800394c:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 800394e:	f7ff f9f1 	bl	8002d34 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003952:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8003954:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003956:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8003958:	6823      	ldr	r3, [r4, #0]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800395a:	481d      	ldr	r0, [pc, #116]	; (80039d0 <HAL_I2C_Init+0xa0>)
  __HAL_I2C_DISABLE(hi2c);
 800395c:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800395e:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8003960:	438a      	bics	r2, r1
 8003962:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003964:	6861      	ldr	r1, [r4, #4]
 8003966:	4a1b      	ldr	r2, [pc, #108]	; (80039d4 <HAL_I2C_Init+0xa4>)
 8003968:	400a      	ands	r2, r1
 800396a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	4002      	ands	r2, r0
 8003970:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003972:	68e2      	ldr	r2, [r4, #12]
 8003974:	2a01      	cmp	r2, #1
 8003976:	d121      	bne.n	80039bc <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003978:	2180      	movs	r1, #128	; 0x80
 800397a:	0209      	lsls	r1, r1, #8
 800397c:	4331      	orrs	r1, r6
 800397e:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	4915      	ldr	r1, [pc, #84]	; (80039d8 <HAL_I2C_Init+0xa8>)
 8003984:	4311      	orrs	r1, r2
 8003986:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003988:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800398a:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800398c:	4002      	ands	r2, r0
 800398e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003990:	6922      	ldr	r2, [r4, #16]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003992:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003994:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003996:	69a1      	ldr	r1, [r4, #24]
 8003998:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800399a:	430a      	orrs	r2, r1
 800399c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800399e:	6a21      	ldr	r1, [r4, #32]
 80039a0:	69e2      	ldr	r2, [r4, #28]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80039a6:	2201      	movs	r2, #1
 80039a8:	6819      	ldr	r1, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80039ae:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039b0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80039b2:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80039b4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b6:	3442      	adds	r4, #66	; 0x42
 80039b8:	7020      	strb	r0, [r4, #0]
}
 80039ba:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80039bc:	2184      	movs	r1, #132	; 0x84
 80039be:	0209      	lsls	r1, r1, #8
 80039c0:	4331      	orrs	r1, r6
 80039c2:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039c4:	2a02      	cmp	r2, #2
 80039c6:	d1db      	bne.n	8003980 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80039c8:	2280      	movs	r2, #128	; 0x80
 80039ca:	0112      	lsls	r2, r2, #4
 80039cc:	605a      	str	r2, [r3, #4]
 80039ce:	e7d7      	b.n	8003980 <HAL_I2C_Init+0x50>
 80039d0:	ffff7fff 	.word	0xffff7fff
 80039d4:	f0ffffff 	.word	0xf0ffffff
 80039d8:	02008000 	.word	0x02008000

080039dc <HAL_I2C_Mem_Read>:
{
 80039dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039de:	b089      	sub	sp, #36	; 0x24
 80039e0:	9304      	str	r3, [sp, #16]
 80039e2:	ab0e      	add	r3, sp, #56	; 0x38
 80039e4:	9203      	str	r2, [sp, #12]
 80039e6:	cb04      	ldmia	r3!, {r2}
 80039e8:	0004      	movs	r4, r0
 80039ea:	881b      	ldrh	r3, [r3, #0]
 80039ec:	9205      	str	r2, [sp, #20]
 80039ee:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80039f0:	0003      	movs	r3, r0
 80039f2:	3341      	adds	r3, #65	; 0x41
 80039f4:	9307      	str	r3, [sp, #28]
 80039f6:	781b      	ldrb	r3, [r3, #0]
{
 80039f8:	000f      	movs	r7, r1
    return HAL_BUSY;
 80039fa:	2002      	movs	r0, #2
{
 80039fc:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 80039fe:	2b20      	cmp	r3, #32
 8003a00:	d108      	bne.n	8003a14 <HAL_I2C_Mem_Read+0x38>
    if ((pData == NULL) || (Size == 0U))
 8003a02:	2a00      	cmp	r2, #0
 8003a04:	d002      	beq.n	8003a0c <HAL_I2C_Mem_Read+0x30>
 8003a06:	9b06      	ldr	r3, [sp, #24]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d105      	bne.n	8003a18 <HAL_I2C_Mem_Read+0x3c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a0c:	2380      	movs	r3, #128	; 0x80
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8003a12:	2001      	movs	r0, #1
}
 8003a14:	b009      	add	sp, #36	; 0x24
 8003a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8003a18:	0023      	movs	r3, r4
 8003a1a:	3340      	adds	r3, #64	; 0x40
 8003a1c:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8003a1e:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 8003a20:	2a01      	cmp	r2, #1
 8003a22:	d0f7      	beq.n	8003a14 <HAL_I2C_Mem_Read+0x38>
 8003a24:	2201      	movs	r2, #1
 8003a26:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003a28:	f7ff fa86 	bl	8002f38 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a2c:	2180      	movs	r1, #128	; 0x80
 8003a2e:	2319      	movs	r3, #25
 8003a30:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8003a32:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a34:	2201      	movs	r2, #1
 8003a36:	0020      	movs	r0, r4
 8003a38:	0209      	lsls	r1, r1, #8
 8003a3a:	f7ff ff1e 	bl	800387a <I2C_WaitOnFlagUntilTimeout>
 8003a3e:	1e03      	subs	r3, r0, #0
 8003a40:	d1e7      	bne.n	8003a12 <HAL_I2C_Mem_Read+0x36>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a42:	2222      	movs	r2, #34	; 0x22
 8003a44:	9907      	ldr	r1, [sp, #28]
 8003a46:	700a      	strb	r2, [r1, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a48:	0022      	movs	r2, r4
 8003a4a:	3242      	adds	r2, #66	; 0x42
 8003a4c:	9207      	str	r2, [sp, #28]
 8003a4e:	2240      	movs	r2, #64	; 0x40
 8003a50:	9907      	ldr	r1, [sp, #28]
 8003a52:	700a      	strb	r2, [r1, #0]
    hi2c->pBuffPtr  = pData;
 8003a54:	9a05      	ldr	r2, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a56:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003a58:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a5a:	9a06      	ldr	r2, [sp, #24]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003a5c:	494d      	ldr	r1, [pc, #308]	; (8003b94 <HAL_I2C_Mem_Read+0x1b8>)
    hi2c->XferCount = Size;
 8003a5e:	8562      	strh	r2, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003a60:	466a      	mov	r2, sp
    hi2c->XferISR   = NULL;
 8003a62:	6360      	str	r0, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003a64:	7c12      	ldrb	r2, [r2, #16]
 8003a66:	0020      	movs	r0, r4
 8003a68:	9100      	str	r1, [sp, #0]
 8003a6a:	0039      	movs	r1, r7
 8003a6c:	f7ff fe3e 	bl	80036ec <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a70:	002a      	movs	r2, r5
 8003a72:	0031      	movs	r1, r6
 8003a74:	0020      	movs	r0, r4
 8003a76:	f7ff fed3 	bl	8003820 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a7a:	2800      	cmp	r0, #0
 8003a7c:	d127      	bne.n	8003ace <HAL_I2C_Mem_Read+0xf2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a7e:	9a04      	ldr	r2, [sp, #16]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a80:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a82:	2a01      	cmp	r2, #1
 8003a84:	d117      	bne.n	8003ab6 <HAL_I2C_Mem_Read+0xda>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a86:	466a      	mov	r2, sp
 8003a88:	7b12      	ldrb	r2, [r2, #12]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003a8a:	2140      	movs	r1, #64	; 0x40
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a8c:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003a8e:	0020      	movs	r0, r4
 8003a90:	0033      	movs	r3, r6
 8003a92:	2200      	movs	r2, #0
 8003a94:	9500      	str	r5, [sp, #0]
 8003a96:	f7ff fef0 	bl	800387a <I2C_WaitOnFlagUntilTimeout>
 8003a9a:	2800      	cmp	r0, #0
 8003a9c:	d117      	bne.n	8003ace <HAL_I2C_Mem_Read+0xf2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a9e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003aa0:	4b3d      	ldr	r3, [pc, #244]	; (8003b98 <HAL_I2C_Mem_Read+0x1bc>)
 8003aa2:	2aff      	cmp	r2, #255	; 0xff
 8003aa4:	d817      	bhi.n	8003ad6 <HAL_I2C_Mem_Read+0xfa>
      hi2c->XferSize = hi2c->XferCount;
 8003aa6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003aa8:	b292      	uxth	r2, r2
 8003aaa:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	2380      	movs	r3, #128	; 0x80
 8003ab0:	b2d2      	uxtb	r2, r2
 8003ab2:	049b      	lsls	r3, r3, #18
 8003ab4:	e014      	b.n	8003ae0 <HAL_I2C_Mem_Read+0x104>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ab6:	9a03      	ldr	r2, [sp, #12]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ab8:	0031      	movs	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003aba:	0a12      	lsrs	r2, r2, #8
 8003abc:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003abe:	0020      	movs	r0, r4
 8003ac0:	002a      	movs	r2, r5
 8003ac2:	f7ff fead 	bl	8003820 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ac6:	2800      	cmp	r0, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_I2C_Mem_Read+0xf2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003aca:	6823      	ldr	r3, [r4, #0]
 8003acc:	e7db      	b.n	8003a86 <HAL_I2C_Mem_Read+0xaa>
      __HAL_UNLOCK(hi2c);
 8003ace:	2300      	movs	r3, #0
 8003ad0:	3440      	adds	r4, #64	; 0x40
 8003ad2:	7023      	strb	r3, [r4, #0]
 8003ad4:	e79d      	b.n	8003a12 <HAL_I2C_Mem_Read+0x36>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ad6:	22ff      	movs	r2, #255	; 0xff
 8003ad8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	2380      	movs	r3, #128	; 0x80
 8003ade:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ae0:	0039      	movs	r1, r7
 8003ae2:	0020      	movs	r0, r4
 8003ae4:	f7ff fe02 	bl	80036ec <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003ae8:	0033      	movs	r3, r6
 8003aea:	2200      	movs	r2, #0
 8003aec:	2104      	movs	r1, #4
 8003aee:	0020      	movs	r0, r4
 8003af0:	9500      	str	r5, [sp, #0]
 8003af2:	f7ff fec2 	bl	800387a <I2C_WaitOnFlagUntilTimeout>
 8003af6:	2800      	cmp	r0, #0
 8003af8:	d000      	beq.n	8003afc <HAL_I2C_Mem_Read+0x120>
 8003afa:	e78a      	b.n	8003a12 <HAL_I2C_Mem_Read+0x36>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003afc:	6823      	ldr	r3, [r4, #0]
 8003afe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8003b04:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003b06:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003b08:	3301      	adds	r3, #1
 8003b0a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003b0c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003b0e:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8003b10:	3b01      	subs	r3, #1
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b16:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003b18:	b292      	uxth	r2, r2
 8003b1a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d017      	beq.n	8003b50 <HAL_I2C_Mem_Read+0x174>
 8003b20:	2a00      	cmp	r2, #0
 8003b22:	d115      	bne.n	8003b50 <HAL_I2C_Mem_Read+0x174>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b24:	0033      	movs	r3, r6
 8003b26:	2180      	movs	r1, #128	; 0x80
 8003b28:	0020      	movs	r0, r4
 8003b2a:	9500      	str	r5, [sp, #0]
 8003b2c:	f7ff fea5 	bl	800387a <I2C_WaitOnFlagUntilTimeout>
 8003b30:	2800      	cmp	r0, #0
 8003b32:	d000      	beq.n	8003b36 <HAL_I2C_Mem_Read+0x15a>
 8003b34:	e76d      	b.n	8003a12 <HAL_I2C_Mem_Read+0x36>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b36:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b38:	2bff      	cmp	r3, #255	; 0xff
 8003b3a:	d923      	bls.n	8003b84 <HAL_I2C_Mem_Read+0x1a8>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b3c:	23ff      	movs	r3, #255	; 0xff
 8003b3e:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003b40:	2380      	movs	r3, #128	; 0x80
 8003b42:	22ff      	movs	r2, #255	; 0xff
 8003b44:	9000      	str	r0, [sp, #0]
 8003b46:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b48:	0039      	movs	r1, r7
 8003b4a:	0020      	movs	r0, r4
 8003b4c:	f7ff fdce 	bl	80036ec <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8003b50:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1c8      	bne.n	8003ae8 <HAL_I2C_Mem_Read+0x10c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b56:	002a      	movs	r2, r5
 8003b58:	0031      	movs	r1, r6
 8003b5a:	0020      	movs	r0, r4
 8003b5c:	f7ff febd 	bl	80038da <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b60:	2800      	cmp	r0, #0
 8003b62:	d000      	beq.n	8003b66 <HAL_I2C_Mem_Read+0x18a>
 8003b64:	e755      	b.n	8003a12 <HAL_I2C_Mem_Read+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b66:	2120      	movs	r1, #32
 8003b68:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8003b6a:	4d0c      	ldr	r5, [pc, #48]	; (8003b9c <HAL_I2C_Mem_Read+0x1c0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b6c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	402a      	ands	r2, r5
 8003b72:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003b74:	0023      	movs	r3, r4
 8003b76:	3341      	adds	r3, #65	; 0x41
 8003b78:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b7a:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 8003b7c:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b7e:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8003b80:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8003b82:	e747      	b.n	8003a14 <HAL_I2C_Mem_Read+0x38>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b84:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8003b86:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b88:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8003b8a:	b292      	uxth	r2, r2
 8003b8c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	9000      	str	r0, [sp, #0]
 8003b92:	e7d9      	b.n	8003b48 <HAL_I2C_Mem_Read+0x16c>
 8003b94:	80002000 	.word	0x80002000
 8003b98:	80002400 	.word	0x80002400
 8003b9c:	fe00e800 	.word	0xfe00e800

08003ba0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ba2:	0004      	movs	r4, r0
 8003ba4:	3441      	adds	r4, #65	; 0x41
 8003ba6:	7822      	ldrb	r2, [r4, #0]
{
 8003ba8:	0003      	movs	r3, r0
 8003baa:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003bac:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bae:	b2d6      	uxtb	r6, r2
 8003bb0:	2a20      	cmp	r2, #32
 8003bb2:	d118      	bne.n	8003be6 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8003bb4:	001d      	movs	r5, r3
 8003bb6:	3540      	adds	r5, #64	; 0x40
 8003bb8:	782a      	ldrb	r2, [r5, #0]
 8003bba:	2a01      	cmp	r2, #1
 8003bbc:	d013      	beq.n	8003be6 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bbe:	2224      	movs	r2, #36	; 0x24
 8003bc0:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3a23      	subs	r2, #35	; 0x23
 8003bc6:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bc8:	4807      	ldr	r0, [pc, #28]	; (8003be8 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8003bca:	4391      	bics	r1, r2
 8003bcc:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bce:	6819      	ldr	r1, [r3, #0]
 8003bd0:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 8003bd2:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bd4:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8003bd6:	6819      	ldr	r1, [r3, #0]
 8003bd8:	4339      	orrs	r1, r7
 8003bda:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003bdc:	6819      	ldr	r1, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003be2:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8003be4:	7028      	strb	r0, [r5, #0]
  }
}
 8003be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003be8:	ffffefff 	.word	0xffffefff

08003bec <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bec:	0002      	movs	r2, r0
{
 8003bee:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bf0:	3241      	adds	r2, #65	; 0x41
 8003bf2:	7814      	ldrb	r4, [r2, #0]
{
 8003bf4:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bf6:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003bf8:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bfa:	2c20      	cmp	r4, #32
 8003bfc:	d117      	bne.n	8003c2e <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8003bfe:	001c      	movs	r4, r3
 8003c00:	3440      	adds	r4, #64	; 0x40
 8003c02:	7826      	ldrb	r6, [r4, #0]
 8003c04:	2e01      	cmp	r6, #1
 8003c06:	d012      	beq.n	8003c2e <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c08:	3022      	adds	r0, #34	; 0x22
 8003c0a:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	3823      	subs	r0, #35	; 0x23
 8003c10:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8003c12:	4f07      	ldr	r7, [pc, #28]	; (8003c30 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8003c14:	4386      	bics	r6, r0
 8003c16:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8003c18:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 8003c1a:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8003c1c:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8003c1e:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8003c20:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003c22:	6819      	ldr	r1, [r3, #0]
 8003c24:	4308      	orrs	r0, r1
 8003c26:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8003c28:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003c2a:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8003c2c:	7020      	strb	r0, [r4, #0]
  }
}
 8003c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c30:	fffff0ff 	.word	0xfffff0ff

08003c34 <HAL_I2CEx_EnableFastModePlus>:
{
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c34:	2201      	movs	r2, #1
 8003c36:	4904      	ldr	r1, [pc, #16]	; (8003c48 <HAL_I2CEx_EnableFastModePlus+0x14>)
 8003c38:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	634a      	str	r2, [r1, #52]	; 0x34

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR2, (uint32_t)ConfigFastModePlus);
 8003c3e:	4a03      	ldr	r2, [pc, #12]	; (8003c4c <HAL_I2CEx_EnableFastModePlus+0x18>)
 8003c40:	6853      	ldr	r3, [r2, #4]
 8003c42:	4303      	orrs	r3, r0
 8003c44:	6053      	str	r3, [r2, #4]
}
 8003c46:	4770      	bx	lr
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	40010000 	.word	0x40010000

08003c50 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c50:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8003c52:	4b1d      	ldr	r3, [pc, #116]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x78>)
{
 8003c54:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8003c56:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8003c58:	4022      	ands	r2, r4
 8003c5a:	2a08      	cmp	r2, #8
 8003c5c:	d031      	beq.n	8003cc2 <HAL_RCC_GetSysClockFreq+0x72>
 8003c5e:	2a0c      	cmp	r2, #12
 8003c60:	d009      	beq.n	8003c76 <HAL_RCC_GetSysClockFreq+0x26>
 8003c62:	2a04      	cmp	r2, #4
 8003c64:	d125      	bne.n	8003cb2 <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003c66:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8003c68:	4b18      	ldr	r3, [pc, #96]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003c6a:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8003c6c:	17c0      	asrs	r0, r0, #31
 8003c6e:	4018      	ands	r0, r3
 8003c70:	4b17      	ldr	r3, [pc, #92]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x80>)
 8003c72:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8003c74:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003c76:	02a2      	lsls	r2, r4, #10
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003c78:	4816      	ldr	r0, [pc, #88]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x84>)
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003c7a:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003c7c:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c7e:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003c80:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c82:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003c84:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c86:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003c88:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c8a:	4211      	tst	r1, r2
 8003c8c:	d009      	beq.n	8003ca2 <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003c8e:	4a12      	ldr	r2, [pc, #72]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x88>)
 8003c90:	2300      	movs	r3, #0
 8003c92:	2100      	movs	r1, #0
 8003c94:	f7fc faee 	bl	8000274 <__aeabi_lmul>
 8003c98:	0022      	movs	r2, r4
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	f7fc faca 	bl	8000234 <__aeabi_uldivmod>
 8003ca0:	e7e8      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	2310      	movs	r3, #16
 8003ca6:	421a      	tst	r2, r3
 8003ca8:	d001      	beq.n	8003cae <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003caa:	4a0c      	ldr	r2, [pc, #48]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x8c>)
 8003cac:	e7f0      	b.n	8003c90 <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003cae:	4a08      	ldr	r2, [pc, #32]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x80>)
 8003cb0:	e7ee      	b.n	8003c90 <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003cb2:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003cb4:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003cb6:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003cb8:	041b      	lsls	r3, r3, #16
 8003cba:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	4098      	lsls	r0, r3
      break;
 8003cc0:	e7d8      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 8003cc2:	4805      	ldr	r0, [pc, #20]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x88>)
 8003cc4:	e7d6      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x24>
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	ff48e500 	.word	0xff48e500
 8003cd0:	00f42400 	.word	0x00f42400
 8003cd4:	080060a8 	.word	0x080060a8
 8003cd8:	007a1200 	.word	0x007a1200
 8003cdc:	003d0900 	.word	0x003d0900

08003ce0 <HAL_RCC_OscConfig>:
{
 8003ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ce2:	0005      	movs	r5, r0
 8003ce4:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 8003ce6:	2800      	cmp	r0, #0
 8003ce8:	d056      	beq.n	8003d98 <HAL_RCC_OscConfig+0xb8>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cea:	230c      	movs	r3, #12
 8003cec:	4cb6      	ldr	r4, [pc, #728]	; (8003fc8 <HAL_RCC_OscConfig+0x2e8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cee:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cf0:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cf2:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cf4:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cf6:	2380      	movs	r3, #128	; 0x80
 8003cf8:	025b      	lsls	r3, r3, #9
 8003cfa:	0019      	movs	r1, r3
 8003cfc:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cfe:	07d2      	lsls	r2, r2, #31
 8003d00:	d43e      	bmi.n	8003d80 <HAL_RCC_OscConfig+0xa0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d02:	682b      	ldr	r3, [r5, #0]
 8003d04:	079b      	lsls	r3, r3, #30
 8003d06:	d500      	bpl.n	8003d0a <HAL_RCC_OscConfig+0x2a>
 8003d08:	e087      	b.n	8003e1a <HAL_RCC_OscConfig+0x13a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d0a:	682b      	ldr	r3, [r5, #0]
 8003d0c:	06db      	lsls	r3, r3, #27
 8003d0e:	d529      	bpl.n	8003d64 <HAL_RCC_OscConfig+0x84>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d10:	2e00      	cmp	r6, #0
 8003d12:	d000      	beq.n	8003d16 <HAL_RCC_OscConfig+0x36>
 8003d14:	e0e0      	b.n	8003ed8 <HAL_RCC_OscConfig+0x1f8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d16:	6823      	ldr	r3, [r4, #0]
 8003d18:	059b      	lsls	r3, r3, #22
 8003d1a:	d502      	bpl.n	8003d22 <HAL_RCC_OscConfig+0x42>
 8003d1c:	69ab      	ldr	r3, [r5, #24]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d03a      	beq.n	8003d98 <HAL_RCC_OscConfig+0xb8>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d22:	6862      	ldr	r2, [r4, #4]
 8003d24:	49a9      	ldr	r1, [pc, #676]	; (8003fcc <HAL_RCC_OscConfig+0x2ec>)
 8003d26:	6a2b      	ldr	r3, [r5, #32]
 8003d28:	400a      	ands	r2, r1
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d2e:	6861      	ldr	r1, [r4, #4]
 8003d30:	69ea      	ldr	r2, [r5, #28]
 8003d32:	0209      	lsls	r1, r1, #8
 8003d34:	0a09      	lsrs	r1, r1, #8
 8003d36:	0612      	lsls	r2, r2, #24
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003d3c:	2280      	movs	r2, #128	; 0x80
 8003d3e:	0b5b      	lsrs	r3, r3, #13
 8003d40:	3301      	adds	r3, #1
 8003d42:	0212      	lsls	r2, r2, #8
 8003d44:	409a      	lsls	r2, r3
 8003d46:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003d48:	68e1      	ldr	r1, [r4, #12]
 8003d4a:	060a      	lsls	r2, r1, #24
 8003d4c:	49a0      	ldr	r1, [pc, #640]	; (8003fd0 <HAL_RCC_OscConfig+0x2f0>)
 8003d4e:	0f12      	lsrs	r2, r2, #28
 8003d50:	5c8a      	ldrb	r2, [r1, r2]
 8003d52:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003d54:	4a9f      	ldr	r2, [pc, #636]	; (8003fd4 <HAL_RCC_OscConfig+0x2f4>)
 8003d56:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8003d58:	4b9f      	ldr	r3, [pc, #636]	; (8003fd8 <HAL_RCC_OscConfig+0x2f8>)
 8003d5a:	6818      	ldr	r0, [r3, #0]
 8003d5c:	f7ff f8a8 	bl	8002eb0 <HAL_InitTick>
        if(status != HAL_OK)
 8003d60:	2800      	cmp	r0, #0
 8003d62:	d130      	bne.n	8003dc6 <HAL_RCC_OscConfig+0xe6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d64:	682b      	ldr	r3, [r5, #0]
 8003d66:	071b      	lsls	r3, r3, #28
 8003d68:	d500      	bpl.n	8003d6c <HAL_RCC_OscConfig+0x8c>
 8003d6a:	e0ec      	b.n	8003f46 <HAL_RCC_OscConfig+0x266>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d6c:	682b      	ldr	r3, [r5, #0]
 8003d6e:	075b      	lsls	r3, r3, #29
 8003d70:	d500      	bpl.n	8003d74 <HAL_RCC_OscConfig+0x94>
 8003d72:	e10e      	b.n	8003f92 <HAL_RCC_OscConfig+0x2b2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d74:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d000      	beq.n	8003d7c <HAL_RCC_OscConfig+0x9c>
 8003d7a:	e192      	b.n	80040a2 <HAL_RCC_OscConfig+0x3c2>
  return HAL_OK;
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	e022      	b.n	8003dc6 <HAL_RCC_OscConfig+0xe6>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d80:	2e08      	cmp	r6, #8
 8003d82:	d003      	beq.n	8003d8c <HAL_RCC_OscConfig+0xac>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d84:	2e0c      	cmp	r6, #12
 8003d86:	d109      	bne.n	8003d9c <HAL_RCC_OscConfig+0xbc>
 8003d88:	2f00      	cmp	r7, #0
 8003d8a:	d007      	beq.n	8003d9c <HAL_RCC_OscConfig+0xbc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d8c:	6823      	ldr	r3, [r4, #0]
 8003d8e:	039b      	lsls	r3, r3, #14
 8003d90:	d5b7      	bpl.n	8003d02 <HAL_RCC_OscConfig+0x22>
 8003d92:	686b      	ldr	r3, [r5, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1b4      	bne.n	8003d02 <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 8003d98:	2001      	movs	r0, #1
 8003d9a:	e014      	b.n	8003dc6 <HAL_RCC_OscConfig+0xe6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d9c:	686a      	ldr	r2, [r5, #4]
 8003d9e:	428a      	cmp	r2, r1
 8003da0:	d113      	bne.n	8003dca <HAL_RCC_OscConfig+0xea>
 8003da2:	6822      	ldr	r2, [r4, #0]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003da8:	f7ff f8c6 	bl	8002f38 <HAL_GetTick>
 8003dac:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003dae:	2280      	movs	r2, #128	; 0x80
 8003db0:	6823      	ldr	r3, [r4, #0]
 8003db2:	0292      	lsls	r2, r2, #10
 8003db4:	4213      	tst	r3, r2
 8003db6:	d1a4      	bne.n	8003d02 <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003db8:	f7ff f8be 	bl	8002f38 <HAL_GetTick>
 8003dbc:	9b00      	ldr	r3, [sp, #0]
 8003dbe:	1ac0      	subs	r0, r0, r3
 8003dc0:	2864      	cmp	r0, #100	; 0x64
 8003dc2:	d9f4      	bls.n	8003dae <HAL_RCC_OscConfig+0xce>
            return HAL_TIMEOUT;
 8003dc4:	2003      	movs	r0, #3
}
 8003dc6:	b005      	add	sp, #20
 8003dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dca:	21a0      	movs	r1, #160	; 0xa0
 8003dcc:	02c9      	lsls	r1, r1, #11
 8003dce:	428a      	cmp	r2, r1
 8003dd0:	d105      	bne.n	8003dde <HAL_RCC_OscConfig+0xfe>
 8003dd2:	2280      	movs	r2, #128	; 0x80
 8003dd4:	6821      	ldr	r1, [r4, #0]
 8003dd6:	02d2      	lsls	r2, r2, #11
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	6022      	str	r2, [r4, #0]
 8003ddc:	e7e1      	b.n	8003da2 <HAL_RCC_OscConfig+0xc2>
 8003dde:	6821      	ldr	r1, [r4, #0]
 8003de0:	487e      	ldr	r0, [pc, #504]	; (8003fdc <HAL_RCC_OscConfig+0x2fc>)
 8003de2:	4001      	ands	r1, r0
 8003de4:	6021      	str	r1, [r4, #0]
 8003de6:	6821      	ldr	r1, [r4, #0]
 8003de8:	400b      	ands	r3, r1
 8003dea:	9303      	str	r3, [sp, #12]
 8003dec:	9b03      	ldr	r3, [sp, #12]
 8003dee:	497c      	ldr	r1, [pc, #496]	; (8003fe0 <HAL_RCC_OscConfig+0x300>)
 8003df0:	6823      	ldr	r3, [r4, #0]
 8003df2:	400b      	ands	r3, r1
 8003df4:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003df6:	2a00      	cmp	r2, #0
 8003df8:	d1d6      	bne.n	8003da8 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 8003dfa:	f7ff f89d 	bl	8002f38 <HAL_GetTick>
 8003dfe:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e00:	2280      	movs	r2, #128	; 0x80
 8003e02:	6823      	ldr	r3, [r4, #0]
 8003e04:	0292      	lsls	r2, r2, #10
 8003e06:	4213      	tst	r3, r2
 8003e08:	d100      	bne.n	8003e0c <HAL_RCC_OscConfig+0x12c>
 8003e0a:	e77a      	b.n	8003d02 <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e0c:	f7ff f894 	bl	8002f38 <HAL_GetTick>
 8003e10:	9b00      	ldr	r3, [sp, #0]
 8003e12:	1ac0      	subs	r0, r0, r3
 8003e14:	2864      	cmp	r0, #100	; 0x64
 8003e16:	d9f3      	bls.n	8003e00 <HAL_RCC_OscConfig+0x120>
 8003e18:	e7d4      	b.n	8003dc4 <HAL_RCC_OscConfig+0xe4>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003e1a:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8003e1c:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003e1e:	4213      	tst	r3, r2
 8003e20:	d003      	beq.n	8003e2a <HAL_RCC_OscConfig+0x14a>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003e22:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003e24:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003e26:	4311      	orrs	r1, r2
 8003e28:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e2a:	2e04      	cmp	r6, #4
 8003e2c:	d003      	beq.n	8003e36 <HAL_RCC_OscConfig+0x156>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e2e:	2e0c      	cmp	r6, #12
 8003e30:	d124      	bne.n	8003e7c <HAL_RCC_OscConfig+0x19c>
 8003e32:	2f00      	cmp	r7, #0
 8003e34:	d122      	bne.n	8003e7c <HAL_RCC_OscConfig+0x19c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003e36:	6822      	ldr	r2, [r4, #0]
 8003e38:	0752      	lsls	r2, r2, #29
 8003e3a:	d501      	bpl.n	8003e40 <HAL_RCC_OscConfig+0x160>
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0ab      	beq.n	8003d98 <HAL_RCC_OscConfig+0xb8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e40:	6861      	ldr	r1, [r4, #4]
 8003e42:	692a      	ldr	r2, [r5, #16]
 8003e44:	4867      	ldr	r0, [pc, #412]	; (8003fe4 <HAL_RCC_OscConfig+0x304>)
 8003e46:	0212      	lsls	r2, r2, #8
 8003e48:	4001      	ands	r1, r0
 8003e4a:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003e4c:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e4e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003e50:	6822      	ldr	r2, [r4, #0]
 8003e52:	438a      	bics	r2, r1
 8003e54:	4313      	orrs	r3, r2
 8003e56:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e58:	f7ff fefa 	bl	8003c50 <HAL_RCC_GetSysClockFreq>
 8003e5c:	68e3      	ldr	r3, [r4, #12]
 8003e5e:	4a5c      	ldr	r2, [pc, #368]	; (8003fd0 <HAL_RCC_OscConfig+0x2f0>)
 8003e60:	061b      	lsls	r3, r3, #24
 8003e62:	0f1b      	lsrs	r3, r3, #28
 8003e64:	5cd3      	ldrb	r3, [r2, r3]
 8003e66:	40d8      	lsrs	r0, r3
 8003e68:	4b5a      	ldr	r3, [pc, #360]	; (8003fd4 <HAL_RCC_OscConfig+0x2f4>)
 8003e6a:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 8003e6c:	4b5a      	ldr	r3, [pc, #360]	; (8003fd8 <HAL_RCC_OscConfig+0x2f8>)
 8003e6e:	6818      	ldr	r0, [r3, #0]
 8003e70:	f7ff f81e 	bl	8002eb0 <HAL_InitTick>
      if(status != HAL_OK)
 8003e74:	2800      	cmp	r0, #0
 8003e76:	d100      	bne.n	8003e7a <HAL_RCC_OscConfig+0x19a>
 8003e78:	e747      	b.n	8003d0a <HAL_RCC_OscConfig+0x2a>
 8003e7a:	e7a4      	b.n	8003dc6 <HAL_RCC_OscConfig+0xe6>
      if(hsi_state != RCC_HSI_OFF)
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d019      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003e80:	2109      	movs	r1, #9
 8003e82:	6822      	ldr	r2, [r4, #0]
 8003e84:	438a      	bics	r2, r1
 8003e86:	4313      	orrs	r3, r2
 8003e88:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003e8a:	f7ff f855 	bl	8002f38 <HAL_GetTick>
 8003e8e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e90:	2204      	movs	r2, #4
 8003e92:	6823      	ldr	r3, [r4, #0]
 8003e94:	4213      	tst	r3, r2
 8003e96:	d007      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e98:	6862      	ldr	r2, [r4, #4]
 8003e9a:	692b      	ldr	r3, [r5, #16]
 8003e9c:	4951      	ldr	r1, [pc, #324]	; (8003fe4 <HAL_RCC_OscConfig+0x304>)
 8003e9e:	021b      	lsls	r3, r3, #8
 8003ea0:	400a      	ands	r2, r1
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	6063      	str	r3, [r4, #4]
 8003ea6:	e730      	b.n	8003d0a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ea8:	f7ff f846 	bl	8002f38 <HAL_GetTick>
 8003eac:	1bc0      	subs	r0, r0, r7
 8003eae:	2802      	cmp	r0, #2
 8003eb0:	d9ee      	bls.n	8003e90 <HAL_RCC_OscConfig+0x1b0>
 8003eb2:	e787      	b.n	8003dc4 <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_HSI_DISABLE();
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	4393      	bics	r3, r2
 8003eba:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003ebc:	f7ff f83c 	bl	8002f38 <HAL_GetTick>
 8003ec0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ec2:	2204      	movs	r2, #4
 8003ec4:	6823      	ldr	r3, [r4, #0]
 8003ec6:	4213      	tst	r3, r2
 8003ec8:	d100      	bne.n	8003ecc <HAL_RCC_OscConfig+0x1ec>
 8003eca:	e71e      	b.n	8003d0a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ecc:	f7ff f834 	bl	8002f38 <HAL_GetTick>
 8003ed0:	1bc0      	subs	r0, r0, r7
 8003ed2:	2802      	cmp	r0, #2
 8003ed4:	d9f5      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x1e2>
 8003ed6:	e775      	b.n	8003dc4 <HAL_RCC_OscConfig+0xe4>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ed8:	69ab      	ldr	r3, [r5, #24]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d020      	beq.n	8003f20 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_MSI_ENABLE();
 8003ede:	2380      	movs	r3, #128	; 0x80
 8003ee0:	6822      	ldr	r2, [r4, #0]
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003ee8:	f7ff f826 	bl	8002f38 <HAL_GetTick>
 8003eec:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003eee:	2280      	movs	r2, #128	; 0x80
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	0092      	lsls	r2, r2, #2
 8003ef4:	4213      	tst	r3, r2
 8003ef6:	d00d      	beq.n	8003f14 <HAL_RCC_OscConfig+0x234>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ef8:	6863      	ldr	r3, [r4, #4]
 8003efa:	4a34      	ldr	r2, [pc, #208]	; (8003fcc <HAL_RCC_OscConfig+0x2ec>)
 8003efc:	4013      	ands	r3, r2
 8003efe:	6a2a      	ldr	r2, [r5, #32]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f04:	6862      	ldr	r2, [r4, #4]
 8003f06:	69eb      	ldr	r3, [r5, #28]
 8003f08:	0212      	lsls	r2, r2, #8
 8003f0a:	061b      	lsls	r3, r3, #24
 8003f0c:	0a12      	lsrs	r2, r2, #8
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	6063      	str	r3, [r4, #4]
 8003f12:	e727      	b.n	8003d64 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f14:	f7ff f810 	bl	8002f38 <HAL_GetTick>
 8003f18:	1bc0      	subs	r0, r0, r7
 8003f1a:	2802      	cmp	r0, #2
 8003f1c:	d9e7      	bls.n	8003eee <HAL_RCC_OscConfig+0x20e>
 8003f1e:	e751      	b.n	8003dc4 <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_MSI_DISABLE();
 8003f20:	6823      	ldr	r3, [r4, #0]
 8003f22:	4a31      	ldr	r2, [pc, #196]	; (8003fe8 <HAL_RCC_OscConfig+0x308>)
 8003f24:	4013      	ands	r3, r2
 8003f26:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003f28:	f7ff f806 	bl	8002f38 <HAL_GetTick>
 8003f2c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003f2e:	2280      	movs	r2, #128	; 0x80
 8003f30:	6823      	ldr	r3, [r4, #0]
 8003f32:	0092      	lsls	r2, r2, #2
 8003f34:	4213      	tst	r3, r2
 8003f36:	d100      	bne.n	8003f3a <HAL_RCC_OscConfig+0x25a>
 8003f38:	e714      	b.n	8003d64 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f3a:	f7fe fffd 	bl	8002f38 <HAL_GetTick>
 8003f3e:	1bc0      	subs	r0, r0, r7
 8003f40:	2802      	cmp	r0, #2
 8003f42:	d9f4      	bls.n	8003f2e <HAL_RCC_OscConfig+0x24e>
 8003f44:	e73e      	b.n	8003dc4 <HAL_RCC_OscConfig+0xe4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f46:	696a      	ldr	r2, [r5, #20]
 8003f48:	2301      	movs	r3, #1
 8003f4a:	2a00      	cmp	r2, #0
 8003f4c:	d010      	beq.n	8003f70 <HAL_RCC_OscConfig+0x290>
      __HAL_RCC_LSI_ENABLE();
 8003f4e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003f50:	4313      	orrs	r3, r2
 8003f52:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003f54:	f7fe fff0 	bl	8002f38 <HAL_GetTick>
 8003f58:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003f5e:	4213      	tst	r3, r2
 8003f60:	d000      	beq.n	8003f64 <HAL_RCC_OscConfig+0x284>
 8003f62:	e703      	b.n	8003d6c <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f64:	f7fe ffe8 	bl	8002f38 <HAL_GetTick>
 8003f68:	1bc0      	subs	r0, r0, r7
 8003f6a:	2802      	cmp	r0, #2
 8003f6c:	d9f5      	bls.n	8003f5a <HAL_RCC_OscConfig+0x27a>
 8003f6e:	e729      	b.n	8003dc4 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_LSI_DISABLE();
 8003f70:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003f72:	439a      	bics	r2, r3
 8003f74:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003f76:	f7fe ffdf 	bl	8002f38 <HAL_GetTick>
 8003f7a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003f80:	4213      	tst	r3, r2
 8003f82:	d100      	bne.n	8003f86 <HAL_RCC_OscConfig+0x2a6>
 8003f84:	e6f2      	b.n	8003d6c <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f86:	f7fe ffd7 	bl	8002f38 <HAL_GetTick>
 8003f8a:	1bc0      	subs	r0, r0, r7
 8003f8c:	2802      	cmp	r0, #2
 8003f8e:	d9f5      	bls.n	8003f7c <HAL_RCC_OscConfig+0x29c>
 8003f90:	e718      	b.n	8003dc4 <HAL_RCC_OscConfig+0xe4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f92:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003f94:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f96:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003f98:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8003f9a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f9c:	421a      	tst	r2, r3
 8003f9e:	d104      	bne.n	8003faa <HAL_RCC_OscConfig+0x2ca>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fa0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003faa:	2280      	movs	r2, #128	; 0x80
 8003fac:	4f0f      	ldr	r7, [pc, #60]	; (8003fec <HAL_RCC_OscConfig+0x30c>)
 8003fae:	0052      	lsls	r2, r2, #1
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	4213      	tst	r3, r2
 8003fb4:	d01c      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x310>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fb6:	2280      	movs	r2, #128	; 0x80
 8003fb8:	68ab      	ldr	r3, [r5, #8]
 8003fba:	0052      	lsls	r2, r2, #1
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d12b      	bne.n	8004018 <HAL_RCC_OscConfig+0x338>
 8003fc0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	6523      	str	r3, [r4, #80]	; 0x50
 8003fc6:	e04c      	b.n	8004062 <HAL_RCC_OscConfig+0x382>
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	ffff1fff 	.word	0xffff1fff
 8003fd0:	08006098 	.word	0x08006098
 8003fd4:	20000004 	.word	0x20000004
 8003fd8:	2000000c 	.word	0x2000000c
 8003fdc:	fffeffff 	.word	0xfffeffff
 8003fe0:	fffbffff 	.word	0xfffbffff
 8003fe4:	ffffe0ff 	.word	0xffffe0ff
 8003fe8:	fffffeff 	.word	0xfffffeff
 8003fec:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ff0:	2280      	movs	r2, #128	; 0x80
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	0052      	lsls	r2, r2, #1
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003ffa:	f7fe ff9d 	bl	8002f38 <HAL_GetTick>
 8003ffe:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004000:	2280      	movs	r2, #128	; 0x80
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	0052      	lsls	r2, r2, #1
 8004006:	4213      	tst	r3, r2
 8004008:	d1d5      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800400a:	f7fe ff95 	bl	8002f38 <HAL_GetTick>
 800400e:	9b01      	ldr	r3, [sp, #4]
 8004010:	1ac0      	subs	r0, r0, r3
 8004012:	2864      	cmp	r0, #100	; 0x64
 8004014:	d9f4      	bls.n	8004000 <HAL_RCC_OscConfig+0x320>
 8004016:	e6d5      	b.n	8003dc4 <HAL_RCC_OscConfig+0xe4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004018:	2b00      	cmp	r3, #0
 800401a:	d116      	bne.n	800404a <HAL_RCC_OscConfig+0x36a>
 800401c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800401e:	4a51      	ldr	r2, [pc, #324]	; (8004164 <HAL_RCC_OscConfig+0x484>)
 8004020:	4013      	ands	r3, r2
 8004022:	6523      	str	r3, [r4, #80]	; 0x50
 8004024:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004026:	4a50      	ldr	r2, [pc, #320]	; (8004168 <HAL_RCC_OscConfig+0x488>)
 8004028:	4013      	ands	r3, r2
 800402a:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800402c:	f7fe ff84 	bl	8002f38 <HAL_GetTick>
 8004030:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004032:	2280      	movs	r2, #128	; 0x80
 8004034:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004036:	0092      	lsls	r2, r2, #2
 8004038:	4213      	tst	r3, r2
 800403a:	d01a      	beq.n	8004072 <HAL_RCC_OscConfig+0x392>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800403c:	f7fe ff7c 	bl	8002f38 <HAL_GetTick>
 8004040:	4b4a      	ldr	r3, [pc, #296]	; (800416c <HAL_RCC_OscConfig+0x48c>)
 8004042:	1bc0      	subs	r0, r0, r7
 8004044:	4298      	cmp	r0, r3
 8004046:	d9f4      	bls.n	8004032 <HAL_RCC_OscConfig+0x352>
 8004048:	e6bc      	b.n	8003dc4 <HAL_RCC_OscConfig+0xe4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800404a:	21a0      	movs	r1, #160	; 0xa0
 800404c:	00c9      	lsls	r1, r1, #3
 800404e:	428b      	cmp	r3, r1
 8004050:	d118      	bne.n	8004084 <HAL_RCC_OscConfig+0x3a4>
 8004052:	2380      	movs	r3, #128	; 0x80
 8004054:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	430b      	orrs	r3, r1
 800405a:	6523      	str	r3, [r4, #80]	; 0x50
 800405c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800405e:	431a      	orrs	r2, r3
 8004060:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004062:	f7fe ff69 	bl	8002f38 <HAL_GetTick>
 8004066:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004068:	2280      	movs	r2, #128	; 0x80
 800406a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800406c:	0092      	lsls	r2, r2, #2
 800406e:	4213      	tst	r3, r2
 8004070:	d010      	beq.n	8004094 <HAL_RCC_OscConfig+0x3b4>
    if(pwrclkchanged == SET)
 8004072:	9b00      	ldr	r3, [sp, #0]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d000      	beq.n	800407a <HAL_RCC_OscConfig+0x39a>
 8004078:	e67c      	b.n	8003d74 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_PWR_CLK_DISABLE();
 800407a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800407c:	4a3c      	ldr	r2, [pc, #240]	; (8004170 <HAL_RCC_OscConfig+0x490>)
 800407e:	4013      	ands	r3, r2
 8004080:	63a3      	str	r3, [r4, #56]	; 0x38
 8004082:	e677      	b.n	8003d74 <HAL_RCC_OscConfig+0x94>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004084:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004086:	4a37      	ldr	r2, [pc, #220]	; (8004164 <HAL_RCC_OscConfig+0x484>)
 8004088:	4013      	ands	r3, r2
 800408a:	6523      	str	r3, [r4, #80]	; 0x50
 800408c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800408e:	4a36      	ldr	r2, [pc, #216]	; (8004168 <HAL_RCC_OscConfig+0x488>)
 8004090:	4013      	ands	r3, r2
 8004092:	e797      	b.n	8003fc4 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004094:	f7fe ff50 	bl	8002f38 <HAL_GetTick>
 8004098:	4b34      	ldr	r3, [pc, #208]	; (800416c <HAL_RCC_OscConfig+0x48c>)
 800409a:	1bc0      	subs	r0, r0, r7
 800409c:	4298      	cmp	r0, r3
 800409e:	d9e3      	bls.n	8004068 <HAL_RCC_OscConfig+0x388>
 80040a0:	e690      	b.n	8003dc4 <HAL_RCC_OscConfig+0xe4>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040a2:	2e0c      	cmp	r6, #12
 80040a4:	d043      	beq.n	800412e <HAL_RCC_OscConfig+0x44e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040a6:	4a33      	ldr	r2, [pc, #204]	; (8004174 <HAL_RCC_OscConfig+0x494>)
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d12e      	bne.n	800410a <HAL_RCC_OscConfig+0x42a>
        __HAL_RCC_PLL_DISABLE();
 80040ac:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80040ae:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80040b0:	4013      	ands	r3, r2
 80040b2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80040b4:	f7fe ff40 	bl	8002f38 <HAL_GetTick>
 80040b8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80040ba:	04bf      	lsls	r7, r7, #18
 80040bc:	6823      	ldr	r3, [r4, #0]
 80040be:	423b      	tst	r3, r7
 80040c0:	d11d      	bne.n	80040fe <HAL_RCC_OscConfig+0x41e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040c2:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80040c4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80040c6:	68e2      	ldr	r2, [r4, #12]
 80040c8:	430b      	orrs	r3, r1
 80040ca:	492b      	ldr	r1, [pc, #172]	; (8004178 <HAL_RCC_OscConfig+0x498>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80040cc:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040ce:	400a      	ands	r2, r1
 80040d0:	4313      	orrs	r3, r2
 80040d2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80040d4:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80040da:	2380      	movs	r3, #128	; 0x80
 80040dc:	6822      	ldr	r2, [r4, #0]
 80040de:	045b      	lsls	r3, r3, #17
 80040e0:	4313      	orrs	r3, r2
 80040e2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80040e4:	f7fe ff28 	bl	8002f38 <HAL_GetTick>
 80040e8:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	4233      	tst	r3, r6
 80040ee:	d000      	beq.n	80040f2 <HAL_RCC_OscConfig+0x412>
 80040f0:	e644      	b.n	8003d7c <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040f2:	f7fe ff21 	bl	8002f38 <HAL_GetTick>
 80040f6:	1b40      	subs	r0, r0, r5
 80040f8:	2802      	cmp	r0, #2
 80040fa:	d9f6      	bls.n	80040ea <HAL_RCC_OscConfig+0x40a>
 80040fc:	e662      	b.n	8003dc4 <HAL_RCC_OscConfig+0xe4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040fe:	f7fe ff1b 	bl	8002f38 <HAL_GetTick>
 8004102:	1b80      	subs	r0, r0, r6
 8004104:	2802      	cmp	r0, #2
 8004106:	d9d9      	bls.n	80040bc <HAL_RCC_OscConfig+0x3dc>
 8004108:	e65c      	b.n	8003dc4 <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_PLL_DISABLE();
 800410a:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800410c:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800410e:	4013      	ands	r3, r2
 8004110:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004112:	f7fe ff11 	bl	8002f38 <HAL_GetTick>
 8004116:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004118:	04b6      	lsls	r6, r6, #18
 800411a:	6823      	ldr	r3, [r4, #0]
 800411c:	4233      	tst	r3, r6
 800411e:	d100      	bne.n	8004122 <HAL_RCC_OscConfig+0x442>
 8004120:	e62c      	b.n	8003d7c <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004122:	f7fe ff09 	bl	8002f38 <HAL_GetTick>
 8004126:	1b40      	subs	r0, r0, r5
 8004128:	2802      	cmp	r0, #2
 800412a:	d9f6      	bls.n	800411a <HAL_RCC_OscConfig+0x43a>
 800412c:	e64a      	b.n	8003dc4 <HAL_RCC_OscConfig+0xe4>
        return HAL_ERROR;
 800412e:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004130:	2b01      	cmp	r3, #1
 8004132:	d100      	bne.n	8004136 <HAL_RCC_OscConfig+0x456>
 8004134:	e647      	b.n	8003dc6 <HAL_RCC_OscConfig+0xe6>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004136:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8004138:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800413a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800413c:	0252      	lsls	r2, r2, #9
 800413e:	401a      	ands	r2, r3
 8004140:	428a      	cmp	r2, r1
 8004142:	d000      	beq.n	8004146 <HAL_RCC_OscConfig+0x466>
 8004144:	e628      	b.n	8003d98 <HAL_RCC_OscConfig+0xb8>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004146:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004148:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800414a:	0392      	lsls	r2, r2, #14
 800414c:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800414e:	428a      	cmp	r2, r1
 8004150:	d000      	beq.n	8004154 <HAL_RCC_OscConfig+0x474>
 8004152:	e621      	b.n	8003d98 <HAL_RCC_OscConfig+0xb8>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004154:	22c0      	movs	r2, #192	; 0xc0
 8004156:	0412      	lsls	r2, r2, #16
 8004158:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800415a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800415c:	4293      	cmp	r3, r2
 800415e:	d100      	bne.n	8004162 <HAL_RCC_OscConfig+0x482>
 8004160:	e60c      	b.n	8003d7c <HAL_RCC_OscConfig+0x9c>
 8004162:	e619      	b.n	8003d98 <HAL_RCC_OscConfig+0xb8>
 8004164:	fffffeff 	.word	0xfffffeff
 8004168:	fffffbff 	.word	0xfffffbff
 800416c:	00001388 	.word	0x00001388
 8004170:	efffffff 	.word	0xefffffff
 8004174:	feffffff 	.word	0xfeffffff
 8004178:	ff02ffff 	.word	0xff02ffff

0800417c <HAL_RCC_ClockConfig>:
{
 800417c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800417e:	1e04      	subs	r4, r0, #0
 8004180:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8004182:	d101      	bne.n	8004188 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8004184:	2001      	movs	r0, #1
}
 8004186:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004188:	2501      	movs	r5, #1
 800418a:	4e5b      	ldr	r6, [pc, #364]	; (80042f8 <HAL_RCC_ClockConfig+0x17c>)
 800418c:	9a01      	ldr	r2, [sp, #4]
 800418e:	6833      	ldr	r3, [r6, #0]
 8004190:	402b      	ands	r3, r5
 8004192:	4293      	cmp	r3, r2
 8004194:	d331      	bcc.n	80041fa <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004196:	6822      	ldr	r2, [r4, #0]
 8004198:	0793      	lsls	r3, r2, #30
 800419a:	d443      	bmi.n	8004224 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800419c:	07d3      	lsls	r3, r2, #31
 800419e:	d449      	bmi.n	8004234 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041a0:	2501      	movs	r5, #1
 80041a2:	6833      	ldr	r3, [r6, #0]
 80041a4:	9a01      	ldr	r2, [sp, #4]
 80041a6:	402b      	ands	r3, r5
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d909      	bls.n	80041c0 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ac:	6833      	ldr	r3, [r6, #0]
 80041ae:	43ab      	bics	r3, r5
 80041b0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80041b2:	f7fe fec1 	bl	8002f38 <HAL_GetTick>
 80041b6:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b8:	6833      	ldr	r3, [r6, #0]
 80041ba:	422b      	tst	r3, r5
 80041bc:	d000      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x44>
 80041be:	e08c      	b.n	80042da <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c0:	6822      	ldr	r2, [r4, #0]
 80041c2:	4d4e      	ldr	r5, [pc, #312]	; (80042fc <HAL_RCC_ClockConfig+0x180>)
 80041c4:	0753      	lsls	r3, r2, #29
 80041c6:	d500      	bpl.n	80041ca <HAL_RCC_ClockConfig+0x4e>
 80041c8:	e08f      	b.n	80042ea <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ca:	0713      	lsls	r3, r2, #28
 80041cc:	d506      	bpl.n	80041dc <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041ce:	68e9      	ldr	r1, [r5, #12]
 80041d0:	6923      	ldr	r3, [r4, #16]
 80041d2:	4a4b      	ldr	r2, [pc, #300]	; (8004300 <HAL_RCC_ClockConfig+0x184>)
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	400a      	ands	r2, r1
 80041d8:	4313      	orrs	r3, r2
 80041da:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041dc:	f7ff fd38 	bl	8003c50 <HAL_RCC_GetSysClockFreq>
 80041e0:	68eb      	ldr	r3, [r5, #12]
 80041e2:	4a48      	ldr	r2, [pc, #288]	; (8004304 <HAL_RCC_ClockConfig+0x188>)
 80041e4:	061b      	lsls	r3, r3, #24
 80041e6:	0f1b      	lsrs	r3, r3, #28
 80041e8:	5cd3      	ldrb	r3, [r2, r3]
 80041ea:	40d8      	lsrs	r0, r3
 80041ec:	4b46      	ldr	r3, [pc, #280]	; (8004308 <HAL_RCC_ClockConfig+0x18c>)
 80041ee:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80041f0:	4b46      	ldr	r3, [pc, #280]	; (800430c <HAL_RCC_ClockConfig+0x190>)
 80041f2:	6818      	ldr	r0, [r3, #0]
 80041f4:	f7fe fe5c 	bl	8002eb0 <HAL_InitTick>
  if(status != HAL_OK)
 80041f8:	e7c5      	b.n	8004186 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fa:	6833      	ldr	r3, [r6, #0]
 80041fc:	9a01      	ldr	r2, [sp, #4]
 80041fe:	43ab      	bics	r3, r5
 8004200:	4313      	orrs	r3, r2
 8004202:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004204:	f7fe fe98 	bl	8002f38 <HAL_GetTick>
 8004208:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800420a:	6833      	ldr	r3, [r6, #0]
 800420c:	9a01      	ldr	r2, [sp, #4]
 800420e:	402b      	ands	r3, r5
 8004210:	4293      	cmp	r3, r2
 8004212:	d0c0      	beq.n	8004196 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004214:	f7fe fe90 	bl	8002f38 <HAL_GetTick>
 8004218:	4b3d      	ldr	r3, [pc, #244]	; (8004310 <HAL_RCC_ClockConfig+0x194>)
 800421a:	1bc0      	subs	r0, r0, r7
 800421c:	4298      	cmp	r0, r3
 800421e:	d9f4      	bls.n	800420a <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8004220:	2003      	movs	r0, #3
 8004222:	e7b0      	b.n	8004186 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004224:	20f0      	movs	r0, #240	; 0xf0
 8004226:	4935      	ldr	r1, [pc, #212]	; (80042fc <HAL_RCC_ClockConfig+0x180>)
 8004228:	68cb      	ldr	r3, [r1, #12]
 800422a:	4383      	bics	r3, r0
 800422c:	68a0      	ldr	r0, [r4, #8]
 800422e:	4303      	orrs	r3, r0
 8004230:	60cb      	str	r3, [r1, #12]
 8004232:	e7b3      	b.n	800419c <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004234:	4d31      	ldr	r5, [pc, #196]	; (80042fc <HAL_RCC_ClockConfig+0x180>)
 8004236:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004238:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800423a:	2a02      	cmp	r2, #2
 800423c:	d118      	bne.n	8004270 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800423e:	039b      	lsls	r3, r3, #14
 8004240:	d5a0      	bpl.n	8004184 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004242:	2103      	movs	r1, #3
 8004244:	68eb      	ldr	r3, [r5, #12]
 8004246:	438b      	bics	r3, r1
 8004248:	4313      	orrs	r3, r2
 800424a:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 800424c:	f7fe fe74 	bl	8002f38 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004250:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8004252:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004254:	2b02      	cmp	r3, #2
 8004256:	d118      	bne.n	800428a <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004258:	220c      	movs	r2, #12
 800425a:	68eb      	ldr	r3, [r5, #12]
 800425c:	4013      	ands	r3, r2
 800425e:	2b08      	cmp	r3, #8
 8004260:	d09e      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004262:	f7fe fe69 	bl	8002f38 <HAL_GetTick>
 8004266:	4b2a      	ldr	r3, [pc, #168]	; (8004310 <HAL_RCC_ClockConfig+0x194>)
 8004268:	1bc0      	subs	r0, r0, r7
 800426a:	4298      	cmp	r0, r3
 800426c:	d9f4      	bls.n	8004258 <HAL_RCC_ClockConfig+0xdc>
 800426e:	e7d7      	b.n	8004220 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004270:	2a03      	cmp	r2, #3
 8004272:	d102      	bne.n	800427a <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004274:	019b      	lsls	r3, r3, #6
 8004276:	d4e4      	bmi.n	8004242 <HAL_RCC_ClockConfig+0xc6>
 8004278:	e784      	b.n	8004184 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800427a:	2a01      	cmp	r2, #1
 800427c:	d102      	bne.n	8004284 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800427e:	075b      	lsls	r3, r3, #29
 8004280:	d4df      	bmi.n	8004242 <HAL_RCC_ClockConfig+0xc6>
 8004282:	e77f      	b.n	8004184 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004284:	059b      	lsls	r3, r3, #22
 8004286:	d4dc      	bmi.n	8004242 <HAL_RCC_ClockConfig+0xc6>
 8004288:	e77c      	b.n	8004184 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800428a:	2b03      	cmp	r3, #3
 800428c:	d10b      	bne.n	80042a6 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800428e:	220c      	movs	r2, #12
 8004290:	68eb      	ldr	r3, [r5, #12]
 8004292:	4013      	ands	r3, r2
 8004294:	4293      	cmp	r3, r2
 8004296:	d083      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004298:	f7fe fe4e 	bl	8002f38 <HAL_GetTick>
 800429c:	4b1c      	ldr	r3, [pc, #112]	; (8004310 <HAL_RCC_ClockConfig+0x194>)
 800429e:	1bc0      	subs	r0, r0, r7
 80042a0:	4298      	cmp	r0, r3
 80042a2:	d9f4      	bls.n	800428e <HAL_RCC_ClockConfig+0x112>
 80042a4:	e7bc      	b.n	8004220 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d011      	beq.n	80042ce <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80042aa:	220c      	movs	r2, #12
 80042ac:	68eb      	ldr	r3, [r5, #12]
 80042ae:	4213      	tst	r3, r2
 80042b0:	d100      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x138>
 80042b2:	e775      	b.n	80041a0 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042b4:	f7fe fe40 	bl	8002f38 <HAL_GetTick>
 80042b8:	4b15      	ldr	r3, [pc, #84]	; (8004310 <HAL_RCC_ClockConfig+0x194>)
 80042ba:	1bc0      	subs	r0, r0, r7
 80042bc:	4298      	cmp	r0, r3
 80042be:	d9f4      	bls.n	80042aa <HAL_RCC_ClockConfig+0x12e>
 80042c0:	e7ae      	b.n	8004220 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042c2:	f7fe fe39 	bl	8002f38 <HAL_GetTick>
 80042c6:	4b12      	ldr	r3, [pc, #72]	; (8004310 <HAL_RCC_ClockConfig+0x194>)
 80042c8:	1bc0      	subs	r0, r0, r7
 80042ca:	4298      	cmp	r0, r3
 80042cc:	d8a8      	bhi.n	8004220 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80042ce:	220c      	movs	r2, #12
 80042d0:	68eb      	ldr	r3, [r5, #12]
 80042d2:	4013      	ands	r3, r2
 80042d4:	2b04      	cmp	r3, #4
 80042d6:	d1f4      	bne.n	80042c2 <HAL_RCC_ClockConfig+0x146>
 80042d8:	e762      	b.n	80041a0 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042da:	f7fe fe2d 	bl	8002f38 <HAL_GetTick>
 80042de:	4b0c      	ldr	r3, [pc, #48]	; (8004310 <HAL_RCC_ClockConfig+0x194>)
 80042e0:	1bc0      	subs	r0, r0, r7
 80042e2:	4298      	cmp	r0, r3
 80042e4:	d800      	bhi.n	80042e8 <HAL_RCC_ClockConfig+0x16c>
 80042e6:	e767      	b.n	80041b8 <HAL_RCC_ClockConfig+0x3c>
 80042e8:	e79a      	b.n	8004220 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042ea:	68eb      	ldr	r3, [r5, #12]
 80042ec:	4909      	ldr	r1, [pc, #36]	; (8004314 <HAL_RCC_ClockConfig+0x198>)
 80042ee:	400b      	ands	r3, r1
 80042f0:	68e1      	ldr	r1, [r4, #12]
 80042f2:	430b      	orrs	r3, r1
 80042f4:	60eb      	str	r3, [r5, #12]
 80042f6:	e768      	b.n	80041ca <HAL_RCC_ClockConfig+0x4e>
 80042f8:	40022000 	.word	0x40022000
 80042fc:	40021000 	.word	0x40021000
 8004300:	ffffc7ff 	.word	0xffffc7ff
 8004304:	08006098 	.word	0x08006098
 8004308:	20000004 	.word	0x20000004
 800430c:	2000000c 	.word	0x2000000c
 8004310:	00001388 	.word	0x00001388
 8004314:	fffff8ff 	.word	0xfffff8ff

08004318 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004318:	6803      	ldr	r3, [r0, #0]
{
 800431a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800431c:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800431e:	069b      	lsls	r3, r3, #26
 8004320:	d52c      	bpl.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x64>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004322:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 8004324:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004326:	4c53      	ldr	r4, [pc, #332]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004328:	055b      	lsls	r3, r3, #21
 800432a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 800432c:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800432e:	421a      	tst	r2, r3
 8004330:	d104      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004332:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004334:	4313      	orrs	r3, r2
 8004336:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8004338:	2301      	movs	r3, #1
 800433a:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800433c:	2780      	movs	r7, #128	; 0x80
 800433e:	4e4e      	ldr	r6, [pc, #312]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004340:	007f      	lsls	r7, r7, #1
 8004342:	6833      	ldr	r3, [r6, #0]
 8004344:	423b      	tst	r3, r7
 8004346:	d040      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xb2>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004348:	686b      	ldr	r3, [r5, #4]
 800434a:	21c0      	movs	r1, #192	; 0xc0
 800434c:	0018      	movs	r0, r3
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800434e:	6822      	ldr	r2, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004350:	0389      	lsls	r1, r1, #14
 8004352:	4008      	ands	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004354:	400a      	ands	r2, r1
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004356:	4290      	cmp	r0, r2
 8004358:	d148      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800435a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800435c:	22c0      	movs	r2, #192	; 0xc0
 800435e:	0008      	movs	r0, r1
 8004360:	0292      	lsls	r2, r2, #10
 8004362:	4010      	ands	r0, r2

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004364:	4211      	tst	r1, r2
 8004366:	d14c      	bne.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004368:	682b      	ldr	r3, [r5, #0]
 800436a:	069b      	lsls	r3, r3, #26
 800436c:	d45e      	bmi.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800436e:	9b00      	ldr	r3, [sp, #0]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d103      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004374:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004376:	4a41      	ldr	r2, [pc, #260]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004378:	4013      	ands	r3, r2
 800437a:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800437c:	682a      	ldr	r2, [r5, #0]
 800437e:	0793      	lsls	r3, r2, #30
 8004380:	d506      	bpl.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004382:	200c      	movs	r0, #12
 8004384:	493b      	ldr	r1, [pc, #236]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004386:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8004388:	4383      	bics	r3, r0
 800438a:	68a8      	ldr	r0, [r5, #8]
 800438c:	4303      	orrs	r3, r0
 800438e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004390:	0753      	lsls	r3, r2, #29
 8004392:	d506      	bpl.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004394:	4937      	ldr	r1, [pc, #220]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004396:	483a      	ldr	r0, [pc, #232]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004398:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800439a:	4003      	ands	r3, r0
 800439c:	68e8      	ldr	r0, [r5, #12]
 800439e:	4303      	orrs	r3, r0
 80043a0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043a2:	0713      	lsls	r3, r2, #28
 80043a4:	d506      	bpl.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043a6:	4933      	ldr	r1, [pc, #204]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80043a8:	4836      	ldr	r0, [pc, #216]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 80043aa:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80043ac:	4003      	ands	r3, r0
 80043ae:	6928      	ldr	r0, [r5, #16]
 80043b0:	4303      	orrs	r3, r0
 80043b2:	64cb      	str	r3, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 80043b4:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043b6:	0613      	lsls	r3, r2, #24
 80043b8:	d517      	bpl.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80043ba:	4a2e      	ldr	r2, [pc, #184]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80043bc:	4932      	ldr	r1, [pc, #200]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 80043be:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80043c0:	400b      	ands	r3, r1
 80043c2:	6969      	ldr	r1, [r5, #20]
 80043c4:	430b      	orrs	r3, r1
 80043c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043c8:	e00f      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043ca:	6833      	ldr	r3, [r6, #0]
 80043cc:	433b      	orrs	r3, r7
 80043ce:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80043d0:	f7fe fdb2 	bl	8002f38 <HAL_GetTick>
 80043d4:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d6:	6833      	ldr	r3, [r6, #0]
 80043d8:	423b      	tst	r3, r7
 80043da:	d1b5      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043dc:	f7fe fdac 	bl	8002f38 <HAL_GetTick>
 80043e0:	9b01      	ldr	r3, [sp, #4]
 80043e2:	1ac0      	subs	r0, r0, r3
 80043e4:	2864      	cmp	r0, #100	; 0x64
 80043e6:	d9f6      	bls.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 80043e8:	2003      	movs	r0, #3
}
 80043ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80043ec:	22c0      	movs	r2, #192	; 0xc0
 80043ee:	0019      	movs	r1, r3
 80043f0:	0292      	lsls	r2, r2, #10
 80043f2:	4011      	ands	r1, r2
 80043f4:	4291      	cmp	r1, r2
 80043f6:	d1b0      	bne.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x42>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80043f8:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 80043fa:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80043fc:	0392      	lsls	r2, r2, #14
 80043fe:	d5ac      	bpl.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004400:	e7f3      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004402:	4013      	ands	r3, r2
 8004404:	4283      	cmp	r3, r0
 8004406:	d0af      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x50>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004408:	682b      	ldr	r3, [r5, #0]
 800440a:	069b      	lsls	r3, r3, #26
 800440c:	d5af      	bpl.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_BACKUPRESET_FORCE();
 800440e:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004410:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8004412:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004414:	0312      	lsls	r2, r2, #12
 8004416:	4302      	orrs	r2, r0
 8004418:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800441a:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800441c:	4b1b      	ldr	r3, [pc, #108]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x174>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 800441e:	481c      	ldr	r0, [pc, #112]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x178>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004420:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004422:	4002      	ands	r2, r0
 8004424:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8004426:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004428:	05cb      	lsls	r3, r1, #23
 800442a:	d412      	bmi.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x13a>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800442c:	6869      	ldr	r1, [r5, #4]
 800442e:	23c0      	movs	r3, #192	; 0xc0
 8004430:	000a      	movs	r2, r1
 8004432:	029b      	lsls	r3, r3, #10
 8004434:	401a      	ands	r2, r3
 8004436:	429a      	cmp	r2, r3
 8004438:	d107      	bne.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x132>
 800443a:	6823      	ldr	r3, [r4, #0]
 800443c:	4815      	ldr	r0, [pc, #84]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 800443e:	4003      	ands	r3, r0
 8004440:	20c0      	movs	r0, #192	; 0xc0
 8004442:	0380      	lsls	r0, r0, #14
 8004444:	4001      	ands	r1, r0
 8004446:	430b      	orrs	r3, r1
 8004448:	6023      	str	r3, [r4, #0]
 800444a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800444c:	431a      	orrs	r2, r3
 800444e:	6522      	str	r2, [r4, #80]	; 0x50
 8004450:	e78d      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x56>
        tickstart = HAL_GetTick();
 8004452:	f7fe fd71 	bl	8002f38 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004456:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8004458:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800445a:	00bf      	lsls	r7, r7, #2
 800445c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800445e:	423b      	tst	r3, r7
 8004460:	d000      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004462:	e781      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x50>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004464:	f7fe fd68 	bl	8002f38 <HAL_GetTick>
 8004468:	4b0b      	ldr	r3, [pc, #44]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 800446a:	1b80      	subs	r0, r0, r6
 800446c:	4298      	cmp	r0, r3
 800446e:	d9f5      	bls.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x144>
 8004470:	e7ba      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8004472:	46c0      	nop			; (mov r8, r8)
 8004474:	40021000 	.word	0x40021000
 8004478:	40007000 	.word	0x40007000
 800447c:	efffffff 	.word	0xefffffff
 8004480:	fffff3ff 	.word	0xfffff3ff
 8004484:	ffffcfff 	.word	0xffffcfff
 8004488:	fff3ffff 	.word	0xfff3ffff
 800448c:	fffcffff 	.word	0xfffcffff
 8004490:	fff7ffff 	.word	0xfff7ffff
 8004494:	ffcfffff 	.word	0xffcfffff
 8004498:	00001388 	.word	0x00001388

0800449c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800449c:	2280      	movs	r2, #128	; 0x80
{
 800449e:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 80044a0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044a2:	05d2      	lsls	r2, r2, #23
 80044a4:	4290      	cmp	r0, r2
 80044a6:	d005      	beq.n	80044b4 <TIM_Base_SetConfig+0x18>
 80044a8:	4c10      	ldr	r4, [pc, #64]	; (80044ec <TIM_Base_SetConfig+0x50>)
 80044aa:	42a0      	cmp	r0, r4
 80044ac:	d002      	beq.n	80044b4 <TIM_Base_SetConfig+0x18>
 80044ae:	4c10      	ldr	r4, [pc, #64]	; (80044f0 <TIM_Base_SetConfig+0x54>)
 80044b0:	42a0      	cmp	r0, r4
 80044b2:	d10f      	bne.n	80044d4 <TIM_Base_SetConfig+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044b4:	2470      	movs	r4, #112	; 0x70
 80044b6:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 80044b8:	684c      	ldr	r4, [r1, #4]
 80044ba:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044bc:	4290      	cmp	r0, r2
 80044be:	d005      	beq.n	80044cc <TIM_Base_SetConfig+0x30>
 80044c0:	4a0a      	ldr	r2, [pc, #40]	; (80044ec <TIM_Base_SetConfig+0x50>)
 80044c2:	4290      	cmp	r0, r2
 80044c4:	d002      	beq.n	80044cc <TIM_Base_SetConfig+0x30>
 80044c6:	4a0a      	ldr	r2, [pc, #40]	; (80044f0 <TIM_Base_SetConfig+0x54>)
 80044c8:	4290      	cmp	r0, r2
 80044ca:	d103      	bne.n	80044d4 <TIM_Base_SetConfig+0x38>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044cc:	4a09      	ldr	r2, [pc, #36]	; (80044f4 <TIM_Base_SetConfig+0x58>)
 80044ce:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044d0:	68ca      	ldr	r2, [r1, #12]
 80044d2:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044d4:	2280      	movs	r2, #128	; 0x80
 80044d6:	4393      	bics	r3, r2
 80044d8:	690a      	ldr	r2, [r1, #16]
 80044da:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80044dc:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044de:	688b      	ldr	r3, [r1, #8]
 80044e0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044e2:	680b      	ldr	r3, [r1, #0]
 80044e4:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044e6:	2301      	movs	r3, #1
 80044e8:	6143      	str	r3, [r0, #20]
}
 80044ea:	bd10      	pop	{r4, pc}
 80044ec:	40010800 	.word	0x40010800
 80044f0:	40011400 	.word	0x40011400
 80044f4:	fffffcff 	.word	0xfffffcff

080044f8 <HAL_TIM_Base_Init>:
{
 80044f8:	b570      	push	{r4, r5, r6, lr}
 80044fa:	0004      	movs	r4, r0
    return HAL_ERROR;
 80044fc:	2001      	movs	r0, #1
  if (htim == NULL)
 80044fe:	2c00      	cmp	r4, #0
 8004500:	d01d      	beq.n	800453e <HAL_TIM_Base_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004502:	0025      	movs	r5, r4
 8004504:	3539      	adds	r5, #57	; 0x39
 8004506:	782b      	ldrb	r3, [r5, #0]
 8004508:	b2da      	uxtb	r2, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d105      	bne.n	800451a <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800450e:	0023      	movs	r3, r4
 8004510:	3338      	adds	r3, #56	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8004512:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8004514:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8004516:	f7fe fc3b 	bl	8002d90 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800451a:	2302      	movs	r3, #2
 800451c:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800451e:	6820      	ldr	r0, [r4, #0]
 8004520:	1d21      	adds	r1, r4, #4
 8004522:	f7ff ffbb 	bl	800449c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004526:	0022      	movs	r2, r4
 8004528:	2301      	movs	r3, #1
  return HAL_OK;
 800452a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800452c:	323e      	adds	r2, #62	; 0x3e
 800452e:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004530:	343d      	adds	r4, #61	; 0x3d
 8004532:	3a04      	subs	r2, #4
 8004534:	7013      	strb	r3, [r2, #0]
 8004536:	7053      	strb	r3, [r2, #1]
 8004538:	7093      	strb	r3, [r2, #2]
 800453a:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 800453c:	702b      	strb	r3, [r5, #0]
}
 800453e:	bd70      	pop	{r4, r5, r6, pc}

08004540 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004540:	0002      	movs	r2, r0
{
 8004542:	0003      	movs	r3, r0
    return HAL_ERROR;
 8004544:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8004546:	3239      	adds	r2, #57	; 0x39
 8004548:	7811      	ldrb	r1, [r2, #0]
 800454a:	4281      	cmp	r1, r0
 800454c:	d119      	bne.n	8004582 <HAL_TIM_Base_Start_IT+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 800454e:	2102      	movs	r1, #2
 8004550:	7011      	strb	r1, [r2, #0]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	4302      	orrs	r2, r0
 8004558:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800455a:	2280      	movs	r2, #128	; 0x80
 800455c:	05d2      	lsls	r2, r2, #23
 800455e:	4293      	cmp	r3, r2
 8004560:	d005      	beq.n	800456e <HAL_TIM_Base_Start_IT+0x2e>
 8004562:	4a0b      	ldr	r2, [pc, #44]	; (8004590 <HAL_TIM_Base_Start_IT+0x50>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d002      	beq.n	800456e <HAL_TIM_Base_Start_IT+0x2e>
 8004568:	4a0a      	ldr	r2, [pc, #40]	; (8004594 <HAL_TIM_Base_Start_IT+0x54>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d10a      	bne.n	8004584 <HAL_TIM_Base_Start_IT+0x44>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800456e:	2107      	movs	r1, #7
 8004570:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 8004572:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004574:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004576:	2a06      	cmp	r2, #6
 8004578:	d003      	beq.n	8004582 <HAL_TIM_Base_Start_IT+0x42>
      __HAL_TIM_ENABLE(htim);
 800457a:	2201      	movs	r2, #1
 800457c:	6819      	ldr	r1, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	601a      	str	r2, [r3, #0]
}
 8004582:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	4310      	orrs	r0, r2
 8004588:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 800458a:	2000      	movs	r0, #0
 800458c:	e7f9      	b.n	8004582 <HAL_TIM_Base_Start_IT+0x42>
 800458e:	46c0      	nop			; (mov r8, r8)
 8004590:	40010800 	.word	0x40010800
 8004594:	40011400 	.word	0x40011400

08004598 <HAL_TIM_ConfigClockSource>:
{
 8004598:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800459a:	0005      	movs	r5, r0
 800459c:	2202      	movs	r2, #2
 800459e:	3538      	adds	r5, #56	; 0x38
 80045a0:	782c      	ldrb	r4, [r5, #0]
{
 80045a2:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80045a4:	0010      	movs	r0, r2
 80045a6:	2c01      	cmp	r4, #1
 80045a8:	d01d      	beq.n	80045e6 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 80045aa:	001e      	movs	r6, r3
  __HAL_LOCK(htim);
 80045ac:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80045ae:	3639      	adds	r6, #57	; 0x39
  __HAL_LOCK(htim);
 80045b0:	702c      	strb	r4, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80045b2:	7032      	strb	r2, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 80045b4:	681b      	ldr	r3, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045b6:	484c      	ldr	r0, [pc, #304]	; (80046e8 <HAL_TIM_ConfigClockSource+0x150>)
  tmpsmcr = htim->Instance->SMCR;
 80045b8:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045ba:	4002      	ands	r2, r0
  htim->Instance->SMCR = tmpsmcr;
 80045bc:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80045be:	680a      	ldr	r2, [r1, #0]
 80045c0:	2a60      	cmp	r2, #96	; 0x60
 80045c2:	d05f      	beq.n	8004684 <HAL_TIM_ConfigClockSource+0xec>
 80045c4:	d832      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x94>
 80045c6:	2a40      	cmp	r2, #64	; 0x40
 80045c8:	d100      	bne.n	80045cc <HAL_TIM_ConfigClockSource+0x34>
 80045ca:	e074      	b.n	80046b6 <HAL_TIM_ConfigClockSource+0x11e>
 80045cc:	d814      	bhi.n	80045f8 <HAL_TIM_ConfigClockSource+0x60>
 80045ce:	2a20      	cmp	r2, #32
 80045d0:	d00c      	beq.n	80045ec <HAL_TIM_ConfigClockSource+0x54>
 80045d2:	d809      	bhi.n	80045e8 <HAL_TIM_ConfigClockSource+0x50>
 80045d4:	2110      	movs	r1, #16
 80045d6:	0010      	movs	r0, r2
 80045d8:	4388      	bics	r0, r1
 80045da:	d007      	beq.n	80045ec <HAL_TIM_ConfigClockSource+0x54>
 80045dc:	0020      	movs	r0, r4
  htim->State = HAL_TIM_STATE_READY;
 80045de:	2301      	movs	r3, #1
 80045e0:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 80045e2:	2300      	movs	r3, #0
 80045e4:	702b      	strb	r3, [r5, #0]
}
 80045e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 80045e8:	2a30      	cmp	r2, #48	; 0x30
 80045ea:	d1f7      	bne.n	80045dc <HAL_TIM_ConfigClockSource+0x44>
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045ec:	2070      	movs	r0, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 80045ee:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80045f0:	4381      	bics	r1, r0
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045f2:	430a      	orrs	r2, r1
 80045f4:	2107      	movs	r1, #7
 80045f6:	e032      	b.n	800465e <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 80045f8:	2a50      	cmp	r2, #80	; 0x50
 80045fa:	d1ef      	bne.n	80045dc <HAL_TIM_ConfigClockSource+0x44>
  tmpccer = TIMx->CCER;
 80045fc:	6a1f      	ldr	r7, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045fe:	6a1a      	ldr	r2, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004600:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004602:	43a2      	bics	r2, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004604:	24f0      	movs	r4, #240	; 0xf0
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004606:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800460a:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800460c:	43a2      	bics	r2, r4
 800460e:	0014      	movs	r4, r2
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004610:	010a      	lsls	r2, r1, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004612:	210a      	movs	r1, #10
 8004614:	438f      	bics	r7, r1
 8004616:	0039      	movs	r1, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004618:	4322      	orrs	r2, r4
  tmpccer |= TIM_ICPolarity;
 800461a:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800461c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800461e:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004620:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8004622:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004624:	438a      	bics	r2, r1
 8004626:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004628:	2257      	movs	r2, #87	; 0x57
 800462a:	e018      	b.n	800465e <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 800462c:	2780      	movs	r7, #128	; 0x80
  HAL_StatusTypeDef status = HAL_OK;
 800462e:	2000      	movs	r0, #0
  switch (sClockSourceConfig->ClockSource)
 8004630:	017f      	lsls	r7, r7, #5
 8004632:	42ba      	cmp	r2, r7
 8004634:	d0d3      	beq.n	80045de <HAL_TIM_ConfigClockSource+0x46>
 8004636:	2080      	movs	r0, #128	; 0x80
 8004638:	0180      	lsls	r0, r0, #6
 800463a:	4282      	cmp	r2, r0
 800463c:	d013      	beq.n	8004666 <HAL_TIM_ConfigClockSource+0xce>
 800463e:	0020      	movs	r0, r4
 8004640:	2a70      	cmp	r2, #112	; 0x70
 8004642:	d1cc      	bne.n	80045de <HAL_TIM_ConfigClockSource+0x46>
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004644:	689a      	ldr	r2, [r3, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004646:	4829      	ldr	r0, [pc, #164]	; (80046ec <HAL_TIM_ConfigClockSource+0x154>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004648:	684c      	ldr	r4, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800464a:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800464c:	688a      	ldr	r2, [r1, #8]
 800464e:	68c9      	ldr	r1, [r1, #12]
 8004650:	4322      	orrs	r2, r4
 8004652:	0209      	lsls	r1, r1, #8
 8004654:	430a      	orrs	r2, r1
 8004656:	4302      	orrs	r2, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004658:	609a      	str	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800465a:	2277      	movs	r2, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 800465c:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800465e:	430a      	orrs	r2, r1
  HAL_StatusTypeDef status = HAL_OK;
 8004660:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8004662:	609a      	str	r2, [r3, #8]
}
 8004664:	e7bb      	b.n	80045de <HAL_TIM_ConfigClockSource+0x46>
  tmpsmcr = TIMx->SMCR;
 8004666:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004668:	4820      	ldr	r0, [pc, #128]	; (80046ec <HAL_TIM_ConfigClockSource+0x154>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800466a:	684c      	ldr	r4, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800466c:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800466e:	688a      	ldr	r2, [r1, #8]
 8004670:	68c9      	ldr	r1, [r1, #12]
 8004672:	4322      	orrs	r2, r4
 8004674:	0209      	lsls	r1, r1, #8
 8004676:	430a      	orrs	r2, r1
 8004678:	4302      	orrs	r2, r0
  TIMx->SMCR = tmpsmcr;
 800467a:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800467c:	2280      	movs	r2, #128	; 0x80
 800467e:	6899      	ldr	r1, [r3, #8]
 8004680:	01d2      	lsls	r2, r2, #7
 8004682:	e7ec      	b.n	800465e <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004684:	6848      	ldr	r0, [r1, #4]
 8004686:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004688:	2110      	movs	r1, #16
 800468a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800468c:	4c18      	ldr	r4, [pc, #96]	; (80046f0 <HAL_TIM_ConfigClockSource+0x158>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800468e:	438a      	bics	r2, r1
 8004690:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004692:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8004694:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004696:	4021      	ands	r1, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004698:	24a0      	movs	r4, #160	; 0xa0
 800469a:	43a2      	bics	r2, r4
 800469c:	0014      	movs	r4, r2
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800469e:	033f      	lsls	r7, r7, #12
 80046a0:	4339      	orrs	r1, r7
  TIMx->CCMR1 = tmpccmr1 ;
 80046a2:	6199      	str	r1, [r3, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 80046a4:	2170      	movs	r1, #112	; 0x70
  tmpccer |= (TIM_ICPolarity << 4U);
 80046a6:	0102      	lsls	r2, r0, #4
 80046a8:	4322      	orrs	r2, r4
  TIMx->CCER = tmpccer;
 80046aa:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80046ac:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80046ae:	438a      	bics	r2, r1
 80046b0:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046b2:	2267      	movs	r2, #103	; 0x67
 80046b4:	e7d3      	b.n	800465e <HAL_TIM_ConfigClockSource+0xc6>
  tmpccer = TIMx->CCER;
 80046b6:	6a1f      	ldr	r7, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046b8:	6a1a      	ldr	r2, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ba:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046bc:	43a2      	bics	r2, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046be:	24f0      	movs	r4, #240	; 0xf0
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046c0:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046c4:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046c6:	43a2      	bics	r2, r4
 80046c8:	0014      	movs	r4, r2
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046ca:	010a      	lsls	r2, r1, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046cc:	210a      	movs	r1, #10
 80046ce:	438f      	bics	r7, r1
 80046d0:	0039      	movs	r1, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046d2:	4322      	orrs	r2, r4
  tmpccer |= TIM_ICPolarity;
 80046d4:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80046d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046d8:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 80046da:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 80046dc:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80046de:	438a      	bics	r2, r1
 80046e0:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046e2:	2247      	movs	r2, #71	; 0x47
 80046e4:	e7bb      	b.n	800465e <HAL_TIM_ConfigClockSource+0xc6>
 80046e6:	46c0      	nop			; (mov r8, r8)
 80046e8:	ffff0088 	.word	0xffff0088
 80046ec:	ffff00ff 	.word	0xffff00ff
 80046f0:	ffff0fff 	.word	0xffff0fff

080046f4 <HAL_TIM_OC_DelayElapsedCallback>:
 80046f4:	4770      	bx	lr

080046f6 <HAL_TIM_IC_CaptureCallback>:
 80046f6:	4770      	bx	lr

080046f8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80046f8:	4770      	bx	lr

080046fa <HAL_TIM_TriggerCallback>:
 80046fa:	4770      	bx	lr

080046fc <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046fc:	2202      	movs	r2, #2
 80046fe:	6803      	ldr	r3, [r0, #0]
{
 8004700:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004702:	6919      	ldr	r1, [r3, #16]
{
 8004704:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004706:	4211      	tst	r1, r2
 8004708:	d00d      	beq.n	8004726 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800470a:	68d9      	ldr	r1, [r3, #12]
 800470c:	4211      	tst	r1, r2
 800470e:	d00a      	beq.n	8004726 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004710:	3a05      	subs	r2, #5
 8004712:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004714:	3204      	adds	r2, #4
 8004716:	7602      	strb	r2, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	079b      	lsls	r3, r3, #30
 800471c:	d05e      	beq.n	80047dc <HAL_TIM_IRQHandler+0xe0>
          HAL_TIM_IC_CaptureCallback(htim);
 800471e:	f7ff ffea 	bl	80046f6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004722:	2300      	movs	r3, #0
 8004724:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004726:	2204      	movs	r2, #4
 8004728:	6823      	ldr	r3, [r4, #0]
 800472a:	6919      	ldr	r1, [r3, #16]
 800472c:	4211      	tst	r1, r2
 800472e:	d010      	beq.n	8004752 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004730:	68d9      	ldr	r1, [r3, #12]
 8004732:	4211      	tst	r1, r2
 8004734:	d00d      	beq.n	8004752 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004736:	3a09      	subs	r2, #9
 8004738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800473a:	3207      	adds	r2, #7
 800473c:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800473e:	699a      	ldr	r2, [r3, #24]
 8004740:	23c0      	movs	r3, #192	; 0xc0
 8004742:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8004744:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004746:	421a      	tst	r2, r3
 8004748:	d04e      	beq.n	80047e8 <HAL_TIM_IRQHandler+0xec>
        HAL_TIM_IC_CaptureCallback(htim);
 800474a:	f7ff ffd4 	bl	80046f6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800474e:	2300      	movs	r3, #0
 8004750:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004752:	2208      	movs	r2, #8
 8004754:	6823      	ldr	r3, [r4, #0]
 8004756:	6919      	ldr	r1, [r3, #16]
 8004758:	4211      	tst	r1, r2
 800475a:	d00e      	beq.n	800477a <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800475c:	68d9      	ldr	r1, [r3, #12]
 800475e:	4211      	tst	r1, r2
 8004760:	d00b      	beq.n	800477a <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004762:	3a11      	subs	r2, #17
 8004764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004766:	320d      	adds	r2, #13
 8004768:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800476a:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800476c:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800476e:	079b      	lsls	r3, r3, #30
 8004770:	d040      	beq.n	80047f4 <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 8004772:	f7ff ffc0 	bl	80046f6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004776:	2300      	movs	r3, #0
 8004778:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800477a:	2210      	movs	r2, #16
 800477c:	6823      	ldr	r3, [r4, #0]
 800477e:	6919      	ldr	r1, [r3, #16]
 8004780:	4211      	tst	r1, r2
 8004782:	d010      	beq.n	80047a6 <HAL_TIM_IRQHandler+0xaa>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004784:	68d9      	ldr	r1, [r3, #12]
 8004786:	4211      	tst	r1, r2
 8004788:	d00d      	beq.n	80047a6 <HAL_TIM_IRQHandler+0xaa>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800478a:	3a21      	subs	r2, #33	; 0x21
 800478c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800478e:	3219      	adds	r2, #25
 8004790:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004792:	69da      	ldr	r2, [r3, #28]
 8004794:	23c0      	movs	r3, #192	; 0xc0
 8004796:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8004798:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800479a:	421a      	tst	r2, r3
 800479c:	d030      	beq.n	8004800 <HAL_TIM_IRQHandler+0x104>
        HAL_TIM_IC_CaptureCallback(htim);
 800479e:	f7ff ffaa 	bl	80046f6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a2:	2300      	movs	r3, #0
 80047a4:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047a6:	2201      	movs	r2, #1
 80047a8:	6823      	ldr	r3, [r4, #0]
 80047aa:	6919      	ldr	r1, [r3, #16]
 80047ac:	4211      	tst	r1, r2
 80047ae:	d007      	beq.n	80047c0 <HAL_TIM_IRQHandler+0xc4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047b0:	68d9      	ldr	r1, [r3, #12]
 80047b2:	4211      	tst	r1, r2
 80047b4:	d004      	beq.n	80047c0 <HAL_TIM_IRQHandler+0xc4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047b6:	3a03      	subs	r2, #3
      HAL_TIM_PeriodElapsedCallback(htim);
 80047b8:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047ba:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80047bc:	f7fe fa14 	bl	8002be8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047c0:	2240      	movs	r2, #64	; 0x40
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	6919      	ldr	r1, [r3, #16]
 80047c6:	4211      	tst	r1, r2
 80047c8:	d007      	beq.n	80047da <HAL_TIM_IRQHandler+0xde>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047ca:	68d9      	ldr	r1, [r3, #12]
 80047cc:	4211      	tst	r1, r2
 80047ce:	d004      	beq.n	80047da <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047d0:	3a81      	subs	r2, #129	; 0x81
      HAL_TIM_TriggerCallback(htim);
 80047d2:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047d4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80047d6:	f7ff ff90 	bl	80046fa <HAL_TIM_TriggerCallback>
}
 80047da:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047dc:	f7ff ff8a 	bl	80046f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e0:	0020      	movs	r0, r4
 80047e2:	f7ff ff89 	bl	80046f8 <HAL_TIM_PWM_PulseFinishedCallback>
 80047e6:	e79c      	b.n	8004722 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047e8:	f7ff ff84 	bl	80046f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047ec:	0020      	movs	r0, r4
 80047ee:	f7ff ff83 	bl	80046f8 <HAL_TIM_PWM_PulseFinishedCallback>
 80047f2:	e7ac      	b.n	800474e <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047f4:	f7ff ff7e 	bl	80046f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f8:	0020      	movs	r0, r4
 80047fa:	f7ff ff7d 	bl	80046f8 <HAL_TIM_PWM_PulseFinishedCallback>
 80047fe:	e7ba      	b.n	8004776 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004800:	f7ff ff78 	bl	80046f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004804:	0020      	movs	r0, r4
 8004806:	f7ff ff77 	bl	80046f8 <HAL_TIM_PWM_PulseFinishedCallback>
 800480a:	e7ca      	b.n	80047a2 <HAL_TIM_IRQHandler+0xa6>

0800480c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800480c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800480e:	0004      	movs	r4, r0
 8004810:	2202      	movs	r2, #2
 8004812:	3438      	adds	r4, #56	; 0x38
 8004814:	7825      	ldrb	r5, [r4, #0]
{
 8004816:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8004818:	0010      	movs	r0, r2
 800481a:	2d01      	cmp	r5, #1
 800481c:	d01d      	beq.n	800485a <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800481e:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004820:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8004822:	3539      	adds	r5, #57	; 0x39
 8004824:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800482a:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800482c:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800482e:	680e      	ldr	r6, [r1, #0]
 8004830:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004832:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004834:	2080      	movs	r0, #128	; 0x80
 8004836:	05c0      	lsls	r0, r0, #23
 8004838:	4283      	cmp	r3, r0
 800483a:	d005      	beq.n	8004848 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800483c:	4807      	ldr	r0, [pc, #28]	; (800485c <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 800483e:	4283      	cmp	r3, r0
 8004840:	d002      	beq.n	8004848 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004842:	4807      	ldr	r0, [pc, #28]	; (8004860 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8004844:	4283      	cmp	r3, r0
 8004846:	d104      	bne.n	8004852 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004848:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800484a:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800484c:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800484e:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004850:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004852:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8004854:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004856:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8004858:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 800485a:	bd70      	pop	{r4, r5, r6, pc}
 800485c:	40010800 	.word	0x40010800
 8004860:	40011400 	.word	0x40011400

08004864 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004864:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 8004866:	f000 fa23 	bl	8004cb0 <vTaskStartScheduler>
  
  return osOK;
}
 800486a:	2000      	movs	r0, #0
 800486c:	bd10      	pop	{r4, pc}

0800486e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800486e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004870:	0004      	movs	r4, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004872:	6946      	ldr	r6, [r0, #20]
{
 8004874:	000b      	movs	r3, r1
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004876:	6840      	ldr	r0, [r0, #4]
 8004878:	6821      	ldr	r1, [r4, #0]
 800487a:	6922      	ldr	r2, [r4, #16]
 800487c:	2708      	movs	r7, #8
 800487e:	5fe5      	ldrsh	r5, [r4, r7]
{
 8004880:	b087      	sub	sp, #28
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004882:	2e00      	cmp	r6, #0
 8004884:	d00e      	beq.n	80048a4 <osThreadCreate+0x36>
 8004886:	69a7      	ldr	r7, [r4, #24]
 8004888:	2f00      	cmp	r7, #0
 800488a:	d00b      	beq.n	80048a4 <osThreadCreate+0x36>
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800488c:	2400      	movs	r4, #0
  if (priority != osPriorityError) {
 800488e:	2d84      	cmp	r5, #132	; 0x84
 8004890:	d000      	beq.n	8004894 <osThreadCreate+0x26>
    fpriority += (priority - osPriorityIdle);
 8004892:	1cec      	adds	r4, r5, #3
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004894:	9702      	str	r7, [sp, #8]
 8004896:	9601      	str	r6, [sp, #4]
 8004898:	9400      	str	r4, [sp, #0]
 800489a:	f000 f9b7 	bl	8004c0c <xTaskCreateStatic>
 800489e:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80048a0:	9b05      	ldr	r3, [sp, #20]
 80048a2:	e00c      	b.n	80048be <osThreadCreate+0x50>
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80048a4:	2400      	movs	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048a6:	b292      	uxth	r2, r2
  if (priority != osPriorityError) {
 80048a8:	2d84      	cmp	r5, #132	; 0x84
 80048aa:	d000      	beq.n	80048ae <osThreadCreate+0x40>
    fpriority += (priority - osPriorityIdle);
 80048ac:	1cec      	adds	r4, r5, #3
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048ae:	ad05      	add	r5, sp, #20
 80048b0:	9501      	str	r5, [sp, #4]
 80048b2:	9400      	str	r4, [sp, #0]
 80048b4:	f000 f9d0 	bl	8004c58 <xTaskCreate>
      return NULL;
 80048b8:	2300      	movs	r3, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048ba:	2801      	cmp	r0, #1
 80048bc:	d0f0      	beq.n	80048a0 <osThreadCreate+0x32>
}
 80048be:	0018      	movs	r0, r3
 80048c0:	b007      	add	sp, #28
 80048c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048c4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80048c4:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80048c6:	2800      	cmp	r0, #0
 80048c8:	d100      	bne.n	80048cc <osDelay+0x8>
 80048ca:	3001      	adds	r0, #1
 80048cc:	f000 fb18 	bl	8004f00 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80048d0:	2000      	movs	r0, #0
 80048d2:	bd10      	pop	{r4, pc}

080048d4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048d4:	0003      	movs	r3, r0
 80048d6:	3308      	adds	r3, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80048d8:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048da:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048dc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048de:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048e0:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80048e2:	4252      	negs	r2, r2
 80048e4:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048e6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80048e8:	4770      	bx	lr

080048ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80048ea:	2300      	movs	r3, #0
 80048ec:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80048ee:	4770      	bx	lr

080048f0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80048f0:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048f2:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80048f4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048f6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80048f8:	689a      	ldr	r2, [r3, #8]
 80048fa:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80048fc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80048fe:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8004900:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004902:	3301      	adds	r3, #1
 8004904:	6003      	str	r3, [r0, #0]
}
 8004906:	4770      	bx	lr

08004908 <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004908:	0002      	movs	r2, r0
{
 800490a:	b530      	push	{r4, r5, lr}
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800490c:	680c      	ldr	r4, [r1, #0]
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800490e:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 8004910:	1c63      	adds	r3, r4, #1
 8004912:	d10a      	bne.n	800492a <vListInsert+0x22>
		pxIterator = pxList->xListEnd.pxPrevious;
 8004914:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800491a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800491c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800491e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8004920:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8004922:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004924:	3301      	adds	r3, #1
 8004926:	6003      	str	r3, [r0, #0]
}
 8004928:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800492a:	0013      	movs	r3, r2
 800492c:	6852      	ldr	r2, [r2, #4]
 800492e:	6815      	ldr	r5, [r2, #0]
 8004930:	42a5      	cmp	r5, r4
 8004932:	d9fa      	bls.n	800492a <vListInsert+0x22>
 8004934:	e7ef      	b.n	8004916 <vListInsert+0xe>

08004936 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004936:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004938:	6841      	ldr	r1, [r0, #4]
 800493a:	6882      	ldr	r2, [r0, #8]
 800493c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800493e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004940:	6859      	ldr	r1, [r3, #4]
 8004942:	4281      	cmp	r1, r0
 8004944:	d100      	bne.n	8004948 <uxListRemove+0x12>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004946:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004948:	2200      	movs	r2, #0
 800494a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	3a01      	subs	r2, #1
 8004950:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004952:	6818      	ldr	r0, [r3, #0]
}
 8004954:	4770      	bx	lr
	...

08004958 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800495a:	0004      	movs	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800495c:	f000 fbb2 	bl	80050c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004960:	4b2a      	ldr	r3, [pc, #168]	; (8004a0c <prvAddNewTaskToReadyList+0xb4>)
		if( pxCurrentTCB == NULL )
 8004962:	4d2b      	ldr	r5, [pc, #172]	; (8004a10 <prvAddNewTaskToReadyList+0xb8>)
		uxCurrentNumberOfTasks++;
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	3201      	adds	r2, #1
 8004968:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800496a:	682e      	ldr	r6, [r5, #0]
 800496c:	2e00      	cmp	r6, #0
 800496e:	d141      	bne.n	80049f4 <prvAddNewTaskToReadyList+0x9c>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004970:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d11e      	bne.n	80049b6 <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004978:	2714      	movs	r7, #20
 800497a:	0038      	movs	r0, r7
 800497c:	4370      	muls	r0, r6
 800497e:	4b25      	ldr	r3, [pc, #148]	; (8004a14 <prvAddNewTaskToReadyList+0xbc>)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004980:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004982:	1818      	adds	r0, r3, r0
 8004984:	f7ff ffa6 	bl	80048d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004988:	2e07      	cmp	r6, #7
 800498a:	d1f6      	bne.n	800497a <prvAddNewTaskToReadyList+0x22>
	}

	vListInitialise( &xDelayedTaskList1 );
 800498c:	4f22      	ldr	r7, [pc, #136]	; (8004a18 <prvAddNewTaskToReadyList+0xc0>)
 800498e:	0038      	movs	r0, r7
 8004990:	f7ff ffa0 	bl	80048d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004994:	4e21      	ldr	r6, [pc, #132]	; (8004a1c <prvAddNewTaskToReadyList+0xc4>)
 8004996:	0030      	movs	r0, r6
 8004998:	f7ff ff9c 	bl	80048d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800499c:	4820      	ldr	r0, [pc, #128]	; (8004a20 <prvAddNewTaskToReadyList+0xc8>)
 800499e:	f7ff ff99 	bl	80048d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80049a2:	4820      	ldr	r0, [pc, #128]	; (8004a24 <prvAddNewTaskToReadyList+0xcc>)
 80049a4:	f7ff ff96 	bl	80048d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80049a8:	481f      	ldr	r0, [pc, #124]	; (8004a28 <prvAddNewTaskToReadyList+0xd0>)
 80049aa:	f7ff ff93 	bl	80048d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80049ae:	4b1f      	ldr	r3, [pc, #124]	; (8004a2c <prvAddNewTaskToReadyList+0xd4>)
 80049b0:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80049b2:	4b1f      	ldr	r3, [pc, #124]	; (8004a30 <prvAddNewTaskToReadyList+0xd8>)
 80049b4:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 80049b6:	4a1f      	ldr	r2, [pc, #124]	; (8004a34 <prvAddNewTaskToReadyList+0xdc>)
 80049b8:	6813      	ldr	r3, [r2, #0]
 80049ba:	3301      	adds	r3, #1
 80049bc:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80049be:	4a1e      	ldr	r2, [pc, #120]	; (8004a38 <prvAddNewTaskToReadyList+0xe0>)
 80049c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80049c2:	6811      	ldr	r1, [r2, #0]
 80049c4:	428b      	cmp	r3, r1
 80049c6:	d900      	bls.n	80049ca <prvAddNewTaskToReadyList+0x72>
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	2014      	movs	r0, #20
 80049cc:	4358      	muls	r0, r3
 80049ce:	4b11      	ldr	r3, [pc, #68]	; (8004a14 <prvAddNewTaskToReadyList+0xbc>)
 80049d0:	1d21      	adds	r1, r4, #4
 80049d2:	1818      	adds	r0, r3, r0
 80049d4:	f7ff ff8c 	bl	80048f0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80049d8:	f000 fb80 	bl	80050dc <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80049dc:	4b17      	ldr	r3, [pc, #92]	; (8004a3c <prvAddNewTaskToReadyList+0xe4>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d006      	beq.n	80049f2 <prvAddNewTaskToReadyList+0x9a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80049e4:	682b      	ldr	r3, [r5, #0]
 80049e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d201      	bcs.n	80049f2 <prvAddNewTaskToReadyList+0x9a>
			taskYIELD_IF_USING_PREEMPTION();
 80049ee:	f000 fb5d 	bl	80050ac <vPortYield>
}
 80049f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( xSchedulerRunning == pdFALSE )
 80049f4:	4b11      	ldr	r3, [pc, #68]	; (8004a3c <prvAddNewTaskToReadyList+0xe4>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1dc      	bne.n	80049b6 <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80049fc:	682b      	ldr	r3, [r5, #0]
 80049fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d8d7      	bhi.n	80049b6 <prvAddNewTaskToReadyList+0x5e>
					pxCurrentTCB = pxNewTCB;
 8004a06:	602c      	str	r4, [r5, #0]
 8004a08:	e7d5      	b.n	80049b6 <prvAddNewTaskToReadyList+0x5e>
 8004a0a:	46c0      	nop			; (mov r8, r8)
 8004a0c:	20000540 	.word	0x20000540
 8004a10:	200004a8 	.word	0x200004a8
 8004a14:	200004b4 	.word	0x200004b4
 8004a18:	20000558 	.word	0x20000558
 8004a1c:	2000056c 	.word	0x2000056c
 8004a20:	20000588 	.word	0x20000588
 8004a24:	200005b4 	.word	0x200005b4
 8004a28:	200005a0 	.word	0x200005a0
 8004a2c:	200004ac 	.word	0x200004ac
 8004a30:	200004b0 	.word	0x200004b0
 8004a34:	20000550 	.word	0x20000550
 8004a38:	20000554 	.word	0x20000554
 8004a3c:	2000059c 	.word	0x2000059c

08004a40 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a42:	0004      	movs	r4, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a44:	4b14      	ldr	r3, [pc, #80]	; (8004a98 <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a46:	4d15      	ldr	r5, [pc, #84]	; (8004a9c <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 8004a48:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a4a:	6828      	ldr	r0, [r5, #0]
{
 8004a4c:	000f      	movs	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a4e:	3004      	adds	r0, #4
 8004a50:	f7ff ff71 	bl	8004936 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a54:	1c63      	adds	r3, r4, #1
 8004a56:	d107      	bne.n	8004a68 <prvAddCurrentTaskToDelayedList+0x28>
 8004a58:	2f00      	cmp	r7, #0
 8004a5a:	d005      	beq.n	8004a68 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a5c:	6829      	ldr	r1, [r5, #0]
 8004a5e:	4810      	ldr	r0, [pc, #64]	; (8004aa0 <prvAddCurrentTaskToDelayedList+0x60>)
 8004a60:	3104      	adds	r1, #4
 8004a62:	f7ff ff45 	bl	80048f0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a68:	682b      	ldr	r3, [r5, #0]
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a6a:	1934      	adds	r4, r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a6c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a6e:	42a6      	cmp	r6, r4
 8004a70:	d906      	bls.n	8004a80 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a72:	4b0c      	ldr	r3, [pc, #48]	; (8004aa4 <prvAddCurrentTaskToDelayedList+0x64>)
 8004a74:	6818      	ldr	r0, [r3, #0]
 8004a76:	6829      	ldr	r1, [r5, #0]
 8004a78:	3104      	adds	r1, #4
 8004a7a:	f7ff ff45 	bl	8004908 <vListInsert>
 8004a7e:	e7f2      	b.n	8004a66 <prvAddCurrentTaskToDelayedList+0x26>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a80:	4b09      	ldr	r3, [pc, #36]	; (8004aa8 <prvAddCurrentTaskToDelayedList+0x68>)
 8004a82:	6818      	ldr	r0, [r3, #0]
 8004a84:	6829      	ldr	r1, [r5, #0]
 8004a86:	3104      	adds	r1, #4
 8004a88:	f7ff ff3e 	bl	8004908 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004a8c:	4b07      	ldr	r3, [pc, #28]	; (8004aac <prvAddCurrentTaskToDelayedList+0x6c>)
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	42a2      	cmp	r2, r4
 8004a92:	d9e8      	bls.n	8004a66 <prvAddCurrentTaskToDelayedList+0x26>
					xNextTaskUnblockTime = xTimeToWake;
 8004a94:	601c      	str	r4, [r3, #0]
}
 8004a96:	e7e6      	b.n	8004a66 <prvAddCurrentTaskToDelayedList+0x26>
 8004a98:	200005c8 	.word	0x200005c8
 8004a9c:	200004a8 	.word	0x200004a8
 8004aa0:	200005a0 	.word	0x200005a0
 8004aa4:	200004b0 	.word	0x200004b0
 8004aa8:	200004ac 	.word	0x200004ac
 8004aac:	20000580 	.word	0x20000580

08004ab0 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ab0:	4a07      	ldr	r2, [pc, #28]	; (8004ad0 <prvResetNextTaskUnblockTime+0x20>)
 8004ab2:	6813      	ldr	r3, [r2, #0]
 8004ab4:	6819      	ldr	r1, [r3, #0]
 8004ab6:	4b07      	ldr	r3, [pc, #28]	; (8004ad4 <prvResetNextTaskUnblockTime+0x24>)
 8004ab8:	2900      	cmp	r1, #0
 8004aba:	d103      	bne.n	8004ac4 <prvResetNextTaskUnblockTime+0x14>
		xNextTaskUnblockTime = portMAX_DELAY;
 8004abc:	2201      	movs	r2, #1
 8004abe:	4252      	negs	r2, r2
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ac0:	601a      	str	r2, [r3, #0]
}
 8004ac2:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ac4:	6812      	ldr	r2, [r2, #0]
 8004ac6:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ac8:	68d2      	ldr	r2, [r2, #12]
 8004aca:	6852      	ldr	r2, [r2, #4]
 8004acc:	e7f8      	b.n	8004ac0 <prvResetNextTaskUnblockTime+0x10>
 8004ace:	46c0      	nop			; (mov r8, r8)
 8004ad0:	200004ac 	.word	0x200004ac
 8004ad4:	20000580 	.word	0x20000580

08004ad8 <prvDeleteTCB>:
	{
 8004ad8:	b510      	push	{r4, lr}
 8004ada:	0004      	movs	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004adc:	304c      	adds	r0, #76	; 0x4c
 8004ade:	f000 fcf9 	bl	80054d4 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ae2:	0023      	movs	r3, r4
 8004ae4:	33b1      	adds	r3, #177	; 0xb1
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d106      	bne.n	8004afa <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8004aec:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004aee:	f000 fbe9 	bl	80052c4 <vPortFree>
				vPortFree( pxTCB );
 8004af2:	0020      	movs	r0, r4
 8004af4:	f000 fbe6 	bl	80052c4 <vPortFree>
	}
 8004af8:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d0f9      	beq.n	8004af2 <prvDeleteTCB+0x1a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d0fa      	beq.n	8004af8 <prvDeleteTCB+0x20>
 8004b02:	b672      	cpsid	i
 8004b04:	e7fe      	b.n	8004b04 <prvDeleteTCB+0x2c>
	...

08004b08 <prvIdleTask>:
{
 8004b08:	b570      	push	{r4, r5, r6, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b0a:	4c10      	ldr	r4, [pc, #64]	; (8004b4c <prvIdleTask+0x44>)
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d106      	bne.n	8004b20 <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b12:	4b0f      	ldr	r3, [pc, #60]	; (8004b50 <prvIdleTask+0x48>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d9f7      	bls.n	8004b0a <prvIdleTask+0x2>
				taskYIELD();
 8004b1a:	f000 fac7 	bl	80050ac <vPortYield>
 8004b1e:	e7f4      	b.n	8004b0a <prvIdleTask+0x2>
			taskENTER_CRITICAL();
 8004b20:	f000 fad0 	bl	80050c4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b24:	4b0b      	ldr	r3, [pc, #44]	; (8004b54 <prvIdleTask+0x4c>)
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b2a:	1d28      	adds	r0, r5, #4
 8004b2c:	f7ff ff03 	bl	8004936 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b30:	4a09      	ldr	r2, [pc, #36]	; (8004b58 <prvIdleTask+0x50>)
 8004b32:	6813      	ldr	r3, [r2, #0]
 8004b34:	3b01      	subs	r3, #1
 8004b36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8004b3e:	f000 facd 	bl	80050dc <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8004b42:	0028      	movs	r0, r5
 8004b44:	f7ff ffc8 	bl	8004ad8 <prvDeleteTCB>
 8004b48:	e7df      	b.n	8004b0a <prvIdleTask+0x2>
 8004b4a:	46c0      	nop			; (mov r8, r8)
 8004b4c:	20000544 	.word	0x20000544
 8004b50:	200004b4 	.word	0x200004b4
 8004b54:	200005b4 	.word	0x200005b4
 8004b58:	20000540 	.word	0x20000540

08004b5c <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8004b5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b5e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004b60:	9301      	str	r3, [sp, #4]
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b62:	4b26      	ldr	r3, [pc, #152]	; (8004bfc <prvInitialiseNewTask.constprop.0+0xa0>)
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8004b64:	9000      	str	r0, [sp, #0]
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b66:	18d2      	adds	r2, r2, r3
 8004b68:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004b6a:	0092      	lsls	r2, r2, #2
 8004b6c:	189a      	adds	r2, r3, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004b6e:	2307      	movs	r3, #7
 8004b70:	439a      	bics	r2, r3
 8004b72:	0017      	movs	r7, r2
	if( pcName != NULL )
 8004b74:	2900      	cmp	r1, #0
 8004b76:	d03c      	beq.n	8004bf2 <prvInitialiseNewTask.constprop.0+0x96>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b78:	0020      	movs	r0, r4
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b7a:	2300      	movs	r3, #0
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b7c:	3034      	adds	r0, #52	; 0x34
 8004b7e:	5cca      	ldrb	r2, [r1, r3]
 8004b80:	54c2      	strb	r2, [r0, r3]
			if( pcName[ x ] == ( char ) 0x00 )
 8004b82:	2a00      	cmp	r2, #0
 8004b84:	d002      	beq.n	8004b8c <prvInitialiseNewTask.constprop.0+0x30>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b86:	3301      	adds	r3, #1
 8004b88:	2b10      	cmp	r3, #16
 8004b8a:	d1f8      	bne.n	8004b7e <prvInitialiseNewTask.constprop.0+0x22>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b8c:	0023      	movs	r3, r4
 8004b8e:	2200      	movs	r2, #0
 8004b90:	3343      	adds	r3, #67	; 0x43
 8004b92:	701a      	strb	r2, [r3, #0]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b94:	9d08      	ldr	r5, [sp, #32]
 8004b96:	2d06      	cmp	r5, #6
 8004b98:	d900      	bls.n	8004b9c <prvInitialiseNewTask.constprop.0+0x40>
 8004b9a:	2506      	movs	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 8004b9c:	2600      	movs	r6, #0
	pxNewTCB->uxPriority = uxPriority;
 8004b9e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004ba0:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004ba2:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8004ba4:	64a6      	str	r6, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004ba6:	f7ff fea0 	bl	80048ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004baa:	0020      	movs	r0, r4
 8004bac:	3018      	adds	r0, #24
 8004bae:	f7ff fe9c 	bl	80048ea <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bb2:	2307      	movs	r3, #7
 8004bb4:	1b5d      	subs	r5, r3, r5
		pxNewTCB->ulNotifiedValue = 0;
 8004bb6:	0023      	movs	r3, r4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004bb8:	0020      	movs	r0, r4
		pxNewTCB->ulNotifiedValue = 0;
 8004bba:	33ac      	adds	r3, #172	; 0xac
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004bbc:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bbe:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004bc0:	6264      	str	r4, [r4, #36]	; 0x24
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004bc2:	2260      	movs	r2, #96	; 0x60
		pxNewTCB->ulNotifiedValue = 0;
 8004bc4:	601e      	str	r6, [r3, #0]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004bc6:	0031      	movs	r1, r6
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004bc8:	711e      	strb	r6, [r3, #4]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004bca:	304c      	adds	r0, #76	; 0x4c
 8004bcc:	f000 fbd3 	bl	8005376 <memset>
 8004bd0:	4b0b      	ldr	r3, [pc, #44]	; (8004c00 <prvInitialiseNewTask.constprop.0+0xa4>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004bd2:	0038      	movs	r0, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004bd4:	6523      	str	r3, [r4, #80]	; 0x50
 8004bd6:	4b0b      	ldr	r3, [pc, #44]	; (8004c04 <prvInitialiseNewTask.constprop.0+0xa8>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004bd8:	9a01      	ldr	r2, [sp, #4]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004bda:	6563      	str	r3, [r4, #84]	; 0x54
 8004bdc:	4b0a      	ldr	r3, [pc, #40]	; (8004c08 <prvInitialiseNewTask.constprop.0+0xac>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004bde:	9900      	ldr	r1, [sp, #0]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004be0:	65a3      	str	r3, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004be2:	f000 fa1f 	bl	8005024 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 8004be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004be8:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8004bea:	42b3      	cmp	r3, r6
 8004bec:	d000      	beq.n	8004bf0 <prvInitialiseNewTask.constprop.0+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004bee:	601c      	str	r4, [r3, #0]
}
 8004bf0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004bf2:	0023      	movs	r3, r4
 8004bf4:	3334      	adds	r3, #52	; 0x34
 8004bf6:	7019      	strb	r1, [r3, #0]
 8004bf8:	e7cc      	b.n	8004b94 <prvInitialiseNewTask.constprop.0+0x38>
 8004bfa:	46c0      	nop			; (mov r8, r8)
 8004bfc:	3fffffff 	.word	0x3fffffff
 8004c00:	080060d8 	.word	0x080060d8
 8004c04:	080060f8 	.word	0x080060f8
 8004c08:	080060b8 	.word	0x080060b8

08004c0c <xTaskCreateStatic>:
	{
 8004c0c:	b570      	push	{r4, r5, r6, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004c12:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8004c14:	2d00      	cmp	r5, #0
 8004c16:	d101      	bne.n	8004c1c <xTaskCreateStatic+0x10>
 8004c18:	b672      	cpsid	i
 8004c1a:	e7fe      	b.n	8004c1a <xTaskCreateStatic+0xe>
		configASSERT( pxTaskBuffer != NULL );
 8004c1c:	2c00      	cmp	r4, #0
 8004c1e:	d101      	bne.n	8004c24 <xTaskCreateStatic+0x18>
 8004c20:	b672      	cpsid	i
 8004c22:	e7fe      	b.n	8004c22 <xTaskCreateStatic+0x16>
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c24:	26b4      	movs	r6, #180	; 0xb4
 8004c26:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c28:	9e05      	ldr	r6, [sp, #20]
 8004c2a:	2eb4      	cmp	r6, #180	; 0xb4
 8004c2c:	d001      	beq.n	8004c32 <xTaskCreateStatic+0x26>
 8004c2e:	b672      	cpsid	i
 8004c30:	e7fe      	b.n	8004c30 <xTaskCreateStatic+0x24>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c32:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c34:	0025      	movs	r5, r4
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004c36:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c38:	2602      	movs	r6, #2
 8004c3a:	35b1      	adds	r5, #177	; 0xb1
 8004c3c:	702e      	strb	r6, [r5, #0]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c3e:	ad04      	add	r5, sp, #16
 8004c40:	9501      	str	r5, [sp, #4]
 8004c42:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004c44:	9402      	str	r4, [sp, #8]
 8004c46:	9500      	str	r5, [sp, #0]
 8004c48:	f7ff ff88 	bl	8004b5c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c4c:	0020      	movs	r0, r4
 8004c4e:	f7ff fe83 	bl	8004958 <prvAddNewTaskToReadyList>
	}
 8004c52:	9804      	ldr	r0, [sp, #16]
 8004c54:	b006      	add	sp, #24
 8004c56:	bd70      	pop	{r4, r5, r6, pc}

08004c58 <xTaskCreate>:
	{
 8004c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c5a:	0007      	movs	r7, r0
 8004c5c:	b087      	sub	sp, #28
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c5e:	0090      	lsls	r0, r2, #2
	{
 8004c60:	0016      	movs	r6, r2
 8004c62:	9104      	str	r1, [sp, #16]
 8004c64:	9305      	str	r3, [sp, #20]
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c66:	f000 faab 	bl	80051c0 <pvPortMalloc>
 8004c6a:	1e05      	subs	r5, r0, #0
			if( pxStack != NULL )
 8004c6c:	d01d      	beq.n	8004caa <xTaskCreate+0x52>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c6e:	20b4      	movs	r0, #180	; 0xb4
 8004c70:	f000 faa6 	bl	80051c0 <pvPortMalloc>
 8004c74:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
 8004c76:	d015      	beq.n	8004ca4 <xTaskCreate+0x4c>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c78:	0003      	movs	r3, r0
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	33b1      	adds	r3, #177	; 0xb1
					pxNewTCB->pxStack = pxStack;
 8004c7e:	6305      	str	r5, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c80:	701a      	strb	r2, [r3, #0]
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c84:	0032      	movs	r2, r6
 8004c86:	9301      	str	r3, [sp, #4]
 8004c88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c8a:	9904      	ldr	r1, [sp, #16]
 8004c8c:	9002      	str	r0, [sp, #8]
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	0038      	movs	r0, r7
 8004c92:	9b05      	ldr	r3, [sp, #20]
 8004c94:	f7ff ff62 	bl	8004b5c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c98:	0020      	movs	r0, r4
 8004c9a:	f7ff fe5d 	bl	8004958 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c9e:	2001      	movs	r0, #1
	}
 8004ca0:	b007      	add	sp, #28
 8004ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
 8004ca4:	0028      	movs	r0, r5
 8004ca6:	f000 fb0d 	bl	80052c4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004caa:	2001      	movs	r0, #1
 8004cac:	4240      	negs	r0, r0
		return xReturn;
 8004cae:	e7f7      	b.n	8004ca0 <xTaskCreate+0x48>

08004cb0 <vTaskStartScheduler>:
{
 8004cb0:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004cb2:	2400      	movs	r4, #0
{
 8004cb4:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004cb6:	aa07      	add	r2, sp, #28
 8004cb8:	a906      	add	r1, sp, #24
 8004cba:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004cbc:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004cbe:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004cc0:	f7fd fb86 	bl	80023d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004cc4:	9b05      	ldr	r3, [sp, #20]
 8004cc6:	9a07      	ldr	r2, [sp, #28]
 8004cc8:	9302      	str	r3, [sp, #8]
 8004cca:	9b06      	ldr	r3, [sp, #24]
 8004ccc:	490d      	ldr	r1, [pc, #52]	; (8004d04 <vTaskStartScheduler+0x54>)
 8004cce:	9301      	str	r3, [sp, #4]
 8004cd0:	480d      	ldr	r0, [pc, #52]	; (8004d08 <vTaskStartScheduler+0x58>)
 8004cd2:	0023      	movs	r3, r4
 8004cd4:	9400      	str	r4, [sp, #0]
 8004cd6:	f7ff ff99 	bl	8004c0c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8004cda:	42a0      	cmp	r0, r4
 8004cdc:	d010      	beq.n	8004d00 <vTaskStartScheduler+0x50>
		portDISABLE_INTERRUPTS();
 8004cde:	b672      	cpsid	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004ce0:	4b0a      	ldr	r3, [pc, #40]	; (8004d0c <vTaskStartScheduler+0x5c>)
 8004ce2:	4a0b      	ldr	r2, [pc, #44]	; (8004d10 <vTaskStartScheduler+0x60>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	334c      	adds	r3, #76	; 0x4c
 8004ce8:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8004cea:	2201      	movs	r2, #1
 8004cec:	4b09      	ldr	r3, [pc, #36]	; (8004d14 <vTaskStartScheduler+0x64>)
 8004cee:	4252      	negs	r2, r2
 8004cf0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004cf2:	4b09      	ldr	r3, [pc, #36]	; (8004d18 <vTaskStartScheduler+0x68>)
 8004cf4:	3202      	adds	r2, #2
 8004cf6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004cf8:	4b08      	ldr	r3, [pc, #32]	; (8004d1c <vTaskStartScheduler+0x6c>)
 8004cfa:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8004cfc:	f000 f9a4 	bl	8005048 <xPortStartScheduler>
}
 8004d00:	b008      	add	sp, #32
 8004d02:	bd10      	pop	{r4, pc}
 8004d04:	080060b1 	.word	0x080060b1
 8004d08:	08004b09 	.word	0x08004b09
 8004d0c:	200004a8 	.word	0x200004a8
 8004d10:	20000014 	.word	0x20000014
 8004d14:	20000580 	.word	0x20000580
 8004d18:	2000059c 	.word	0x2000059c
 8004d1c:	200005c8 	.word	0x200005c8

08004d20 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004d20:	4a02      	ldr	r2, [pc, #8]	; (8004d2c <vTaskSuspendAll+0xc>)
 8004d22:	6813      	ldr	r3, [r2, #0]
 8004d24:	3301      	adds	r3, #1
 8004d26:	6013      	str	r3, [r2, #0]
}
 8004d28:	4770      	bx	lr
 8004d2a:	46c0      	nop			; (mov r8, r8)
 8004d2c:	2000054c 	.word	0x2000054c

08004d30 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d30:	4b34      	ldr	r3, [pc, #208]	; (8004e04 <xTaskIncrementTick+0xd4>)
{
 8004d32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d15e      	bne.n	8004df8 <xTaskIncrementTick+0xc8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d3a:	4b33      	ldr	r3, [pc, #204]	; (8004e08 <xTaskIncrementTick+0xd8>)
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	3201      	adds	r2, #1
 8004d40:	9200      	str	r2, [sp, #0]
		xTickCount = xConstTickCount;
 8004d42:	601a      	str	r2, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d44:	2a00      	cmp	r2, #0
 8004d46:	d111      	bne.n	8004d6c <xTaskIncrementTick+0x3c>
			taskSWITCH_DELAYED_LISTS();
 8004d48:	4b30      	ldr	r3, [pc, #192]	; (8004e0c <xTaskIncrementTick+0xdc>)
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	6812      	ldr	r2, [r2, #0]
 8004d4e:	2a00      	cmp	r2, #0
 8004d50:	d001      	beq.n	8004d56 <xTaskIncrementTick+0x26>
 8004d52:	b672      	cpsid	i
 8004d54:	e7fe      	b.n	8004d54 <xTaskIncrementTick+0x24>
 8004d56:	4a2e      	ldr	r2, [pc, #184]	; (8004e10 <xTaskIncrementTick+0xe0>)
 8004d58:	6819      	ldr	r1, [r3, #0]
 8004d5a:	6810      	ldr	r0, [r2, #0]
 8004d5c:	6018      	str	r0, [r3, #0]
 8004d5e:	6011      	str	r1, [r2, #0]
 8004d60:	4a2c      	ldr	r2, [pc, #176]	; (8004e14 <xTaskIncrementTick+0xe4>)
 8004d62:	6813      	ldr	r3, [r2, #0]
 8004d64:	3301      	adds	r3, #1
 8004d66:	6013      	str	r3, [r2, #0]
 8004d68:	f7ff fea2 	bl	8004ab0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d6c:	4e2a      	ldr	r6, [pc, #168]	; (8004e18 <xTaskIncrementTick+0xe8>)
 8004d6e:	9a00      	ldr	r2, [sp, #0]
 8004d70:	6833      	ldr	r3, [r6, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8004d72:	2400      	movs	r4, #0
 8004d74:	4f29      	ldr	r7, [pc, #164]	; (8004e1c <xTaskIncrementTick+0xec>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d935      	bls.n	8004de6 <xTaskIncrementTick+0xb6>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d7e:	2314      	movs	r3, #20
 8004d80:	4353      	muls	r3, r2
 8004d82:	4a27      	ldr	r2, [pc, #156]	; (8004e20 <xTaskIncrementTick+0xf0>)
 8004d84:	58d3      	ldr	r3, [r2, r3]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d900      	bls.n	8004d8c <xTaskIncrementTick+0x5c>
				xSwitchRequired = pdTRUE;
 8004d8a:	2401      	movs	r4, #1
		if( xYieldPending != pdFALSE )
 8004d8c:	4b25      	ldr	r3, [pc, #148]	; (8004e24 <xTaskIncrementTick+0xf4>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d000      	beq.n	8004d96 <xTaskIncrementTick+0x66>
			xSwitchRequired = pdTRUE;
 8004d94:	2401      	movs	r4, #1
}
 8004d96:	0020      	movs	r0, r4
 8004d98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d9a:	681b      	ldr	r3, [r3, #0]
					if( xConstTickCount < xItemValue )
 8004d9c:	9a00      	ldr	r2, [sp, #0]
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	68dd      	ldr	r5, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004da2:	686b      	ldr	r3, [r5, #4]
					if( xConstTickCount < xItemValue )
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d325      	bcc.n	8004df4 <xTaskIncrementTick+0xc4>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004da8:	1d2b      	adds	r3, r5, #4
 8004daa:	0018      	movs	r0, r3
 8004dac:	9301      	str	r3, [sp, #4]
 8004dae:	f7ff fdc2 	bl	8004936 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004db2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d003      	beq.n	8004dc0 <xTaskIncrementTick+0x90>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004db8:	0028      	movs	r0, r5
 8004dba:	3018      	adds	r0, #24
 8004dbc:	f7ff fdbb 	bl	8004936 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004dc0:	4b19      	ldr	r3, [pc, #100]	; (8004e28 <xTaskIncrementTick+0xf8>)
 8004dc2:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	4290      	cmp	r0, r2
 8004dc8:	d900      	bls.n	8004dcc <xTaskIncrementTick+0x9c>
 8004dca:	6018      	str	r0, [r3, #0]
 8004dcc:	2314      	movs	r3, #20
 8004dce:	4358      	muls	r0, r3
 8004dd0:	4b13      	ldr	r3, [pc, #76]	; (8004e20 <xTaskIncrementTick+0xf0>)
 8004dd2:	1d29      	adds	r1, r5, #4
 8004dd4:	1818      	adds	r0, r3, r0
 8004dd6:	f7ff fd8b 	bl	80048f0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d300      	bcc.n	8004de6 <xTaskIncrementTick+0xb6>
							xSwitchRequired = pdTRUE;
 8004de4:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004de6:	4b09      	ldr	r3, [pc, #36]	; (8004e0c <xTaskIncrementTick+0xdc>)
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	6812      	ldr	r2, [r2, #0]
 8004dec:	2a00      	cmp	r2, #0
 8004dee:	d1d4      	bne.n	8004d9a <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004df0:	2301      	movs	r3, #1
 8004df2:	425b      	negs	r3, r3
						xNextTaskUnblockTime = xItemValue;
 8004df4:	6033      	str	r3, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004df6:	e7c0      	b.n	8004d7a <xTaskIncrementTick+0x4a>
		++uxPendedTicks;
 8004df8:	4a0c      	ldr	r2, [pc, #48]	; (8004e2c <xTaskIncrementTick+0xfc>)
BaseType_t xSwitchRequired = pdFALSE;
 8004dfa:	2400      	movs	r4, #0
		++uxPendedTicks;
 8004dfc:	6813      	ldr	r3, [r2, #0]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	6013      	str	r3, [r2, #0]
 8004e02:	e7c3      	b.n	8004d8c <xTaskIncrementTick+0x5c>
 8004e04:	2000054c 	.word	0x2000054c
 8004e08:	200005c8 	.word	0x200005c8
 8004e0c:	200004ac 	.word	0x200004ac
 8004e10:	200004b0 	.word	0x200004b0
 8004e14:	20000584 	.word	0x20000584
 8004e18:	20000580 	.word	0x20000580
 8004e1c:	200004a8 	.word	0x200004a8
 8004e20:	200004b4 	.word	0x200004b4
 8004e24:	200005cc 	.word	0x200005cc
 8004e28:	20000554 	.word	0x20000554
 8004e2c:	20000548 	.word	0x20000548

08004e30 <xTaskResumeAll>:
{
 8004e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 8004e32:	4c2b      	ldr	r4, [pc, #172]	; (8004ee0 <xTaskResumeAll+0xb0>)
 8004e34:	6823      	ldr	r3, [r4, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <xTaskResumeAll+0xe>
 8004e3a:	b672      	cpsid	i
 8004e3c:	e7fe      	b.n	8004e3c <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 8004e3e:	f000 f941 	bl	80050c4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004e42:	6823      	ldr	r3, [r4, #0]
 8004e44:	3b01      	subs	r3, #1
 8004e46:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e48:	6824      	ldr	r4, [r4, #0]
 8004e4a:	2c00      	cmp	r4, #0
 8004e4c:	d004      	beq.n	8004e58 <xTaskResumeAll+0x28>
BaseType_t xAlreadyYielded = pdFALSE;
 8004e4e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004e50:	f000 f944 	bl	80050dc <vPortExitCritical>
}
 8004e54:	0020      	movs	r0, r4
 8004e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004e58:	4b22      	ldr	r3, [pc, #136]	; (8004ee4 <xTaskResumeAll+0xb4>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d0f6      	beq.n	8004e4e <xTaskResumeAll+0x1e>
					prvAddTaskToReadyList( pxTCB );
 8004e60:	2614      	movs	r6, #20
						xYieldPending = pdTRUE;
 8004e62:	2701      	movs	r7, #1
 8004e64:	e01d      	b.n	8004ea2 <xTaskResumeAll+0x72>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e6a:	0020      	movs	r0, r4
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e6c:	1d25      	adds	r5, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e6e:	3018      	adds	r0, #24
 8004e70:	f7ff fd61 	bl	8004936 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e74:	0028      	movs	r0, r5
 8004e76:	f7ff fd5e 	bl	8004936 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e7a:	4b1b      	ldr	r3, [pc, #108]	; (8004ee8 <xTaskResumeAll+0xb8>)
 8004e7c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	4290      	cmp	r0, r2
 8004e82:	d900      	bls.n	8004e86 <xTaskResumeAll+0x56>
 8004e84:	6018      	str	r0, [r3, #0]
 8004e86:	4370      	muls	r0, r6
 8004e88:	4b18      	ldr	r3, [pc, #96]	; (8004eec <xTaskResumeAll+0xbc>)
 8004e8a:	0029      	movs	r1, r5
 8004e8c:	18c0      	adds	r0, r0, r3
 8004e8e:	f7ff fd2f 	bl	80048f0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e92:	4b17      	ldr	r3, [pc, #92]	; (8004ef0 <xTaskResumeAll+0xc0>)
 8004e94:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d301      	bcc.n	8004ea2 <xTaskResumeAll+0x72>
						xYieldPending = pdTRUE;
 8004e9e:	4b15      	ldr	r3, [pc, #84]	; (8004ef4 <xTaskResumeAll+0xc4>)
 8004ea0:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ea2:	4b15      	ldr	r3, [pc, #84]	; (8004ef8 <xTaskResumeAll+0xc8>)
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	2a00      	cmp	r2, #0
 8004ea8:	d1dd      	bne.n	8004e66 <xTaskResumeAll+0x36>
				if( pxTCB != NULL )
 8004eaa:	2c00      	cmp	r4, #0
 8004eac:	d001      	beq.n	8004eb2 <xTaskResumeAll+0x82>
					prvResetNextTaskUnblockTime();
 8004eae:	f7ff fdff 	bl	8004ab0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004eb2:	4d12      	ldr	r5, [pc, #72]	; (8004efc <xTaskResumeAll+0xcc>)
 8004eb4:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004eb6:	2c00      	cmp	r4, #0
 8004eb8:	d00a      	beq.n	8004ed0 <xTaskResumeAll+0xa0>
								xYieldPending = pdTRUE;
 8004eba:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 8004ebc:	f7ff ff38 	bl	8004d30 <xTaskIncrementTick>
 8004ec0:	2800      	cmp	r0, #0
 8004ec2:	d001      	beq.n	8004ec8 <xTaskResumeAll+0x98>
								xYieldPending = pdTRUE;
 8004ec4:	4b0b      	ldr	r3, [pc, #44]	; (8004ef4 <xTaskResumeAll+0xc4>)
 8004ec6:	601e      	str	r6, [r3, #0]
							--uxPendedCounts;
 8004ec8:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004eca:	2c00      	cmp	r4, #0
 8004ecc:	d1f6      	bne.n	8004ebc <xTaskResumeAll+0x8c>
						uxPendedTicks = 0;
 8004ece:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8004ed0:	4b08      	ldr	r3, [pc, #32]	; (8004ef4 <xTaskResumeAll+0xc4>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0ba      	beq.n	8004e4e <xTaskResumeAll+0x1e>
					taskYIELD_IF_USING_PREEMPTION();
 8004ed8:	f000 f8e8 	bl	80050ac <vPortYield>
						xAlreadyYielded = pdTRUE;
 8004edc:	2401      	movs	r4, #1
 8004ede:	e7b7      	b.n	8004e50 <xTaskResumeAll+0x20>
 8004ee0:	2000054c 	.word	0x2000054c
 8004ee4:	20000540 	.word	0x20000540
 8004ee8:	20000554 	.word	0x20000554
 8004eec:	200004b4 	.word	0x200004b4
 8004ef0:	200004a8 	.word	0x200004a8
 8004ef4:	200005cc 	.word	0x200005cc
 8004ef8:	20000588 	.word	0x20000588
 8004efc:	20000548 	.word	0x20000548

08004f00 <vTaskDelay>:
	{
 8004f00:	b570      	push	{r4, r5, r6, lr}
 8004f02:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f04:	d102      	bne.n	8004f0c <vTaskDelay+0xc>
			portYIELD_WITHIN_API();
 8004f06:	f000 f8d1 	bl	80050ac <vPortYield>
	}
 8004f0a:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8004f0c:	4b08      	ldr	r3, [pc, #32]	; (8004f30 <vTaskDelay+0x30>)
 8004f0e:	681d      	ldr	r5, [r3, #0]
 8004f10:	2d00      	cmp	r5, #0
 8004f12:	d001      	beq.n	8004f18 <vTaskDelay+0x18>
 8004f14:	b672      	cpsid	i
 8004f16:	e7fe      	b.n	8004f16 <vTaskDelay+0x16>
			vTaskSuspendAll();
 8004f18:	f7ff ff02 	bl	8004d20 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f1c:	0029      	movs	r1, r5
 8004f1e:	0020      	movs	r0, r4
 8004f20:	f7ff fd8e 	bl	8004a40 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8004f24:	f7ff ff84 	bl	8004e30 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8004f28:	2800      	cmp	r0, #0
 8004f2a:	d0ec      	beq.n	8004f06 <vTaskDelay+0x6>
 8004f2c:	e7ed      	b.n	8004f0a <vTaskDelay+0xa>
 8004f2e:	46c0      	nop			; (mov r8, r8)
 8004f30:	2000054c 	.word	0x2000054c

08004f34 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f34:	4b17      	ldr	r3, [pc, #92]	; (8004f94 <vTaskSwitchContext+0x60>)
{
 8004f36:	b530      	push	{r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	4b17      	ldr	r3, [pc, #92]	; (8004f98 <vTaskSwitchContext+0x64>)
 8004f3c:	2a00      	cmp	r2, #0
 8004f3e:	d002      	beq.n	8004f46 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 8004f40:	2201      	movs	r2, #1
 8004f42:	601a      	str	r2, [r3, #0]
}
 8004f44:	bd30      	pop	{r4, r5, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f46:	2514      	movs	r5, #20
 8004f48:	4814      	ldr	r0, [pc, #80]	; (8004f9c <vTaskSwitchContext+0x68>)
		xYieldPending = pdFALSE;
 8004f4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f4c:	6802      	ldr	r2, [r0, #0]
 8004f4e:	4914      	ldr	r1, [pc, #80]	; (8004fa0 <vTaskSwitchContext+0x6c>)
 8004f50:	002b      	movs	r3, r5
 8004f52:	4353      	muls	r3, r2
 8004f54:	585c      	ldr	r4, [r3, r1]
 8004f56:	2c00      	cmp	r4, #0
 8004f58:	d016      	beq.n	8004f88 <vTaskSwitchContext+0x54>
 8004f5a:	18cc      	adds	r4, r1, r3
 8004f5c:	6865      	ldr	r5, [r4, #4]
 8004f5e:	3308      	adds	r3, #8
 8004f60:	686d      	ldr	r5, [r5, #4]
 8004f62:	185b      	adds	r3, r3, r1
 8004f64:	6065      	str	r5, [r4, #4]
 8004f66:	429d      	cmp	r5, r3
 8004f68:	d101      	bne.n	8004f6e <vTaskSwitchContext+0x3a>
 8004f6a:	686b      	ldr	r3, [r5, #4]
 8004f6c:	6063      	str	r3, [r4, #4]
 8004f6e:	2314      	movs	r3, #20
 8004f70:	4353      	muls	r3, r2
 8004f72:	18c9      	adds	r1, r1, r3
 8004f74:	684b      	ldr	r3, [r1, #4]
 8004f76:	68d9      	ldr	r1, [r3, #12]
 8004f78:	4b0a      	ldr	r3, [pc, #40]	; (8004fa4 <vTaskSwitchContext+0x70>)
 8004f7a:	6019      	str	r1, [r3, #0]
 8004f7c:	6002      	str	r2, [r0, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a09      	ldr	r2, [pc, #36]	; (8004fa8 <vTaskSwitchContext+0x74>)
 8004f82:	334c      	adds	r3, #76	; 0x4c
 8004f84:	6013      	str	r3, [r2, #0]
}
 8004f86:	e7dd      	b.n	8004f44 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f88:	2a00      	cmp	r2, #0
 8004f8a:	d101      	bne.n	8004f90 <vTaskSwitchContext+0x5c>
 8004f8c:	b672      	cpsid	i
 8004f8e:	e7fe      	b.n	8004f8e <vTaskSwitchContext+0x5a>
 8004f90:	3a01      	subs	r2, #1
 8004f92:	e7dd      	b.n	8004f50 <vTaskSwitchContext+0x1c>
 8004f94:	2000054c 	.word	0x2000054c
 8004f98:	200005cc 	.word	0x200005cc
 8004f9c:	20000554 	.word	0x20000554
 8004fa0:	200004b4 	.word	0x200004b4
 8004fa4:	200004a8 	.word	0x200004a8
 8004fa8:	20000014 	.word	0x20000014

08004fac <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8004fac:	4b05      	ldr	r3, [pc, #20]	; (8004fc4 <xTaskGetSchedulerState+0x18>)
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004fae:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d004      	beq.n	8004fc0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fb6:	4b04      	ldr	r3, [pc, #16]	; (8004fc8 <xTaskGetSchedulerState+0x1c>)
 8004fb8:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8004fba:	4243      	negs	r3, r0
 8004fbc:	4158      	adcs	r0, r3
 8004fbe:	0040      	lsls	r0, r0, #1
	}
 8004fc0:	4770      	bx	lr
 8004fc2:	46c0      	nop			; (mov r8, r8)
 8004fc4:	2000059c 	.word	0x2000059c
 8004fc8:	2000054c 	.word	0x2000054c

08004fcc <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 8004fcc:	2300      	movs	r3, #0
{
 8004fce:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8004fd0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004fd2:	4b06      	ldr	r3, [pc, #24]	; (8004fec <prvTaskExitError+0x20>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	d001      	beq.n	8004fde <prvTaskExitError+0x12>
 8004fda:	b672      	cpsid	i
 8004fdc:	e7fe      	b.n	8004fdc <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
 8004fde:	b672      	cpsid	i
	while( ulDummy == 0 )
 8004fe0:	9b01      	ldr	r3, [sp, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d0fc      	beq.n	8004fe0 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004fe6:	b002      	add	sp, #8
 8004fe8:	4770      	bx	lr
 8004fea:	46c0      	nop			; (mov r8, r8)
 8004fec:	20000010 	.word	0x20000010

08004ff0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8004ff0:	4a0b      	ldr	r2, [pc, #44]	; (8005020 <pxCurrentTCBConst2>)
 8004ff2:	6813      	ldr	r3, [r2, #0]
 8004ff4:	6818      	ldr	r0, [r3, #0]
 8004ff6:	3020      	adds	r0, #32
 8004ff8:	f380 8809 	msr	PSP, r0
 8004ffc:	2002      	movs	r0, #2
 8004ffe:	f380 8814 	msr	CONTROL, r0
 8005002:	f3bf 8f6f 	isb	sy
 8005006:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005008:	46ae      	mov	lr, r5
 800500a:	bc08      	pop	{r3}
 800500c:	bc04      	pop	{r2}
 800500e:	b662      	cpsie	i
 8005010:	4718      	bx	r3
 8005012:	46c0      	nop			; (mov r8, r8)
 8005014:	46c0      	nop			; (mov r8, r8)
 8005016:	46c0      	nop			; (mov r8, r8)
 8005018:	46c0      	nop			; (mov r8, r8)
 800501a:	46c0      	nop			; (mov r8, r8)
 800501c:	46c0      	nop			; (mov r8, r8)
 800501e:	46c0      	nop			; (mov r8, r8)

08005020 <pxCurrentTCBConst2>:
 8005020:	200004a8 	.word	0x200004a8

08005024 <pxPortInitialiseStack>:
{
 8005024:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005026:	2480      	movs	r4, #128	; 0x80
 8005028:	1f03      	subs	r3, r0, #4
 800502a:	0464      	lsls	r4, r4, #17
 800502c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800502e:	3b04      	subs	r3, #4
 8005030:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005032:	4903      	ldr	r1, [pc, #12]	; (8005040 <pxPortInitialiseStack+0x1c>)
 8005034:	3b04      	subs	r3, #4
 8005036:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005038:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 800503a:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800503c:	601a      	str	r2, [r3, #0]
}
 800503e:	bd10      	pop	{r4, pc}
 8005040:	08004fcd 	.word	0x08004fcd

08005044 <SVC_Handler>:
}
 8005044:	4770      	bx	lr
	...

08005048 <xPortStartScheduler>:
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8005048:	22ff      	movs	r2, #255	; 0xff
 800504a:	4b12      	ldr	r3, [pc, #72]	; (8005094 <xPortStartScheduler+0x4c>)
 800504c:	0412      	lsls	r2, r2, #16
 800504e:	6819      	ldr	r1, [r3, #0]
{
 8005050:	b570      	push	{r4, r5, r6, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8005052:	430a      	orrs	r2, r1
 8005054:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8005056:	22ff      	movs	r2, #255	; 0xff
 8005058:	6819      	ldr	r1, [r3, #0]
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 800505a:	2400      	movs	r4, #0
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800505c:	0612      	lsls	r2, r2, #24
 800505e:	430a      	orrs	r2, r1
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005060:	21fa      	movs	r1, #250	; 0xfa
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8005062:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL = 0UL;
 8005064:	4d0c      	ldr	r5, [pc, #48]	; (8005098 <xPortStartScheduler+0x50>)
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8005066:	4b0d      	ldr	r3, [pc, #52]	; (800509c <xPortStartScheduler+0x54>)
	portNVIC_SYSTICK_CTRL = 0UL;
 8005068:	602c      	str	r4, [r5, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 800506a:	601c      	str	r4, [r3, #0]
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800506c:	4b0c      	ldr	r3, [pc, #48]	; (80050a0 <xPortStartScheduler+0x58>)
 800506e:	0089      	lsls	r1, r1, #2
 8005070:	6818      	ldr	r0, [r3, #0]
 8005072:	f7fb f853 	bl	800011c <__udivsi3>
 8005076:	4b0b      	ldr	r3, [pc, #44]	; (80050a4 <xPortStartScheduler+0x5c>)
 8005078:	3801      	subs	r0, #1
 800507a:	6018      	str	r0, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800507c:	2307      	movs	r3, #7
 800507e:	602b      	str	r3, [r5, #0]
	uxCriticalNesting = 0;
 8005080:	4b09      	ldr	r3, [pc, #36]	; (80050a8 <xPortStartScheduler+0x60>)
 8005082:	601c      	str	r4, [r3, #0]
	vPortStartFirstTask();
 8005084:	f7ff ffb4 	bl	8004ff0 <vPortStartFirstTask>
	vTaskSwitchContext();
 8005088:	f7ff ff54 	bl	8004f34 <vTaskSwitchContext>
	prvTaskExitError();
 800508c:	f7ff ff9e 	bl	8004fcc <prvTaskExitError>
}
 8005090:	0020      	movs	r0, r4
 8005092:	bd70      	pop	{r4, r5, r6, pc}
 8005094:	e000ed20 	.word	0xe000ed20
 8005098:	e000e010 	.word	0xe000e010
 800509c:	e000e018 	.word	0xe000e018
 80050a0:	20000004 	.word	0x20000004
 80050a4:	e000e014 	.word	0xe000e014
 80050a8:	20000010 	.word	0x20000010

080050ac <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80050ac:	2280      	movs	r2, #128	; 0x80
 80050ae:	4b04      	ldr	r3, [pc, #16]	; (80050c0 <vPortYield+0x14>)
 80050b0:	0552      	lsls	r2, r2, #21
 80050b2:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80050b4:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80050b8:	f3bf 8f6f 	isb	sy
}
 80050bc:	4770      	bx	lr
 80050be:	46c0      	nop			; (mov r8, r8)
 80050c0:	e000ed04 	.word	0xe000ed04

080050c4 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 80050c4:	b672      	cpsid	i
    uxCriticalNesting++;
 80050c6:	4a04      	ldr	r2, [pc, #16]	; (80050d8 <vPortEnterCritical+0x14>)
 80050c8:	6813      	ldr	r3, [r2, #0]
 80050ca:	3301      	adds	r3, #1
 80050cc:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
 80050ce:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80050d2:	f3bf 8f6f 	isb	sy
}
 80050d6:	4770      	bx	lr
 80050d8:	20000010 	.word	0x20000010

080050dc <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80050dc:	4a05      	ldr	r2, [pc, #20]	; (80050f4 <vPortExitCritical+0x18>)
 80050de:	6813      	ldr	r3, [r2, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d101      	bne.n	80050e8 <vPortExitCritical+0xc>
 80050e4:	b672      	cpsid	i
 80050e6:	e7fe      	b.n	80050e6 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 80050e8:	3b01      	subs	r3, #1
 80050ea:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d100      	bne.n	80050f2 <vPortExitCritical+0x16>
        portENABLE_INTERRUPTS();
 80050f0:	b662      	cpsie	i
}
 80050f2:	4770      	bx	lr
 80050f4:	20000010 	.word	0x20000010

080050f8 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 80050f8:	f3ef 8010 	mrs	r0, PRIMASK
 80050fc:	b672      	cpsid	i
 80050fe:	4770      	bx	lr

08005100 <vClearInterruptMaskFromISR>:
	__asm volatile(
 8005100:	f380 8810 	msr	PRIMASK, r0
 8005104:	4770      	bx	lr
	...

08005110 <PendSV_Handler>:
	__asm volatile
 8005110:	f3ef 8009 	mrs	r0, PSP
 8005114:	4b0e      	ldr	r3, [pc, #56]	; (8005150 <pxCurrentTCBConst>)
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	3820      	subs	r0, #32
 800511a:	6010      	str	r0, [r2, #0]
 800511c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800511e:	4644      	mov	r4, r8
 8005120:	464d      	mov	r5, r9
 8005122:	4656      	mov	r6, sl
 8005124:	465f      	mov	r7, fp
 8005126:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005128:	b508      	push	{r3, lr}
 800512a:	b672      	cpsid	i
 800512c:	f7ff ff02 	bl	8004f34 <vTaskSwitchContext>
 8005130:	b662      	cpsie	i
 8005132:	bc0c      	pop	{r2, r3}
 8005134:	6811      	ldr	r1, [r2, #0]
 8005136:	6808      	ldr	r0, [r1, #0]
 8005138:	3010      	adds	r0, #16
 800513a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800513c:	46a0      	mov	r8, r4
 800513e:	46a9      	mov	r9, r5
 8005140:	46b2      	mov	sl, r6
 8005142:	46bb      	mov	fp, r7
 8005144:	f380 8809 	msr	PSP, r0
 8005148:	3820      	subs	r0, #32
 800514a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800514c:	4718      	bx	r3
 800514e:	46c0      	nop			; (mov r8, r8)

08005150 <pxCurrentTCBConst>:
 8005150:	200004a8 	.word	0x200004a8

08005154 <xPortSysTickHandler>:
{
 8005154:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8005156:	f7ff ffcf 	bl	80050f8 <ulSetInterruptMaskFromISR>
 800515a:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800515c:	f7ff fde8 	bl	8004d30 <xTaskIncrementTick>
 8005160:	2800      	cmp	r0, #0
 8005162:	d003      	beq.n	800516c <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8005164:	2280      	movs	r2, #128	; 0x80
 8005166:	4b03      	ldr	r3, [pc, #12]	; (8005174 <xPortSysTickHandler+0x20>)
 8005168:	0552      	lsls	r2, r2, #21
 800516a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800516c:	0020      	movs	r0, r4
 800516e:	f7ff ffc7 	bl	8005100 <vClearInterruptMaskFromISR>
}
 8005172:	bd10      	pop	{r4, pc}
 8005174:	e000ed04 	.word	0xe000ed04

08005178 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005178:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800517a:	4b0f      	ldr	r3, [pc, #60]	; (80051b8 <prvInsertBlockIntoFreeList+0x40>)
 800517c:	001a      	movs	r2, r3
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4283      	cmp	r3, r0
 8005182:	d3fb      	bcc.n	800517c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005184:	6854      	ldr	r4, [r2, #4]
 8005186:	1911      	adds	r1, r2, r4
 8005188:	4288      	cmp	r0, r1
 800518a:	d103      	bne.n	8005194 <prvInsertBlockIntoFreeList+0x1c>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800518c:	6841      	ldr	r1, [r0, #4]
 800518e:	0010      	movs	r0, r2
 8005190:	1909      	adds	r1, r1, r4
 8005192:	6051      	str	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005194:	6841      	ldr	r1, [r0, #4]
 8005196:	1844      	adds	r4, r0, r1
 8005198:	42a3      	cmp	r3, r4
 800519a:	d107      	bne.n	80051ac <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800519c:	4c07      	ldr	r4, [pc, #28]	; (80051bc <prvInsertBlockIntoFreeList+0x44>)
 800519e:	6824      	ldr	r4, [r4, #0]
 80051a0:	42a3      	cmp	r3, r4
 80051a2:	d003      	beq.n	80051ac <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80051a4:	685c      	ldr	r4, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80051a6:	681b      	ldr	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80051a8:	1861      	adds	r1, r4, r1
 80051aa:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80051ac:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80051ae:	4290      	cmp	r0, r2
 80051b0:	d000      	beq.n	80051b4 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80051b2:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051b4:	bd10      	pop	{r4, pc}
 80051b6:	46c0      	nop			; (mov r8, r8)
 80051b8:	200011e0 	.word	0x200011e0
 80051bc:	200005d0 	.word	0x200005d0

080051c0 <pvPortMalloc>:
{
 80051c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c2:	0004      	movs	r4, r0
	vTaskSuspendAll();
 80051c4:	f7ff fdac 	bl	8004d20 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80051c8:	4a38      	ldr	r2, [pc, #224]	; (80052ac <pvPortMalloc+0xec>)
 80051ca:	4839      	ldr	r0, [pc, #228]	; (80052b0 <pvPortMalloc+0xf0>)
 80051cc:	6813      	ldr	r3, [r2, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d11e      	bne.n	8005210 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 80051d2:	4938      	ldr	r1, [pc, #224]	; (80052b4 <pvPortMalloc+0xf4>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80051d4:	3307      	adds	r3, #7
 80051d6:	4219      	tst	r1, r3
 80051d8:	d044      	beq.n	8005264 <pvPortMalloc+0xa4>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80051da:	18cd      	adds	r5, r1, r3
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051dc:	439d      	bics	r5, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80051de:	23c0      	movs	r3, #192	; 0xc0
 80051e0:	011b      	lsls	r3, r3, #4
 80051e2:	18c9      	adds	r1, r1, r3
 80051e4:	1b4b      	subs	r3, r1, r5
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051e6:	0029      	movs	r1, r5
	xStart.xBlockSize = ( size_t ) 0;
 80051e8:	2500      	movs	r5, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051ea:	4e33      	ldr	r6, [pc, #204]	; (80052b8 <pvPortMalloc+0xf8>)
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80051ec:	18cb      	adds	r3, r1, r3
	xStart.xBlockSize = ( size_t ) 0;
 80051ee:	6075      	str	r5, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051f0:	6031      	str	r1, [r6, #0]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051f2:	2607      	movs	r6, #7
	uxAddress -= xHeapStructSize;
 80051f4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051f6:	43b3      	bics	r3, r6
	pxEnd->pxNextFreeBlock = NULL;
 80051f8:	601d      	str	r5, [r3, #0]
	pxEnd->xBlockSize = 0;
 80051fa:	605d      	str	r5, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051fc:	1a5d      	subs	r5, r3, r1
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051fe:	c128      	stmia	r1!, {r3, r5}
	pxEnd = ( void * ) uxAddress;
 8005200:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005202:	4b2e      	ldr	r3, [pc, #184]	; (80052bc <pvPortMalloc+0xfc>)
 8005204:	601d      	str	r5, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005206:	4b2e      	ldr	r3, [pc, #184]	; (80052c0 <pvPortMalloc+0x100>)
 8005208:	601d      	str	r5, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800520a:	2380      	movs	r3, #128	; 0x80
 800520c:	061b      	lsls	r3, r3, #24
 800520e:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005210:	6806      	ldr	r6, [r0, #0]
 8005212:	4234      	tst	r4, r6
 8005214:	d145      	bne.n	80052a2 <pvPortMalloc+0xe2>
			if( xWantedSize > 0 )
 8005216:	2c00      	cmp	r4, #0
 8005218:	d043      	beq.n	80052a2 <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 800521a:	0023      	movs	r3, r4
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800521c:	2107      	movs	r1, #7
				xWantedSize += xHeapStructSize;
 800521e:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005220:	420b      	tst	r3, r1
 8005222:	d001      	beq.n	8005228 <pvPortMalloc+0x68>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005224:	438b      	bics	r3, r1
 8005226:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005228:	2b00      	cmp	r3, #0
 800522a:	d03a      	beq.n	80052a2 <pvPortMalloc+0xe2>
 800522c:	4924      	ldr	r1, [pc, #144]	; (80052c0 <pvPortMalloc+0x100>)
 800522e:	680d      	ldr	r5, [r1, #0]
 8005230:	429d      	cmp	r5, r3
 8005232:	d336      	bcc.n	80052a2 <pvPortMalloc+0xe2>
				pxBlock = xStart.pxNextFreeBlock;
 8005234:	4920      	ldr	r1, [pc, #128]	; (80052b8 <pvPortMalloc+0xf8>)
 8005236:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005238:	6860      	ldr	r0, [r4, #4]
 800523a:	4298      	cmp	r0, r3
 800523c:	d203      	bcs.n	8005246 <pvPortMalloc+0x86>
 800523e:	6827      	ldr	r7, [r4, #0]
 8005240:	46bc      	mov	ip, r7
 8005242:	2f00      	cmp	r7, #0
 8005244:	d111      	bne.n	800526a <pvPortMalloc+0xaa>
				if( pxBlock != pxEnd )
 8005246:	6812      	ldr	r2, [r2, #0]
 8005248:	42a2      	cmp	r2, r4
 800524a:	d02a      	beq.n	80052a2 <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800524c:	680a      	ldr	r2, [r1, #0]
 800524e:	0017      	movs	r7, r2
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005250:	6822      	ldr	r2, [r4, #0]
 8005252:	600a      	str	r2, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005254:	1ac2      	subs	r2, r0, r3
 8005256:	2a10      	cmp	r2, #16
 8005258:	d90e      	bls.n	8005278 <pvPortMalloc+0xb8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800525a:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800525c:	0741      	lsls	r1, r0, #29
 800525e:	d007      	beq.n	8005270 <pvPortMalloc+0xb0>
 8005260:	b672      	cpsid	i
 8005262:	e7fe      	b.n	8005262 <pvPortMalloc+0xa2>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005264:	23c0      	movs	r3, #192	; 0xc0
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	e7be      	b.n	80051e8 <pvPortMalloc+0x28>
 800526a:	0021      	movs	r1, r4
 800526c:	4664      	mov	r4, ip
 800526e:	e7e3      	b.n	8005238 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005270:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005272:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005274:	f7ff ff80 	bl	8005178 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005278:	6863      	ldr	r3, [r4, #4]
 800527a:	4a11      	ldr	r2, [pc, #68]	; (80052c0 <pvPortMalloc+0x100>)
 800527c:	1aed      	subs	r5, r5, r3
 800527e:	6015      	str	r5, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005280:	4a0e      	ldr	r2, [pc, #56]	; (80052bc <pvPortMalloc+0xfc>)
 8005282:	6811      	ldr	r1, [r2, #0]
 8005284:	428d      	cmp	r5, r1
 8005286:	d200      	bcs.n	800528a <pvPortMalloc+0xca>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005288:	6015      	str	r5, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800528a:	431e      	orrs	r6, r3
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800528c:	003d      	movs	r5, r7
					pxBlock->pxNextFreeBlock = NULL;
 800528e:	2300      	movs	r3, #0
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005290:	3508      	adds	r5, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005292:	6066      	str	r6, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005294:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 8005296:	f7ff fdcb 	bl	8004e30 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800529a:	076b      	lsls	r3, r5, #29
 800529c:	d003      	beq.n	80052a6 <pvPortMalloc+0xe6>
 800529e:	b672      	cpsid	i
 80052a0:	e7fe      	b.n	80052a0 <pvPortMalloc+0xe0>
void *pvReturn = NULL;
 80052a2:	2500      	movs	r5, #0
 80052a4:	e7f7      	b.n	8005296 <pvPortMalloc+0xd6>
}
 80052a6:	0028      	movs	r0, r5
 80052a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052aa:	46c0      	nop			; (mov r8, r8)
 80052ac:	200005d0 	.word	0x200005d0
 80052b0:	200011d4 	.word	0x200011d4
 80052b4:	200005d4 	.word	0x200005d4
 80052b8:	200011e0 	.word	0x200011e0
 80052bc:	200011dc 	.word	0x200011dc
 80052c0:	200011d8 	.word	0x200011d8

080052c4 <vPortFree>:
{
 80052c4:	b510      	push	{r4, lr}
	if( pv != NULL )
 80052c6:	2800      	cmp	r0, #0
 80052c8:	d01b      	beq.n	8005302 <vPortFree+0x3e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80052ca:	4a0e      	ldr	r2, [pc, #56]	; (8005304 <vPortFree+0x40>)
 80052cc:	3808      	subs	r0, #8
 80052ce:	6843      	ldr	r3, [r0, #4]
 80052d0:	6812      	ldr	r2, [r2, #0]
 80052d2:	0004      	movs	r4, r0
 80052d4:	421a      	tst	r2, r3
 80052d6:	d101      	bne.n	80052dc <vPortFree+0x18>
 80052d8:	b672      	cpsid	i
 80052da:	e7fe      	b.n	80052da <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80052dc:	6801      	ldr	r1, [r0, #0]
 80052de:	2900      	cmp	r1, #0
 80052e0:	d001      	beq.n	80052e6 <vPortFree+0x22>
 80052e2:	b672      	cpsid	i
 80052e4:	e7fe      	b.n	80052e4 <vPortFree+0x20>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80052e6:	4393      	bics	r3, r2
 80052e8:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 80052ea:	f7ff fd19 	bl	8004d20 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80052ee:	4a06      	ldr	r2, [pc, #24]	; (8005308 <vPortFree+0x44>)
 80052f0:	6863      	ldr	r3, [r4, #4]
 80052f2:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80052f4:	0020      	movs	r0, r4
					xFreeBytesRemaining += pxLink->xBlockSize;
 80052f6:	185b      	adds	r3, r3, r1
 80052f8:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80052fa:	f7ff ff3d 	bl	8005178 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80052fe:	f7ff fd97 	bl	8004e30 <xTaskResumeAll>
}
 8005302:	bd10      	pop	{r4, pc}
 8005304:	200011d4 	.word	0x200011d4
 8005308:	200011d8 	.word	0x200011d8

0800530c <__errno>:
 800530c:	4b01      	ldr	r3, [pc, #4]	; (8005314 <__errno+0x8>)
 800530e:	6818      	ldr	r0, [r3, #0]
 8005310:	4770      	bx	lr
 8005312:	46c0      	nop			; (mov r8, r8)
 8005314:	20000014 	.word	0x20000014

08005318 <__libc_init_array>:
 8005318:	b570      	push	{r4, r5, r6, lr}
 800531a:	2600      	movs	r6, #0
 800531c:	4d0c      	ldr	r5, [pc, #48]	; (8005350 <__libc_init_array+0x38>)
 800531e:	4c0d      	ldr	r4, [pc, #52]	; (8005354 <__libc_init_array+0x3c>)
 8005320:	1b64      	subs	r4, r4, r5
 8005322:	10a4      	asrs	r4, r4, #2
 8005324:	42a6      	cmp	r6, r4
 8005326:	d109      	bne.n	800533c <__libc_init_array+0x24>
 8005328:	2600      	movs	r6, #0
 800532a:	f000 fcff 	bl	8005d2c <_init>
 800532e:	4d0a      	ldr	r5, [pc, #40]	; (8005358 <__libc_init_array+0x40>)
 8005330:	4c0a      	ldr	r4, [pc, #40]	; (800535c <__libc_init_array+0x44>)
 8005332:	1b64      	subs	r4, r4, r5
 8005334:	10a4      	asrs	r4, r4, #2
 8005336:	42a6      	cmp	r6, r4
 8005338:	d105      	bne.n	8005346 <__libc_init_array+0x2e>
 800533a:	bd70      	pop	{r4, r5, r6, pc}
 800533c:	00b3      	lsls	r3, r6, #2
 800533e:	58eb      	ldr	r3, [r5, r3]
 8005340:	4798      	blx	r3
 8005342:	3601      	adds	r6, #1
 8005344:	e7ee      	b.n	8005324 <__libc_init_array+0xc>
 8005346:	00b3      	lsls	r3, r6, #2
 8005348:	58eb      	ldr	r3, [r5, r3]
 800534a:	4798      	blx	r3
 800534c:	3601      	adds	r6, #1
 800534e:	e7f2      	b.n	8005336 <__libc_init_array+0x1e>
 8005350:	08006154 	.word	0x08006154
 8005354:	08006154 	.word	0x08006154
 8005358:	08006154 	.word	0x08006154
 800535c:	08006158 	.word	0x08006158

08005360 <__retarget_lock_acquire_recursive>:
 8005360:	4770      	bx	lr

08005362 <__retarget_lock_release_recursive>:
 8005362:	4770      	bx	lr

08005364 <memcpy>:
 8005364:	2300      	movs	r3, #0
 8005366:	b510      	push	{r4, lr}
 8005368:	429a      	cmp	r2, r3
 800536a:	d100      	bne.n	800536e <memcpy+0xa>
 800536c:	bd10      	pop	{r4, pc}
 800536e:	5ccc      	ldrb	r4, [r1, r3]
 8005370:	54c4      	strb	r4, [r0, r3]
 8005372:	3301      	adds	r3, #1
 8005374:	e7f8      	b.n	8005368 <memcpy+0x4>

08005376 <memset>:
 8005376:	0003      	movs	r3, r0
 8005378:	1882      	adds	r2, r0, r2
 800537a:	4293      	cmp	r3, r2
 800537c:	d100      	bne.n	8005380 <memset+0xa>
 800537e:	4770      	bx	lr
 8005380:	7019      	strb	r1, [r3, #0]
 8005382:	3301      	adds	r3, #1
 8005384:	e7f9      	b.n	800537a <memset+0x4>
	...

08005388 <sbrk_aligned>:
 8005388:	b570      	push	{r4, r5, r6, lr}
 800538a:	4e0f      	ldr	r6, [pc, #60]	; (80053c8 <sbrk_aligned+0x40>)
 800538c:	000d      	movs	r5, r1
 800538e:	6831      	ldr	r1, [r6, #0]
 8005390:	0004      	movs	r4, r0
 8005392:	2900      	cmp	r1, #0
 8005394:	d102      	bne.n	800539c <sbrk_aligned+0x14>
 8005396:	f000 f903 	bl	80055a0 <_sbrk_r>
 800539a:	6030      	str	r0, [r6, #0]
 800539c:	0029      	movs	r1, r5
 800539e:	0020      	movs	r0, r4
 80053a0:	f000 f8fe 	bl	80055a0 <_sbrk_r>
 80053a4:	1c43      	adds	r3, r0, #1
 80053a6:	d00a      	beq.n	80053be <sbrk_aligned+0x36>
 80053a8:	2303      	movs	r3, #3
 80053aa:	1cc5      	adds	r5, r0, #3
 80053ac:	439d      	bics	r5, r3
 80053ae:	42a8      	cmp	r0, r5
 80053b0:	d007      	beq.n	80053c2 <sbrk_aligned+0x3a>
 80053b2:	1a29      	subs	r1, r5, r0
 80053b4:	0020      	movs	r0, r4
 80053b6:	f000 f8f3 	bl	80055a0 <_sbrk_r>
 80053ba:	1c43      	adds	r3, r0, #1
 80053bc:	d101      	bne.n	80053c2 <sbrk_aligned+0x3a>
 80053be:	2501      	movs	r5, #1
 80053c0:	426d      	negs	r5, r5
 80053c2:	0028      	movs	r0, r5
 80053c4:	bd70      	pop	{r4, r5, r6, pc}
 80053c6:	46c0      	nop			; (mov r8, r8)
 80053c8:	200011f0 	.word	0x200011f0

080053cc <_malloc_r>:
 80053cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053ce:	2203      	movs	r2, #3
 80053d0:	1ccb      	adds	r3, r1, #3
 80053d2:	4393      	bics	r3, r2
 80053d4:	3308      	adds	r3, #8
 80053d6:	0006      	movs	r6, r0
 80053d8:	001f      	movs	r7, r3
 80053da:	2b0c      	cmp	r3, #12
 80053dc:	d232      	bcs.n	8005444 <_malloc_r+0x78>
 80053de:	270c      	movs	r7, #12
 80053e0:	42b9      	cmp	r1, r7
 80053e2:	d831      	bhi.n	8005448 <_malloc_r+0x7c>
 80053e4:	0030      	movs	r0, r6
 80053e6:	f000 f90d 	bl	8005604 <__malloc_lock>
 80053ea:	4d32      	ldr	r5, [pc, #200]	; (80054b4 <_malloc_r+0xe8>)
 80053ec:	682b      	ldr	r3, [r5, #0]
 80053ee:	001c      	movs	r4, r3
 80053f0:	2c00      	cmp	r4, #0
 80053f2:	d12e      	bne.n	8005452 <_malloc_r+0x86>
 80053f4:	0039      	movs	r1, r7
 80053f6:	0030      	movs	r0, r6
 80053f8:	f7ff ffc6 	bl	8005388 <sbrk_aligned>
 80053fc:	0004      	movs	r4, r0
 80053fe:	1c43      	adds	r3, r0, #1
 8005400:	d11e      	bne.n	8005440 <_malloc_r+0x74>
 8005402:	682c      	ldr	r4, [r5, #0]
 8005404:	0025      	movs	r5, r4
 8005406:	2d00      	cmp	r5, #0
 8005408:	d14a      	bne.n	80054a0 <_malloc_r+0xd4>
 800540a:	6823      	ldr	r3, [r4, #0]
 800540c:	0029      	movs	r1, r5
 800540e:	18e3      	adds	r3, r4, r3
 8005410:	0030      	movs	r0, r6
 8005412:	9301      	str	r3, [sp, #4]
 8005414:	f000 f8c4 	bl	80055a0 <_sbrk_r>
 8005418:	9b01      	ldr	r3, [sp, #4]
 800541a:	4283      	cmp	r3, r0
 800541c:	d143      	bne.n	80054a6 <_malloc_r+0xda>
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	3703      	adds	r7, #3
 8005422:	1aff      	subs	r7, r7, r3
 8005424:	2303      	movs	r3, #3
 8005426:	439f      	bics	r7, r3
 8005428:	3708      	adds	r7, #8
 800542a:	2f0c      	cmp	r7, #12
 800542c:	d200      	bcs.n	8005430 <_malloc_r+0x64>
 800542e:	270c      	movs	r7, #12
 8005430:	0039      	movs	r1, r7
 8005432:	0030      	movs	r0, r6
 8005434:	f7ff ffa8 	bl	8005388 <sbrk_aligned>
 8005438:	1c43      	adds	r3, r0, #1
 800543a:	d034      	beq.n	80054a6 <_malloc_r+0xda>
 800543c:	6823      	ldr	r3, [r4, #0]
 800543e:	19df      	adds	r7, r3, r7
 8005440:	6027      	str	r7, [r4, #0]
 8005442:	e013      	b.n	800546c <_malloc_r+0xa0>
 8005444:	2b00      	cmp	r3, #0
 8005446:	dacb      	bge.n	80053e0 <_malloc_r+0x14>
 8005448:	230c      	movs	r3, #12
 800544a:	2500      	movs	r5, #0
 800544c:	6033      	str	r3, [r6, #0]
 800544e:	0028      	movs	r0, r5
 8005450:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005452:	6822      	ldr	r2, [r4, #0]
 8005454:	1bd1      	subs	r1, r2, r7
 8005456:	d420      	bmi.n	800549a <_malloc_r+0xce>
 8005458:	290b      	cmp	r1, #11
 800545a:	d917      	bls.n	800548c <_malloc_r+0xc0>
 800545c:	19e2      	adds	r2, r4, r7
 800545e:	6027      	str	r7, [r4, #0]
 8005460:	42a3      	cmp	r3, r4
 8005462:	d111      	bne.n	8005488 <_malloc_r+0xbc>
 8005464:	602a      	str	r2, [r5, #0]
 8005466:	6863      	ldr	r3, [r4, #4]
 8005468:	6011      	str	r1, [r2, #0]
 800546a:	6053      	str	r3, [r2, #4]
 800546c:	0030      	movs	r0, r6
 800546e:	0025      	movs	r5, r4
 8005470:	f000 f8d0 	bl	8005614 <__malloc_unlock>
 8005474:	2207      	movs	r2, #7
 8005476:	350b      	adds	r5, #11
 8005478:	1d23      	adds	r3, r4, #4
 800547a:	4395      	bics	r5, r2
 800547c:	1aea      	subs	r2, r5, r3
 800547e:	429d      	cmp	r5, r3
 8005480:	d0e5      	beq.n	800544e <_malloc_r+0x82>
 8005482:	1b5b      	subs	r3, r3, r5
 8005484:	50a3      	str	r3, [r4, r2]
 8005486:	e7e2      	b.n	800544e <_malloc_r+0x82>
 8005488:	605a      	str	r2, [r3, #4]
 800548a:	e7ec      	b.n	8005466 <_malloc_r+0x9a>
 800548c:	6862      	ldr	r2, [r4, #4]
 800548e:	42a3      	cmp	r3, r4
 8005490:	d101      	bne.n	8005496 <_malloc_r+0xca>
 8005492:	602a      	str	r2, [r5, #0]
 8005494:	e7ea      	b.n	800546c <_malloc_r+0xa0>
 8005496:	605a      	str	r2, [r3, #4]
 8005498:	e7e8      	b.n	800546c <_malloc_r+0xa0>
 800549a:	0023      	movs	r3, r4
 800549c:	6864      	ldr	r4, [r4, #4]
 800549e:	e7a7      	b.n	80053f0 <_malloc_r+0x24>
 80054a0:	002c      	movs	r4, r5
 80054a2:	686d      	ldr	r5, [r5, #4]
 80054a4:	e7af      	b.n	8005406 <_malloc_r+0x3a>
 80054a6:	230c      	movs	r3, #12
 80054a8:	0030      	movs	r0, r6
 80054aa:	6033      	str	r3, [r6, #0]
 80054ac:	f000 f8b2 	bl	8005614 <__malloc_unlock>
 80054b0:	e7cd      	b.n	800544e <_malloc_r+0x82>
 80054b2:	46c0      	nop			; (mov r8, r8)
 80054b4:	200011ec 	.word	0x200011ec

080054b8 <cleanup_glue>:
 80054b8:	b570      	push	{r4, r5, r6, lr}
 80054ba:	000d      	movs	r5, r1
 80054bc:	6809      	ldr	r1, [r1, #0]
 80054be:	0004      	movs	r4, r0
 80054c0:	2900      	cmp	r1, #0
 80054c2:	d001      	beq.n	80054c8 <cleanup_glue+0x10>
 80054c4:	f7ff fff8 	bl	80054b8 <cleanup_glue>
 80054c8:	0029      	movs	r1, r5
 80054ca:	0020      	movs	r0, r4
 80054cc:	f000 f8aa 	bl	8005624 <_free_r>
 80054d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080054d4 <_reclaim_reent>:
 80054d4:	4b31      	ldr	r3, [pc, #196]	; (800559c <_reclaim_reent+0xc8>)
 80054d6:	b570      	push	{r4, r5, r6, lr}
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	0004      	movs	r4, r0
 80054dc:	4283      	cmp	r3, r0
 80054de:	d049      	beq.n	8005574 <_reclaim_reent+0xa0>
 80054e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00a      	beq.n	80054fc <_reclaim_reent+0x28>
 80054e6:	2500      	movs	r5, #0
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	42ab      	cmp	r3, r5
 80054ec:	d147      	bne.n	800557e <_reclaim_reent+0xaa>
 80054ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054f0:	6819      	ldr	r1, [r3, #0]
 80054f2:	2900      	cmp	r1, #0
 80054f4:	d002      	beq.n	80054fc <_reclaim_reent+0x28>
 80054f6:	0020      	movs	r0, r4
 80054f8:	f000 f894 	bl	8005624 <_free_r>
 80054fc:	6961      	ldr	r1, [r4, #20]
 80054fe:	2900      	cmp	r1, #0
 8005500:	d002      	beq.n	8005508 <_reclaim_reent+0x34>
 8005502:	0020      	movs	r0, r4
 8005504:	f000 f88e 	bl	8005624 <_free_r>
 8005508:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800550a:	2900      	cmp	r1, #0
 800550c:	d002      	beq.n	8005514 <_reclaim_reent+0x40>
 800550e:	0020      	movs	r0, r4
 8005510:	f000 f888 	bl	8005624 <_free_r>
 8005514:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005516:	2900      	cmp	r1, #0
 8005518:	d002      	beq.n	8005520 <_reclaim_reent+0x4c>
 800551a:	0020      	movs	r0, r4
 800551c:	f000 f882 	bl	8005624 <_free_r>
 8005520:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005522:	2900      	cmp	r1, #0
 8005524:	d002      	beq.n	800552c <_reclaim_reent+0x58>
 8005526:	0020      	movs	r0, r4
 8005528:	f000 f87c 	bl	8005624 <_free_r>
 800552c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800552e:	2900      	cmp	r1, #0
 8005530:	d002      	beq.n	8005538 <_reclaim_reent+0x64>
 8005532:	0020      	movs	r0, r4
 8005534:	f000 f876 	bl	8005624 <_free_r>
 8005538:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800553a:	2900      	cmp	r1, #0
 800553c:	d002      	beq.n	8005544 <_reclaim_reent+0x70>
 800553e:	0020      	movs	r0, r4
 8005540:	f000 f870 	bl	8005624 <_free_r>
 8005544:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005546:	2900      	cmp	r1, #0
 8005548:	d002      	beq.n	8005550 <_reclaim_reent+0x7c>
 800554a:	0020      	movs	r0, r4
 800554c:	f000 f86a 	bl	8005624 <_free_r>
 8005550:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005552:	2900      	cmp	r1, #0
 8005554:	d002      	beq.n	800555c <_reclaim_reent+0x88>
 8005556:	0020      	movs	r0, r4
 8005558:	f000 f864 	bl	8005624 <_free_r>
 800555c:	69a3      	ldr	r3, [r4, #24]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d008      	beq.n	8005574 <_reclaim_reent+0xa0>
 8005562:	0020      	movs	r0, r4
 8005564:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005566:	4798      	blx	r3
 8005568:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800556a:	2900      	cmp	r1, #0
 800556c:	d002      	beq.n	8005574 <_reclaim_reent+0xa0>
 800556e:	0020      	movs	r0, r4
 8005570:	f7ff ffa2 	bl	80054b8 <cleanup_glue>
 8005574:	bd70      	pop	{r4, r5, r6, pc}
 8005576:	5949      	ldr	r1, [r1, r5]
 8005578:	2900      	cmp	r1, #0
 800557a:	d108      	bne.n	800558e <_reclaim_reent+0xba>
 800557c:	3504      	adds	r5, #4
 800557e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005580:	68d9      	ldr	r1, [r3, #12]
 8005582:	2d80      	cmp	r5, #128	; 0x80
 8005584:	d1f7      	bne.n	8005576 <_reclaim_reent+0xa2>
 8005586:	0020      	movs	r0, r4
 8005588:	f000 f84c 	bl	8005624 <_free_r>
 800558c:	e7af      	b.n	80054ee <_reclaim_reent+0x1a>
 800558e:	680e      	ldr	r6, [r1, #0]
 8005590:	0020      	movs	r0, r4
 8005592:	f000 f847 	bl	8005624 <_free_r>
 8005596:	0031      	movs	r1, r6
 8005598:	e7ee      	b.n	8005578 <_reclaim_reent+0xa4>
 800559a:	46c0      	nop			; (mov r8, r8)
 800559c:	20000014 	.word	0x20000014

080055a0 <_sbrk_r>:
 80055a0:	2300      	movs	r3, #0
 80055a2:	b570      	push	{r4, r5, r6, lr}
 80055a4:	4d06      	ldr	r5, [pc, #24]	; (80055c0 <_sbrk_r+0x20>)
 80055a6:	0004      	movs	r4, r0
 80055a8:	0008      	movs	r0, r1
 80055aa:	602b      	str	r3, [r5, #0]
 80055ac:	f7fd fc34 	bl	8002e18 <_sbrk>
 80055b0:	1c43      	adds	r3, r0, #1
 80055b2:	d103      	bne.n	80055bc <_sbrk_r+0x1c>
 80055b4:	682b      	ldr	r3, [r5, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d000      	beq.n	80055bc <_sbrk_r+0x1c>
 80055ba:	6023      	str	r3, [r4, #0]
 80055bc:	bd70      	pop	{r4, r5, r6, pc}
 80055be:	46c0      	nop			; (mov r8, r8)
 80055c0:	200011f4 	.word	0x200011f4

080055c4 <siprintf>:
 80055c4:	b40e      	push	{r1, r2, r3}
 80055c6:	b500      	push	{lr}
 80055c8:	490b      	ldr	r1, [pc, #44]	; (80055f8 <siprintf+0x34>)
 80055ca:	b09c      	sub	sp, #112	; 0x70
 80055cc:	ab1d      	add	r3, sp, #116	; 0x74
 80055ce:	9002      	str	r0, [sp, #8]
 80055d0:	9006      	str	r0, [sp, #24]
 80055d2:	9107      	str	r1, [sp, #28]
 80055d4:	9104      	str	r1, [sp, #16]
 80055d6:	4809      	ldr	r0, [pc, #36]	; (80055fc <siprintf+0x38>)
 80055d8:	4909      	ldr	r1, [pc, #36]	; (8005600 <siprintf+0x3c>)
 80055da:	cb04      	ldmia	r3!, {r2}
 80055dc:	9105      	str	r1, [sp, #20]
 80055de:	6800      	ldr	r0, [r0, #0]
 80055e0:	a902      	add	r1, sp, #8
 80055e2:	9301      	str	r3, [sp, #4]
 80055e4:	f000 f8ca 	bl	800577c <_svfiprintf_r>
 80055e8:	2300      	movs	r3, #0
 80055ea:	9a02      	ldr	r2, [sp, #8]
 80055ec:	7013      	strb	r3, [r2, #0]
 80055ee:	b01c      	add	sp, #112	; 0x70
 80055f0:	bc08      	pop	{r3}
 80055f2:	b003      	add	sp, #12
 80055f4:	4718      	bx	r3
 80055f6:	46c0      	nop			; (mov r8, r8)
 80055f8:	7fffffff 	.word	0x7fffffff
 80055fc:	20000014 	.word	0x20000014
 8005600:	ffff0208 	.word	0xffff0208

08005604 <__malloc_lock>:
 8005604:	b510      	push	{r4, lr}
 8005606:	4802      	ldr	r0, [pc, #8]	; (8005610 <__malloc_lock+0xc>)
 8005608:	f7ff feaa 	bl	8005360 <__retarget_lock_acquire_recursive>
 800560c:	bd10      	pop	{r4, pc}
 800560e:	46c0      	nop			; (mov r8, r8)
 8005610:	200011e8 	.word	0x200011e8

08005614 <__malloc_unlock>:
 8005614:	b510      	push	{r4, lr}
 8005616:	4802      	ldr	r0, [pc, #8]	; (8005620 <__malloc_unlock+0xc>)
 8005618:	f7ff fea3 	bl	8005362 <__retarget_lock_release_recursive>
 800561c:	bd10      	pop	{r4, pc}
 800561e:	46c0      	nop			; (mov r8, r8)
 8005620:	200011e8 	.word	0x200011e8

08005624 <_free_r>:
 8005624:	b570      	push	{r4, r5, r6, lr}
 8005626:	0005      	movs	r5, r0
 8005628:	2900      	cmp	r1, #0
 800562a:	d010      	beq.n	800564e <_free_r+0x2a>
 800562c:	1f0c      	subs	r4, r1, #4
 800562e:	6823      	ldr	r3, [r4, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	da00      	bge.n	8005636 <_free_r+0x12>
 8005634:	18e4      	adds	r4, r4, r3
 8005636:	0028      	movs	r0, r5
 8005638:	f7ff ffe4 	bl	8005604 <__malloc_lock>
 800563c:	4a1d      	ldr	r2, [pc, #116]	; (80056b4 <_free_r+0x90>)
 800563e:	6813      	ldr	r3, [r2, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d105      	bne.n	8005650 <_free_r+0x2c>
 8005644:	6063      	str	r3, [r4, #4]
 8005646:	6014      	str	r4, [r2, #0]
 8005648:	0028      	movs	r0, r5
 800564a:	f7ff ffe3 	bl	8005614 <__malloc_unlock>
 800564e:	bd70      	pop	{r4, r5, r6, pc}
 8005650:	42a3      	cmp	r3, r4
 8005652:	d908      	bls.n	8005666 <_free_r+0x42>
 8005654:	6821      	ldr	r1, [r4, #0]
 8005656:	1860      	adds	r0, r4, r1
 8005658:	4283      	cmp	r3, r0
 800565a:	d1f3      	bne.n	8005644 <_free_r+0x20>
 800565c:	6818      	ldr	r0, [r3, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	1841      	adds	r1, r0, r1
 8005662:	6021      	str	r1, [r4, #0]
 8005664:	e7ee      	b.n	8005644 <_free_r+0x20>
 8005666:	001a      	movs	r2, r3
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d001      	beq.n	8005672 <_free_r+0x4e>
 800566e:	42a3      	cmp	r3, r4
 8005670:	d9f9      	bls.n	8005666 <_free_r+0x42>
 8005672:	6811      	ldr	r1, [r2, #0]
 8005674:	1850      	adds	r0, r2, r1
 8005676:	42a0      	cmp	r0, r4
 8005678:	d10b      	bne.n	8005692 <_free_r+0x6e>
 800567a:	6820      	ldr	r0, [r4, #0]
 800567c:	1809      	adds	r1, r1, r0
 800567e:	1850      	adds	r0, r2, r1
 8005680:	6011      	str	r1, [r2, #0]
 8005682:	4283      	cmp	r3, r0
 8005684:	d1e0      	bne.n	8005648 <_free_r+0x24>
 8005686:	6818      	ldr	r0, [r3, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	1841      	adds	r1, r0, r1
 800568c:	6011      	str	r1, [r2, #0]
 800568e:	6053      	str	r3, [r2, #4]
 8005690:	e7da      	b.n	8005648 <_free_r+0x24>
 8005692:	42a0      	cmp	r0, r4
 8005694:	d902      	bls.n	800569c <_free_r+0x78>
 8005696:	230c      	movs	r3, #12
 8005698:	602b      	str	r3, [r5, #0]
 800569a:	e7d5      	b.n	8005648 <_free_r+0x24>
 800569c:	6821      	ldr	r1, [r4, #0]
 800569e:	1860      	adds	r0, r4, r1
 80056a0:	4283      	cmp	r3, r0
 80056a2:	d103      	bne.n	80056ac <_free_r+0x88>
 80056a4:	6818      	ldr	r0, [r3, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	1841      	adds	r1, r0, r1
 80056aa:	6021      	str	r1, [r4, #0]
 80056ac:	6063      	str	r3, [r4, #4]
 80056ae:	6054      	str	r4, [r2, #4]
 80056b0:	e7ca      	b.n	8005648 <_free_r+0x24>
 80056b2:	46c0      	nop			; (mov r8, r8)
 80056b4:	200011ec 	.word	0x200011ec

080056b8 <__ssputs_r>:
 80056b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056ba:	688e      	ldr	r6, [r1, #8]
 80056bc:	b085      	sub	sp, #20
 80056be:	0007      	movs	r7, r0
 80056c0:	000c      	movs	r4, r1
 80056c2:	9203      	str	r2, [sp, #12]
 80056c4:	9301      	str	r3, [sp, #4]
 80056c6:	429e      	cmp	r6, r3
 80056c8:	d83c      	bhi.n	8005744 <__ssputs_r+0x8c>
 80056ca:	2390      	movs	r3, #144	; 0x90
 80056cc:	898a      	ldrh	r2, [r1, #12]
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	421a      	tst	r2, r3
 80056d2:	d034      	beq.n	800573e <__ssputs_r+0x86>
 80056d4:	6909      	ldr	r1, [r1, #16]
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	6960      	ldr	r0, [r4, #20]
 80056da:	1a5b      	subs	r3, r3, r1
 80056dc:	9302      	str	r3, [sp, #8]
 80056de:	2303      	movs	r3, #3
 80056e0:	4343      	muls	r3, r0
 80056e2:	0fdd      	lsrs	r5, r3, #31
 80056e4:	18ed      	adds	r5, r5, r3
 80056e6:	9b01      	ldr	r3, [sp, #4]
 80056e8:	9802      	ldr	r0, [sp, #8]
 80056ea:	3301      	adds	r3, #1
 80056ec:	181b      	adds	r3, r3, r0
 80056ee:	106d      	asrs	r5, r5, #1
 80056f0:	42ab      	cmp	r3, r5
 80056f2:	d900      	bls.n	80056f6 <__ssputs_r+0x3e>
 80056f4:	001d      	movs	r5, r3
 80056f6:	0553      	lsls	r3, r2, #21
 80056f8:	d532      	bpl.n	8005760 <__ssputs_r+0xa8>
 80056fa:	0029      	movs	r1, r5
 80056fc:	0038      	movs	r0, r7
 80056fe:	f7ff fe65 	bl	80053cc <_malloc_r>
 8005702:	1e06      	subs	r6, r0, #0
 8005704:	d109      	bne.n	800571a <__ssputs_r+0x62>
 8005706:	230c      	movs	r3, #12
 8005708:	603b      	str	r3, [r7, #0]
 800570a:	2340      	movs	r3, #64	; 0x40
 800570c:	2001      	movs	r0, #1
 800570e:	89a2      	ldrh	r2, [r4, #12]
 8005710:	4240      	negs	r0, r0
 8005712:	4313      	orrs	r3, r2
 8005714:	81a3      	strh	r3, [r4, #12]
 8005716:	b005      	add	sp, #20
 8005718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800571a:	9a02      	ldr	r2, [sp, #8]
 800571c:	6921      	ldr	r1, [r4, #16]
 800571e:	f7ff fe21 	bl	8005364 <memcpy>
 8005722:	89a3      	ldrh	r3, [r4, #12]
 8005724:	4a14      	ldr	r2, [pc, #80]	; (8005778 <__ssputs_r+0xc0>)
 8005726:	401a      	ands	r2, r3
 8005728:	2380      	movs	r3, #128	; 0x80
 800572a:	4313      	orrs	r3, r2
 800572c:	81a3      	strh	r3, [r4, #12]
 800572e:	9b02      	ldr	r3, [sp, #8]
 8005730:	6126      	str	r6, [r4, #16]
 8005732:	18f6      	adds	r6, r6, r3
 8005734:	6026      	str	r6, [r4, #0]
 8005736:	6165      	str	r5, [r4, #20]
 8005738:	9e01      	ldr	r6, [sp, #4]
 800573a:	1aed      	subs	r5, r5, r3
 800573c:	60a5      	str	r5, [r4, #8]
 800573e:	9b01      	ldr	r3, [sp, #4]
 8005740:	429e      	cmp	r6, r3
 8005742:	d900      	bls.n	8005746 <__ssputs_r+0x8e>
 8005744:	9e01      	ldr	r6, [sp, #4]
 8005746:	0032      	movs	r2, r6
 8005748:	9903      	ldr	r1, [sp, #12]
 800574a:	6820      	ldr	r0, [r4, #0]
 800574c:	f000 faa3 	bl	8005c96 <memmove>
 8005750:	68a3      	ldr	r3, [r4, #8]
 8005752:	2000      	movs	r0, #0
 8005754:	1b9b      	subs	r3, r3, r6
 8005756:	60a3      	str	r3, [r4, #8]
 8005758:	6823      	ldr	r3, [r4, #0]
 800575a:	199e      	adds	r6, r3, r6
 800575c:	6026      	str	r6, [r4, #0]
 800575e:	e7da      	b.n	8005716 <__ssputs_r+0x5e>
 8005760:	002a      	movs	r2, r5
 8005762:	0038      	movs	r0, r7
 8005764:	f000 faaa 	bl	8005cbc <_realloc_r>
 8005768:	1e06      	subs	r6, r0, #0
 800576a:	d1e0      	bne.n	800572e <__ssputs_r+0x76>
 800576c:	0038      	movs	r0, r7
 800576e:	6921      	ldr	r1, [r4, #16]
 8005770:	f7ff ff58 	bl	8005624 <_free_r>
 8005774:	e7c7      	b.n	8005706 <__ssputs_r+0x4e>
 8005776:	46c0      	nop			; (mov r8, r8)
 8005778:	fffffb7f 	.word	0xfffffb7f

0800577c <_svfiprintf_r>:
 800577c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800577e:	b0a1      	sub	sp, #132	; 0x84
 8005780:	9003      	str	r0, [sp, #12]
 8005782:	001d      	movs	r5, r3
 8005784:	898b      	ldrh	r3, [r1, #12]
 8005786:	000f      	movs	r7, r1
 8005788:	0016      	movs	r6, r2
 800578a:	061b      	lsls	r3, r3, #24
 800578c:	d511      	bpl.n	80057b2 <_svfiprintf_r+0x36>
 800578e:	690b      	ldr	r3, [r1, #16]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10e      	bne.n	80057b2 <_svfiprintf_r+0x36>
 8005794:	2140      	movs	r1, #64	; 0x40
 8005796:	f7ff fe19 	bl	80053cc <_malloc_r>
 800579a:	6038      	str	r0, [r7, #0]
 800579c:	6138      	str	r0, [r7, #16]
 800579e:	2800      	cmp	r0, #0
 80057a0:	d105      	bne.n	80057ae <_svfiprintf_r+0x32>
 80057a2:	230c      	movs	r3, #12
 80057a4:	9a03      	ldr	r2, [sp, #12]
 80057a6:	3801      	subs	r0, #1
 80057a8:	6013      	str	r3, [r2, #0]
 80057aa:	b021      	add	sp, #132	; 0x84
 80057ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057ae:	2340      	movs	r3, #64	; 0x40
 80057b0:	617b      	str	r3, [r7, #20]
 80057b2:	2300      	movs	r3, #0
 80057b4:	ac08      	add	r4, sp, #32
 80057b6:	6163      	str	r3, [r4, #20]
 80057b8:	3320      	adds	r3, #32
 80057ba:	7663      	strb	r3, [r4, #25]
 80057bc:	3310      	adds	r3, #16
 80057be:	76a3      	strb	r3, [r4, #26]
 80057c0:	9507      	str	r5, [sp, #28]
 80057c2:	0035      	movs	r5, r6
 80057c4:	782b      	ldrb	r3, [r5, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <_svfiprintf_r+0x52>
 80057ca:	2b25      	cmp	r3, #37	; 0x25
 80057cc:	d147      	bne.n	800585e <_svfiprintf_r+0xe2>
 80057ce:	1bab      	subs	r3, r5, r6
 80057d0:	9305      	str	r3, [sp, #20]
 80057d2:	42b5      	cmp	r5, r6
 80057d4:	d00c      	beq.n	80057f0 <_svfiprintf_r+0x74>
 80057d6:	0032      	movs	r2, r6
 80057d8:	0039      	movs	r1, r7
 80057da:	9803      	ldr	r0, [sp, #12]
 80057dc:	f7ff ff6c 	bl	80056b8 <__ssputs_r>
 80057e0:	1c43      	adds	r3, r0, #1
 80057e2:	d100      	bne.n	80057e6 <_svfiprintf_r+0x6a>
 80057e4:	e0ae      	b.n	8005944 <_svfiprintf_r+0x1c8>
 80057e6:	6962      	ldr	r2, [r4, #20]
 80057e8:	9b05      	ldr	r3, [sp, #20]
 80057ea:	4694      	mov	ip, r2
 80057ec:	4463      	add	r3, ip
 80057ee:	6163      	str	r3, [r4, #20]
 80057f0:	782b      	ldrb	r3, [r5, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d100      	bne.n	80057f8 <_svfiprintf_r+0x7c>
 80057f6:	e0a5      	b.n	8005944 <_svfiprintf_r+0x1c8>
 80057f8:	2201      	movs	r2, #1
 80057fa:	2300      	movs	r3, #0
 80057fc:	4252      	negs	r2, r2
 80057fe:	6062      	str	r2, [r4, #4]
 8005800:	a904      	add	r1, sp, #16
 8005802:	3254      	adds	r2, #84	; 0x54
 8005804:	1852      	adds	r2, r2, r1
 8005806:	1c6e      	adds	r6, r5, #1
 8005808:	6023      	str	r3, [r4, #0]
 800580a:	60e3      	str	r3, [r4, #12]
 800580c:	60a3      	str	r3, [r4, #8]
 800580e:	7013      	strb	r3, [r2, #0]
 8005810:	65a3      	str	r3, [r4, #88]	; 0x58
 8005812:	2205      	movs	r2, #5
 8005814:	7831      	ldrb	r1, [r6, #0]
 8005816:	4854      	ldr	r0, [pc, #336]	; (8005968 <_svfiprintf_r+0x1ec>)
 8005818:	f000 fa32 	bl	8005c80 <memchr>
 800581c:	1c75      	adds	r5, r6, #1
 800581e:	2800      	cmp	r0, #0
 8005820:	d11f      	bne.n	8005862 <_svfiprintf_r+0xe6>
 8005822:	6822      	ldr	r2, [r4, #0]
 8005824:	06d3      	lsls	r3, r2, #27
 8005826:	d504      	bpl.n	8005832 <_svfiprintf_r+0xb6>
 8005828:	2353      	movs	r3, #83	; 0x53
 800582a:	a904      	add	r1, sp, #16
 800582c:	185b      	adds	r3, r3, r1
 800582e:	2120      	movs	r1, #32
 8005830:	7019      	strb	r1, [r3, #0]
 8005832:	0713      	lsls	r3, r2, #28
 8005834:	d504      	bpl.n	8005840 <_svfiprintf_r+0xc4>
 8005836:	2353      	movs	r3, #83	; 0x53
 8005838:	a904      	add	r1, sp, #16
 800583a:	185b      	adds	r3, r3, r1
 800583c:	212b      	movs	r1, #43	; 0x2b
 800583e:	7019      	strb	r1, [r3, #0]
 8005840:	7833      	ldrb	r3, [r6, #0]
 8005842:	2b2a      	cmp	r3, #42	; 0x2a
 8005844:	d016      	beq.n	8005874 <_svfiprintf_r+0xf8>
 8005846:	0035      	movs	r5, r6
 8005848:	2100      	movs	r1, #0
 800584a:	200a      	movs	r0, #10
 800584c:	68e3      	ldr	r3, [r4, #12]
 800584e:	782a      	ldrb	r2, [r5, #0]
 8005850:	1c6e      	adds	r6, r5, #1
 8005852:	3a30      	subs	r2, #48	; 0x30
 8005854:	2a09      	cmp	r2, #9
 8005856:	d94e      	bls.n	80058f6 <_svfiprintf_r+0x17a>
 8005858:	2900      	cmp	r1, #0
 800585a:	d111      	bne.n	8005880 <_svfiprintf_r+0x104>
 800585c:	e017      	b.n	800588e <_svfiprintf_r+0x112>
 800585e:	3501      	adds	r5, #1
 8005860:	e7b0      	b.n	80057c4 <_svfiprintf_r+0x48>
 8005862:	4b41      	ldr	r3, [pc, #260]	; (8005968 <_svfiprintf_r+0x1ec>)
 8005864:	6822      	ldr	r2, [r4, #0]
 8005866:	1ac0      	subs	r0, r0, r3
 8005868:	2301      	movs	r3, #1
 800586a:	4083      	lsls	r3, r0
 800586c:	4313      	orrs	r3, r2
 800586e:	002e      	movs	r6, r5
 8005870:	6023      	str	r3, [r4, #0]
 8005872:	e7ce      	b.n	8005812 <_svfiprintf_r+0x96>
 8005874:	9b07      	ldr	r3, [sp, #28]
 8005876:	1d19      	adds	r1, r3, #4
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	9107      	str	r1, [sp, #28]
 800587c:	2b00      	cmp	r3, #0
 800587e:	db01      	blt.n	8005884 <_svfiprintf_r+0x108>
 8005880:	930b      	str	r3, [sp, #44]	; 0x2c
 8005882:	e004      	b.n	800588e <_svfiprintf_r+0x112>
 8005884:	425b      	negs	r3, r3
 8005886:	60e3      	str	r3, [r4, #12]
 8005888:	2302      	movs	r3, #2
 800588a:	4313      	orrs	r3, r2
 800588c:	6023      	str	r3, [r4, #0]
 800588e:	782b      	ldrb	r3, [r5, #0]
 8005890:	2b2e      	cmp	r3, #46	; 0x2e
 8005892:	d10a      	bne.n	80058aa <_svfiprintf_r+0x12e>
 8005894:	786b      	ldrb	r3, [r5, #1]
 8005896:	2b2a      	cmp	r3, #42	; 0x2a
 8005898:	d135      	bne.n	8005906 <_svfiprintf_r+0x18a>
 800589a:	9b07      	ldr	r3, [sp, #28]
 800589c:	3502      	adds	r5, #2
 800589e:	1d1a      	adds	r2, r3, #4
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	9207      	str	r2, [sp, #28]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	db2b      	blt.n	8005900 <_svfiprintf_r+0x184>
 80058a8:	9309      	str	r3, [sp, #36]	; 0x24
 80058aa:	4e30      	ldr	r6, [pc, #192]	; (800596c <_svfiprintf_r+0x1f0>)
 80058ac:	2203      	movs	r2, #3
 80058ae:	0030      	movs	r0, r6
 80058b0:	7829      	ldrb	r1, [r5, #0]
 80058b2:	f000 f9e5 	bl	8005c80 <memchr>
 80058b6:	2800      	cmp	r0, #0
 80058b8:	d006      	beq.n	80058c8 <_svfiprintf_r+0x14c>
 80058ba:	2340      	movs	r3, #64	; 0x40
 80058bc:	1b80      	subs	r0, r0, r6
 80058be:	4083      	lsls	r3, r0
 80058c0:	6822      	ldr	r2, [r4, #0]
 80058c2:	3501      	adds	r5, #1
 80058c4:	4313      	orrs	r3, r2
 80058c6:	6023      	str	r3, [r4, #0]
 80058c8:	7829      	ldrb	r1, [r5, #0]
 80058ca:	2206      	movs	r2, #6
 80058cc:	4828      	ldr	r0, [pc, #160]	; (8005970 <_svfiprintf_r+0x1f4>)
 80058ce:	1c6e      	adds	r6, r5, #1
 80058d0:	7621      	strb	r1, [r4, #24]
 80058d2:	f000 f9d5 	bl	8005c80 <memchr>
 80058d6:	2800      	cmp	r0, #0
 80058d8:	d03c      	beq.n	8005954 <_svfiprintf_r+0x1d8>
 80058da:	4b26      	ldr	r3, [pc, #152]	; (8005974 <_svfiprintf_r+0x1f8>)
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d125      	bne.n	800592c <_svfiprintf_r+0x1b0>
 80058e0:	2207      	movs	r2, #7
 80058e2:	9b07      	ldr	r3, [sp, #28]
 80058e4:	3307      	adds	r3, #7
 80058e6:	4393      	bics	r3, r2
 80058e8:	3308      	adds	r3, #8
 80058ea:	9307      	str	r3, [sp, #28]
 80058ec:	6963      	ldr	r3, [r4, #20]
 80058ee:	9a04      	ldr	r2, [sp, #16]
 80058f0:	189b      	adds	r3, r3, r2
 80058f2:	6163      	str	r3, [r4, #20]
 80058f4:	e765      	b.n	80057c2 <_svfiprintf_r+0x46>
 80058f6:	4343      	muls	r3, r0
 80058f8:	0035      	movs	r5, r6
 80058fa:	2101      	movs	r1, #1
 80058fc:	189b      	adds	r3, r3, r2
 80058fe:	e7a6      	b.n	800584e <_svfiprintf_r+0xd2>
 8005900:	2301      	movs	r3, #1
 8005902:	425b      	negs	r3, r3
 8005904:	e7d0      	b.n	80058a8 <_svfiprintf_r+0x12c>
 8005906:	2300      	movs	r3, #0
 8005908:	200a      	movs	r0, #10
 800590a:	001a      	movs	r2, r3
 800590c:	3501      	adds	r5, #1
 800590e:	6063      	str	r3, [r4, #4]
 8005910:	7829      	ldrb	r1, [r5, #0]
 8005912:	1c6e      	adds	r6, r5, #1
 8005914:	3930      	subs	r1, #48	; 0x30
 8005916:	2909      	cmp	r1, #9
 8005918:	d903      	bls.n	8005922 <_svfiprintf_r+0x1a6>
 800591a:	2b00      	cmp	r3, #0
 800591c:	d0c5      	beq.n	80058aa <_svfiprintf_r+0x12e>
 800591e:	9209      	str	r2, [sp, #36]	; 0x24
 8005920:	e7c3      	b.n	80058aa <_svfiprintf_r+0x12e>
 8005922:	4342      	muls	r2, r0
 8005924:	0035      	movs	r5, r6
 8005926:	2301      	movs	r3, #1
 8005928:	1852      	adds	r2, r2, r1
 800592a:	e7f1      	b.n	8005910 <_svfiprintf_r+0x194>
 800592c:	ab07      	add	r3, sp, #28
 800592e:	9300      	str	r3, [sp, #0]
 8005930:	003a      	movs	r2, r7
 8005932:	0021      	movs	r1, r4
 8005934:	4b10      	ldr	r3, [pc, #64]	; (8005978 <_svfiprintf_r+0x1fc>)
 8005936:	9803      	ldr	r0, [sp, #12]
 8005938:	e000      	b.n	800593c <_svfiprintf_r+0x1c0>
 800593a:	bf00      	nop
 800593c:	9004      	str	r0, [sp, #16]
 800593e:	9b04      	ldr	r3, [sp, #16]
 8005940:	3301      	adds	r3, #1
 8005942:	d1d3      	bne.n	80058ec <_svfiprintf_r+0x170>
 8005944:	89bb      	ldrh	r3, [r7, #12]
 8005946:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005948:	065b      	lsls	r3, r3, #25
 800594a:	d400      	bmi.n	800594e <_svfiprintf_r+0x1d2>
 800594c:	e72d      	b.n	80057aa <_svfiprintf_r+0x2e>
 800594e:	2001      	movs	r0, #1
 8005950:	4240      	negs	r0, r0
 8005952:	e72a      	b.n	80057aa <_svfiprintf_r+0x2e>
 8005954:	ab07      	add	r3, sp, #28
 8005956:	9300      	str	r3, [sp, #0]
 8005958:	003a      	movs	r2, r7
 800595a:	0021      	movs	r1, r4
 800595c:	4b06      	ldr	r3, [pc, #24]	; (8005978 <_svfiprintf_r+0x1fc>)
 800595e:	9803      	ldr	r0, [sp, #12]
 8005960:	f000 f87c 	bl	8005a5c <_printf_i>
 8005964:	e7ea      	b.n	800593c <_svfiprintf_r+0x1c0>
 8005966:	46c0      	nop			; (mov r8, r8)
 8005968:	08006118 	.word	0x08006118
 800596c:	0800611e 	.word	0x0800611e
 8005970:	08006122 	.word	0x08006122
 8005974:	00000000 	.word	0x00000000
 8005978:	080056b9 	.word	0x080056b9

0800597c <_printf_common>:
 800597c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800597e:	0015      	movs	r5, r2
 8005980:	9301      	str	r3, [sp, #4]
 8005982:	688a      	ldr	r2, [r1, #8]
 8005984:	690b      	ldr	r3, [r1, #16]
 8005986:	000c      	movs	r4, r1
 8005988:	9000      	str	r0, [sp, #0]
 800598a:	4293      	cmp	r3, r2
 800598c:	da00      	bge.n	8005990 <_printf_common+0x14>
 800598e:	0013      	movs	r3, r2
 8005990:	0022      	movs	r2, r4
 8005992:	602b      	str	r3, [r5, #0]
 8005994:	3243      	adds	r2, #67	; 0x43
 8005996:	7812      	ldrb	r2, [r2, #0]
 8005998:	2a00      	cmp	r2, #0
 800599a:	d001      	beq.n	80059a0 <_printf_common+0x24>
 800599c:	3301      	adds	r3, #1
 800599e:	602b      	str	r3, [r5, #0]
 80059a0:	6823      	ldr	r3, [r4, #0]
 80059a2:	069b      	lsls	r3, r3, #26
 80059a4:	d502      	bpl.n	80059ac <_printf_common+0x30>
 80059a6:	682b      	ldr	r3, [r5, #0]
 80059a8:	3302      	adds	r3, #2
 80059aa:	602b      	str	r3, [r5, #0]
 80059ac:	6822      	ldr	r2, [r4, #0]
 80059ae:	2306      	movs	r3, #6
 80059b0:	0017      	movs	r7, r2
 80059b2:	401f      	ands	r7, r3
 80059b4:	421a      	tst	r2, r3
 80059b6:	d027      	beq.n	8005a08 <_printf_common+0x8c>
 80059b8:	0023      	movs	r3, r4
 80059ba:	3343      	adds	r3, #67	; 0x43
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	1e5a      	subs	r2, r3, #1
 80059c0:	4193      	sbcs	r3, r2
 80059c2:	6822      	ldr	r2, [r4, #0]
 80059c4:	0692      	lsls	r2, r2, #26
 80059c6:	d430      	bmi.n	8005a2a <_printf_common+0xae>
 80059c8:	0022      	movs	r2, r4
 80059ca:	9901      	ldr	r1, [sp, #4]
 80059cc:	9800      	ldr	r0, [sp, #0]
 80059ce:	9e08      	ldr	r6, [sp, #32]
 80059d0:	3243      	adds	r2, #67	; 0x43
 80059d2:	47b0      	blx	r6
 80059d4:	1c43      	adds	r3, r0, #1
 80059d6:	d025      	beq.n	8005a24 <_printf_common+0xa8>
 80059d8:	2306      	movs	r3, #6
 80059da:	6820      	ldr	r0, [r4, #0]
 80059dc:	682a      	ldr	r2, [r5, #0]
 80059de:	68e1      	ldr	r1, [r4, #12]
 80059e0:	2500      	movs	r5, #0
 80059e2:	4003      	ands	r3, r0
 80059e4:	2b04      	cmp	r3, #4
 80059e6:	d103      	bne.n	80059f0 <_printf_common+0x74>
 80059e8:	1a8d      	subs	r5, r1, r2
 80059ea:	43eb      	mvns	r3, r5
 80059ec:	17db      	asrs	r3, r3, #31
 80059ee:	401d      	ands	r5, r3
 80059f0:	68a3      	ldr	r3, [r4, #8]
 80059f2:	6922      	ldr	r2, [r4, #16]
 80059f4:	4293      	cmp	r3, r2
 80059f6:	dd01      	ble.n	80059fc <_printf_common+0x80>
 80059f8:	1a9b      	subs	r3, r3, r2
 80059fa:	18ed      	adds	r5, r5, r3
 80059fc:	2700      	movs	r7, #0
 80059fe:	42bd      	cmp	r5, r7
 8005a00:	d120      	bne.n	8005a44 <_printf_common+0xc8>
 8005a02:	2000      	movs	r0, #0
 8005a04:	e010      	b.n	8005a28 <_printf_common+0xac>
 8005a06:	3701      	adds	r7, #1
 8005a08:	68e3      	ldr	r3, [r4, #12]
 8005a0a:	682a      	ldr	r2, [r5, #0]
 8005a0c:	1a9b      	subs	r3, r3, r2
 8005a0e:	42bb      	cmp	r3, r7
 8005a10:	ddd2      	ble.n	80059b8 <_printf_common+0x3c>
 8005a12:	0022      	movs	r2, r4
 8005a14:	2301      	movs	r3, #1
 8005a16:	9901      	ldr	r1, [sp, #4]
 8005a18:	9800      	ldr	r0, [sp, #0]
 8005a1a:	9e08      	ldr	r6, [sp, #32]
 8005a1c:	3219      	adds	r2, #25
 8005a1e:	47b0      	blx	r6
 8005a20:	1c43      	adds	r3, r0, #1
 8005a22:	d1f0      	bne.n	8005a06 <_printf_common+0x8a>
 8005a24:	2001      	movs	r0, #1
 8005a26:	4240      	negs	r0, r0
 8005a28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005a2a:	2030      	movs	r0, #48	; 0x30
 8005a2c:	18e1      	adds	r1, r4, r3
 8005a2e:	3143      	adds	r1, #67	; 0x43
 8005a30:	7008      	strb	r0, [r1, #0]
 8005a32:	0021      	movs	r1, r4
 8005a34:	1c5a      	adds	r2, r3, #1
 8005a36:	3145      	adds	r1, #69	; 0x45
 8005a38:	7809      	ldrb	r1, [r1, #0]
 8005a3a:	18a2      	adds	r2, r4, r2
 8005a3c:	3243      	adds	r2, #67	; 0x43
 8005a3e:	3302      	adds	r3, #2
 8005a40:	7011      	strb	r1, [r2, #0]
 8005a42:	e7c1      	b.n	80059c8 <_printf_common+0x4c>
 8005a44:	0022      	movs	r2, r4
 8005a46:	2301      	movs	r3, #1
 8005a48:	9901      	ldr	r1, [sp, #4]
 8005a4a:	9800      	ldr	r0, [sp, #0]
 8005a4c:	9e08      	ldr	r6, [sp, #32]
 8005a4e:	321a      	adds	r2, #26
 8005a50:	47b0      	blx	r6
 8005a52:	1c43      	adds	r3, r0, #1
 8005a54:	d0e6      	beq.n	8005a24 <_printf_common+0xa8>
 8005a56:	3701      	adds	r7, #1
 8005a58:	e7d1      	b.n	80059fe <_printf_common+0x82>
	...

08005a5c <_printf_i>:
 8005a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a5e:	b08b      	sub	sp, #44	; 0x2c
 8005a60:	9206      	str	r2, [sp, #24]
 8005a62:	000a      	movs	r2, r1
 8005a64:	3243      	adds	r2, #67	; 0x43
 8005a66:	9307      	str	r3, [sp, #28]
 8005a68:	9005      	str	r0, [sp, #20]
 8005a6a:	9204      	str	r2, [sp, #16]
 8005a6c:	7e0a      	ldrb	r2, [r1, #24]
 8005a6e:	000c      	movs	r4, r1
 8005a70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a72:	2a78      	cmp	r2, #120	; 0x78
 8005a74:	d807      	bhi.n	8005a86 <_printf_i+0x2a>
 8005a76:	2a62      	cmp	r2, #98	; 0x62
 8005a78:	d809      	bhi.n	8005a8e <_printf_i+0x32>
 8005a7a:	2a00      	cmp	r2, #0
 8005a7c:	d100      	bne.n	8005a80 <_printf_i+0x24>
 8005a7e:	e0c1      	b.n	8005c04 <_printf_i+0x1a8>
 8005a80:	2a58      	cmp	r2, #88	; 0x58
 8005a82:	d100      	bne.n	8005a86 <_printf_i+0x2a>
 8005a84:	e08c      	b.n	8005ba0 <_printf_i+0x144>
 8005a86:	0026      	movs	r6, r4
 8005a88:	3642      	adds	r6, #66	; 0x42
 8005a8a:	7032      	strb	r2, [r6, #0]
 8005a8c:	e022      	b.n	8005ad4 <_printf_i+0x78>
 8005a8e:	0010      	movs	r0, r2
 8005a90:	3863      	subs	r0, #99	; 0x63
 8005a92:	2815      	cmp	r0, #21
 8005a94:	d8f7      	bhi.n	8005a86 <_printf_i+0x2a>
 8005a96:	f7fa fb37 	bl	8000108 <__gnu_thumb1_case_shi>
 8005a9a:	0016      	.short	0x0016
 8005a9c:	fff6001f 	.word	0xfff6001f
 8005aa0:	fff6fff6 	.word	0xfff6fff6
 8005aa4:	001ffff6 	.word	0x001ffff6
 8005aa8:	fff6fff6 	.word	0xfff6fff6
 8005aac:	fff6fff6 	.word	0xfff6fff6
 8005ab0:	003600a8 	.word	0x003600a8
 8005ab4:	fff6009a 	.word	0xfff6009a
 8005ab8:	00b9fff6 	.word	0x00b9fff6
 8005abc:	0036fff6 	.word	0x0036fff6
 8005ac0:	fff6fff6 	.word	0xfff6fff6
 8005ac4:	009e      	.short	0x009e
 8005ac6:	0026      	movs	r6, r4
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	3642      	adds	r6, #66	; 0x42
 8005acc:	1d11      	adds	r1, r2, #4
 8005ace:	6019      	str	r1, [r3, #0]
 8005ad0:	6813      	ldr	r3, [r2, #0]
 8005ad2:	7033      	strb	r3, [r6, #0]
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e0a7      	b.n	8005c28 <_printf_i+0x1cc>
 8005ad8:	6808      	ldr	r0, [r1, #0]
 8005ada:	6819      	ldr	r1, [r3, #0]
 8005adc:	1d0a      	adds	r2, r1, #4
 8005ade:	0605      	lsls	r5, r0, #24
 8005ae0:	d50b      	bpl.n	8005afa <_printf_i+0x9e>
 8005ae2:	680d      	ldr	r5, [r1, #0]
 8005ae4:	601a      	str	r2, [r3, #0]
 8005ae6:	2d00      	cmp	r5, #0
 8005ae8:	da03      	bge.n	8005af2 <_printf_i+0x96>
 8005aea:	232d      	movs	r3, #45	; 0x2d
 8005aec:	9a04      	ldr	r2, [sp, #16]
 8005aee:	426d      	negs	r5, r5
 8005af0:	7013      	strb	r3, [r2, #0]
 8005af2:	4b61      	ldr	r3, [pc, #388]	; (8005c78 <_printf_i+0x21c>)
 8005af4:	270a      	movs	r7, #10
 8005af6:	9303      	str	r3, [sp, #12]
 8005af8:	e01b      	b.n	8005b32 <_printf_i+0xd6>
 8005afa:	680d      	ldr	r5, [r1, #0]
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	0641      	lsls	r1, r0, #25
 8005b00:	d5f1      	bpl.n	8005ae6 <_printf_i+0x8a>
 8005b02:	b22d      	sxth	r5, r5
 8005b04:	e7ef      	b.n	8005ae6 <_printf_i+0x8a>
 8005b06:	680d      	ldr	r5, [r1, #0]
 8005b08:	6819      	ldr	r1, [r3, #0]
 8005b0a:	1d08      	adds	r0, r1, #4
 8005b0c:	6018      	str	r0, [r3, #0]
 8005b0e:	062e      	lsls	r6, r5, #24
 8005b10:	d501      	bpl.n	8005b16 <_printf_i+0xba>
 8005b12:	680d      	ldr	r5, [r1, #0]
 8005b14:	e003      	b.n	8005b1e <_printf_i+0xc2>
 8005b16:	066d      	lsls	r5, r5, #25
 8005b18:	d5fb      	bpl.n	8005b12 <_printf_i+0xb6>
 8005b1a:	680d      	ldr	r5, [r1, #0]
 8005b1c:	b2ad      	uxth	r5, r5
 8005b1e:	4b56      	ldr	r3, [pc, #344]	; (8005c78 <_printf_i+0x21c>)
 8005b20:	2708      	movs	r7, #8
 8005b22:	9303      	str	r3, [sp, #12]
 8005b24:	2a6f      	cmp	r2, #111	; 0x6f
 8005b26:	d000      	beq.n	8005b2a <_printf_i+0xce>
 8005b28:	3702      	adds	r7, #2
 8005b2a:	0023      	movs	r3, r4
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	3343      	adds	r3, #67	; 0x43
 8005b30:	701a      	strb	r2, [r3, #0]
 8005b32:	6863      	ldr	r3, [r4, #4]
 8005b34:	60a3      	str	r3, [r4, #8]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	db03      	blt.n	8005b42 <_printf_i+0xe6>
 8005b3a:	2204      	movs	r2, #4
 8005b3c:	6821      	ldr	r1, [r4, #0]
 8005b3e:	4391      	bics	r1, r2
 8005b40:	6021      	str	r1, [r4, #0]
 8005b42:	2d00      	cmp	r5, #0
 8005b44:	d102      	bne.n	8005b4c <_printf_i+0xf0>
 8005b46:	9e04      	ldr	r6, [sp, #16]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00c      	beq.n	8005b66 <_printf_i+0x10a>
 8005b4c:	9e04      	ldr	r6, [sp, #16]
 8005b4e:	0028      	movs	r0, r5
 8005b50:	0039      	movs	r1, r7
 8005b52:	f7fa fb69 	bl	8000228 <__aeabi_uidivmod>
 8005b56:	9b03      	ldr	r3, [sp, #12]
 8005b58:	3e01      	subs	r6, #1
 8005b5a:	5c5b      	ldrb	r3, [r3, r1]
 8005b5c:	7033      	strb	r3, [r6, #0]
 8005b5e:	002b      	movs	r3, r5
 8005b60:	0005      	movs	r5, r0
 8005b62:	429f      	cmp	r7, r3
 8005b64:	d9f3      	bls.n	8005b4e <_printf_i+0xf2>
 8005b66:	2f08      	cmp	r7, #8
 8005b68:	d109      	bne.n	8005b7e <_printf_i+0x122>
 8005b6a:	6823      	ldr	r3, [r4, #0]
 8005b6c:	07db      	lsls	r3, r3, #31
 8005b6e:	d506      	bpl.n	8005b7e <_printf_i+0x122>
 8005b70:	6863      	ldr	r3, [r4, #4]
 8005b72:	6922      	ldr	r2, [r4, #16]
 8005b74:	4293      	cmp	r3, r2
 8005b76:	dc02      	bgt.n	8005b7e <_printf_i+0x122>
 8005b78:	2330      	movs	r3, #48	; 0x30
 8005b7a:	3e01      	subs	r6, #1
 8005b7c:	7033      	strb	r3, [r6, #0]
 8005b7e:	9b04      	ldr	r3, [sp, #16]
 8005b80:	1b9b      	subs	r3, r3, r6
 8005b82:	6123      	str	r3, [r4, #16]
 8005b84:	9b07      	ldr	r3, [sp, #28]
 8005b86:	0021      	movs	r1, r4
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	9805      	ldr	r0, [sp, #20]
 8005b8c:	9b06      	ldr	r3, [sp, #24]
 8005b8e:	aa09      	add	r2, sp, #36	; 0x24
 8005b90:	f7ff fef4 	bl	800597c <_printf_common>
 8005b94:	1c43      	adds	r3, r0, #1
 8005b96:	d14c      	bne.n	8005c32 <_printf_i+0x1d6>
 8005b98:	2001      	movs	r0, #1
 8005b9a:	4240      	negs	r0, r0
 8005b9c:	b00b      	add	sp, #44	; 0x2c
 8005b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ba0:	3145      	adds	r1, #69	; 0x45
 8005ba2:	700a      	strb	r2, [r1, #0]
 8005ba4:	4a34      	ldr	r2, [pc, #208]	; (8005c78 <_printf_i+0x21c>)
 8005ba6:	9203      	str	r2, [sp, #12]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	6821      	ldr	r1, [r4, #0]
 8005bac:	ca20      	ldmia	r2!, {r5}
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	0608      	lsls	r0, r1, #24
 8005bb2:	d516      	bpl.n	8005be2 <_printf_i+0x186>
 8005bb4:	07cb      	lsls	r3, r1, #31
 8005bb6:	d502      	bpl.n	8005bbe <_printf_i+0x162>
 8005bb8:	2320      	movs	r3, #32
 8005bba:	4319      	orrs	r1, r3
 8005bbc:	6021      	str	r1, [r4, #0]
 8005bbe:	2710      	movs	r7, #16
 8005bc0:	2d00      	cmp	r5, #0
 8005bc2:	d1b2      	bne.n	8005b2a <_printf_i+0xce>
 8005bc4:	2320      	movs	r3, #32
 8005bc6:	6822      	ldr	r2, [r4, #0]
 8005bc8:	439a      	bics	r2, r3
 8005bca:	6022      	str	r2, [r4, #0]
 8005bcc:	e7ad      	b.n	8005b2a <_printf_i+0xce>
 8005bce:	2220      	movs	r2, #32
 8005bd0:	6809      	ldr	r1, [r1, #0]
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	6022      	str	r2, [r4, #0]
 8005bd6:	0022      	movs	r2, r4
 8005bd8:	2178      	movs	r1, #120	; 0x78
 8005bda:	3245      	adds	r2, #69	; 0x45
 8005bdc:	7011      	strb	r1, [r2, #0]
 8005bde:	4a27      	ldr	r2, [pc, #156]	; (8005c7c <_printf_i+0x220>)
 8005be0:	e7e1      	b.n	8005ba6 <_printf_i+0x14a>
 8005be2:	0648      	lsls	r0, r1, #25
 8005be4:	d5e6      	bpl.n	8005bb4 <_printf_i+0x158>
 8005be6:	b2ad      	uxth	r5, r5
 8005be8:	e7e4      	b.n	8005bb4 <_printf_i+0x158>
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	680d      	ldr	r5, [r1, #0]
 8005bee:	1d10      	adds	r0, r2, #4
 8005bf0:	6949      	ldr	r1, [r1, #20]
 8005bf2:	6018      	str	r0, [r3, #0]
 8005bf4:	6813      	ldr	r3, [r2, #0]
 8005bf6:	062e      	lsls	r6, r5, #24
 8005bf8:	d501      	bpl.n	8005bfe <_printf_i+0x1a2>
 8005bfa:	6019      	str	r1, [r3, #0]
 8005bfc:	e002      	b.n	8005c04 <_printf_i+0x1a8>
 8005bfe:	066d      	lsls	r5, r5, #25
 8005c00:	d5fb      	bpl.n	8005bfa <_printf_i+0x19e>
 8005c02:	8019      	strh	r1, [r3, #0]
 8005c04:	2300      	movs	r3, #0
 8005c06:	9e04      	ldr	r6, [sp, #16]
 8005c08:	6123      	str	r3, [r4, #16]
 8005c0a:	e7bb      	b.n	8005b84 <_printf_i+0x128>
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	1d11      	adds	r1, r2, #4
 8005c10:	6019      	str	r1, [r3, #0]
 8005c12:	6816      	ldr	r6, [r2, #0]
 8005c14:	2100      	movs	r1, #0
 8005c16:	0030      	movs	r0, r6
 8005c18:	6862      	ldr	r2, [r4, #4]
 8005c1a:	f000 f831 	bl	8005c80 <memchr>
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	d001      	beq.n	8005c26 <_printf_i+0x1ca>
 8005c22:	1b80      	subs	r0, r0, r6
 8005c24:	6060      	str	r0, [r4, #4]
 8005c26:	6863      	ldr	r3, [r4, #4]
 8005c28:	6123      	str	r3, [r4, #16]
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	9a04      	ldr	r2, [sp, #16]
 8005c2e:	7013      	strb	r3, [r2, #0]
 8005c30:	e7a8      	b.n	8005b84 <_printf_i+0x128>
 8005c32:	6923      	ldr	r3, [r4, #16]
 8005c34:	0032      	movs	r2, r6
 8005c36:	9906      	ldr	r1, [sp, #24]
 8005c38:	9805      	ldr	r0, [sp, #20]
 8005c3a:	9d07      	ldr	r5, [sp, #28]
 8005c3c:	47a8      	blx	r5
 8005c3e:	1c43      	adds	r3, r0, #1
 8005c40:	d0aa      	beq.n	8005b98 <_printf_i+0x13c>
 8005c42:	6823      	ldr	r3, [r4, #0]
 8005c44:	079b      	lsls	r3, r3, #30
 8005c46:	d415      	bmi.n	8005c74 <_printf_i+0x218>
 8005c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c4a:	68e0      	ldr	r0, [r4, #12]
 8005c4c:	4298      	cmp	r0, r3
 8005c4e:	daa5      	bge.n	8005b9c <_printf_i+0x140>
 8005c50:	0018      	movs	r0, r3
 8005c52:	e7a3      	b.n	8005b9c <_printf_i+0x140>
 8005c54:	0022      	movs	r2, r4
 8005c56:	2301      	movs	r3, #1
 8005c58:	9906      	ldr	r1, [sp, #24]
 8005c5a:	9805      	ldr	r0, [sp, #20]
 8005c5c:	9e07      	ldr	r6, [sp, #28]
 8005c5e:	3219      	adds	r2, #25
 8005c60:	47b0      	blx	r6
 8005c62:	1c43      	adds	r3, r0, #1
 8005c64:	d098      	beq.n	8005b98 <_printf_i+0x13c>
 8005c66:	3501      	adds	r5, #1
 8005c68:	68e3      	ldr	r3, [r4, #12]
 8005c6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c6c:	1a9b      	subs	r3, r3, r2
 8005c6e:	42ab      	cmp	r3, r5
 8005c70:	dcf0      	bgt.n	8005c54 <_printf_i+0x1f8>
 8005c72:	e7e9      	b.n	8005c48 <_printf_i+0x1ec>
 8005c74:	2500      	movs	r5, #0
 8005c76:	e7f7      	b.n	8005c68 <_printf_i+0x20c>
 8005c78:	08006129 	.word	0x08006129
 8005c7c:	0800613a 	.word	0x0800613a

08005c80 <memchr>:
 8005c80:	b2c9      	uxtb	r1, r1
 8005c82:	1882      	adds	r2, r0, r2
 8005c84:	4290      	cmp	r0, r2
 8005c86:	d101      	bne.n	8005c8c <memchr+0xc>
 8005c88:	2000      	movs	r0, #0
 8005c8a:	4770      	bx	lr
 8005c8c:	7803      	ldrb	r3, [r0, #0]
 8005c8e:	428b      	cmp	r3, r1
 8005c90:	d0fb      	beq.n	8005c8a <memchr+0xa>
 8005c92:	3001      	adds	r0, #1
 8005c94:	e7f6      	b.n	8005c84 <memchr+0x4>

08005c96 <memmove>:
 8005c96:	b510      	push	{r4, lr}
 8005c98:	4288      	cmp	r0, r1
 8005c9a:	d902      	bls.n	8005ca2 <memmove+0xc>
 8005c9c:	188b      	adds	r3, r1, r2
 8005c9e:	4298      	cmp	r0, r3
 8005ca0:	d303      	bcc.n	8005caa <memmove+0x14>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	e007      	b.n	8005cb6 <memmove+0x20>
 8005ca6:	5c8b      	ldrb	r3, [r1, r2]
 8005ca8:	5483      	strb	r3, [r0, r2]
 8005caa:	3a01      	subs	r2, #1
 8005cac:	d2fb      	bcs.n	8005ca6 <memmove+0x10>
 8005cae:	bd10      	pop	{r4, pc}
 8005cb0:	5ccc      	ldrb	r4, [r1, r3]
 8005cb2:	54c4      	strb	r4, [r0, r3]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d1fa      	bne.n	8005cb0 <memmove+0x1a>
 8005cba:	e7f8      	b.n	8005cae <memmove+0x18>

08005cbc <_realloc_r>:
 8005cbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cbe:	0007      	movs	r7, r0
 8005cc0:	000e      	movs	r6, r1
 8005cc2:	0014      	movs	r4, r2
 8005cc4:	2900      	cmp	r1, #0
 8005cc6:	d105      	bne.n	8005cd4 <_realloc_r+0x18>
 8005cc8:	0011      	movs	r1, r2
 8005cca:	f7ff fb7f 	bl	80053cc <_malloc_r>
 8005cce:	0005      	movs	r5, r0
 8005cd0:	0028      	movs	r0, r5
 8005cd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005cd4:	2a00      	cmp	r2, #0
 8005cd6:	d103      	bne.n	8005ce0 <_realloc_r+0x24>
 8005cd8:	f7ff fca4 	bl	8005624 <_free_r>
 8005cdc:	0025      	movs	r5, r4
 8005cde:	e7f7      	b.n	8005cd0 <_realloc_r+0x14>
 8005ce0:	f000 f81b 	bl	8005d1a <_malloc_usable_size_r>
 8005ce4:	9001      	str	r0, [sp, #4]
 8005ce6:	4284      	cmp	r4, r0
 8005ce8:	d803      	bhi.n	8005cf2 <_realloc_r+0x36>
 8005cea:	0035      	movs	r5, r6
 8005cec:	0843      	lsrs	r3, r0, #1
 8005cee:	42a3      	cmp	r3, r4
 8005cf0:	d3ee      	bcc.n	8005cd0 <_realloc_r+0x14>
 8005cf2:	0021      	movs	r1, r4
 8005cf4:	0038      	movs	r0, r7
 8005cf6:	f7ff fb69 	bl	80053cc <_malloc_r>
 8005cfa:	1e05      	subs	r5, r0, #0
 8005cfc:	d0e8      	beq.n	8005cd0 <_realloc_r+0x14>
 8005cfe:	9b01      	ldr	r3, [sp, #4]
 8005d00:	0022      	movs	r2, r4
 8005d02:	429c      	cmp	r4, r3
 8005d04:	d900      	bls.n	8005d08 <_realloc_r+0x4c>
 8005d06:	001a      	movs	r2, r3
 8005d08:	0031      	movs	r1, r6
 8005d0a:	0028      	movs	r0, r5
 8005d0c:	f7ff fb2a 	bl	8005364 <memcpy>
 8005d10:	0031      	movs	r1, r6
 8005d12:	0038      	movs	r0, r7
 8005d14:	f7ff fc86 	bl	8005624 <_free_r>
 8005d18:	e7da      	b.n	8005cd0 <_realloc_r+0x14>

08005d1a <_malloc_usable_size_r>:
 8005d1a:	1f0b      	subs	r3, r1, #4
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	1f18      	subs	r0, r3, #4
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	da01      	bge.n	8005d28 <_malloc_usable_size_r+0xe>
 8005d24:	580b      	ldr	r3, [r1, r0]
 8005d26:	18c0      	adds	r0, r0, r3
 8005d28:	4770      	bx	lr
	...

08005d2c <_init>:
 8005d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d2e:	46c0      	nop			; (mov r8, r8)
 8005d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d32:	bc08      	pop	{r3}
 8005d34:	469e      	mov	lr, r3
 8005d36:	4770      	bx	lr

08005d38 <_fini>:
 8005d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d3a:	46c0      	nop			; (mov r8, r8)
 8005d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d3e:	bc08      	pop	{r3}
 8005d40:	469e      	mov	lr, r3
 8005d42:	4770      	bx	lr
